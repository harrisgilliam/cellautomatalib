//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register Enum Values
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass MipsMCRegisterClasses[];

namespace Mips {
enum {
  NoRegister,
  A0 = 1,
  A0_64 = 2,
  A1 = 3,
  A1_64 = 4,
  A2 = 5,
  A2_64 = 6,
  A3 = 7,
  A3_64 = 8,
  AT = 9,
  AT_64 = 10,
  D0 = 11,
  D0_64 = 12,
  D1 = 13,
  D1_64 = 14,
  D2 = 15,
  D2_64 = 16,
  D3 = 17,
  D3_64 = 18,
  D4 = 19,
  D4_64 = 20,
  D5 = 21,
  D5_64 = 22,
  D6 = 23,
  D6_64 = 24,
  D7 = 25,
  D7_64 = 26,
  D8 = 27,
  D8_64 = 28,
  D9 = 29,
  D9_64 = 30,
  D10 = 31,
  D10_64 = 32,
  D11 = 33,
  D11_64 = 34,
  D12 = 35,
  D12_64 = 36,
  D13 = 37,
  D13_64 = 38,
  D14 = 39,
  D14_64 = 40,
  D15 = 41,
  D15_64 = 42,
  D16_64 = 43,
  D17_64 = 44,
  D18_64 = 45,
  D19_64 = 46,
  D20_64 = 47,
  D21_64 = 48,
  D22_64 = 49,
  D23_64 = 50,
  D24_64 = 51,
  D25_64 = 52,
  D26_64 = 53,
  D27_64 = 54,
  D28_64 = 55,
  D29_64 = 56,
  D30_64 = 57,
  D31_64 = 58,
  F0 = 59,
  F1 = 60,
  F2 = 61,
  F3 = 62,
  F4 = 63,
  F5 = 64,
  F6 = 65,
  F7 = 66,
  F8 = 67,
  F9 = 68,
  F10 = 69,
  F11 = 70,
  F12 = 71,
  F13 = 72,
  F14 = 73,
  F15 = 74,
  F16 = 75,
  F17 = 76,
  F18 = 77,
  F19 = 78,
  F20 = 79,
  F21 = 80,
  F22 = 81,
  F23 = 82,
  F24 = 83,
  F25 = 84,
  F26 = 85,
  F27 = 86,
  F28 = 87,
  F29 = 88,
  F30 = 89,
  F31 = 90,
  FCR31 = 91,
  FP = 92,
  FP_64 = 93,
  GP = 94,
  GP_64 = 95,
  HI = 96,
  HI64 = 97,
  HWR29 = 98,
  HWR29_64 = 99,
  K0 = 100,
  K0_64 = 101,
  K1 = 102,
  K1_64 = 103,
  LO = 104,
  LO64 = 105,
  RA = 106,
  RA_64 = 107,
  S0 = 108,
  S0_64 = 109,
  S1 = 110,
  S1_64 = 111,
  S2 = 112,
  S2_64 = 113,
  S3 = 114,
  S3_64 = 115,
  S4 = 116,
  S4_64 = 117,
  S5 = 118,
  S5_64 = 119,
  S6 = 120,
  S6_64 = 121,
  S7 = 122,
  S7_64 = 123,
  SP = 124,
  SP_64 = 125,
  T0 = 126,
  T0_64 = 127,
  T1 = 128,
  T1_64 = 129,
  T2 = 130,
  T2_64 = 131,
  T3 = 132,
  T3_64 = 133,
  T4 = 134,
  T4_64 = 135,
  T5 = 136,
  T5_64 = 137,
  T6 = 138,
  T6_64 = 139,
  T7 = 140,
  T7_64 = 141,
  T8 = 142,
  T8_64 = 143,
  T9 = 144,
  T9_64 = 145,
  V0 = 146,
  V0_64 = 147,
  V1 = 148,
  V1_64 = 149,
  ZERO = 150,
  ZERO_64 = 151,
  NUM_TARGET_REGS 	// 152
};
}

// Register classes
namespace Mips {
enum {
  FGR32RegClassID = 0,
  CPURegsRegClassID = 1,
  FGR64RegClassID = 2,
  CPU64RegsRegClassID = 3,
  AFGR64RegClassID = 4,
  HILORegClassID = 5,
  HILO64RegClassID = 6,
  HWRegsRegClassID = 7,
  CCRRegClassID = 8,
  HWRegs64RegClassID = 9
  };
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// MC Register Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {


namespace {
  const unsigned A0_Overlaps[] = { Mips::A0, Mips::A0_64, 0 };
  const unsigned A0_64_Overlaps[] = { Mips::A0_64, Mips::A0, 0 };
  const unsigned A1_Overlaps[] = { Mips::A1, Mips::A1_64, 0 };
  const unsigned A1_64_Overlaps[] = { Mips::A1_64, Mips::A1, 0 };
  const unsigned A2_Overlaps[] = { Mips::A2, Mips::A2_64, 0 };
  const unsigned A2_64_Overlaps[] = { Mips::A2_64, Mips::A2, 0 };
  const unsigned A3_Overlaps[] = { Mips::A3, Mips::A3_64, 0 };
  const unsigned A3_64_Overlaps[] = { Mips::A3_64, Mips::A3, 0 };
  const unsigned AT_Overlaps[] = { Mips::AT, Mips::AT_64, 0 };
  const unsigned AT_64_Overlaps[] = { Mips::AT_64, Mips::AT, 0 };
  const unsigned D0_Overlaps[] = { Mips::D0, Mips::D0_64, Mips::D1_64, Mips::F0, Mips::F1, 0 };
  const unsigned D0_64_Overlaps[] = { Mips::D0_64, Mips::D0, Mips::F0, 0 };
  const unsigned D1_Overlaps[] = { Mips::D1, Mips::D2_64, Mips::D3_64, Mips::F2, Mips::F3, 0 };
  const unsigned D1_64_Overlaps[] = { Mips::D1_64, Mips::D0, Mips::F1, 0 };
  const unsigned D2_Overlaps[] = { Mips::D2, Mips::D4_64, Mips::D5_64, Mips::F4, Mips::F5, 0 };
  const unsigned D2_64_Overlaps[] = { Mips::D2_64, Mips::D1, Mips::F2, 0 };
  const unsigned D3_Overlaps[] = { Mips::D3, Mips::D6_64, Mips::D7_64, Mips::F6, Mips::F7, 0 };
  const unsigned D3_64_Overlaps[] = { Mips::D3_64, Mips::D1, Mips::F3, 0 };
  const unsigned D4_Overlaps[] = { Mips::D4, Mips::D8_64, Mips::D9_64, Mips::F8, Mips::F9, 0 };
  const unsigned D4_64_Overlaps[] = { Mips::D4_64, Mips::D2, Mips::F4, 0 };
  const unsigned D5_Overlaps[] = { Mips::D5, Mips::D10_64, Mips::D11_64, Mips::F10, Mips::F11, 0 };
  const unsigned D5_64_Overlaps[] = { Mips::D5_64, Mips::D2, Mips::F5, 0 };
  const unsigned D6_Overlaps[] = { Mips::D6, Mips::D12_64, Mips::D13_64, Mips::F12, Mips::F13, 0 };
  const unsigned D6_64_Overlaps[] = { Mips::D6_64, Mips::D3, Mips::F6, 0 };
  const unsigned D7_Overlaps[] = { Mips::D7, Mips::D14_64, Mips::D15_64, Mips::F14, Mips::F15, 0 };
  const unsigned D7_64_Overlaps[] = { Mips::D7_64, Mips::D3, Mips::F7, 0 };
  const unsigned D8_Overlaps[] = { Mips::D8, Mips::D16_64, Mips::D17_64, Mips::F16, Mips::F17, 0 };
  const unsigned D8_64_Overlaps[] = { Mips::D8_64, Mips::D4, Mips::F8, 0 };
  const unsigned D9_Overlaps[] = { Mips::D9, Mips::D18_64, Mips::D19_64, Mips::F18, Mips::F19, 0 };
  const unsigned D9_64_Overlaps[] = { Mips::D9_64, Mips::D4, Mips::F9, 0 };
  const unsigned D10_Overlaps[] = { Mips::D10, Mips::D20_64, Mips::D21_64, Mips::F20, Mips::F21, 0 };
  const unsigned D10_64_Overlaps[] = { Mips::D10_64, Mips::D5, Mips::F10, 0 };
  const unsigned D11_Overlaps[] = { Mips::D11, Mips::D22_64, Mips::D23_64, Mips::F22, Mips::F23, 0 };
  const unsigned D11_64_Overlaps[] = { Mips::D11_64, Mips::D5, Mips::F11, 0 };
  const unsigned D12_Overlaps[] = { Mips::D12, Mips::D24_64, Mips::D25_64, Mips::F24, Mips::F25, 0 };
  const unsigned D12_64_Overlaps[] = { Mips::D12_64, Mips::D6, Mips::F12, 0 };
  const unsigned D13_Overlaps[] = { Mips::D13, Mips::D26_64, Mips::D27_64, Mips::F26, Mips::F27, 0 };
  const unsigned D13_64_Overlaps[] = { Mips::D13_64, Mips::D6, Mips::F13, 0 };
  const unsigned D14_Overlaps[] = { Mips::D14, Mips::D28_64, Mips::D29_64, Mips::F28, Mips::F29, 0 };
  const unsigned D14_64_Overlaps[] = { Mips::D14_64, Mips::D7, Mips::F14, 0 };
  const unsigned D15_Overlaps[] = { Mips::D15, Mips::D30_64, Mips::D31_64, Mips::F30, Mips::F31, 0 };
  const unsigned D15_64_Overlaps[] = { Mips::D15_64, Mips::D7, Mips::F15, 0 };
  const unsigned D16_64_Overlaps[] = { Mips::D16_64, Mips::D8, Mips::F16, 0 };
  const unsigned D17_64_Overlaps[] = { Mips::D17_64, Mips::D8, Mips::F17, 0 };
  const unsigned D18_64_Overlaps[] = { Mips::D18_64, Mips::D9, Mips::F18, 0 };
  const unsigned D19_64_Overlaps[] = { Mips::D19_64, Mips::D9, Mips::F19, 0 };
  const unsigned D20_64_Overlaps[] = { Mips::D20_64, Mips::D10, Mips::F20, 0 };
  const unsigned D21_64_Overlaps[] = { Mips::D21_64, Mips::D10, Mips::F21, 0 };
  const unsigned D22_64_Overlaps[] = { Mips::D22_64, Mips::D11, Mips::F22, 0 };
  const unsigned D23_64_Overlaps[] = { Mips::D23_64, Mips::D11, Mips::F23, 0 };
  const unsigned D24_64_Overlaps[] = { Mips::D24_64, Mips::D12, Mips::F24, 0 };
  const unsigned D25_64_Overlaps[] = { Mips::D25_64, Mips::D12, Mips::F25, 0 };
  const unsigned D26_64_Overlaps[] = { Mips::D26_64, Mips::D13, Mips::F26, 0 };
  const unsigned D27_64_Overlaps[] = { Mips::D27_64, Mips::D13, Mips::F27, 0 };
  const unsigned D28_64_Overlaps[] = { Mips::D28_64, Mips::D14, Mips::F28, 0 };
  const unsigned D29_64_Overlaps[] = { Mips::D29_64, Mips::D14, Mips::F29, 0 };
  const unsigned D30_64_Overlaps[] = { Mips::D30_64, Mips::D15, Mips::F30, 0 };
  const unsigned D31_64_Overlaps[] = { Mips::D31_64, Mips::D15, Mips::F31, 0 };
  const unsigned F0_Overlaps[] = { Mips::F0, Mips::D0, Mips::D0_64, 0 };
  const unsigned F1_Overlaps[] = { Mips::F1, Mips::D0, Mips::D1_64, 0 };
  const unsigned F2_Overlaps[] = { Mips::F2, Mips::D1, Mips::D2_64, 0 };
  const unsigned F3_Overlaps[] = { Mips::F3, Mips::D1, Mips::D3_64, 0 };
  const unsigned F4_Overlaps[] = { Mips::F4, Mips::D2, Mips::D4_64, 0 };
  const unsigned F5_Overlaps[] = { Mips::F5, Mips::D2, Mips::D5_64, 0 };
  const unsigned F6_Overlaps[] = { Mips::F6, Mips::D3, Mips::D6_64, 0 };
  const unsigned F7_Overlaps[] = { Mips::F7, Mips::D3, Mips::D7_64, 0 };
  const unsigned F8_Overlaps[] = { Mips::F8, Mips::D4, Mips::D8_64, 0 };
  const unsigned F9_Overlaps[] = { Mips::F9, Mips::D4, Mips::D9_64, 0 };
  const unsigned F10_Overlaps[] = { Mips::F10, Mips::D5, Mips::D10_64, 0 };
  const unsigned F11_Overlaps[] = { Mips::F11, Mips::D5, Mips::D11_64, 0 };
  const unsigned F12_Overlaps[] = { Mips::F12, Mips::D6, Mips::D12_64, 0 };
  const unsigned F13_Overlaps[] = { Mips::F13, Mips::D6, Mips::D13_64, 0 };
  const unsigned F14_Overlaps[] = { Mips::F14, Mips::D7, Mips::D14_64, 0 };
  const unsigned F15_Overlaps[] = { Mips::F15, Mips::D7, Mips::D15_64, 0 };
  const unsigned F16_Overlaps[] = { Mips::F16, Mips::D8, Mips::D16_64, 0 };
  const unsigned F17_Overlaps[] = { Mips::F17, Mips::D8, Mips::D17_64, 0 };
  const unsigned F18_Overlaps[] = { Mips::F18, Mips::D9, Mips::D18_64, 0 };
  const unsigned F19_Overlaps[] = { Mips::F19, Mips::D9, Mips::D19_64, 0 };
  const unsigned F20_Overlaps[] = { Mips::F20, Mips::D10, Mips::D20_64, 0 };
  const unsigned F21_Overlaps[] = { Mips::F21, Mips::D10, Mips::D21_64, 0 };
  const unsigned F22_Overlaps[] = { Mips::F22, Mips::D11, Mips::D22_64, 0 };
  const unsigned F23_Overlaps[] = { Mips::F23, Mips::D11, Mips::D23_64, 0 };
  const unsigned F24_Overlaps[] = { Mips::F24, Mips::D12, Mips::D24_64, 0 };
  const unsigned F25_Overlaps[] = { Mips::F25, Mips::D12, Mips::D25_64, 0 };
  const unsigned F26_Overlaps[] = { Mips::F26, Mips::D13, Mips::D26_64, 0 };
  const unsigned F27_Overlaps[] = { Mips::F27, Mips::D13, Mips::D27_64, 0 };
  const unsigned F28_Overlaps[] = { Mips::F28, Mips::D14, Mips::D28_64, 0 };
  const unsigned F29_Overlaps[] = { Mips::F29, Mips::D14, Mips::D29_64, 0 };
  const unsigned F30_Overlaps[] = { Mips::F30, Mips::D15, Mips::D30_64, 0 };
  const unsigned F31_Overlaps[] = { Mips::F31, Mips::D15, Mips::D31_64, 0 };
  const unsigned FCR31_Overlaps[] = { Mips::FCR31, 0 };
  const unsigned FP_Overlaps[] = { Mips::FP, Mips::FP_64, 0 };
  const unsigned FP_64_Overlaps[] = { Mips::FP_64, Mips::FP, 0 };
  const unsigned GP_Overlaps[] = { Mips::GP, Mips::GP_64, 0 };
  const unsigned GP_64_Overlaps[] = { Mips::GP_64, Mips::GP, 0 };
  const unsigned HI_Overlaps[] = { Mips::HI, Mips::HI64, 0 };
  const unsigned HI64_Overlaps[] = { Mips::HI64, Mips::HI, 0 };
  const unsigned HWR29_Overlaps[] = { Mips::HWR29, 0 };
  const unsigned HWR29_64_Overlaps[] = { Mips::HWR29_64, 0 };
  const unsigned K0_Overlaps[] = { Mips::K0, Mips::K0_64, 0 };
  const unsigned K0_64_Overlaps[] = { Mips::K0_64, Mips::K0, 0 };
  const unsigned K1_Overlaps[] = { Mips::K1, Mips::K1_64, 0 };
  const unsigned K1_64_Overlaps[] = { Mips::K1_64, Mips::K1, 0 };
  const unsigned LO_Overlaps[] = { Mips::LO, Mips::LO64, 0 };
  const unsigned LO64_Overlaps[] = { Mips::LO64, Mips::LO, 0 };
  const unsigned RA_Overlaps[] = { Mips::RA, Mips::RA_64, 0 };
  const unsigned RA_64_Overlaps[] = { Mips::RA_64, Mips::RA, 0 };
  const unsigned S0_Overlaps[] = { Mips::S0, Mips::S0_64, 0 };
  const unsigned S0_64_Overlaps[] = { Mips::S0_64, Mips::S0, 0 };
  const unsigned S1_Overlaps[] = { Mips::S1, Mips::S1_64, 0 };
  const unsigned S1_64_Overlaps[] = { Mips::S1_64, Mips::S1, 0 };
  const unsigned S2_Overlaps[] = { Mips::S2, Mips::S2_64, 0 };
  const unsigned S2_64_Overlaps[] = { Mips::S2_64, Mips::S2, 0 };
  const unsigned S3_Overlaps[] = { Mips::S3, Mips::S3_64, 0 };
  const unsigned S3_64_Overlaps[] = { Mips::S3_64, Mips::S3, 0 };
  const unsigned S4_Overlaps[] = { Mips::S4, Mips::S4_64, 0 };
  const unsigned S4_64_Overlaps[] = { Mips::S4_64, Mips::S4, 0 };
  const unsigned S5_Overlaps[] = { Mips::S5, Mips::S5_64, 0 };
  const unsigned S5_64_Overlaps[] = { Mips::S5_64, Mips::S5, 0 };
  const unsigned S6_Overlaps[] = { Mips::S6, Mips::S6_64, 0 };
  const unsigned S6_64_Overlaps[] = { Mips::S6_64, Mips::S6, 0 };
  const unsigned S7_Overlaps[] = { Mips::S7, Mips::S7_64, 0 };
  const unsigned S7_64_Overlaps[] = { Mips::S7_64, Mips::S7, 0 };
  const unsigned SP_Overlaps[] = { Mips::SP, Mips::SP_64, 0 };
  const unsigned SP_64_Overlaps[] = { Mips::SP_64, Mips::SP, 0 };
  const unsigned T0_Overlaps[] = { Mips::T0, Mips::T0_64, 0 };
  const unsigned T0_64_Overlaps[] = { Mips::T0_64, Mips::T0, 0 };
  const unsigned T1_Overlaps[] = { Mips::T1, Mips::T1_64, 0 };
  const unsigned T1_64_Overlaps[] = { Mips::T1_64, Mips::T1, 0 };
  const unsigned T2_Overlaps[] = { Mips::T2, Mips::T2_64, 0 };
  const unsigned T2_64_Overlaps[] = { Mips::T2_64, Mips::T2, 0 };
  const unsigned T3_Overlaps[] = { Mips::T3, Mips::T3_64, 0 };
  const unsigned T3_64_Overlaps[] = { Mips::T3_64, Mips::T3, 0 };
  const unsigned T4_Overlaps[] = { Mips::T4, Mips::T4_64, 0 };
  const unsigned T4_64_Overlaps[] = { Mips::T4_64, Mips::T4, 0 };
  const unsigned T5_Overlaps[] = { Mips::T5, Mips::T5_64, 0 };
  const unsigned T5_64_Overlaps[] = { Mips::T5_64, Mips::T5, 0 };
  const unsigned T6_Overlaps[] = { Mips::T6, Mips::T6_64, 0 };
  const unsigned T6_64_Overlaps[] = { Mips::T6_64, Mips::T6, 0 };
  const unsigned T7_Overlaps[] = { Mips::T7, Mips::T7_64, 0 };
  const unsigned T7_64_Overlaps[] = { Mips::T7_64, Mips::T7, 0 };
  const unsigned T8_Overlaps[] = { Mips::T8, Mips::T8_64, 0 };
  const unsigned T8_64_Overlaps[] = { Mips::T8_64, Mips::T8, 0 };
  const unsigned T9_Overlaps[] = { Mips::T9, Mips::T9_64, 0 };
  const unsigned T9_64_Overlaps[] = { Mips::T9_64, Mips::T9, 0 };
  const unsigned V0_Overlaps[] = { Mips::V0, Mips::V0_64, 0 };
  const unsigned V0_64_Overlaps[] = { Mips::V0_64, Mips::V0, 0 };
  const unsigned V1_Overlaps[] = { Mips::V1, Mips::V1_64, 0 };
  const unsigned V1_64_Overlaps[] = { Mips::V1_64, Mips::V1, 0 };
  const unsigned ZERO_Overlaps[] = { Mips::ZERO, Mips::ZERO_64, 0 };
  const unsigned ZERO_64_Overlaps[] = { Mips::ZERO_64, Mips::ZERO, 0 };
  const unsigned Empty_SubRegsSet[] = { 0 };
  const unsigned A0_64_SubRegsSet[] = { Mips::A0, 0 };
  const unsigned A1_64_SubRegsSet[] = { Mips::A1, 0 };
  const unsigned A2_64_SubRegsSet[] = { Mips::A2, 0 };
  const unsigned A3_64_SubRegsSet[] = { Mips::A3, 0 };
  const unsigned AT_64_SubRegsSet[] = { Mips::AT, 0 };
  const unsigned D0_SubRegsSet[] = { Mips::F0, Mips::F1, 0 };
  const unsigned D0_64_SubRegsSet[] = { Mips::F0, 0 };
  const unsigned D1_SubRegsSet[] = { Mips::F2, Mips::F3, 0 };
  const unsigned D1_64_SubRegsSet[] = { Mips::F1, 0 };
  const unsigned D2_SubRegsSet[] = { Mips::F4, Mips::F5, 0 };
  const unsigned D2_64_SubRegsSet[] = { Mips::F2, 0 };
  const unsigned D3_SubRegsSet[] = { Mips::F6, Mips::F7, 0 };
  const unsigned D3_64_SubRegsSet[] = { Mips::F3, 0 };
  const unsigned D4_SubRegsSet[] = { Mips::F8, Mips::F9, 0 };
  const unsigned D4_64_SubRegsSet[] = { Mips::F4, 0 };
  const unsigned D5_SubRegsSet[] = { Mips::F10, Mips::F11, 0 };
  const unsigned D5_64_SubRegsSet[] = { Mips::F5, 0 };
  const unsigned D6_SubRegsSet[] = { Mips::F12, Mips::F13, 0 };
  const unsigned D6_64_SubRegsSet[] = { Mips::F6, 0 };
  const unsigned D7_SubRegsSet[] = { Mips::F14, Mips::F15, 0 };
  const unsigned D7_64_SubRegsSet[] = { Mips::F7, 0 };
  const unsigned D8_SubRegsSet[] = { Mips::F16, Mips::F17, 0 };
  const unsigned D8_64_SubRegsSet[] = { Mips::F8, 0 };
  const unsigned D9_SubRegsSet[] = { Mips::F18, Mips::F19, 0 };
  const unsigned D9_64_SubRegsSet[] = { Mips::F9, 0 };
  const unsigned D10_SubRegsSet[] = { Mips::F20, Mips::F21, 0 };
  const unsigned D10_64_SubRegsSet[] = { Mips::F10, 0 };
  const unsigned D11_SubRegsSet[] = { Mips::F22, Mips::F23, 0 };
  const unsigned D11_64_SubRegsSet[] = { Mips::F11, 0 };
  const unsigned D12_SubRegsSet[] = { Mips::F24, Mips::F25, 0 };
  const unsigned D12_64_SubRegsSet[] = { Mips::F12, 0 };
  const unsigned D13_SubRegsSet[] = { Mips::F26, Mips::F27, 0 };
  const unsigned D13_64_SubRegsSet[] = { Mips::F13, 0 };
  const unsigned D14_SubRegsSet[] = { Mips::F28, Mips::F29, 0 };
  const unsigned D14_64_SubRegsSet[] = { Mips::F14, 0 };
  const unsigned D15_SubRegsSet[] = { Mips::F30, Mips::F31, 0 };
  const unsigned D15_64_SubRegsSet[] = { Mips::F15, 0 };
  const unsigned D16_64_SubRegsSet[] = { Mips::F16, 0 };
  const unsigned D17_64_SubRegsSet[] = { Mips::F17, 0 };
  const unsigned D18_64_SubRegsSet[] = { Mips::F18, 0 };
  const unsigned D19_64_SubRegsSet[] = { Mips::F19, 0 };
  const unsigned D20_64_SubRegsSet[] = { Mips::F20, 0 };
  const unsigned D21_64_SubRegsSet[] = { Mips::F21, 0 };
  const unsigned D22_64_SubRegsSet[] = { Mips::F22, 0 };
  const unsigned D23_64_SubRegsSet[] = { Mips::F23, 0 };
  const unsigned D24_64_SubRegsSet[] = { Mips::F24, 0 };
  const unsigned D25_64_SubRegsSet[] = { Mips::F25, 0 };
  const unsigned D26_64_SubRegsSet[] = { Mips::F26, 0 };
  const unsigned D27_64_SubRegsSet[] = { Mips::F27, 0 };
  const unsigned D28_64_SubRegsSet[] = { Mips::F28, 0 };
  const unsigned D29_64_SubRegsSet[] = { Mips::F29, 0 };
  const unsigned D30_64_SubRegsSet[] = { Mips::F30, 0 };
  const unsigned D31_64_SubRegsSet[] = { Mips::F31, 0 };
  const unsigned FP_64_SubRegsSet[] = { Mips::FP, 0 };
  const unsigned GP_64_SubRegsSet[] = { Mips::GP, 0 };
  const unsigned HI64_SubRegsSet[] = { Mips::HI, 0 };
  const unsigned K0_64_SubRegsSet[] = { Mips::K0, 0 };
  const unsigned K1_64_SubRegsSet[] = { Mips::K1, 0 };
  const unsigned LO64_SubRegsSet[] = { Mips::LO, 0 };
  const unsigned RA_64_SubRegsSet[] = { Mips::RA, 0 };
  const unsigned S0_64_SubRegsSet[] = { Mips::S0, 0 };
  const unsigned S1_64_SubRegsSet[] = { Mips::S1, 0 };
  const unsigned S2_64_SubRegsSet[] = { Mips::S2, 0 };
  const unsigned S3_64_SubRegsSet[] = { Mips::S3, 0 };
  const unsigned S4_64_SubRegsSet[] = { Mips::S4, 0 };
  const unsigned S5_64_SubRegsSet[] = { Mips::S5, 0 };
  const unsigned S6_64_SubRegsSet[] = { Mips::S6, 0 };
  const unsigned S7_64_SubRegsSet[] = { Mips::S7, 0 };
  const unsigned SP_64_SubRegsSet[] = { Mips::SP, 0 };
  const unsigned T0_64_SubRegsSet[] = { Mips::T0, 0 };
  const unsigned T1_64_SubRegsSet[] = { Mips::T1, 0 };
  const unsigned T2_64_SubRegsSet[] = { Mips::T2, 0 };
  const unsigned T3_64_SubRegsSet[] = { Mips::T3, 0 };
  const unsigned T4_64_SubRegsSet[] = { Mips::T4, 0 };
  const unsigned T5_64_SubRegsSet[] = { Mips::T5, 0 };
  const unsigned T6_64_SubRegsSet[] = { Mips::T6, 0 };
  const unsigned T7_64_SubRegsSet[] = { Mips::T7, 0 };
  const unsigned T8_64_SubRegsSet[] = { Mips::T8, 0 };
  const unsigned T9_64_SubRegsSet[] = { Mips::T9, 0 };
  const unsigned V0_64_SubRegsSet[] = { Mips::V0, 0 };
  const unsigned V1_64_SubRegsSet[] = { Mips::V1, 0 };
  const unsigned ZERO_64_SubRegsSet[] = { Mips::ZERO, 0 };
  const unsigned Empty_SuperRegsSet[] = { 0 };
  const unsigned A0_SuperRegsSet[] = { Mips::A0_64, 0 };
  const unsigned A1_SuperRegsSet[] = { Mips::A1_64, 0 };
  const unsigned A2_SuperRegsSet[] = { Mips::A2_64, 0 };
  const unsigned A3_SuperRegsSet[] = { Mips::A3_64, 0 };
  const unsigned AT_SuperRegsSet[] = { Mips::AT_64, 0 };
  const unsigned F0_SuperRegsSet[] = { Mips::D0, Mips::D0_64, 0 };
  const unsigned F1_SuperRegsSet[] = { Mips::D0, Mips::D1_64, 0 };
  const unsigned F2_SuperRegsSet[] = { Mips::D1, Mips::D2_64, 0 };
  const unsigned F3_SuperRegsSet[] = { Mips::D1, Mips::D3_64, 0 };
  const unsigned F4_SuperRegsSet[] = { Mips::D2, Mips::D4_64, 0 };
  const unsigned F5_SuperRegsSet[] = { Mips::D2, Mips::D5_64, 0 };
  const unsigned F6_SuperRegsSet[] = { Mips::D3, Mips::D6_64, 0 };
  const unsigned F7_SuperRegsSet[] = { Mips::D3, Mips::D7_64, 0 };
  const unsigned F8_SuperRegsSet[] = { Mips::D4, Mips::D8_64, 0 };
  const unsigned F9_SuperRegsSet[] = { Mips::D4, Mips::D9_64, 0 };
  const unsigned F10_SuperRegsSet[] = { Mips::D5, Mips::D10_64, 0 };
  const unsigned F11_SuperRegsSet[] = { Mips::D5, Mips::D11_64, 0 };
  const unsigned F12_SuperRegsSet[] = { Mips::D6, Mips::D12_64, 0 };
  const unsigned F13_SuperRegsSet[] = { Mips::D6, Mips::D13_64, 0 };
  const unsigned F14_SuperRegsSet[] = { Mips::D7, Mips::D14_64, 0 };
  const unsigned F15_SuperRegsSet[] = { Mips::D7, Mips::D15_64, 0 };
  const unsigned F16_SuperRegsSet[] = { Mips::D8, Mips::D16_64, 0 };
  const unsigned F17_SuperRegsSet[] = { Mips::D8, Mips::D17_64, 0 };
  const unsigned F18_SuperRegsSet[] = { Mips::D9, Mips::D18_64, 0 };
  const unsigned F19_SuperRegsSet[] = { Mips::D9, Mips::D19_64, 0 };
  const unsigned F20_SuperRegsSet[] = { Mips::D10, Mips::D20_64, 0 };
  const unsigned F21_SuperRegsSet[] = { Mips::D10, Mips::D21_64, 0 };
  const unsigned F22_SuperRegsSet[] = { Mips::D11, Mips::D22_64, 0 };
  const unsigned F23_SuperRegsSet[] = { Mips::D11, Mips::D23_64, 0 };
  const unsigned F24_SuperRegsSet[] = { Mips::D12, Mips::D24_64, 0 };
  const unsigned F25_SuperRegsSet[] = { Mips::D12, Mips::D25_64, 0 };
  const unsigned F26_SuperRegsSet[] = { Mips::D13, Mips::D26_64, 0 };
  const unsigned F27_SuperRegsSet[] = { Mips::D13, Mips::D27_64, 0 };
  const unsigned F28_SuperRegsSet[] = { Mips::D14, Mips::D28_64, 0 };
  const unsigned F29_SuperRegsSet[] = { Mips::D14, Mips::D29_64, 0 };
  const unsigned F30_SuperRegsSet[] = { Mips::D15, Mips::D30_64, 0 };
  const unsigned F31_SuperRegsSet[] = { Mips::D15, Mips::D31_64, 0 };
  const unsigned FP_SuperRegsSet[] = { Mips::FP_64, 0 };
  const unsigned GP_SuperRegsSet[] = { Mips::GP_64, 0 };
  const unsigned HI_SuperRegsSet[] = { Mips::HI64, 0 };
  const unsigned K0_SuperRegsSet[] = { Mips::K0_64, 0 };
  const unsigned K1_SuperRegsSet[] = { Mips::K1_64, 0 };
  const unsigned LO_SuperRegsSet[] = { Mips::LO64, 0 };
  const unsigned RA_SuperRegsSet[] = { Mips::RA_64, 0 };
  const unsigned S0_SuperRegsSet[] = { Mips::S0_64, 0 };
  const unsigned S1_SuperRegsSet[] = { Mips::S1_64, 0 };
  const unsigned S2_SuperRegsSet[] = { Mips::S2_64, 0 };
  const unsigned S3_SuperRegsSet[] = { Mips::S3_64, 0 };
  const unsigned S4_SuperRegsSet[] = { Mips::S4_64, 0 };
  const unsigned S5_SuperRegsSet[] = { Mips::S5_64, 0 };
  const unsigned S6_SuperRegsSet[] = { Mips::S6_64, 0 };
  const unsigned S7_SuperRegsSet[] = { Mips::S7_64, 0 };
  const unsigned SP_SuperRegsSet[] = { Mips::SP_64, 0 };
  const unsigned T0_SuperRegsSet[] = { Mips::T0_64, 0 };
  const unsigned T1_SuperRegsSet[] = { Mips::T1_64, 0 };
  const unsigned T2_SuperRegsSet[] = { Mips::T2_64, 0 };
  const unsigned T3_SuperRegsSet[] = { Mips::T3_64, 0 };
  const unsigned T4_SuperRegsSet[] = { Mips::T4_64, 0 };
  const unsigned T5_SuperRegsSet[] = { Mips::T5_64, 0 };
  const unsigned T6_SuperRegsSet[] = { Mips::T6_64, 0 };
  const unsigned T7_SuperRegsSet[] = { Mips::T7_64, 0 };
  const unsigned T8_SuperRegsSet[] = { Mips::T8_64, 0 };
  const unsigned T9_SuperRegsSet[] = { Mips::T9_64, 0 };
  const unsigned V0_SuperRegsSet[] = { Mips::V0_64, 0 };
  const unsigned V1_SuperRegsSet[] = { Mips::V1_64, 0 };
  const unsigned ZERO_SuperRegsSet[] = { Mips::ZERO_64, 0 };
}

extern const MCRegisterDesc MipsRegDesc[] = { // Descriptors
  { "NOREG",	0,	0,	0 },
  { "A0",	A0_Overlaps,	Empty_SubRegsSet,	A0_SuperRegsSet },
  { "A0_64",	A0_64_Overlaps,	A0_64_SubRegsSet,	Empty_SuperRegsSet },
  { "A1",	A1_Overlaps,	Empty_SubRegsSet,	A1_SuperRegsSet },
  { "A1_64",	A1_64_Overlaps,	A1_64_SubRegsSet,	Empty_SuperRegsSet },
  { "A2",	A2_Overlaps,	Empty_SubRegsSet,	A2_SuperRegsSet },
  { "A2_64",	A2_64_Overlaps,	A2_64_SubRegsSet,	Empty_SuperRegsSet },
  { "A3",	A3_Overlaps,	Empty_SubRegsSet,	A3_SuperRegsSet },
  { "A3_64",	A3_64_Overlaps,	A3_64_SubRegsSet,	Empty_SuperRegsSet },
  { "AT",	AT_Overlaps,	Empty_SubRegsSet,	AT_SuperRegsSet },
  { "AT_64",	AT_64_Overlaps,	AT_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D0",	D0_Overlaps,	D0_SubRegsSet,	Empty_SuperRegsSet },
  { "D0_64",	D0_64_Overlaps,	D0_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D1",	D1_Overlaps,	D1_SubRegsSet,	Empty_SuperRegsSet },
  { "D1_64",	D1_64_Overlaps,	D1_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D2",	D2_Overlaps,	D2_SubRegsSet,	Empty_SuperRegsSet },
  { "D2_64",	D2_64_Overlaps,	D2_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D3",	D3_Overlaps,	D3_SubRegsSet,	Empty_SuperRegsSet },
  { "D3_64",	D3_64_Overlaps,	D3_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D4",	D4_Overlaps,	D4_SubRegsSet,	Empty_SuperRegsSet },
  { "D4_64",	D4_64_Overlaps,	D4_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D5",	D5_Overlaps,	D5_SubRegsSet,	Empty_SuperRegsSet },
  { "D5_64",	D5_64_Overlaps,	D5_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D6",	D6_Overlaps,	D6_SubRegsSet,	Empty_SuperRegsSet },
  { "D6_64",	D6_64_Overlaps,	D6_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D7",	D7_Overlaps,	D7_SubRegsSet,	Empty_SuperRegsSet },
  { "D7_64",	D7_64_Overlaps,	D7_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D8",	D8_Overlaps,	D8_SubRegsSet,	Empty_SuperRegsSet },
  { "D8_64",	D8_64_Overlaps,	D8_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D9",	D9_Overlaps,	D9_SubRegsSet,	Empty_SuperRegsSet },
  { "D9_64",	D9_64_Overlaps,	D9_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D10",	D10_Overlaps,	D10_SubRegsSet,	Empty_SuperRegsSet },
  { "D10_64",	D10_64_Overlaps,	D10_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D11",	D11_Overlaps,	D11_SubRegsSet,	Empty_SuperRegsSet },
  { "D11_64",	D11_64_Overlaps,	D11_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D12",	D12_Overlaps,	D12_SubRegsSet,	Empty_SuperRegsSet },
  { "D12_64",	D12_64_Overlaps,	D12_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D13",	D13_Overlaps,	D13_SubRegsSet,	Empty_SuperRegsSet },
  { "D13_64",	D13_64_Overlaps,	D13_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D14",	D14_Overlaps,	D14_SubRegsSet,	Empty_SuperRegsSet },
  { "D14_64",	D14_64_Overlaps,	D14_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D15",	D15_Overlaps,	D15_SubRegsSet,	Empty_SuperRegsSet },
  { "D15_64",	D15_64_Overlaps,	D15_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D16_64",	D16_64_Overlaps,	D16_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D17_64",	D17_64_Overlaps,	D17_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D18_64",	D18_64_Overlaps,	D18_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D19_64",	D19_64_Overlaps,	D19_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D20_64",	D20_64_Overlaps,	D20_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D21_64",	D21_64_Overlaps,	D21_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D22_64",	D22_64_Overlaps,	D22_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D23_64",	D23_64_Overlaps,	D23_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D24_64",	D24_64_Overlaps,	D24_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D25_64",	D25_64_Overlaps,	D25_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D26_64",	D26_64_Overlaps,	D26_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D27_64",	D27_64_Overlaps,	D27_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D28_64",	D28_64_Overlaps,	D28_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D29_64",	D29_64_Overlaps,	D29_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D30_64",	D30_64_Overlaps,	D30_64_SubRegsSet,	Empty_SuperRegsSet },
  { "D31_64",	D31_64_Overlaps,	D31_64_SubRegsSet,	Empty_SuperRegsSet },
  { "F0",	F0_Overlaps,	Empty_SubRegsSet,	F0_SuperRegsSet },
  { "F1",	F1_Overlaps,	Empty_SubRegsSet,	F1_SuperRegsSet },
  { "F2",	F2_Overlaps,	Empty_SubRegsSet,	F2_SuperRegsSet },
  { "F3",	F3_Overlaps,	Empty_SubRegsSet,	F3_SuperRegsSet },
  { "F4",	F4_Overlaps,	Empty_SubRegsSet,	F4_SuperRegsSet },
  { "F5",	F5_Overlaps,	Empty_SubRegsSet,	F5_SuperRegsSet },
  { "F6",	F6_Overlaps,	Empty_SubRegsSet,	F6_SuperRegsSet },
  { "F7",	F7_Overlaps,	Empty_SubRegsSet,	F7_SuperRegsSet },
  { "F8",	F8_Overlaps,	Empty_SubRegsSet,	F8_SuperRegsSet },
  { "F9",	F9_Overlaps,	Empty_SubRegsSet,	F9_SuperRegsSet },
  { "F10",	F10_Overlaps,	Empty_SubRegsSet,	F10_SuperRegsSet },
  { "F11",	F11_Overlaps,	Empty_SubRegsSet,	F11_SuperRegsSet },
  { "F12",	F12_Overlaps,	Empty_SubRegsSet,	F12_SuperRegsSet },
  { "F13",	F13_Overlaps,	Empty_SubRegsSet,	F13_SuperRegsSet },
  { "F14",	F14_Overlaps,	Empty_SubRegsSet,	F14_SuperRegsSet },
  { "F15",	F15_Overlaps,	Empty_SubRegsSet,	F15_SuperRegsSet },
  { "F16",	F16_Overlaps,	Empty_SubRegsSet,	F16_SuperRegsSet },
  { "F17",	F17_Overlaps,	Empty_SubRegsSet,	F17_SuperRegsSet },
  { "F18",	F18_Overlaps,	Empty_SubRegsSet,	F18_SuperRegsSet },
  { "F19",	F19_Overlaps,	Empty_SubRegsSet,	F19_SuperRegsSet },
  { "F20",	F20_Overlaps,	Empty_SubRegsSet,	F20_SuperRegsSet },
  { "F21",	F21_Overlaps,	Empty_SubRegsSet,	F21_SuperRegsSet },
  { "F22",	F22_Overlaps,	Empty_SubRegsSet,	F22_SuperRegsSet },
  { "F23",	F23_Overlaps,	Empty_SubRegsSet,	F23_SuperRegsSet },
  { "F24",	F24_Overlaps,	Empty_SubRegsSet,	F24_SuperRegsSet },
  { "F25",	F25_Overlaps,	Empty_SubRegsSet,	F25_SuperRegsSet },
  { "F26",	F26_Overlaps,	Empty_SubRegsSet,	F26_SuperRegsSet },
  { "F27",	F27_Overlaps,	Empty_SubRegsSet,	F27_SuperRegsSet },
  { "F28",	F28_Overlaps,	Empty_SubRegsSet,	F28_SuperRegsSet },
  { "F29",	F29_Overlaps,	Empty_SubRegsSet,	F29_SuperRegsSet },
  { "F30",	F30_Overlaps,	Empty_SubRegsSet,	F30_SuperRegsSet },
  { "F31",	F31_Overlaps,	Empty_SubRegsSet,	F31_SuperRegsSet },
  { "FCR31",	FCR31_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "FP",	FP_Overlaps,	Empty_SubRegsSet,	FP_SuperRegsSet },
  { "FP_64",	FP_64_Overlaps,	FP_64_SubRegsSet,	Empty_SuperRegsSet },
  { "GP",	GP_Overlaps,	Empty_SubRegsSet,	GP_SuperRegsSet },
  { "GP_64",	GP_64_Overlaps,	GP_64_SubRegsSet,	Empty_SuperRegsSet },
  { "HI",	HI_Overlaps,	Empty_SubRegsSet,	HI_SuperRegsSet },
  { "HI64",	HI64_Overlaps,	HI64_SubRegsSet,	Empty_SuperRegsSet },
  { "HWR29",	HWR29_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "HWR29_64",	HWR29_64_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "K0",	K0_Overlaps,	Empty_SubRegsSet,	K0_SuperRegsSet },
  { "K0_64",	K0_64_Overlaps,	K0_64_SubRegsSet,	Empty_SuperRegsSet },
  { "K1",	K1_Overlaps,	Empty_SubRegsSet,	K1_SuperRegsSet },
  { "K1_64",	K1_64_Overlaps,	K1_64_SubRegsSet,	Empty_SuperRegsSet },
  { "LO",	LO_Overlaps,	Empty_SubRegsSet,	LO_SuperRegsSet },
  { "LO64",	LO64_Overlaps,	LO64_SubRegsSet,	Empty_SuperRegsSet },
  { "RA",	RA_Overlaps,	Empty_SubRegsSet,	RA_SuperRegsSet },
  { "RA_64",	RA_64_Overlaps,	RA_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S0",	S0_Overlaps,	Empty_SubRegsSet,	S0_SuperRegsSet },
  { "S0_64",	S0_64_Overlaps,	S0_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S1",	S1_Overlaps,	Empty_SubRegsSet,	S1_SuperRegsSet },
  { "S1_64",	S1_64_Overlaps,	S1_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S2",	S2_Overlaps,	Empty_SubRegsSet,	S2_SuperRegsSet },
  { "S2_64",	S2_64_Overlaps,	S2_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S3",	S3_Overlaps,	Empty_SubRegsSet,	S3_SuperRegsSet },
  { "S3_64",	S3_64_Overlaps,	S3_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S4",	S4_Overlaps,	Empty_SubRegsSet,	S4_SuperRegsSet },
  { "S4_64",	S4_64_Overlaps,	S4_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S5",	S5_Overlaps,	Empty_SubRegsSet,	S5_SuperRegsSet },
  { "S5_64",	S5_64_Overlaps,	S5_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S6",	S6_Overlaps,	Empty_SubRegsSet,	S6_SuperRegsSet },
  { "S6_64",	S6_64_Overlaps,	S6_64_SubRegsSet,	Empty_SuperRegsSet },
  { "S7",	S7_Overlaps,	Empty_SubRegsSet,	S7_SuperRegsSet },
  { "S7_64",	S7_64_Overlaps,	S7_64_SubRegsSet,	Empty_SuperRegsSet },
  { "SP",	SP_Overlaps,	Empty_SubRegsSet,	SP_SuperRegsSet },
  { "SP_64",	SP_64_Overlaps,	SP_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T0",	T0_Overlaps,	Empty_SubRegsSet,	T0_SuperRegsSet },
  { "T0_64",	T0_64_Overlaps,	T0_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T1",	T1_Overlaps,	Empty_SubRegsSet,	T1_SuperRegsSet },
  { "T1_64",	T1_64_Overlaps,	T1_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T2",	T2_Overlaps,	Empty_SubRegsSet,	T2_SuperRegsSet },
  { "T2_64",	T2_64_Overlaps,	T2_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T3",	T3_Overlaps,	Empty_SubRegsSet,	T3_SuperRegsSet },
  { "T3_64",	T3_64_Overlaps,	T3_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T4",	T4_Overlaps,	Empty_SubRegsSet,	T4_SuperRegsSet },
  { "T4_64",	T4_64_Overlaps,	T4_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T5",	T5_Overlaps,	Empty_SubRegsSet,	T5_SuperRegsSet },
  { "T5_64",	T5_64_Overlaps,	T5_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T6",	T6_Overlaps,	Empty_SubRegsSet,	T6_SuperRegsSet },
  { "T6_64",	T6_64_Overlaps,	T6_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T7",	T7_Overlaps,	Empty_SubRegsSet,	T7_SuperRegsSet },
  { "T7_64",	T7_64_Overlaps,	T7_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T8",	T8_Overlaps,	Empty_SubRegsSet,	T8_SuperRegsSet },
  { "T8_64",	T8_64_Overlaps,	T8_64_SubRegsSet,	Empty_SuperRegsSet },
  { "T9",	T9_Overlaps,	Empty_SubRegsSet,	T9_SuperRegsSet },
  { "T9_64",	T9_64_Overlaps,	T9_64_SubRegsSet,	Empty_SuperRegsSet },
  { "V0",	V0_Overlaps,	Empty_SubRegsSet,	V0_SuperRegsSet },
  { "V0_64",	V0_64_Overlaps,	V0_64_SubRegsSet,	Empty_SuperRegsSet },
  { "V1",	V1_Overlaps,	Empty_SubRegsSet,	V1_SuperRegsSet },
  { "V1_64",	V1_64_Overlaps,	V1_64_SubRegsSet,	Empty_SuperRegsSet },
  { "ZERO",	ZERO_Overlaps,	Empty_SubRegsSet,	ZERO_SuperRegsSet },
  { "ZERO_64",	ZERO_64_Overlaps,	ZERO_64_SubRegsSet,	Empty_SuperRegsSet },
};

namespace {     // Register classes...
  // FGR32 Register Class...
  static const unsigned FGR32[] = {
    Mips::F0, Mips::F1, Mips::F2, Mips::F3, Mips::F4, Mips::F5, Mips::F6, Mips::F7, Mips::F8, Mips::F9, Mips::F10, Mips::F11, Mips::F12, Mips::F13, Mips::F14, Mips::F15, Mips::F16, Mips::F17, Mips::F18, Mips::F19, Mips::F20, Mips::F21, Mips::F22, Mips::F23, Mips::F24, Mips::F25, Mips::F26, Mips::F27, Mips::F28, Mips::F29, Mips::F30, Mips::F31, 
  };

  // FGR32 Bit set.
  static const unsigned char FGR32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // CPURegs Register Class...
  static const unsigned CPURegs[] = {
    Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::T0, Mips::T1, Mips::T2, Mips::T3, Mips::T4, Mips::T5, Mips::T6, Mips::T7, Mips::T8, Mips::T9, Mips::S0, Mips::S1, Mips::S2, Mips::S3, Mips::S4, Mips::S5, Mips::S6, Mips::S7, Mips::ZERO, Mips::AT, Mips::K0, Mips::K1, Mips::GP, Mips::SP, Mips::FP, Mips::RA, 
  };

  // CPURegs Bit set.
  static const unsigned char CPURegsBits[] = {
    0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x50, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 
  };

  // FGR64 Register Class...
  static const unsigned FGR64[] = {
    Mips::D0_64, Mips::D1_64, Mips::D2_64, Mips::D3_64, Mips::D4_64, Mips::D5_64, Mips::D6_64, Mips::D7_64, Mips::D8_64, Mips::D9_64, Mips::D10_64, Mips::D11_64, Mips::D12_64, Mips::D13_64, Mips::D14_64, Mips::D15_64, Mips::D16_64, Mips::D17_64, Mips::D18_64, Mips::D19_64, Mips::D20_64, Mips::D21_64, Mips::D22_64, Mips::D23_64, Mips::D24_64, Mips::D25_64, Mips::D26_64, Mips::D27_64, Mips::D28_64, Mips::D29_64, Mips::D30_64, Mips::D31_64, 
  };

  // FGR64 Bit set.
  static const unsigned char FGR64Bits[] = {
    0x00, 0x50, 0x55, 0x55, 0x55, 0xfd, 0xff, 0x07, 
  };

  // CPU64Regs Register Class...
  static const unsigned CPU64Regs[] = {
    Mips::V0_64, Mips::V1_64, Mips::A0_64, Mips::A1_64, Mips::A2_64, Mips::A3_64, Mips::T0_64, Mips::T1_64, Mips::T2_64, Mips::T3_64, Mips::T4_64, Mips::T5_64, Mips::T6_64, Mips::T7_64, Mips::T8_64, Mips::T9_64, Mips::S0_64, Mips::S1_64, Mips::S2_64, Mips::S3_64, Mips::S4_64, Mips::S5_64, Mips::S6_64, Mips::S7_64, Mips::ZERO_64, Mips::AT_64, Mips::K0_64, Mips::K1_64, Mips::GP_64, Mips::SP_64, Mips::FP_64, Mips::RA_64, 
  };

  // CPU64Regs Bit set.
  static const unsigned char CPU64RegsBits[] = {
    0x54, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa8, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  };

  // AFGR64 Register Class...
  static const unsigned AFGR64[] = {
    Mips::D0, Mips::D1, Mips::D6, Mips::D7, Mips::D2, Mips::D3, Mips::D4, Mips::D5, Mips::D8, Mips::D9, Mips::D10, Mips::D11, Mips::D12, Mips::D13, Mips::D14, Mips::D15, 
  };

  // AFGR64 Bit set.
  static const unsigned char AFGR64Bits[] = {
    0x00, 0xa8, 0xaa, 0xaa, 0xaa, 0x02, 
  };

  // HILO Register Class...
  static const unsigned HILO[] = {
    Mips::HI, Mips::LO, 
  };

  // HILO Bit set.
  static const unsigned char HILOBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 
  };

  // HILO64 Register Class...
  static const unsigned HILO64[] = {
    Mips::HI64, Mips::LO64, 
  };

  // HILO64 Bit set.
  static const unsigned char HILO64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 
  };

  // HWRegs Register Class...
  static const unsigned HWRegs[] = {
    Mips::HWR29, 
  };

  // HWRegs Bit set.
  static const unsigned char HWRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  };

  // CCR Register Class...
  static const unsigned CCR[] = {
    Mips::FCR31, 
  };

  // CCR Bit set.
  static const unsigned char CCRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

  // HWRegs64 Register Class...
  static const unsigned HWRegs64[] = {
    Mips::HWR29_64, 
  };

  // HWRegs64 Bit set.
  static const unsigned char HWRegs64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

}

extern const MCRegisterClass MipsMCRegisterClasses[] = {
  MCRegisterClass(Mips::FGR32RegClassID, "FGR32", 4, 4, 1, 1, FGR32, FGR32 + 32, FGR32Bits, sizeof(FGR32Bits)),
  MCRegisterClass(Mips::CPURegsRegClassID, "CPURegs", 4, 4, 1, 1, CPURegs, CPURegs + 32, CPURegsBits, sizeof(CPURegsBits)),
  MCRegisterClass(Mips::FGR64RegClassID, "FGR64", 8, 8, 1, 1, FGR64, FGR64 + 32, FGR64Bits, sizeof(FGR64Bits)),
  MCRegisterClass(Mips::CPU64RegsRegClassID, "CPU64Regs", 8, 8, 1, 1, CPU64Regs, CPU64Regs + 32, CPU64RegsBits, sizeof(CPU64RegsBits)),
  MCRegisterClass(Mips::AFGR64RegClassID, "AFGR64", 8, 8, 1, 1, AFGR64, AFGR64 + 16, AFGR64Bits, sizeof(AFGR64Bits)),
  MCRegisterClass(Mips::HILORegClassID, "HILO", 4, 4, 1, 1, HILO, HILO + 2, HILOBits, sizeof(HILOBits)),
  MCRegisterClass(Mips::HILO64RegClassID, "HILO64", 8, 8, 1, 1, HILO64, HILO64 + 2, HILO64Bits, sizeof(HILO64Bits)),
  MCRegisterClass(Mips::HWRegsRegClassID, "HWRegs", 4, 4, 1, 1, HWRegs, HWRegs + 1, HWRegsBits, sizeof(HWRegsBits)),
  MCRegisterClass(Mips::CCRRegClassID, "CCR", 4, 4, 1, 1, CCR, CCR + 1, CCRBits, sizeof(CCRBits)),
  MCRegisterClass(Mips::HWRegs64RegClassID, "HWRegs64", 8, 4, 1, 1, HWRegs64, HWRegs64 + 1, HWRegs64Bits, sizeof(HWRegs64Bits)),
};

static inline void InitMipsMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0) {
  RI->InitMCRegisterInfo(MipsRegDesc, 152, RA, MipsMCRegisterClasses, 10);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(4, Mips::A0, false );
    RI->mapDwarfRegToLLVMReg(5, Mips::A1, false );
    RI->mapDwarfRegToLLVMReg(6, Mips::A2, false );
    RI->mapDwarfRegToLLVMReg(7, Mips::A3, false );
    RI->mapDwarfRegToLLVMReg(1, Mips::AT, false );
    RI->mapDwarfRegToLLVMReg(32, Mips::F0, false );
    RI->mapDwarfRegToLLVMReg(33, Mips::F1, false );
    RI->mapDwarfRegToLLVMReg(34, Mips::F2, false );
    RI->mapDwarfRegToLLVMReg(35, Mips::F3, false );
    RI->mapDwarfRegToLLVMReg(36, Mips::F4, false );
    RI->mapDwarfRegToLLVMReg(37, Mips::F5, false );
    RI->mapDwarfRegToLLVMReg(38, Mips::F6, false );
    RI->mapDwarfRegToLLVMReg(39, Mips::F7, false );
    RI->mapDwarfRegToLLVMReg(40, Mips::F8, false );
    RI->mapDwarfRegToLLVMReg(41, Mips::F9, false );
    RI->mapDwarfRegToLLVMReg(42, Mips::F10, false );
    RI->mapDwarfRegToLLVMReg(43, Mips::F11, false );
    RI->mapDwarfRegToLLVMReg(44, Mips::F12, false );
    RI->mapDwarfRegToLLVMReg(45, Mips::F13, false );
    RI->mapDwarfRegToLLVMReg(46, Mips::F14, false );
    RI->mapDwarfRegToLLVMReg(47, Mips::F15, false );
    RI->mapDwarfRegToLLVMReg(48, Mips::F16, false );
    RI->mapDwarfRegToLLVMReg(49, Mips::F17, false );
    RI->mapDwarfRegToLLVMReg(50, Mips::F18, false );
    RI->mapDwarfRegToLLVMReg(51, Mips::F19, false );
    RI->mapDwarfRegToLLVMReg(52, Mips::F20, false );
    RI->mapDwarfRegToLLVMReg(53, Mips::F21, false );
    RI->mapDwarfRegToLLVMReg(54, Mips::F22, false );
    RI->mapDwarfRegToLLVMReg(55, Mips::F23, false );
    RI->mapDwarfRegToLLVMReg(56, Mips::F24, false );
    RI->mapDwarfRegToLLVMReg(57, Mips::F25, false );
    RI->mapDwarfRegToLLVMReg(58, Mips::F26, false );
    RI->mapDwarfRegToLLVMReg(59, Mips::F27, false );
    RI->mapDwarfRegToLLVMReg(60, Mips::F28, false );
    RI->mapDwarfRegToLLVMReg(61, Mips::F29, false );
    RI->mapDwarfRegToLLVMReg(62, Mips::F30, false );
    RI->mapDwarfRegToLLVMReg(63, Mips::F31, false );
    RI->mapDwarfRegToLLVMReg(30, Mips::FP, false );
    RI->mapDwarfRegToLLVMReg(28, Mips::GP, false );
    RI->mapDwarfRegToLLVMReg(64, Mips::HI, false );
    RI->mapDwarfRegToLLVMReg(26, Mips::K0, false );
    RI->mapDwarfRegToLLVMReg(27, Mips::K1, false );
    RI->mapDwarfRegToLLVMReg(65, Mips::LO, false );
    RI->mapDwarfRegToLLVMReg(31, Mips::RA, false );
    RI->mapDwarfRegToLLVMReg(16, Mips::S0, false );
    RI->mapDwarfRegToLLVMReg(17, Mips::S1, false );
    RI->mapDwarfRegToLLVMReg(18, Mips::S2, false );
    RI->mapDwarfRegToLLVMReg(19, Mips::S3, false );
    RI->mapDwarfRegToLLVMReg(20, Mips::S4, false );
    RI->mapDwarfRegToLLVMReg(21, Mips::S5, false );
    RI->mapDwarfRegToLLVMReg(22, Mips::S6, false );
    RI->mapDwarfRegToLLVMReg(23, Mips::S7, false );
    RI->mapDwarfRegToLLVMReg(29, Mips::SP, false );
    RI->mapDwarfRegToLLVMReg(8, Mips::T0, false );
    RI->mapDwarfRegToLLVMReg(9, Mips::T1, false );
    RI->mapDwarfRegToLLVMReg(10, Mips::T2, false );
    RI->mapDwarfRegToLLVMReg(11, Mips::T3, false );
    RI->mapDwarfRegToLLVMReg(12, Mips::T4, false );
    RI->mapDwarfRegToLLVMReg(13, Mips::T5, false );
    RI->mapDwarfRegToLLVMReg(14, Mips::T6, false );
    RI->mapDwarfRegToLLVMReg(15, Mips::T7, false );
    RI->mapDwarfRegToLLVMReg(24, Mips::T8, false );
    RI->mapDwarfRegToLLVMReg(25, Mips::T9, false );
    RI->mapDwarfRegToLLVMReg(2, Mips::V0, false );
    RI->mapDwarfRegToLLVMReg(3, Mips::V1, false );
    RI->mapDwarfRegToLLVMReg(0, Mips::ZERO, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(4, Mips::A0, true );
    RI->mapDwarfRegToLLVMReg(5, Mips::A1, true );
    RI->mapDwarfRegToLLVMReg(6, Mips::A2, true );
    RI->mapDwarfRegToLLVMReg(7, Mips::A3, true );
    RI->mapDwarfRegToLLVMReg(1, Mips::AT, true );
    RI->mapDwarfRegToLLVMReg(32, Mips::F0, true );
    RI->mapDwarfRegToLLVMReg(33, Mips::F1, true );
    RI->mapDwarfRegToLLVMReg(34, Mips::F2, true );
    RI->mapDwarfRegToLLVMReg(35, Mips::F3, true );
    RI->mapDwarfRegToLLVMReg(36, Mips::F4, true );
    RI->mapDwarfRegToLLVMReg(37, Mips::F5, true );
    RI->mapDwarfRegToLLVMReg(38, Mips::F6, true );
    RI->mapDwarfRegToLLVMReg(39, Mips::F7, true );
    RI->mapDwarfRegToLLVMReg(40, Mips::F8, true );
    RI->mapDwarfRegToLLVMReg(41, Mips::F9, true );
    RI->mapDwarfRegToLLVMReg(42, Mips::F10, true );
    RI->mapDwarfRegToLLVMReg(43, Mips::F11, true );
    RI->mapDwarfRegToLLVMReg(44, Mips::F12, true );
    RI->mapDwarfRegToLLVMReg(45, Mips::F13, true );
    RI->mapDwarfRegToLLVMReg(46, Mips::F14, true );
    RI->mapDwarfRegToLLVMReg(47, Mips::F15, true );
    RI->mapDwarfRegToLLVMReg(48, Mips::F16, true );
    RI->mapDwarfRegToLLVMReg(49, Mips::F17, true );
    RI->mapDwarfRegToLLVMReg(50, Mips::F18, true );
    RI->mapDwarfRegToLLVMReg(51, Mips::F19, true );
    RI->mapDwarfRegToLLVMReg(52, Mips::F20, true );
    RI->mapDwarfRegToLLVMReg(53, Mips::F21, true );
    RI->mapDwarfRegToLLVMReg(54, Mips::F22, true );
    RI->mapDwarfRegToLLVMReg(55, Mips::F23, true );
    RI->mapDwarfRegToLLVMReg(56, Mips::F24, true );
    RI->mapDwarfRegToLLVMReg(57, Mips::F25, true );
    RI->mapDwarfRegToLLVMReg(58, Mips::F26, true );
    RI->mapDwarfRegToLLVMReg(59, Mips::F27, true );
    RI->mapDwarfRegToLLVMReg(60, Mips::F28, true );
    RI->mapDwarfRegToLLVMReg(61, Mips::F29, true );
    RI->mapDwarfRegToLLVMReg(62, Mips::F30, true );
    RI->mapDwarfRegToLLVMReg(63, Mips::F31, true );
    RI->mapDwarfRegToLLVMReg(30, Mips::FP, true );
    RI->mapDwarfRegToLLVMReg(28, Mips::GP, true );
    RI->mapDwarfRegToLLVMReg(64, Mips::HI, true );
    RI->mapDwarfRegToLLVMReg(26, Mips::K0, true );
    RI->mapDwarfRegToLLVMReg(27, Mips::K1, true );
    RI->mapDwarfRegToLLVMReg(65, Mips::LO, true );
    RI->mapDwarfRegToLLVMReg(31, Mips::RA, true );
    RI->mapDwarfRegToLLVMReg(16, Mips::S0, true );
    RI->mapDwarfRegToLLVMReg(17, Mips::S1, true );
    RI->mapDwarfRegToLLVMReg(18, Mips::S2, true );
    RI->mapDwarfRegToLLVMReg(19, Mips::S3, true );
    RI->mapDwarfRegToLLVMReg(20, Mips::S4, true );
    RI->mapDwarfRegToLLVMReg(21, Mips::S5, true );
    RI->mapDwarfRegToLLVMReg(22, Mips::S6, true );
    RI->mapDwarfRegToLLVMReg(23, Mips::S7, true );
    RI->mapDwarfRegToLLVMReg(29, Mips::SP, true );
    RI->mapDwarfRegToLLVMReg(8, Mips::T0, true );
    RI->mapDwarfRegToLLVMReg(9, Mips::T1, true );
    RI->mapDwarfRegToLLVMReg(10, Mips::T2, true );
    RI->mapDwarfRegToLLVMReg(11, Mips::T3, true );
    RI->mapDwarfRegToLLVMReg(12, Mips::T4, true );
    RI->mapDwarfRegToLLVMReg(13, Mips::T5, true );
    RI->mapDwarfRegToLLVMReg(14, Mips::T6, true );
    RI->mapDwarfRegToLLVMReg(15, Mips::T7, true );
    RI->mapDwarfRegToLLVMReg(24, Mips::T8, true );
    RI->mapDwarfRegToLLVMReg(25, Mips::T9, true );
    RI->mapDwarfRegToLLVMReg(2, Mips::V0, true );
    RI->mapDwarfRegToLLVMReg(3, Mips::V1, true );
    RI->mapDwarfRegToLLVMReg(0, Mips::ZERO, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(Mips::A0, 4, false );
    RI->mapLLVMRegToDwarfReg(Mips::A0_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::A1, 5, false );
    RI->mapLLVMRegToDwarfReg(Mips::A1_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::A2, 6, false );
    RI->mapLLVMRegToDwarfReg(Mips::A2_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::A3, 7, false );
    RI->mapLLVMRegToDwarfReg(Mips::A3_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::AT, 1, false );
    RI->mapLLVMRegToDwarfReg(Mips::AT_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D0, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D0_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D1, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D1_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D2, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D2_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D3, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D3_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D4, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D4_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D5, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D5_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D6, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D6_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D7, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D7_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D8, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D8_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D9, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D9_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D10, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D10_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D11, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D11_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D12, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D12_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D13, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D13_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D14, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D14_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D15, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D15_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D16_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D17_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D18_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D19_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D20_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D21_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D22_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D23_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D24_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D25_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D26_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D27_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D28_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D29_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D30_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::D31_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::F0, 32, false );
    RI->mapLLVMRegToDwarfReg(Mips::F1, 33, false );
    RI->mapLLVMRegToDwarfReg(Mips::F2, 34, false );
    RI->mapLLVMRegToDwarfReg(Mips::F3, 35, false );
    RI->mapLLVMRegToDwarfReg(Mips::F4, 36, false );
    RI->mapLLVMRegToDwarfReg(Mips::F5, 37, false );
    RI->mapLLVMRegToDwarfReg(Mips::F6, 38, false );
    RI->mapLLVMRegToDwarfReg(Mips::F7, 39, false );
    RI->mapLLVMRegToDwarfReg(Mips::F8, 40, false );
    RI->mapLLVMRegToDwarfReg(Mips::F9, 41, false );
    RI->mapLLVMRegToDwarfReg(Mips::F10, 42, false );
    RI->mapLLVMRegToDwarfReg(Mips::F11, 43, false );
    RI->mapLLVMRegToDwarfReg(Mips::F12, 44, false );
    RI->mapLLVMRegToDwarfReg(Mips::F13, 45, false );
    RI->mapLLVMRegToDwarfReg(Mips::F14, 46, false );
    RI->mapLLVMRegToDwarfReg(Mips::F15, 47, false );
    RI->mapLLVMRegToDwarfReg(Mips::F16, 48, false );
    RI->mapLLVMRegToDwarfReg(Mips::F17, 49, false );
    RI->mapLLVMRegToDwarfReg(Mips::F18, 50, false );
    RI->mapLLVMRegToDwarfReg(Mips::F19, 51, false );
    RI->mapLLVMRegToDwarfReg(Mips::F20, 52, false );
    RI->mapLLVMRegToDwarfReg(Mips::F21, 53, false );
    RI->mapLLVMRegToDwarfReg(Mips::F22, 54, false );
    RI->mapLLVMRegToDwarfReg(Mips::F23, 55, false );
    RI->mapLLVMRegToDwarfReg(Mips::F24, 56, false );
    RI->mapLLVMRegToDwarfReg(Mips::F25, 57, false );
    RI->mapLLVMRegToDwarfReg(Mips::F26, 58, false );
    RI->mapLLVMRegToDwarfReg(Mips::F27, 59, false );
    RI->mapLLVMRegToDwarfReg(Mips::F28, 60, false );
    RI->mapLLVMRegToDwarfReg(Mips::F29, 61, false );
    RI->mapLLVMRegToDwarfReg(Mips::F30, 62, false );
    RI->mapLLVMRegToDwarfReg(Mips::F31, 63, false );
    RI->mapLLVMRegToDwarfReg(Mips::FCR31, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::FP, 30, false );
    RI->mapLLVMRegToDwarfReg(Mips::FP_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::GP, 28, false );
    RI->mapLLVMRegToDwarfReg(Mips::GP_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::HI, 64, false );
    RI->mapLLVMRegToDwarfReg(Mips::HI64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::HWR29, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::HWR29_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::K0, 26, false );
    RI->mapLLVMRegToDwarfReg(Mips::K0_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::K1, 27, false );
    RI->mapLLVMRegToDwarfReg(Mips::K1_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::LO, 65, false );
    RI->mapLLVMRegToDwarfReg(Mips::LO64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::RA, 31, false );
    RI->mapLLVMRegToDwarfReg(Mips::RA_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S0, 16, false );
    RI->mapLLVMRegToDwarfReg(Mips::S0_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S1, 17, false );
    RI->mapLLVMRegToDwarfReg(Mips::S1_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S2, 18, false );
    RI->mapLLVMRegToDwarfReg(Mips::S2_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S3, 19, false );
    RI->mapLLVMRegToDwarfReg(Mips::S3_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S4, 20, false );
    RI->mapLLVMRegToDwarfReg(Mips::S4_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S5, 21, false );
    RI->mapLLVMRegToDwarfReg(Mips::S5_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S6, 22, false );
    RI->mapLLVMRegToDwarfReg(Mips::S6_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::S7, 23, false );
    RI->mapLLVMRegToDwarfReg(Mips::S7_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::SP, 29, false );
    RI->mapLLVMRegToDwarfReg(Mips::SP_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T0, 8, false );
    RI->mapLLVMRegToDwarfReg(Mips::T0_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T1, 9, false );
    RI->mapLLVMRegToDwarfReg(Mips::T1_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T2, 10, false );
    RI->mapLLVMRegToDwarfReg(Mips::T2_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T3, 11, false );
    RI->mapLLVMRegToDwarfReg(Mips::T3_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T4, 12, false );
    RI->mapLLVMRegToDwarfReg(Mips::T4_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T5, 13, false );
    RI->mapLLVMRegToDwarfReg(Mips::T5_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T6, 14, false );
    RI->mapLLVMRegToDwarfReg(Mips::T6_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T7, 15, false );
    RI->mapLLVMRegToDwarfReg(Mips::T7_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T8, 24, false );
    RI->mapLLVMRegToDwarfReg(Mips::T8_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::T9, 25, false );
    RI->mapLLVMRegToDwarfReg(Mips::T9_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::V0, 2, false );
    RI->mapLLVMRegToDwarfReg(Mips::V0_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::V1, 3, false );
    RI->mapLLVMRegToDwarfReg(Mips::V1_64, -1, false );
    RI->mapLLVMRegToDwarfReg(Mips::ZERO, 0, false );
    RI->mapLLVMRegToDwarfReg(Mips::ZERO_64, -1, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(Mips::A0, 4, true );
    RI->mapLLVMRegToDwarfReg(Mips::A0_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::A1, 5, true );
    RI->mapLLVMRegToDwarfReg(Mips::A1_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::A2, 6, true );
    RI->mapLLVMRegToDwarfReg(Mips::A2_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::A3, 7, true );
    RI->mapLLVMRegToDwarfReg(Mips::A3_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::AT, 1, true );
    RI->mapLLVMRegToDwarfReg(Mips::AT_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D0, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D0_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D1, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D1_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D2, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D2_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D3, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D3_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D4, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D4_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D5, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D5_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D6, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D6_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D7, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D7_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D8, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D8_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D9, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D9_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D10, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D10_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D11, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D11_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D12, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D12_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D13, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D13_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D14, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D14_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D15, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D15_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D16_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D17_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D18_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D19_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D20_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D21_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D22_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D23_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D24_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D25_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D26_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D27_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D28_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D29_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D30_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::D31_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::F0, 32, true );
    RI->mapLLVMRegToDwarfReg(Mips::F1, 33, true );
    RI->mapLLVMRegToDwarfReg(Mips::F2, 34, true );
    RI->mapLLVMRegToDwarfReg(Mips::F3, 35, true );
    RI->mapLLVMRegToDwarfReg(Mips::F4, 36, true );
    RI->mapLLVMRegToDwarfReg(Mips::F5, 37, true );
    RI->mapLLVMRegToDwarfReg(Mips::F6, 38, true );
    RI->mapLLVMRegToDwarfReg(Mips::F7, 39, true );
    RI->mapLLVMRegToDwarfReg(Mips::F8, 40, true );
    RI->mapLLVMRegToDwarfReg(Mips::F9, 41, true );
    RI->mapLLVMRegToDwarfReg(Mips::F10, 42, true );
    RI->mapLLVMRegToDwarfReg(Mips::F11, 43, true );
    RI->mapLLVMRegToDwarfReg(Mips::F12, 44, true );
    RI->mapLLVMRegToDwarfReg(Mips::F13, 45, true );
    RI->mapLLVMRegToDwarfReg(Mips::F14, 46, true );
    RI->mapLLVMRegToDwarfReg(Mips::F15, 47, true );
    RI->mapLLVMRegToDwarfReg(Mips::F16, 48, true );
    RI->mapLLVMRegToDwarfReg(Mips::F17, 49, true );
    RI->mapLLVMRegToDwarfReg(Mips::F18, 50, true );
    RI->mapLLVMRegToDwarfReg(Mips::F19, 51, true );
    RI->mapLLVMRegToDwarfReg(Mips::F20, 52, true );
    RI->mapLLVMRegToDwarfReg(Mips::F21, 53, true );
    RI->mapLLVMRegToDwarfReg(Mips::F22, 54, true );
    RI->mapLLVMRegToDwarfReg(Mips::F23, 55, true );
    RI->mapLLVMRegToDwarfReg(Mips::F24, 56, true );
    RI->mapLLVMRegToDwarfReg(Mips::F25, 57, true );
    RI->mapLLVMRegToDwarfReg(Mips::F26, 58, true );
    RI->mapLLVMRegToDwarfReg(Mips::F27, 59, true );
    RI->mapLLVMRegToDwarfReg(Mips::F28, 60, true );
    RI->mapLLVMRegToDwarfReg(Mips::F29, 61, true );
    RI->mapLLVMRegToDwarfReg(Mips::F30, 62, true );
    RI->mapLLVMRegToDwarfReg(Mips::F31, 63, true );
    RI->mapLLVMRegToDwarfReg(Mips::FCR31, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::FP, 30, true );
    RI->mapLLVMRegToDwarfReg(Mips::FP_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::GP, 28, true );
    RI->mapLLVMRegToDwarfReg(Mips::GP_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::HI, 64, true );
    RI->mapLLVMRegToDwarfReg(Mips::HI64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::HWR29, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::HWR29_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::K0, 26, true );
    RI->mapLLVMRegToDwarfReg(Mips::K0_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::K1, 27, true );
    RI->mapLLVMRegToDwarfReg(Mips::K1_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::LO, 65, true );
    RI->mapLLVMRegToDwarfReg(Mips::LO64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::RA, 31, true );
    RI->mapLLVMRegToDwarfReg(Mips::RA_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S0, 16, true );
    RI->mapLLVMRegToDwarfReg(Mips::S0_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S1, 17, true );
    RI->mapLLVMRegToDwarfReg(Mips::S1_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S2, 18, true );
    RI->mapLLVMRegToDwarfReg(Mips::S2_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S3, 19, true );
    RI->mapLLVMRegToDwarfReg(Mips::S3_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S4, 20, true );
    RI->mapLLVMRegToDwarfReg(Mips::S4_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S5, 21, true );
    RI->mapLLVMRegToDwarfReg(Mips::S5_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S6, 22, true );
    RI->mapLLVMRegToDwarfReg(Mips::S6_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::S7, 23, true );
    RI->mapLLVMRegToDwarfReg(Mips::S7_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::SP, 29, true );
    RI->mapLLVMRegToDwarfReg(Mips::SP_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T0, 8, true );
    RI->mapLLVMRegToDwarfReg(Mips::T0_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T1, 9, true );
    RI->mapLLVMRegToDwarfReg(Mips::T1_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T2, 10, true );
    RI->mapLLVMRegToDwarfReg(Mips::T2_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T3, 11, true );
    RI->mapLLVMRegToDwarfReg(Mips::T3_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T4, 12, true );
    RI->mapLLVMRegToDwarfReg(Mips::T4_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T5, 13, true );
    RI->mapLLVMRegToDwarfReg(Mips::T5_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T6, 14, true );
    RI->mapLLVMRegToDwarfReg(Mips::T6_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T7, 15, true );
    RI->mapLLVMRegToDwarfReg(Mips::T7_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T8, 24, true );
    RI->mapLLVMRegToDwarfReg(Mips::T8_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::T9, 25, true );
    RI->mapLLVMRegToDwarfReg(Mips::T9_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::V0, 2, true );
    RI->mapLLVMRegToDwarfReg(Mips::V0_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::V1, 3, true );
    RI->mapLLVMRegToDwarfReg(Mips::V1_64, -1, true );
    RI->mapLLVMRegToDwarfReg(Mips::ZERO, 0, true );
    RI->mapLLVMRegToDwarfReg(Mips::ZERO_64, -1, true );
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Header Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"
#include <string>

namespace llvm {

struct MipsGenRegisterInfo : public TargetRegisterInfo {
  explicit MipsGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  unsigned getSubReg(unsigned RegNo, unsigned Index) const;
  unsigned getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const;
  unsigned composeSubRegIndices(unsigned, unsigned) const;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  const TargetRegisterClass *getMatchingSuperRegClass(const TargetRegisterClass*, const TargetRegisterClass*, unsigned) const;
};


// Subregister indices
namespace Mips {
enum {
  NoSubRegister,
  sub_32,	// 1
  sub_fpeven,	// 2
  sub_fpodd,	// 3
  NUM_TARGET_NAMED_SUBREGS = 4
};
}
namespace Mips { // Register classes
  struct FGR32Class : public TargetRegisterClass {
    FGR32Class();
  };
  extern FGR32Class	FGR32RegClass;
  static TargetRegisterClass * const FGR32RegisterClass = &FGR32RegClass;
  struct CPURegsClass : public TargetRegisterClass {
    CPURegsClass();
  };
  extern CPURegsClass	CPURegsRegClass;
  static TargetRegisterClass * const CPURegsRegisterClass = &CPURegsRegClass;
  struct FGR64Class : public TargetRegisterClass {
    FGR64Class();
  };
  extern FGR64Class	FGR64RegClass;
  static TargetRegisterClass * const FGR64RegisterClass = &FGR64RegClass;
  struct CPU64RegsClass : public TargetRegisterClass {
    CPU64RegsClass();
  };
  extern CPU64RegsClass	CPU64RegsRegClass;
  static TargetRegisterClass * const CPU64RegsRegisterClass = &CPU64RegsRegClass;
  struct AFGR64Class : public TargetRegisterClass {
    AFGR64Class();
  };
  extern AFGR64Class	AFGR64RegClass;
  static TargetRegisterClass * const AFGR64RegisterClass = &AFGR64RegClass;
  struct HILOClass : public TargetRegisterClass {
    HILOClass();
  };
  extern HILOClass	HILORegClass;
  static TargetRegisterClass * const HILORegisterClass = &HILORegClass;
  struct HILO64Class : public TargetRegisterClass {
    HILO64Class();
  };
  extern HILO64Class	HILO64RegClass;
  static TargetRegisterClass * const HILO64RegisterClass = &HILO64RegClass;
  struct HWRegsClass : public TargetRegisterClass {
    HWRegsClass();
  };
  extern HWRegsClass	HWRegsRegClass;
  static TargetRegisterClass * const HWRegsRegisterClass = &HWRegsRegClass;
  struct CCRClass : public TargetRegisterClass {
    CCRClass();
  };
  extern CCRClass	CCRRegClass;
  static TargetRegisterClass * const CCRRegisterClass = &CCRRegClass;
  struct HWRegs64Class : public TargetRegisterClass {
    HWRegs64Class();
  };
  extern HWRegs64Class	HWRegs64RegClass;
  static TargetRegisterClass * const HWRegs64RegisterClass = &HWRegs64RegClass;
} // end of namespace Mips

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register and Register Classes Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass MipsMCRegisterClasses[];
namespace {     // Register classes...
  // FGR32VTs Register Class Value Types...
  static const EVT FGR32VTs[] = {
    MVT::f32, MVT::Other
  };

  // CPURegsVTs Register Class Value Types...
  static const EVT CPURegsVTs[] = {
    MVT::i32, MVT::Other
  };

  // FGR64VTs Register Class Value Types...
  static const EVT FGR64VTs[] = {
    MVT::f64, MVT::Other
  };

  // CPU64RegsVTs Register Class Value Types...
  static const EVT CPU64RegsVTs[] = {
    MVT::i64, MVT::Other
  };

  // AFGR64VTs Register Class Value Types...
  static const EVT AFGR64VTs[] = {
    MVT::f64, MVT::Other
  };

  // HILOVTs Register Class Value Types...
  static const EVT HILOVTs[] = {
    MVT::i32, MVT::Other
  };

  // HILO64VTs Register Class Value Types...
  static const EVT HILO64VTs[] = {
    MVT::i64, MVT::Other
  };

  // HWRegsVTs Register Class Value Types...
  static const EVT HWRegsVTs[] = {
    MVT::i32, MVT::Other
  };

  // CCRVTs Register Class Value Types...
  static const EVT CCRVTs[] = {
    MVT::i32, MVT::Other
  };

  // HWRegs64VTs Register Class Value Types...
  static const EVT HWRegs64VTs[] = {
    MVT::i64, MVT::Other
  };

}  // end anonymous namespace

namespace Mips {   // Register class instances
  FGR32Class	FGR32RegClass;
  CPURegsClass	CPURegsRegClass;
  FGR64Class	FGR64RegClass;
  CPU64RegsClass	CPU64RegsRegClass;
  AFGR64Class	AFGR64RegClass;
  HILOClass	HILORegClass;
  HILO64Class	HILO64RegClass;
  HWRegsClass	HWRegsRegClass;
  CCRClass	CCRRegClass;
  HWRegs64Class	HWRegs64RegClass;

  static const TargetRegisterClass* const NullRegClasses[] = { NULL };

  // FGR32 Super-register Classes...
  static const TargetRegisterClass* const FGR32SuperRegClasses[] = {
    &Mips::FGR64RegClass, &Mips::AFGR64RegClass, NULL
  };

  // CPURegs Super-register Classes...
  static const TargetRegisterClass* const CPURegsSuperRegClasses[] = {
    &Mips::CPU64RegsRegClass, NULL
  };

  // FGR64 Super-register Classes...
  static const TargetRegisterClass* const FGR64SuperRegClasses[] = {
    NULL
  };

  // CPU64Regs Super-register Classes...
  static const TargetRegisterClass* const CPU64RegsSuperRegClasses[] = {
    NULL
  };

  // AFGR64 Super-register Classes...
  static const TargetRegisterClass* const AFGR64SuperRegClasses[] = {
    NULL
  };

  // HILO Super-register Classes...
  static const TargetRegisterClass* const HILOSuperRegClasses[] = {
    &Mips::HILO64RegClass, NULL
  };

  // HILO64 Super-register Classes...
  static const TargetRegisterClass* const HILO64SuperRegClasses[] = {
    NULL
  };

  // HWRegs Super-register Classes...
  static const TargetRegisterClass* const HWRegsSuperRegClasses[] = {
    NULL
  };

  // CCR Super-register Classes...
  static const TargetRegisterClass* const CCRSuperRegClasses[] = {
    NULL
  };

  // HWRegs64 Super-register Classes...
  static const TargetRegisterClass* const HWRegs64SuperRegClasses[] = {
    NULL
  };

  static const unsigned FGR32SubclassMask[] = { 0x00000001, };

  static const unsigned CPURegsSubclassMask[] = { 0x00000002, };

  static const unsigned FGR64SubclassMask[] = { 0x00000004, };

  static const unsigned CPU64RegsSubclassMask[] = { 0x00000008, };

  static const unsigned AFGR64SubclassMask[] = { 0x00000010, };

  static const unsigned HILOSubclassMask[] = { 0x00000020, };

  static const unsigned HILO64SubclassMask[] = { 0x00000040, };

  static const unsigned HWRegsSubclassMask[] = { 0x00000080, };

  static const unsigned CCRSubclassMask[] = { 0x00000100, };

  static const unsigned HWRegs64SubclassMask[] = { 0x00000200, };

FGR32Class::FGR32Class()  : TargetRegisterClass(&MipsMCRegisterClasses[FGR32RegClassID], FGR32VTs, FGR32SubclassMask, NullRegClasses, FGR32SuperRegClasses) {}
CPURegsClass::CPURegsClass()  : TargetRegisterClass(&MipsMCRegisterClasses[CPURegsRegClassID], CPURegsVTs, CPURegsSubclassMask, NullRegClasses, CPURegsSuperRegClasses) {}
FGR64Class::FGR64Class()  : TargetRegisterClass(&MipsMCRegisterClasses[FGR64RegClassID], FGR64VTs, FGR64SubclassMask, NullRegClasses, FGR64SuperRegClasses) {}
CPU64RegsClass::CPU64RegsClass()  : TargetRegisterClass(&MipsMCRegisterClasses[CPU64RegsRegClassID], CPU64RegsVTs, CPU64RegsSubclassMask, NullRegClasses, CPU64RegsSuperRegClasses) {}
AFGR64Class::AFGR64Class()  : TargetRegisterClass(&MipsMCRegisterClasses[AFGR64RegClassID], AFGR64VTs, AFGR64SubclassMask, NullRegClasses, AFGR64SuperRegClasses) {}
HILOClass::HILOClass()  : TargetRegisterClass(&MipsMCRegisterClasses[HILORegClassID], HILOVTs, HILOSubclassMask, NullRegClasses, HILOSuperRegClasses) {}
HILO64Class::HILO64Class()  : TargetRegisterClass(&MipsMCRegisterClasses[HILO64RegClassID], HILO64VTs, HILO64SubclassMask, NullRegClasses, HILO64SuperRegClasses) {}
HWRegsClass::HWRegsClass()  : TargetRegisterClass(&MipsMCRegisterClasses[HWRegsRegClassID], HWRegsVTs, HWRegsSubclassMask, NullRegClasses, HWRegsSuperRegClasses) {}
CCRClass::CCRClass()  : TargetRegisterClass(&MipsMCRegisterClasses[CCRRegClassID], CCRVTs, CCRSubclassMask, NullRegClasses, CCRSuperRegClasses) {}
HWRegs64Class::HWRegs64Class()  : TargetRegisterClass(&MipsMCRegisterClasses[HWRegs64RegClassID], HWRegs64VTs, HWRegs64SubclassMask, NullRegClasses, HWRegs64SuperRegClasses) {}
}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Mips::FGR32RegClass,
    &Mips::CPURegsRegClass,
    &Mips::FGR64RegClass,
    &Mips::CPU64RegsRegClass,
    &Mips::AFGR64RegClass,
    &Mips::HILORegClass,
    &Mips::HILO64RegClass,
    &Mips::HWRegsRegClass,
    &Mips::CCRRegClass,
    &Mips::HWRegs64RegClass,
  };
}

  static const TargetRegisterInfoDesc MipsRegInfoDesc[] = { // Extra Descriptors
    { 0, 0 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
  };

  static const char *const MipsSubRegIndexTable[] = { "sub_32", "sub_fpeven", "sub_fpodd" };


unsigned MipsGenRegisterInfo::getSubReg(unsigned RegNo, unsigned Index) const {
  switch (RegNo) {
  default:
    return 0;
  case Mips::A0_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::A0;
    };
    break;
  case Mips::A1_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::A1;
    };
    break;
  case Mips::A2_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::A2;
    };
    break;
  case Mips::A3_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::A3;
    };
    break;
  case Mips::AT_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::AT;
    };
    break;
  case Mips::D0:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F0;
    case Mips::sub_fpodd: return Mips::F1;
    };
    break;
  case Mips::D0_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F0;
    };
    break;
  case Mips::D1:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F2;
    case Mips::sub_fpodd: return Mips::F3;
    };
    break;
  case Mips::D1_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F1;
    };
    break;
  case Mips::D2:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F4;
    case Mips::sub_fpodd: return Mips::F5;
    };
    break;
  case Mips::D2_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F2;
    };
    break;
  case Mips::D3:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F6;
    case Mips::sub_fpodd: return Mips::F7;
    };
    break;
  case Mips::D3_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F3;
    };
    break;
  case Mips::D4:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F8;
    case Mips::sub_fpodd: return Mips::F9;
    };
    break;
  case Mips::D4_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F4;
    };
    break;
  case Mips::D5:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F10;
    case Mips::sub_fpodd: return Mips::F11;
    };
    break;
  case Mips::D5_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F5;
    };
    break;
  case Mips::D6:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F12;
    case Mips::sub_fpodd: return Mips::F13;
    };
    break;
  case Mips::D6_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F6;
    };
    break;
  case Mips::D7:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F14;
    case Mips::sub_fpodd: return Mips::F15;
    };
    break;
  case Mips::D7_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F7;
    };
    break;
  case Mips::D8:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F16;
    case Mips::sub_fpodd: return Mips::F17;
    };
    break;
  case Mips::D8_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F8;
    };
    break;
  case Mips::D9:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F18;
    case Mips::sub_fpodd: return Mips::F19;
    };
    break;
  case Mips::D9_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F9;
    };
    break;
  case Mips::D10:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F20;
    case Mips::sub_fpodd: return Mips::F21;
    };
    break;
  case Mips::D10_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F10;
    };
    break;
  case Mips::D11:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F22;
    case Mips::sub_fpodd: return Mips::F23;
    };
    break;
  case Mips::D11_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F11;
    };
    break;
  case Mips::D12:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F24;
    case Mips::sub_fpodd: return Mips::F25;
    };
    break;
  case Mips::D12_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F12;
    };
    break;
  case Mips::D13:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F26;
    case Mips::sub_fpodd: return Mips::F27;
    };
    break;
  case Mips::D13_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F13;
    };
    break;
  case Mips::D14:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F28;
    case Mips::sub_fpodd: return Mips::F29;
    };
    break;
  case Mips::D14_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F14;
    };
    break;
  case Mips::D15:
    switch (Index) {
    default: return 0;
    case Mips::sub_fpeven: return Mips::F30;
    case Mips::sub_fpodd: return Mips::F31;
    };
    break;
  case Mips::D15_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F15;
    };
    break;
  case Mips::D16_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F16;
    };
    break;
  case Mips::D17_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F17;
    };
    break;
  case Mips::D18_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F18;
    };
    break;
  case Mips::D19_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F19;
    };
    break;
  case Mips::D20_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F20;
    };
    break;
  case Mips::D21_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F21;
    };
    break;
  case Mips::D22_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F22;
    };
    break;
  case Mips::D23_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F23;
    };
    break;
  case Mips::D24_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F24;
    };
    break;
  case Mips::D25_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F25;
    };
    break;
  case Mips::D26_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F26;
    };
    break;
  case Mips::D27_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F27;
    };
    break;
  case Mips::D28_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F28;
    };
    break;
  case Mips::D29_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F29;
    };
    break;
  case Mips::D30_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F30;
    };
    break;
  case Mips::D31_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::F31;
    };
    break;
  case Mips::FP_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::FP;
    };
    break;
  case Mips::GP_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::GP;
    };
    break;
  case Mips::HI64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::HI;
    };
    break;
  case Mips::K0_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::K0;
    };
    break;
  case Mips::K1_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::K1;
    };
    break;
  case Mips::LO64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::LO;
    };
    break;
  case Mips::RA_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::RA;
    };
    break;
  case Mips::S0_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S0;
    };
    break;
  case Mips::S1_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S1;
    };
    break;
  case Mips::S2_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S2;
    };
    break;
  case Mips::S3_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S3;
    };
    break;
  case Mips::S4_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S4;
    };
    break;
  case Mips::S5_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S5;
    };
    break;
  case Mips::S6_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S6;
    };
    break;
  case Mips::S7_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::S7;
    };
    break;
  case Mips::SP_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::SP;
    };
    break;
  case Mips::T0_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T0;
    };
    break;
  case Mips::T1_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T1;
    };
    break;
  case Mips::T2_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T2;
    };
    break;
  case Mips::T3_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T3;
    };
    break;
  case Mips::T4_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T4;
    };
    break;
  case Mips::T5_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T5;
    };
    break;
  case Mips::T6_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T6;
    };
    break;
  case Mips::T7_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T7;
    };
    break;
  case Mips::T8_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T8;
    };
    break;
  case Mips::T9_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::T9;
    };
    break;
  case Mips::V0_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::V0;
    };
    break;
  case Mips::V1_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::V1;
    };
    break;
  case Mips::ZERO_64:
    switch (Index) {
    default: return 0;
    case Mips::sub_32: return Mips::ZERO;
    };
    break;
  };
  return 0;
}

unsigned MipsGenRegisterInfo::getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const {
  switch (RegNo) {
  default:
    return 0;
  case Mips::A0_64:
    if (SubRegNo == Mips::A0)  return Mips::sub_32;
    return 0;
  case Mips::A1_64:
    if (SubRegNo == Mips::A1)  return Mips::sub_32;
    return 0;
  case Mips::A2_64:
    if (SubRegNo == Mips::A2)  return Mips::sub_32;
    return 0;
  case Mips::A3_64:
    if (SubRegNo == Mips::A3)  return Mips::sub_32;
    return 0;
  case Mips::AT_64:
    if (SubRegNo == Mips::AT)  return Mips::sub_32;
    return 0;
  case Mips::D0:
    if (SubRegNo == Mips::F0)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F1)  return Mips::sub_fpodd;
    return 0;
  case Mips::D0_64:
    if (SubRegNo == Mips::F0)  return Mips::sub_32;
    return 0;
  case Mips::D1:
    if (SubRegNo == Mips::F2)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F3)  return Mips::sub_fpodd;
    return 0;
  case Mips::D1_64:
    if (SubRegNo == Mips::F1)  return Mips::sub_32;
    return 0;
  case Mips::D2:
    if (SubRegNo == Mips::F4)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F5)  return Mips::sub_fpodd;
    return 0;
  case Mips::D2_64:
    if (SubRegNo == Mips::F2)  return Mips::sub_32;
    return 0;
  case Mips::D3:
    if (SubRegNo == Mips::F6)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F7)  return Mips::sub_fpodd;
    return 0;
  case Mips::D3_64:
    if (SubRegNo == Mips::F3)  return Mips::sub_32;
    return 0;
  case Mips::D4:
    if (SubRegNo == Mips::F8)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F9)  return Mips::sub_fpodd;
    return 0;
  case Mips::D4_64:
    if (SubRegNo == Mips::F4)  return Mips::sub_32;
    return 0;
  case Mips::D5:
    if (SubRegNo == Mips::F10)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F11)  return Mips::sub_fpodd;
    return 0;
  case Mips::D5_64:
    if (SubRegNo == Mips::F5)  return Mips::sub_32;
    return 0;
  case Mips::D6:
    if (SubRegNo == Mips::F12)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F13)  return Mips::sub_fpodd;
    return 0;
  case Mips::D6_64:
    if (SubRegNo == Mips::F6)  return Mips::sub_32;
    return 0;
  case Mips::D7:
    if (SubRegNo == Mips::F14)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F15)  return Mips::sub_fpodd;
    return 0;
  case Mips::D7_64:
    if (SubRegNo == Mips::F7)  return Mips::sub_32;
    return 0;
  case Mips::D8:
    if (SubRegNo == Mips::F16)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F17)  return Mips::sub_fpodd;
    return 0;
  case Mips::D8_64:
    if (SubRegNo == Mips::F8)  return Mips::sub_32;
    return 0;
  case Mips::D9:
    if (SubRegNo == Mips::F18)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F19)  return Mips::sub_fpodd;
    return 0;
  case Mips::D9_64:
    if (SubRegNo == Mips::F9)  return Mips::sub_32;
    return 0;
  case Mips::D10:
    if (SubRegNo == Mips::F20)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F21)  return Mips::sub_fpodd;
    return 0;
  case Mips::D10_64:
    if (SubRegNo == Mips::F10)  return Mips::sub_32;
    return 0;
  case Mips::D11:
    if (SubRegNo == Mips::F22)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F23)  return Mips::sub_fpodd;
    return 0;
  case Mips::D11_64:
    if (SubRegNo == Mips::F11)  return Mips::sub_32;
    return 0;
  case Mips::D12:
    if (SubRegNo == Mips::F24)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F25)  return Mips::sub_fpodd;
    return 0;
  case Mips::D12_64:
    if (SubRegNo == Mips::F12)  return Mips::sub_32;
    return 0;
  case Mips::D13:
    if (SubRegNo == Mips::F26)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F27)  return Mips::sub_fpodd;
    return 0;
  case Mips::D13_64:
    if (SubRegNo == Mips::F13)  return Mips::sub_32;
    return 0;
  case Mips::D14:
    if (SubRegNo == Mips::F28)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F29)  return Mips::sub_fpodd;
    return 0;
  case Mips::D14_64:
    if (SubRegNo == Mips::F14)  return Mips::sub_32;
    return 0;
  case Mips::D15:
    if (SubRegNo == Mips::F30)  return Mips::sub_fpeven;
    if (SubRegNo == Mips::F31)  return Mips::sub_fpodd;
    return 0;
  case Mips::D15_64:
    if (SubRegNo == Mips::F15)  return Mips::sub_32;
    return 0;
  case Mips::D16_64:
    if (SubRegNo == Mips::F16)  return Mips::sub_32;
    return 0;
  case Mips::D17_64:
    if (SubRegNo == Mips::F17)  return Mips::sub_32;
    return 0;
  case Mips::D18_64:
    if (SubRegNo == Mips::F18)  return Mips::sub_32;
    return 0;
  case Mips::D19_64:
    if (SubRegNo == Mips::F19)  return Mips::sub_32;
    return 0;
  case Mips::D20_64:
    if (SubRegNo == Mips::F20)  return Mips::sub_32;
    return 0;
  case Mips::D21_64:
    if (SubRegNo == Mips::F21)  return Mips::sub_32;
    return 0;
  case Mips::D22_64:
    if (SubRegNo == Mips::F22)  return Mips::sub_32;
    return 0;
  case Mips::D23_64:
    if (SubRegNo == Mips::F23)  return Mips::sub_32;
    return 0;
  case Mips::D24_64:
    if (SubRegNo == Mips::F24)  return Mips::sub_32;
    return 0;
  case Mips::D25_64:
    if (SubRegNo == Mips::F25)  return Mips::sub_32;
    return 0;
  case Mips::D26_64:
    if (SubRegNo == Mips::F26)  return Mips::sub_32;
    return 0;
  case Mips::D27_64:
    if (SubRegNo == Mips::F27)  return Mips::sub_32;
    return 0;
  case Mips::D28_64:
    if (SubRegNo == Mips::F28)  return Mips::sub_32;
    return 0;
  case Mips::D29_64:
    if (SubRegNo == Mips::F29)  return Mips::sub_32;
    return 0;
  case Mips::D30_64:
    if (SubRegNo == Mips::F30)  return Mips::sub_32;
    return 0;
  case Mips::D31_64:
    if (SubRegNo == Mips::F31)  return Mips::sub_32;
    return 0;
  case Mips::FP_64:
    if (SubRegNo == Mips::FP)  return Mips::sub_32;
    return 0;
  case Mips::GP_64:
    if (SubRegNo == Mips::GP)  return Mips::sub_32;
    return 0;
  case Mips::HI64:
    if (SubRegNo == Mips::HI)  return Mips::sub_32;
    return 0;
  case Mips::K0_64:
    if (SubRegNo == Mips::K0)  return Mips::sub_32;
    return 0;
  case Mips::K1_64:
    if (SubRegNo == Mips::K1)  return Mips::sub_32;
    return 0;
  case Mips::LO64:
    if (SubRegNo == Mips::LO)  return Mips::sub_32;
    return 0;
  case Mips::RA_64:
    if (SubRegNo == Mips::RA)  return Mips::sub_32;
    return 0;
  case Mips::S0_64:
    if (SubRegNo == Mips::S0)  return Mips::sub_32;
    return 0;
  case Mips::S1_64:
    if (SubRegNo == Mips::S1)  return Mips::sub_32;
    return 0;
  case Mips::S2_64:
    if (SubRegNo == Mips::S2)  return Mips::sub_32;
    return 0;
  case Mips::S3_64:
    if (SubRegNo == Mips::S3)  return Mips::sub_32;
    return 0;
  case Mips::S4_64:
    if (SubRegNo == Mips::S4)  return Mips::sub_32;
    return 0;
  case Mips::S5_64:
    if (SubRegNo == Mips::S5)  return Mips::sub_32;
    return 0;
  case Mips::S6_64:
    if (SubRegNo == Mips::S6)  return Mips::sub_32;
    return 0;
  case Mips::S7_64:
    if (SubRegNo == Mips::S7)  return Mips::sub_32;
    return 0;
  case Mips::SP_64:
    if (SubRegNo == Mips::SP)  return Mips::sub_32;
    return 0;
  case Mips::T0_64:
    if (SubRegNo == Mips::T0)  return Mips::sub_32;
    return 0;
  case Mips::T1_64:
    if (SubRegNo == Mips::T1)  return Mips::sub_32;
    return 0;
  case Mips::T2_64:
    if (SubRegNo == Mips::T2)  return Mips::sub_32;
    return 0;
  case Mips::T3_64:
    if (SubRegNo == Mips::T3)  return Mips::sub_32;
    return 0;
  case Mips::T4_64:
    if (SubRegNo == Mips::T4)  return Mips::sub_32;
    return 0;
  case Mips::T5_64:
    if (SubRegNo == Mips::T5)  return Mips::sub_32;
    return 0;
  case Mips::T6_64:
    if (SubRegNo == Mips::T6)  return Mips::sub_32;
    return 0;
  case Mips::T7_64:
    if (SubRegNo == Mips::T7)  return Mips::sub_32;
    return 0;
  case Mips::T8_64:
    if (SubRegNo == Mips::T8)  return Mips::sub_32;
    return 0;
  case Mips::T9_64:
    if (SubRegNo == Mips::T9)  return Mips::sub_32;
    return 0;
  case Mips::V0_64:
    if (SubRegNo == Mips::V0)  return Mips::sub_32;
    return 0;
  case Mips::V1_64:
    if (SubRegNo == Mips::V1)  return Mips::sub_32;
    return 0;
  case Mips::ZERO_64:
    if (SubRegNo == Mips::ZERO)  return Mips::sub_32;
    return 0;
  };
  return 0;
}

unsigned MipsGenRegisterInfo::composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
  switch (IdxA) {
  default:
    return IdxB;
  }
}

const TargetRegisterClass *MipsGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[10][3] = {
    {	// FGR32
      0,	// sub_32
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// CPURegs
      0,	// sub_32
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// FGR64
      3,	// sub_32 -> FGR64
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// CPU64Regs
      4,	// sub_32 -> CPU64Regs
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// AFGR64
      0,	// sub_32
      5,	// sub_fpeven -> AFGR64
      5,	// sub_fpodd -> AFGR64
    },
    {	// HILO
      0,	// sub_32
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// HILO64
      7,	// sub_32 -> HILO64
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// HWRegs
      0,	// sub_32
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// CCR
      0,	// sub_32
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
    {	// HWRegs64
      0,	// sub_32
      0,	// sub_fpeven
      0,	// sub_fpodd
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 3 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

const TargetRegisterClass *MipsGenRegisterInfo::getMatchingSuperRegClass(const TargetRegisterClass *A, const TargetRegisterClass *B, unsigned Idx) const {
  static const unsigned Table[10][3][1] = {
    {	// FGR32
      { 0x00000004, },	// sub_32
      { 0x00000010, },	// sub_fpeven
      { 0x00000010, },	// sub_fpodd
    },
    {	// CPURegs
      { 0x00000008, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// FGR64
      { 0x00000000, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// CPU64Regs
      { 0x00000000, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// AFGR64
      { 0x00000000, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// HILO
      { 0x00000040, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// HILO64
      { 0x00000000, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// HWRegs
      { 0x00000000, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// CCR
      { 0x00000000, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
    {	// HWRegs64
      { 0x00000000, },	// sub_32
      { 0x00000000, },	// sub_fpeven
      { 0x00000000, },	// sub_fpodd
    },
  };
  assert(A && B && "Missing regclass");
  --Idx;
  assert(Idx < 3 && "Bad subreg");
  const unsigned *TV = Table[B->getID()][Idx];
  const unsigned *SC = A->getSubClassMask();
  for (unsigned i = 0; i != 1; ++i)
    if (unsigned Common = TV[i] & SC[i])
      return getRegClass(32*i + CountTrailingZeros_32(Common));
  return 0;
}

extern const MCRegisterDesc MipsRegDesc[];
MipsGenRegisterInfo::MipsGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour)
  : TargetRegisterInfo(MipsRegInfoDesc, RegisterClasses, RegisterClasses+10,
                 MipsSubRegIndexTable) {
  InitMCRegisterInfo(MipsRegDesc, 152, RA, MipsMCRegisterClasses, 10);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(4, Mips::A0, false );
    mapDwarfRegToLLVMReg(5, Mips::A1, false );
    mapDwarfRegToLLVMReg(6, Mips::A2, false );
    mapDwarfRegToLLVMReg(7, Mips::A3, false );
    mapDwarfRegToLLVMReg(1, Mips::AT, false );
    mapDwarfRegToLLVMReg(32, Mips::F0, false );
    mapDwarfRegToLLVMReg(33, Mips::F1, false );
    mapDwarfRegToLLVMReg(34, Mips::F2, false );
    mapDwarfRegToLLVMReg(35, Mips::F3, false );
    mapDwarfRegToLLVMReg(36, Mips::F4, false );
    mapDwarfRegToLLVMReg(37, Mips::F5, false );
    mapDwarfRegToLLVMReg(38, Mips::F6, false );
    mapDwarfRegToLLVMReg(39, Mips::F7, false );
    mapDwarfRegToLLVMReg(40, Mips::F8, false );
    mapDwarfRegToLLVMReg(41, Mips::F9, false );
    mapDwarfRegToLLVMReg(42, Mips::F10, false );
    mapDwarfRegToLLVMReg(43, Mips::F11, false );
    mapDwarfRegToLLVMReg(44, Mips::F12, false );
    mapDwarfRegToLLVMReg(45, Mips::F13, false );
    mapDwarfRegToLLVMReg(46, Mips::F14, false );
    mapDwarfRegToLLVMReg(47, Mips::F15, false );
    mapDwarfRegToLLVMReg(48, Mips::F16, false );
    mapDwarfRegToLLVMReg(49, Mips::F17, false );
    mapDwarfRegToLLVMReg(50, Mips::F18, false );
    mapDwarfRegToLLVMReg(51, Mips::F19, false );
    mapDwarfRegToLLVMReg(52, Mips::F20, false );
    mapDwarfRegToLLVMReg(53, Mips::F21, false );
    mapDwarfRegToLLVMReg(54, Mips::F22, false );
    mapDwarfRegToLLVMReg(55, Mips::F23, false );
    mapDwarfRegToLLVMReg(56, Mips::F24, false );
    mapDwarfRegToLLVMReg(57, Mips::F25, false );
    mapDwarfRegToLLVMReg(58, Mips::F26, false );
    mapDwarfRegToLLVMReg(59, Mips::F27, false );
    mapDwarfRegToLLVMReg(60, Mips::F28, false );
    mapDwarfRegToLLVMReg(61, Mips::F29, false );
    mapDwarfRegToLLVMReg(62, Mips::F30, false );
    mapDwarfRegToLLVMReg(63, Mips::F31, false );
    mapDwarfRegToLLVMReg(30, Mips::FP, false );
    mapDwarfRegToLLVMReg(28, Mips::GP, false );
    mapDwarfRegToLLVMReg(64, Mips::HI, false );
    mapDwarfRegToLLVMReg(26, Mips::K0, false );
    mapDwarfRegToLLVMReg(27, Mips::K1, false );
    mapDwarfRegToLLVMReg(65, Mips::LO, false );
    mapDwarfRegToLLVMReg(31, Mips::RA, false );
    mapDwarfRegToLLVMReg(16, Mips::S0, false );
    mapDwarfRegToLLVMReg(17, Mips::S1, false );
    mapDwarfRegToLLVMReg(18, Mips::S2, false );
    mapDwarfRegToLLVMReg(19, Mips::S3, false );
    mapDwarfRegToLLVMReg(20, Mips::S4, false );
    mapDwarfRegToLLVMReg(21, Mips::S5, false );
    mapDwarfRegToLLVMReg(22, Mips::S6, false );
    mapDwarfRegToLLVMReg(23, Mips::S7, false );
    mapDwarfRegToLLVMReg(29, Mips::SP, false );
    mapDwarfRegToLLVMReg(8, Mips::T0, false );
    mapDwarfRegToLLVMReg(9, Mips::T1, false );
    mapDwarfRegToLLVMReg(10, Mips::T2, false );
    mapDwarfRegToLLVMReg(11, Mips::T3, false );
    mapDwarfRegToLLVMReg(12, Mips::T4, false );
    mapDwarfRegToLLVMReg(13, Mips::T5, false );
    mapDwarfRegToLLVMReg(14, Mips::T6, false );
    mapDwarfRegToLLVMReg(15, Mips::T7, false );
    mapDwarfRegToLLVMReg(24, Mips::T8, false );
    mapDwarfRegToLLVMReg(25, Mips::T9, false );
    mapDwarfRegToLLVMReg(2, Mips::V0, false );
    mapDwarfRegToLLVMReg(3, Mips::V1, false );
    mapDwarfRegToLLVMReg(0, Mips::ZERO, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(4, Mips::A0, true );
    mapDwarfRegToLLVMReg(5, Mips::A1, true );
    mapDwarfRegToLLVMReg(6, Mips::A2, true );
    mapDwarfRegToLLVMReg(7, Mips::A3, true );
    mapDwarfRegToLLVMReg(1, Mips::AT, true );
    mapDwarfRegToLLVMReg(32, Mips::F0, true );
    mapDwarfRegToLLVMReg(33, Mips::F1, true );
    mapDwarfRegToLLVMReg(34, Mips::F2, true );
    mapDwarfRegToLLVMReg(35, Mips::F3, true );
    mapDwarfRegToLLVMReg(36, Mips::F4, true );
    mapDwarfRegToLLVMReg(37, Mips::F5, true );
    mapDwarfRegToLLVMReg(38, Mips::F6, true );
    mapDwarfRegToLLVMReg(39, Mips::F7, true );
    mapDwarfRegToLLVMReg(40, Mips::F8, true );
    mapDwarfRegToLLVMReg(41, Mips::F9, true );
    mapDwarfRegToLLVMReg(42, Mips::F10, true );
    mapDwarfRegToLLVMReg(43, Mips::F11, true );
    mapDwarfRegToLLVMReg(44, Mips::F12, true );
    mapDwarfRegToLLVMReg(45, Mips::F13, true );
    mapDwarfRegToLLVMReg(46, Mips::F14, true );
    mapDwarfRegToLLVMReg(47, Mips::F15, true );
    mapDwarfRegToLLVMReg(48, Mips::F16, true );
    mapDwarfRegToLLVMReg(49, Mips::F17, true );
    mapDwarfRegToLLVMReg(50, Mips::F18, true );
    mapDwarfRegToLLVMReg(51, Mips::F19, true );
    mapDwarfRegToLLVMReg(52, Mips::F20, true );
    mapDwarfRegToLLVMReg(53, Mips::F21, true );
    mapDwarfRegToLLVMReg(54, Mips::F22, true );
    mapDwarfRegToLLVMReg(55, Mips::F23, true );
    mapDwarfRegToLLVMReg(56, Mips::F24, true );
    mapDwarfRegToLLVMReg(57, Mips::F25, true );
    mapDwarfRegToLLVMReg(58, Mips::F26, true );
    mapDwarfRegToLLVMReg(59, Mips::F27, true );
    mapDwarfRegToLLVMReg(60, Mips::F28, true );
    mapDwarfRegToLLVMReg(61, Mips::F29, true );
    mapDwarfRegToLLVMReg(62, Mips::F30, true );
    mapDwarfRegToLLVMReg(63, Mips::F31, true );
    mapDwarfRegToLLVMReg(30, Mips::FP, true );
    mapDwarfRegToLLVMReg(28, Mips::GP, true );
    mapDwarfRegToLLVMReg(64, Mips::HI, true );
    mapDwarfRegToLLVMReg(26, Mips::K0, true );
    mapDwarfRegToLLVMReg(27, Mips::K1, true );
    mapDwarfRegToLLVMReg(65, Mips::LO, true );
    mapDwarfRegToLLVMReg(31, Mips::RA, true );
    mapDwarfRegToLLVMReg(16, Mips::S0, true );
    mapDwarfRegToLLVMReg(17, Mips::S1, true );
    mapDwarfRegToLLVMReg(18, Mips::S2, true );
    mapDwarfRegToLLVMReg(19, Mips::S3, true );
    mapDwarfRegToLLVMReg(20, Mips::S4, true );
    mapDwarfRegToLLVMReg(21, Mips::S5, true );
    mapDwarfRegToLLVMReg(22, Mips::S6, true );
    mapDwarfRegToLLVMReg(23, Mips::S7, true );
    mapDwarfRegToLLVMReg(29, Mips::SP, true );
    mapDwarfRegToLLVMReg(8, Mips::T0, true );
    mapDwarfRegToLLVMReg(9, Mips::T1, true );
    mapDwarfRegToLLVMReg(10, Mips::T2, true );
    mapDwarfRegToLLVMReg(11, Mips::T3, true );
    mapDwarfRegToLLVMReg(12, Mips::T4, true );
    mapDwarfRegToLLVMReg(13, Mips::T5, true );
    mapDwarfRegToLLVMReg(14, Mips::T6, true );
    mapDwarfRegToLLVMReg(15, Mips::T7, true );
    mapDwarfRegToLLVMReg(24, Mips::T8, true );
    mapDwarfRegToLLVMReg(25, Mips::T9, true );
    mapDwarfRegToLLVMReg(2, Mips::V0, true );
    mapDwarfRegToLLVMReg(3, Mips::V1, true );
    mapDwarfRegToLLVMReg(0, Mips::ZERO, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(Mips::A0, 4, false );
    mapLLVMRegToDwarfReg(Mips::A0_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::A1, 5, false );
    mapLLVMRegToDwarfReg(Mips::A1_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::A2, 6, false );
    mapLLVMRegToDwarfReg(Mips::A2_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::A3, 7, false );
    mapLLVMRegToDwarfReg(Mips::A3_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::AT, 1, false );
    mapLLVMRegToDwarfReg(Mips::AT_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D0, -1, false );
    mapLLVMRegToDwarfReg(Mips::D0_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D1, -1, false );
    mapLLVMRegToDwarfReg(Mips::D1_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D2, -1, false );
    mapLLVMRegToDwarfReg(Mips::D2_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D3, -1, false );
    mapLLVMRegToDwarfReg(Mips::D3_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D4, -1, false );
    mapLLVMRegToDwarfReg(Mips::D4_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D5, -1, false );
    mapLLVMRegToDwarfReg(Mips::D5_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D6, -1, false );
    mapLLVMRegToDwarfReg(Mips::D6_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D7, -1, false );
    mapLLVMRegToDwarfReg(Mips::D7_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D8, -1, false );
    mapLLVMRegToDwarfReg(Mips::D8_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D9, -1, false );
    mapLLVMRegToDwarfReg(Mips::D9_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D10, -1, false );
    mapLLVMRegToDwarfReg(Mips::D10_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D11, -1, false );
    mapLLVMRegToDwarfReg(Mips::D11_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D12, -1, false );
    mapLLVMRegToDwarfReg(Mips::D12_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D13, -1, false );
    mapLLVMRegToDwarfReg(Mips::D13_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D14, -1, false );
    mapLLVMRegToDwarfReg(Mips::D14_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D15, -1, false );
    mapLLVMRegToDwarfReg(Mips::D15_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D16_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D17_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D18_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D19_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D20_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D21_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D22_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D23_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D24_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D25_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D26_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D27_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D28_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D29_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D30_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::D31_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::F0, 32, false );
    mapLLVMRegToDwarfReg(Mips::F1, 33, false );
    mapLLVMRegToDwarfReg(Mips::F2, 34, false );
    mapLLVMRegToDwarfReg(Mips::F3, 35, false );
    mapLLVMRegToDwarfReg(Mips::F4, 36, false );
    mapLLVMRegToDwarfReg(Mips::F5, 37, false );
    mapLLVMRegToDwarfReg(Mips::F6, 38, false );
    mapLLVMRegToDwarfReg(Mips::F7, 39, false );
    mapLLVMRegToDwarfReg(Mips::F8, 40, false );
    mapLLVMRegToDwarfReg(Mips::F9, 41, false );
    mapLLVMRegToDwarfReg(Mips::F10, 42, false );
    mapLLVMRegToDwarfReg(Mips::F11, 43, false );
    mapLLVMRegToDwarfReg(Mips::F12, 44, false );
    mapLLVMRegToDwarfReg(Mips::F13, 45, false );
    mapLLVMRegToDwarfReg(Mips::F14, 46, false );
    mapLLVMRegToDwarfReg(Mips::F15, 47, false );
    mapLLVMRegToDwarfReg(Mips::F16, 48, false );
    mapLLVMRegToDwarfReg(Mips::F17, 49, false );
    mapLLVMRegToDwarfReg(Mips::F18, 50, false );
    mapLLVMRegToDwarfReg(Mips::F19, 51, false );
    mapLLVMRegToDwarfReg(Mips::F20, 52, false );
    mapLLVMRegToDwarfReg(Mips::F21, 53, false );
    mapLLVMRegToDwarfReg(Mips::F22, 54, false );
    mapLLVMRegToDwarfReg(Mips::F23, 55, false );
    mapLLVMRegToDwarfReg(Mips::F24, 56, false );
    mapLLVMRegToDwarfReg(Mips::F25, 57, false );
    mapLLVMRegToDwarfReg(Mips::F26, 58, false );
    mapLLVMRegToDwarfReg(Mips::F27, 59, false );
    mapLLVMRegToDwarfReg(Mips::F28, 60, false );
    mapLLVMRegToDwarfReg(Mips::F29, 61, false );
    mapLLVMRegToDwarfReg(Mips::F30, 62, false );
    mapLLVMRegToDwarfReg(Mips::F31, 63, false );
    mapLLVMRegToDwarfReg(Mips::FCR31, -1, false );
    mapLLVMRegToDwarfReg(Mips::FP, 30, false );
    mapLLVMRegToDwarfReg(Mips::FP_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::GP, 28, false );
    mapLLVMRegToDwarfReg(Mips::GP_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::HI, 64, false );
    mapLLVMRegToDwarfReg(Mips::HI64, -1, false );
    mapLLVMRegToDwarfReg(Mips::HWR29, -1, false );
    mapLLVMRegToDwarfReg(Mips::HWR29_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::K0, 26, false );
    mapLLVMRegToDwarfReg(Mips::K0_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::K1, 27, false );
    mapLLVMRegToDwarfReg(Mips::K1_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::LO, 65, false );
    mapLLVMRegToDwarfReg(Mips::LO64, -1, false );
    mapLLVMRegToDwarfReg(Mips::RA, 31, false );
    mapLLVMRegToDwarfReg(Mips::RA_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S0, 16, false );
    mapLLVMRegToDwarfReg(Mips::S0_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S1, 17, false );
    mapLLVMRegToDwarfReg(Mips::S1_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S2, 18, false );
    mapLLVMRegToDwarfReg(Mips::S2_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S3, 19, false );
    mapLLVMRegToDwarfReg(Mips::S3_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S4, 20, false );
    mapLLVMRegToDwarfReg(Mips::S4_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S5, 21, false );
    mapLLVMRegToDwarfReg(Mips::S5_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S6, 22, false );
    mapLLVMRegToDwarfReg(Mips::S6_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::S7, 23, false );
    mapLLVMRegToDwarfReg(Mips::S7_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::SP, 29, false );
    mapLLVMRegToDwarfReg(Mips::SP_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T0, 8, false );
    mapLLVMRegToDwarfReg(Mips::T0_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T1, 9, false );
    mapLLVMRegToDwarfReg(Mips::T1_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T2, 10, false );
    mapLLVMRegToDwarfReg(Mips::T2_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T3, 11, false );
    mapLLVMRegToDwarfReg(Mips::T3_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T4, 12, false );
    mapLLVMRegToDwarfReg(Mips::T4_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T5, 13, false );
    mapLLVMRegToDwarfReg(Mips::T5_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T6, 14, false );
    mapLLVMRegToDwarfReg(Mips::T6_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T7, 15, false );
    mapLLVMRegToDwarfReg(Mips::T7_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T8, 24, false );
    mapLLVMRegToDwarfReg(Mips::T8_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::T9, 25, false );
    mapLLVMRegToDwarfReg(Mips::T9_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::V0, 2, false );
    mapLLVMRegToDwarfReg(Mips::V0_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::V1, 3, false );
    mapLLVMRegToDwarfReg(Mips::V1_64, -1, false );
    mapLLVMRegToDwarfReg(Mips::ZERO, 0, false );
    mapLLVMRegToDwarfReg(Mips::ZERO_64, -1, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(Mips::A0, 4, true );
    mapLLVMRegToDwarfReg(Mips::A0_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::A1, 5, true );
    mapLLVMRegToDwarfReg(Mips::A1_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::A2, 6, true );
    mapLLVMRegToDwarfReg(Mips::A2_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::A3, 7, true );
    mapLLVMRegToDwarfReg(Mips::A3_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::AT, 1, true );
    mapLLVMRegToDwarfReg(Mips::AT_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D0, -1, true );
    mapLLVMRegToDwarfReg(Mips::D0_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D1, -1, true );
    mapLLVMRegToDwarfReg(Mips::D1_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D2, -1, true );
    mapLLVMRegToDwarfReg(Mips::D2_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D3, -1, true );
    mapLLVMRegToDwarfReg(Mips::D3_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D4, -1, true );
    mapLLVMRegToDwarfReg(Mips::D4_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D5, -1, true );
    mapLLVMRegToDwarfReg(Mips::D5_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D6, -1, true );
    mapLLVMRegToDwarfReg(Mips::D6_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D7, -1, true );
    mapLLVMRegToDwarfReg(Mips::D7_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D8, -1, true );
    mapLLVMRegToDwarfReg(Mips::D8_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D9, -1, true );
    mapLLVMRegToDwarfReg(Mips::D9_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D10, -1, true );
    mapLLVMRegToDwarfReg(Mips::D10_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D11, -1, true );
    mapLLVMRegToDwarfReg(Mips::D11_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D12, -1, true );
    mapLLVMRegToDwarfReg(Mips::D12_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D13, -1, true );
    mapLLVMRegToDwarfReg(Mips::D13_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D14, -1, true );
    mapLLVMRegToDwarfReg(Mips::D14_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D15, -1, true );
    mapLLVMRegToDwarfReg(Mips::D15_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D16_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D17_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D18_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D19_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D20_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D21_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D22_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D23_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D24_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D25_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D26_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D27_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D28_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D29_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D30_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::D31_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::F0, 32, true );
    mapLLVMRegToDwarfReg(Mips::F1, 33, true );
    mapLLVMRegToDwarfReg(Mips::F2, 34, true );
    mapLLVMRegToDwarfReg(Mips::F3, 35, true );
    mapLLVMRegToDwarfReg(Mips::F4, 36, true );
    mapLLVMRegToDwarfReg(Mips::F5, 37, true );
    mapLLVMRegToDwarfReg(Mips::F6, 38, true );
    mapLLVMRegToDwarfReg(Mips::F7, 39, true );
    mapLLVMRegToDwarfReg(Mips::F8, 40, true );
    mapLLVMRegToDwarfReg(Mips::F9, 41, true );
    mapLLVMRegToDwarfReg(Mips::F10, 42, true );
    mapLLVMRegToDwarfReg(Mips::F11, 43, true );
    mapLLVMRegToDwarfReg(Mips::F12, 44, true );
    mapLLVMRegToDwarfReg(Mips::F13, 45, true );
    mapLLVMRegToDwarfReg(Mips::F14, 46, true );
    mapLLVMRegToDwarfReg(Mips::F15, 47, true );
    mapLLVMRegToDwarfReg(Mips::F16, 48, true );
    mapLLVMRegToDwarfReg(Mips::F17, 49, true );
    mapLLVMRegToDwarfReg(Mips::F18, 50, true );
    mapLLVMRegToDwarfReg(Mips::F19, 51, true );
    mapLLVMRegToDwarfReg(Mips::F20, 52, true );
    mapLLVMRegToDwarfReg(Mips::F21, 53, true );
    mapLLVMRegToDwarfReg(Mips::F22, 54, true );
    mapLLVMRegToDwarfReg(Mips::F23, 55, true );
    mapLLVMRegToDwarfReg(Mips::F24, 56, true );
    mapLLVMRegToDwarfReg(Mips::F25, 57, true );
    mapLLVMRegToDwarfReg(Mips::F26, 58, true );
    mapLLVMRegToDwarfReg(Mips::F27, 59, true );
    mapLLVMRegToDwarfReg(Mips::F28, 60, true );
    mapLLVMRegToDwarfReg(Mips::F29, 61, true );
    mapLLVMRegToDwarfReg(Mips::F30, 62, true );
    mapLLVMRegToDwarfReg(Mips::F31, 63, true );
    mapLLVMRegToDwarfReg(Mips::FCR31, -1, true );
    mapLLVMRegToDwarfReg(Mips::FP, 30, true );
    mapLLVMRegToDwarfReg(Mips::FP_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::GP, 28, true );
    mapLLVMRegToDwarfReg(Mips::GP_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::HI, 64, true );
    mapLLVMRegToDwarfReg(Mips::HI64, -1, true );
    mapLLVMRegToDwarfReg(Mips::HWR29, -1, true );
    mapLLVMRegToDwarfReg(Mips::HWR29_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::K0, 26, true );
    mapLLVMRegToDwarfReg(Mips::K0_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::K1, 27, true );
    mapLLVMRegToDwarfReg(Mips::K1_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::LO, 65, true );
    mapLLVMRegToDwarfReg(Mips::LO64, -1, true );
    mapLLVMRegToDwarfReg(Mips::RA, 31, true );
    mapLLVMRegToDwarfReg(Mips::RA_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S0, 16, true );
    mapLLVMRegToDwarfReg(Mips::S0_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S1, 17, true );
    mapLLVMRegToDwarfReg(Mips::S1_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S2, 18, true );
    mapLLVMRegToDwarfReg(Mips::S2_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S3, 19, true );
    mapLLVMRegToDwarfReg(Mips::S3_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S4, 20, true );
    mapLLVMRegToDwarfReg(Mips::S4_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S5, 21, true );
    mapLLVMRegToDwarfReg(Mips::S5_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S6, 22, true );
    mapLLVMRegToDwarfReg(Mips::S6_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::S7, 23, true );
    mapLLVMRegToDwarfReg(Mips::S7_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::SP, 29, true );
    mapLLVMRegToDwarfReg(Mips::SP_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T0, 8, true );
    mapLLVMRegToDwarfReg(Mips::T0_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T1, 9, true );
    mapLLVMRegToDwarfReg(Mips::T1_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T2, 10, true );
    mapLLVMRegToDwarfReg(Mips::T2_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T3, 11, true );
    mapLLVMRegToDwarfReg(Mips::T3_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T4, 12, true );
    mapLLVMRegToDwarfReg(Mips::T4_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T5, 13, true );
    mapLLVMRegToDwarfReg(Mips::T5_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T6, 14, true );
    mapLLVMRegToDwarfReg(Mips::T6_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T7, 15, true );
    mapLLVMRegToDwarfReg(Mips::T7_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T8, 24, true );
    mapLLVMRegToDwarfReg(Mips::T8_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::T9, 25, true );
    mapLLVMRegToDwarfReg(Mips::T9_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::V0, 2, true );
    mapLLVMRegToDwarfReg(Mips::V0_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::V1, 3, true );
    mapLLVMRegToDwarfReg(Mips::V1_64, -1, true );
    mapLLVMRegToDwarfReg(Mips::ZERO, 0, true );
    mapLLVMRegToDwarfReg(Mips::ZERO_64, -1, true );
    break;
  }
}



} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

