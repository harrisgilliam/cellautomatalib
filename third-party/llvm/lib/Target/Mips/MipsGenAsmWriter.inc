//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// BUNDLE
    536870930U,	// ADD
    536870935U,	// ADDi
    536870941U,	// ADDiu
    536870948U,	// ADDu
    1073741866U,	// ADJCALLSTACKDOWN
    1073741885U,	// ADJCALLSTACKUP
    536870990U,	// AND
    536870990U,	// AND64
    537395283U,	// ANDi
    89U,	// ATMACRO
    537133153U,	// ATOMIC_CMP_SWAP_I16
    537133153U,	// ATOMIC_CMP_SWAP_I16_P8
    537133173U,	// ATOMIC_CMP_SWAP_I32
    537133173U,	// ATOMIC_CMP_SWAP_I32_P8
    537133193U,	// ATOMIC_CMP_SWAP_I64
    537133193U,	// ATOMIC_CMP_SWAP_I64_P8
    537133213U,	// ATOMIC_CMP_SWAP_I8
    537133213U,	// ATOMIC_CMP_SWAP_I8_P8
    536871088U,	// ATOMIC_LOAD_ADD_I16
    536871088U,	// ATOMIC_LOAD_ADD_I16_P8
    536871108U,	// ATOMIC_LOAD_ADD_I32
    536871108U,	// ATOMIC_LOAD_ADD_I32_P8
    536871128U,	// ATOMIC_LOAD_ADD_I64
    536871128U,	// ATOMIC_LOAD_ADD_I64_P8
    536871148U,	// ATOMIC_LOAD_ADD_I8
    536871148U,	// ATOMIC_LOAD_ADD_I8_P8
    536871167U,	// ATOMIC_LOAD_AND_I16
    536871167U,	// ATOMIC_LOAD_AND_I16_P8
    536871187U,	// ATOMIC_LOAD_AND_I32
    536871187U,	// ATOMIC_LOAD_AND_I32_P8
    536871207U,	// ATOMIC_LOAD_AND_I64
    536871207U,	// ATOMIC_LOAD_AND_I64_P8
    536871227U,	// ATOMIC_LOAD_AND_I8
    536871227U,	// ATOMIC_LOAD_AND_I8_P8
    536871246U,	// ATOMIC_LOAD_NAND_I16
    536871246U,	// ATOMIC_LOAD_NAND_I16_P8
    536871267U,	// ATOMIC_LOAD_NAND_I32
    536871267U,	// ATOMIC_LOAD_NAND_I32_P8
    536871288U,	// ATOMIC_LOAD_NAND_I64
    536871288U,	// ATOMIC_LOAD_NAND_I64_P8
    536871309U,	// ATOMIC_LOAD_NAND_I8
    536871309U,	// ATOMIC_LOAD_NAND_I8_P8
    536871329U,	// ATOMIC_LOAD_OR_I16
    536871329U,	// ATOMIC_LOAD_OR_I16_P8
    536871348U,	// ATOMIC_LOAD_OR_I32
    536871348U,	// ATOMIC_LOAD_OR_I32_P8
    536871367U,	// ATOMIC_LOAD_OR_I64
    536871367U,	// ATOMIC_LOAD_OR_I64_P8
    536871386U,	// ATOMIC_LOAD_OR_I8
    536871386U,	// ATOMIC_LOAD_OR_I8_P8
    536871404U,	// ATOMIC_LOAD_SUB_I16
    536871404U,	// ATOMIC_LOAD_SUB_I16_P8
    536871424U,	// ATOMIC_LOAD_SUB_I32
    536871424U,	// ATOMIC_LOAD_SUB_I32_P8
    536871444U,	// ATOMIC_LOAD_SUB_I64
    536871444U,	// ATOMIC_LOAD_SUB_I64_P8
    536871464U,	// ATOMIC_LOAD_SUB_I8
    536871464U,	// ATOMIC_LOAD_SUB_I8_P8
    536871483U,	// ATOMIC_LOAD_XOR_I16
    536871483U,	// ATOMIC_LOAD_XOR_I16_P8
    536871503U,	// ATOMIC_LOAD_XOR_I32
    536871503U,	// ATOMIC_LOAD_XOR_I32_P8
    536871523U,	// ATOMIC_LOAD_XOR_I64
    536871523U,	// ATOMIC_LOAD_XOR_I64_P8
    536871543U,	// ATOMIC_LOAD_XOR_I8
    536871543U,	// ATOMIC_LOAD_XOR_I8_P8
    536871562U,	// ATOMIC_SWAP_I16
    536871562U,	// ATOMIC_SWAP_I16_P8
    536871578U,	// ATOMIC_SWAP_I32
    536871578U,	// ATOMIC_SWAP_I32_P8
    536871594U,	// ATOMIC_SWAP_I64
    536871594U,	// ATOMIC_SWAP_I64_P8
    536871610U,	// ATOMIC_SWAP_I8
    536871610U,	// ATOMIC_SWAP_I8_P8
    603980489U,	// B
    603980492U,	// BC1F
    603980498U,	// BC1T
    536871640U,	// BEQ
    536871640U,	// BEQ64
    537920221U,	// BGEZ
    537920221U,	// BGEZ64
    537920227U,	// BGEZAL
    537920235U,	// BGTZ
    537920235U,	// BGTZ64
    537920241U,	// BLEZ
    537920241U,	// BLEZ64
    537920247U,	// BLTZ
    537920247U,	// BLTZ64
    537920253U,	// BLTZAL
    536871685U,	// BNE
    536871685U,	// BNE64
    0U,	// BuildPairF64
    537920266U,	// CEIL_L_D64
    537920276U,	// CEIL_L_S
    537920286U,	// CEIL_W_D32
    537920286U,	// CEIL_W_D64
    537920296U,	// CEIL_W_S
    537920306U,	// CFC1
    537920312U,	// CLO
    537920317U,	// CLZ
    603980610U,	// CPLOAD
    603980619U,	// CPRESTORE
    1744831319U,	// CTC1
    537920349U,	// CVT_D32_S
    537920358U,	// CVT_D32_W
    537920367U,	// CVT_D64_L
    537920349U,	// CVT_D64_S
    537920358U,	// CVT_D64_W
    537920376U,	// CVT_L_D64
    537920385U,	// CVT_L_S
    537920394U,	// CVT_S_D32
    537920394U,	// CVT_S_D64
    537920403U,	// CVT_S_L
    537920412U,	// CVT_S_W
    537920421U,	// CVT_W_D32
    537920421U,	// CVT_W_D64
    537920430U,	// CVT_W_S
    536871863U,	// DADDiu
    536871871U,	// DADDu
    537395283U,	// DANDi
    537920454U,	// DCLO
    537920460U,	// DCLZ
    537658322U,	// DEXT
    537658328U,	// DINS
    537920478U,	// DMFC1
    1744831461U,	// DMTC1
    537920492U,	// DMULT
    537920499U,	// DMULTu
    536871931U,	// DROTR
    545260546U,	// DROTRV
    537920522U,	// DSBH
    537920528U,	// DSDIV
    537920541U,	// DSHD
    536871971U,	// DSLL
    538969123U,	// DSLL64_32
    545260585U,	// DSLLV
    536871984U,	// DSRA
    545260598U,	// DSRAV
    536871997U,	// DSRL
    545260611U,	// DSRLV
    536872010U,	// DSUBu
    537920593U,	// DUDIV
    553648157U,	// DynAlloc
    553649079U,	// DynAlloc64
    537658463U,	// EXT
    0U,	// ExtractElementF64
    537920612U,	// FABS_D32
    537920612U,	// FABS_D64
    537920619U,	// FABS_S
    536872050U,	// FADD_D32
    536872050U,	// FADD_D64
    536872057U,	// FADD_S
    2348811392U,	// FCMP_D32
    2348811392U,	// FCMP_D64
    2415920256U,	// FCMP_S32
    536872067U,	// FDIV_D32
    536872067U,	// FDIV_D64
    536872074U,	// FDIV_S
    537920657U,	// FLOOR_L_D64
    537920668U,	// FLOOR_L_S
    537920679U,	// FLOOR_W_D32
    537920679U,	// FLOOR_W_D64
    537920690U,	// FLOOR_W_S
    537920701U,	// FMOV_D32
    537920701U,	// FMOV_D64
    537920708U,	// FMOV_S
    536872139U,	// FMUL_D32
    536872139U,	// FMUL_D64
    536872146U,	// FMUL_S
    537920729U,	// FNEG_D32
    537920729U,	// FNEG_D64
    537920736U,	// FNEG_S
    537920743U,	// FSQRT_D32
    537920743U,	// FSQRT_D64
    537920751U,	// FSQRT_S
    536872183U,	// FSUB_D32
    536872183U,	// FSUB_D64
    536872190U,	// FSUB_S
    537658629U,	// INS
    603981066U,	// J
    603981069U,	// JAL
    603981074U,	// JALR
    603981074U,	// JALR64
    603981080U,	// JR
    603981080U,	// JR64
    562038044U,	// LB
    562038044U,	// LB64
    562038044U,	// LB64_P8
    562038044U,	// LB_P8
    562038048U,	// LBu
    562038048U,	// LBu64
    562038048U,	// LBu64_P8
    562038048U,	// LBu_P8
    562038053U,	// LD
    562038057U,	// LDC1
    562038057U,	// LDC164
    562038057U,	// LDC164_P8
    562038053U,	// LD_P8
    553648157U,	// LEA_ADDiu
    553649079U,	// LEA_ADDiu64
    562038063U,	// LH
    562038063U,	// LH64
    562038063U,	// LH64_P8
    562038063U,	// LH_P8
    562038067U,	// LHu
    562038067U,	// LHu64
    562038067U,	// LHu64_P8
    562038067U,	// LHu_P8
    562038072U,	// LL
    562038076U,	// LLD
    562038076U,	// LLD_P8
    562038072U,	// LL_P8
    570426689U,	// LUi
    570426689U,	// LUi64
    562038086U,	// LW
    562038086U,	// LW64
    562038086U,	// LW64_P8
    562038090U,	// LWC1
    562038090U,	// LWC1_P8
    0U,	// LWL
    0U,	// LWL_P8
    0U,	// LWR
    0U,	// LWR_P8
    562038086U,	// LW_P8
    562038096U,	// LWu64
    562038096U,	// LWu64_P8
    1365U,	// MACRO
    537920864U,	// MADD
    537920870U,	// MADDU
    537920877U,	// MFC1
    603981171U,	// MFHI
    603981171U,	// MFHI64
    603981177U,	// MFLO
    603981177U,	// MFLO64
    1407U,	// MOVCCRToCCR
    540018061U,	// MOVF_D32
    540018061U,	// MOVF_D64
    540018069U,	// MOVF_I
    540018069U,	// MOVF_I64
    540018075U,	// MOVF_S
    536872355U,	// MOVN_I64_D64
    536872363U,	// MOVN_I64_I
    536872363U,	// MOVN_I64_I64
    536872369U,	// MOVN_I64_S
    536872355U,	// MOVN_I_D32
    536872355U,	// MOVN_I_D64
    536872363U,	// MOVN_I_I
    536872363U,	// MOVN_I_I64
    536872369U,	// MOVN_I_S
    540018105U,	// MOVT_D32
    540018105U,	// MOVT_D64
    540018113U,	// MOVT_I
    540018113U,	// MOVT_I64
    540018119U,	// MOVT_S
    536872399U,	// MOVZ_I64_D64
    536872407U,	// MOVZ_I64_I
    536872407U,	// MOVZ_I64_I64
    536872413U,	// MOVZ_I64_S
    536872399U,	// MOVZ_I_D32
    536872399U,	// MOVZ_I_D64
    536872407U,	// MOVZ_I_I
    536872407U,	// MOVZ_I_I64
    536872413U,	// MOVZ_I_S
    537920997U,	// MSUB
    537921003U,	// MSUBU
    1744831986U,	// MTC1
    603981304U,	// MTHI
    603981304U,	// MTHI64
    603981310U,	// MTLO
    603981310U,	// MTLO64
    536872452U,	// MUL
    537921033U,	// MULT
    537921039U,	// MULTu
    1558U,	// NOAT
    1568U,	// NOMACRO
    1581U,	// NOP
    536872497U,	// NOR
    536872497U,	// NOR64
    1590U,	// NOREORDER
    536872517U,	// OR
    536872517U,	// OR64
    537396809U,	// ORi
    537396809U,	// ORi64
    537921102U,	// RDHWR
    537921102U,	// RDHWR64
    1621U,	// REORDER
    603981080U,	// RET
    536872546U,	// ROTR
    545261160U,	// ROTRV
    537921135U,	// ROUND_L_D64
    537921146U,	// ROUND_L_S
    537921157U,	// ROUND_W_D32
    537921157U,	// ROUND_W_D64
    537921168U,	// ROUND_W_S
    562038427U,	// SB
    562038427U,	// SB64
    562038427U,	// SB64_P8
    562038427U,	// SB_P8
    1946158751U,	// SC
    1946158755U,	// SCD
    1946158755U,	// SCD_P8
    1946158751U,	// SC_P8
    562038440U,	// SD
    562038444U,	// SDC1
    562038444U,	// SDC164
    562038444U,	// SDC164_P8
    537921202U,	// SDIV
    562038440U,	// SD_P8
    537921214U,	// SEB
    537921219U,	// SEH
    562038472U,	// SH
    562038472U,	// SH64
    562038472U,	// SH64_P8
    562038472U,	// SH_P8
    536872652U,	// SLL
    541066956U,	// SLL64_32
    541066956U,	// SLL64_64
    545261265U,	// SLLV
    536872663U,	// SLT
    536872663U,	// SLT64
    536872668U,	// SLTi
    536872668U,	// SLTi64
    536872674U,	// SLTiu
    536872674U,	// SLTiu64
    536872681U,	// SLTu
    536872681U,	// SLTu64
    536872687U,	// SRA
    545261300U,	// SRAV
    536872698U,	// SRL
    545261311U,	// SRLV
    536872709U,	// SUB
    536872714U,	// SUBu
    562038544U,	// SW
    562038544U,	// SW64
    562038544U,	// SW64_P8
    562038548U,	// SWC1
    562038548U,	// SWC1_P8
    0U,	// SWL
    0U,	// SWL_P8
    0U,	// SWR
    0U,	// SWR_P8
    562038544U,	// SW_P8
    603981594U,	// SYNC
    537921312U,	// TRUNC_L_D64
    537921323U,	// TRUNC_L_S
    537921334U,	// TRUNC_W_D32
    537921334U,	// TRUNC_W_D64
    537921345U,	// TRUNC_W_S
    537921356U,	// UDIV
    562038617U,	// ULD
    562038617U,	// ULD_P8
    562038622U,	// ULH
    562038622U,	// ULH64
    562038622U,	// ULH64_P8
    562038622U,	// ULH_P8
    562038627U,	// ULHu
    562038627U,	// ULHu64
    562038627U,	// ULHu64_P8
    562038627U,	// ULHu_P8
    562038633U,	// ULW
    562038633U,	// ULW64
    562038633U,	// ULW64_P8
    562038633U,	// ULW_P8
    562038638U,	// USD
    562038638U,	// USD_P8
    562038643U,	// USH
    562038643U,	// USH64
    562038643U,	// USH64_P8
    562038643U,	// USH_P8
    562038648U,	// USW
    562038648U,	// USW64
    562038648U,	// USW64_P8
    562038648U,	// USW_P8
    537921405U,	// WSBH
    536872835U,	// XOR
    536872835U,	// XOR64
    537397128U,	// XORi
    537397128U,	// XORi64
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000BUNDLE\000add\t\000addi\t\000addiu\t\000addu\t\000!ADJCALL"
    "STACKDOWN \000!ADJCALLSTACKUP \000and\t\000andi\t\000.set\tat\000atomic"
    "_cmp_swap_16\t\000atomic_cmp_swap_32\t\000atomic_cmp_swap_64\t\000atomi"
    "c_cmp_swap_8\t\000atomic_load_add_16\t\000atomic_load_add_32\t\000atomi"
    "c_load_add_64\t\000atomic_load_add_8\t\000atomic_load_and_16\t\000atomi"
    "c_load_and_32\t\000atomic_load_and_64\t\000atomic_load_and_8\t\000atomi"
    "c_load_nand_16\t\000atomic_load_nand_32\t\000atomic_load_nand_64\t\000a"
    "tomic_load_nand_8\t\000atomic_load_or_16\t\000atomic_load_or_32\t\000at"
    "omic_load_or_64\t\000atomic_load_or_8\t\000atomic_load_sub_16\t\000atom"
    "ic_load_sub_32\t\000atomic_load_sub_64\t\000atomic_load_sub_8\t\000atom"
    "ic_load_xor_16\t\000atomic_load_xor_32\t\000atomic_load_xor_64\t\000ato"
    "mic_load_xor_8\t\000atomic_swap_16\t\000atomic_swap_32\t\000atomic_swap"
    "_64\t\000atomic_swap_8\t\000b\t\000bc1f\t\000bc1t\t\000beq\t\000bgez\t\000"
    "bgezal\t\000bgtz\t\000blez\t\000bltz\t\000bltzal\t\000bne\t\000ceil.l.d"
    "\t\000ceil.l.s\t\000ceil.w.d\t\000ceil.w.s\t\000cfc1\t\000clo\t\000clz\t"
    "\000.cpload\t\000.cprestore\t\000ctc1\t\000cvt.d.s\t\000cvt.d.w\t\000cv"
    "t.d.l\t\000cvt.l.d\t\000cvt.l.s\t\000cvt.s.d\t\000cvt.s.l\t\000cvt.s.w\t"
    "\000cvt.w.d\t\000cvt.w.s\t\000daddiu\t\000daddu\t\000dclo\t\000dclz\t\000"
    "dext \000dins \000dmfc1\t\000dmtc1\t\000dmult\t\000dmultu\t\000drotr\t\000"
    "drotrv\t\000dsbh\t\000ddiv\t$zero, \000dshd\t\000dsll\t\000dsllv\t\000d"
    "sra\t\000dsrav\t\000dsrl\t\000dsrlv\t\000dsubu\t\000ddivu\t$zero, \000e"
    "xt \000abs.d\t\000abs.s\t\000add.d\t\000add.s\t\000c.\000div.d\t\000div"
    ".s\t\000floor.l.d\t\000floor.l.s\t\000floor.w.d\t\000floor.w.s\t\000mov"
    ".d\t\000mov.s\t\000mul.d\t\000mul.s\t\000neg.d\t\000neg.s\t\000sqrt.d\t"
    "\000sqrt.s\t\000sub.d\t\000sub.s\t\000ins \000j\t\000jal\t\000jalr\t\000"
    "jr\t\000lb\t\000lbu\t\000ld\t\000ldc1\t\000lh\t\000lhu\t\000ll\t\000lld"
    "\t\000lui\t\000lw\t\000lwc1\t\000lwu\t\000.set\tmacro\000madd\t\000madd"
    "u\t\000mfc1\t\000mfhi\t\000mflo\t\000# MOVCCRToCCR\000movf.d\t\000movf\t"
    "\000movf.s\t\000movn.d\t\000movn\t\000movn.s\t\000movt.d\t\000movt\t\000"
    "movt.s\t\000movz.d\t\000movz\t\000movz.s\t\000msub\t\000msubu\t\000mtc1"
    "\t\000mthi\t\000mtlo\t\000mul\t\000mult\t\000multu\t\000.set\tnoat\000."
    "set\tnomacro\000nop\000nor\t\000.set\tnoreorder\000or\t\000ori\t\000rdh"
    "wr\t\000.set\treorder\000rotr\t\000rotrv\t\000round.l.d\t\000round.l.s\t"
    "\000round.w.d\t\000round.w.s\t\000sb\t\000sc\t\000scd\t\000sd\t\000sdc1"
    "\t\000div\t$zero, \000seb\t\000seh\t\000sh\t\000sll\t\000sllv\t\000slt\t"
    "\000slti\t\000sltiu\t\000sltu\t\000sra\t\000srav\t\000srl\t\000srlv\t\000"
    "sub\t\000subu\t\000sw\t\000swc1\t\000sync \000trunc.l.d\t\000trunc.l.s\t"
    "\000trunc.w.d\t\000trunc.w.s\t\000divu\t$zero, \000uld\t\000ulh\t\000ul"
    "hu\t\000ulw\t\000usd\t\000ush\t\000usw\t\000wsbh\t\000xor\t\000xori\t\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, ATMACRO, MACRO, MOVCCRToCCR, NOAT, NOMACRO, NOP, NO...
    return;
    break;
  case 1:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 3:
    // CTC1, DMTC1, MTC1, SC, SCD, SCD_P8, SC_P8
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 4:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  }


  // Fragment 1 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    O << ", "; 
    break;
  case 1:
    // B, BC1F, BC1T, CPLOAD, CPRESTORE, J, JAL, JALR, JALR64, JR, JR64, MFHI...
    return;
    break;
  case 2:
    // CTC1, DMTC1, MTC1
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // SC, SCD, SCD_P8, SC_P8
    printMemOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 23) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // DROTRV, DSLLV, DSRAV, DSRLV, ROTRV, SLLV, SRAV, SRLV
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // DynAlloc, DynAlloc64, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 3:
    // LB, LB64, LB64_P8, LB_P8, LBu, LBu64, LBu64_P8, LBu_P8, LD, LDC1, LDC1...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // LUi, LUi64
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 20) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    O << ", "; 
    break;
  case 1:
    // BGEZ, BGEZ64, BGEZAL, BGTZ, BGTZ64, BLEZ, BLEZ64, BLTZ, BLTZ64, BLTZAL...
    return;
    break;
  case 2:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 3:
    // MOVF_D32, MOVF_D64, MOVF_I, MOVF_I64, MOVF_S, MOVT_D32, MOVT_D64, MOVT...
    O << ", $fcc0"; 
    return;
    break;
  case 4:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 19) & 1) {
    // ANDi, DANDi, DEXT, DINS, EXT, INS, ORi, ORi64, XORi, XORi64
    printUnsignedImm(MI, 2, O); 
  } else {
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SW...
    printOperand(MI, 2, O); 
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 18) & 1) {
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I16_P8, ATOMIC_CMP_SWAP_I32, ATOM...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_LOAD_ADD_I16, ATOMIC_...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 152 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 2, 4, 4, 6, 6, 8, 8, 10, 10, 13, 13, 16, 19,
    22, 16, 25, 28, 31, 22, 34, 38, 41, 25, 45, 49, 52, 31,
    56, 60, 63, 34, 67, 71, 75, 41, 79, 83, 87, 45, 91, 95,
    52, 99, 56, 103, 63, 107, 67, 111, 75, 115, 79, 119, 87, 123,
    91, 127, 13, 19, 16, 28, 22, 38, 25, 49, 31, 60, 34, 71,
    41, 83, 45, 95, 52, 99, 56, 103, 63, 107, 67, 111, 75, 115,
    79, 119, 87, 123, 91, 127, 131, 134, 134, 137, 137, 140, 140, 143,
    143, 146, 146, 149, 149, 152, 152, 155, 155, 158, 158, 161, 161, 164,
    164, 167, 167, 170, 170, 173, 173, 176, 176, 179, 179, 182, 182, 185,
    185, 187, 187, 189, 189, 192, 192, 195, 195, 198, 198, 201, 201, 204,
    204, 207, 207, 210, 210, 213, 213, 215, 215, 217, 217, 0
  };

  const char *AsmStrs =
    "4\0004\0005\0006\0007\000AT\000F0\000F2\000F1\000F4\000F6\000F3\000F8\000"
    "F10\000F5\000F12\000F14\000F7\000F16\000F18\000F9\000F20\000F22\000F11\000"
    "F24\000F26\000F13\000F28\000F30\000F15\000F17\000F19\000F21\000F23\000F"
    "25\000F27\000F29\000F31\00031\000FP\000GP\000hi\00029\00026\00027\000lo"
    "\000RA\00016\00017\00018\00019\00020\00021\00022\00023\000SP\0008\0009\000"
    "10\00011\00012\00013\00014\00015\00024\00025\0002\0003\000ZERO\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *MipsInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 393 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 158, 162, 167, 173, 178, 195, 210, 214, 220, 225, 233, 253, 276, 
    296, 319, 339, 362, 381, 403, 423, 446, 466, 489, 509, 532, 551, 573, 
    593, 616, 636, 659, 679, 702, 721, 743, 764, 788, 809, 833, 854, 878, 
    898, 921, 940, 962, 981, 1003, 1022, 1044, 1062, 1083, 1103, 1126, 1146, 1169, 
    1189, 1212, 1231, 1253, 1273, 1296, 1316, 1339, 1359, 1382, 1401, 1423, 1439, 1458, 
    1474, 1493, 1509, 1528, 1543, 1561, 1563, 1568, 1573, 1577, 1583, 1588, 1595, 1602, 
    1607, 1614, 1619, 1626, 1631, 1638, 1645, 1649, 1655, 1668, 1679, 1688, 1699, 1710, 
    1719, 1724, 1728, 1732, 1739, 1749, 1754, 1764, 1774, 1784, 1794, 1804, 1814, 1822, 
    1832, 1842, 1850, 1858, 1868, 1878, 1886, 1893, 1899, 1905, 1910, 1915, 1920, 1925, 
    1931, 1937, 1943, 1950, 1956, 1963, 1968, 1974, 1979, 1984, 1994, 2000, 2005, 2011, 
    2016, 2022, 2028, 2034, 2043, 2054, 2058, 2076, 2085, 2094, 2101, 2110, 2119, 2126, 
    2135, 2144, 2153, 2162, 2171, 2178, 2190, 2200, 2212, 2224, 2234, 2243, 2252, 2259, 
    2268, 2277, 2284, 2293, 2302, 2309, 2319, 2329, 2337, 2346, 2355, 2362, 2366, 2368, 
    2372, 2377, 2384, 2387, 2392, 2395, 2400, 2408, 2414, 2418, 2424, 2433, 2440, 2443, 
    2448, 2455, 2465, 2471, 2481, 2493, 2496, 2501, 2509, 2515, 2519, 2525, 2534, 2541, 
    2544, 2548, 2555, 2561, 2565, 2571, 2574, 2579, 2587, 2592, 2600, 2604, 2611, 2615, 
    2622, 2628, 2634, 2643, 2649, 2654, 2660, 2665, 2670, 2677, 2682, 2689, 2701, 2710, 
    2719, 2726, 2735, 2742, 2755, 2766, 2779, 2790, 2801, 2812, 2821, 2832, 2841, 2850, 
    2859, 2866, 2875, 2882, 2895, 2906, 2919, 2930, 2941, 2952, 2961, 2972, 2981, 2986, 
    2992, 2997, 3002, 3009, 3014, 3021, 3025, 3030, 3036, 3041, 3049, 3053, 3057, 3063, 
    3073, 3076, 3081, 3085, 3091, 3097, 3105, 3113, 3117, 3122, 3128, 3140, 3150, 3162, 
    3174, 3184, 3187, 3192, 3200, 3206, 3209, 3213, 3220, 3226, 3229, 3234, 3241, 3251, 
    3256, 3262, 3266, 3270, 3273, 3278, 3286, 3292, 3296, 3305, 3314, 3319, 3323, 3329, 
    3334, 3341, 3347, 3355, 3360, 3367, 3371, 3376, 3380, 3385, 3389, 3394, 3397, 3402, 
    3410, 3415, 3423, 3427, 3434, 3438, 3445, 3451, 3456, 3468, 3478, 3490, 3502, 3512, 
    3517, 3521, 3528, 3532, 3538, 3547, 3554, 3559, 3566, 3576, 3584, 3588, 3594, 3603, 
    3610, 3614, 3621, 3625, 3631, 3640, 3647, 3651, 3657, 3666, 3673, 3678, 3682, 3688, 
    3693, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000BUNDLE\000ADD\000ADD"
    "i\000ADDiu\000ADDu\000ADJCALLSTACKDOWN\000ADJCALLSTACKUP\000AND\000AND6"
    "4\000ANDi\000ATMACRO\000ATOMIC_CMP_SWAP_I16\000ATOMIC_CMP_SWAP_I16_P8\000"
    "ATOMIC_CMP_SWAP_I32\000ATOMIC_CMP_SWAP_I32_P8\000ATOMIC_CMP_SWAP_I64\000"
    "ATOMIC_CMP_SWAP_I64_P8\000ATOMIC_CMP_SWAP_I8\000ATOMIC_CMP_SWAP_I8_P8\000"
    "ATOMIC_LOAD_ADD_I16\000ATOMIC_LOAD_ADD_I16_P8\000ATOMIC_LOAD_ADD_I32\000"
    "ATOMIC_LOAD_ADD_I32_P8\000ATOMIC_LOAD_ADD_I64\000ATOMIC_LOAD_ADD_I64_P8"
    "\000ATOMIC_LOAD_ADD_I8\000ATOMIC_LOAD_ADD_I8_P8\000ATOMIC_LOAD_AND_I16\000"
    "ATOMIC_LOAD_AND_I16_P8\000ATOMIC_LOAD_AND_I32\000ATOMIC_LOAD_AND_I32_P8"
    "\000ATOMIC_LOAD_AND_I64\000ATOMIC_LOAD_AND_I64_P8\000ATOMIC_LOAD_AND_I8"
    "\000ATOMIC_LOAD_AND_I8_P8\000ATOMIC_LOAD_NAND_I16\000ATOMIC_LOAD_NAND_I"
    "16_P8\000ATOMIC_LOAD_NAND_I32\000ATOMIC_LOAD_NAND_I32_P8\000ATOMIC_LOAD"
    "_NAND_I64\000ATOMIC_LOAD_NAND_I64_P8\000ATOMIC_LOAD_NAND_I8\000ATOMIC_L"
    "OAD_NAND_I8_P8\000ATOMIC_LOAD_OR_I16\000ATOMIC_LOAD_OR_I16_P8\000ATOMIC"
    "_LOAD_OR_I32\000ATOMIC_LOAD_OR_I32_P8\000ATOMIC_LOAD_OR_I64\000ATOMIC_L"
    "OAD_OR_I64_P8\000ATOMIC_LOAD_OR_I8\000ATOMIC_LOAD_OR_I8_P8\000ATOMIC_LO"
    "AD_SUB_I16\000ATOMIC_LOAD_SUB_I16_P8\000ATOMIC_LOAD_SUB_I32\000ATOMIC_L"
    "OAD_SUB_I32_P8\000ATOMIC_LOAD_SUB_I64\000ATOMIC_LOAD_SUB_I64_P8\000ATOM"
    "IC_LOAD_SUB_I8\000ATOMIC_LOAD_SUB_I8_P8\000ATOMIC_LOAD_XOR_I16\000ATOMI"
    "C_LOAD_XOR_I16_P8\000ATOMIC_LOAD_XOR_I32\000ATOMIC_LOAD_XOR_I32_P8\000A"
    "TOMIC_LOAD_XOR_I64\000ATOMIC_LOAD_XOR_I64_P8\000ATOMIC_LOAD_XOR_I8\000A"
    "TOMIC_LOAD_XOR_I8_P8\000ATOMIC_SWAP_I16\000ATOMIC_SWAP_I16_P8\000ATOMIC"
    "_SWAP_I32\000ATOMIC_SWAP_I32_P8\000ATOMIC_SWAP_I64\000ATOMIC_SWAP_I64_P"
    "8\000ATOMIC_SWAP_I8\000ATOMIC_SWAP_I8_P8\000B\000BC1F\000BC1T\000BEQ\000"
    "BEQ64\000BGEZ\000BGEZ64\000BGEZAL\000BGTZ\000BGTZ64\000BLEZ\000BLEZ64\000"
    "BLTZ\000BLTZ64\000BLTZAL\000BNE\000BNE64\000BuildPairF64\000CEIL_L_D64\000"
    "CEIL_L_S\000CEIL_W_D32\000CEIL_W_D64\000CEIL_W_S\000CFC1\000CLO\000CLZ\000"
    "CPLOAD\000CPRESTORE\000CTC1\000CVT_D32_S\000CVT_D32_W\000CVT_D64_L\000C"
    "VT_D64_S\000CVT_D64_W\000CVT_L_D64\000CVT_L_S\000CVT_S_D32\000CVT_S_D64"
    "\000CVT_S_L\000CVT_S_W\000CVT_W_D32\000CVT_W_D64\000CVT_W_S\000DADDiu\000"
    "DADDu\000DANDi\000DCLO\000DCLZ\000DEXT\000DINS\000DMFC1\000DMTC1\000DMU"
    "LT\000DMULTu\000DROTR\000DROTRV\000DSBH\000DSDIV\000DSHD\000DSLL\000DSL"
    "L64_32\000DSLLV\000DSRA\000DSRAV\000DSRL\000DSRLV\000DSUBu\000DUDIV\000"
    "DynAlloc\000DynAlloc64\000EXT\000ExtractElementF64\000FABS_D32\000FABS_"
    "D64\000FABS_S\000FADD_D32\000FADD_D64\000FADD_S\000FCMP_D32\000FCMP_D64"
    "\000FCMP_S32\000FDIV_D32\000FDIV_D64\000FDIV_S\000FLOOR_L_D64\000FLOOR_"
    "L_S\000FLOOR_W_D32\000FLOOR_W_D64\000FLOOR_W_S\000FMOV_D32\000FMOV_D64\000"
    "FMOV_S\000FMUL_D32\000FMUL_D64\000FMUL_S\000FNEG_D32\000FNEG_D64\000FNE"
    "G_S\000FSQRT_D32\000FSQRT_D64\000FSQRT_S\000FSUB_D32\000FSUB_D64\000FSU"
    "B_S\000INS\000J\000JAL\000JALR\000JALR64\000JR\000JR64\000LB\000LB64\000"
    "LB64_P8\000LB_P8\000LBu\000LBu64\000LBu64_P8\000LBu_P8\000LD\000LDC1\000"
    "LDC164\000LDC164_P8\000LD_P8\000LEA_ADDiu\000LEA_ADDiu64\000LH\000LH64\000"
    "LH64_P8\000LH_P8\000LHu\000LHu64\000LHu64_P8\000LHu_P8\000LL\000LLD\000"
    "LLD_P8\000LL_P8\000LUi\000LUi64\000LW\000LW64\000LW64_P8\000LWC1\000LWC"
    "1_P8\000LWL\000LWL_P8\000LWR\000LWR_P8\000LW_P8\000LWu64\000LWu64_P8\000"
    "MACRO\000MADD\000MADDU\000MFC1\000MFHI\000MFHI64\000MFLO\000MFLO64\000M"
    "OVCCRToCCR\000MOVF_D32\000MOVF_D64\000MOVF_I\000MOVF_I64\000MOVF_S\000M"
    "OVN_I64_D64\000MOVN_I64_I\000MOVN_I64_I64\000MOVN_I64_S\000MOVN_I_D32\000"
    "MOVN_I_D64\000MOVN_I_I\000MOVN_I_I64\000MOVN_I_S\000MOVT_D32\000MOVT_D6"
    "4\000MOVT_I\000MOVT_I64\000MOVT_S\000MOVZ_I64_D64\000MOVZ_I64_I\000MOVZ"
    "_I64_I64\000MOVZ_I64_S\000MOVZ_I_D32\000MOVZ_I_D64\000MOVZ_I_I\000MOVZ_"
    "I_I64\000MOVZ_I_S\000MSUB\000MSUBU\000MTC1\000MTHI\000MTHI64\000MTLO\000"
    "MTLO64\000MUL\000MULT\000MULTu\000NOAT\000NOMACRO\000NOP\000NOR\000NOR6"
    "4\000NOREORDER\000OR\000OR64\000ORi\000ORi64\000RDHWR\000RDHWR64\000REO"
    "RDER\000RET\000ROTR\000ROTRV\000ROUND_L_D64\000ROUND_L_S\000ROUND_W_D32"
    "\000ROUND_W_D64\000ROUND_W_S\000SB\000SB64\000SB64_P8\000SB_P8\000SC\000"
    "SCD\000SCD_P8\000SC_P8\000SD\000SDC1\000SDC164\000SDC164_P8\000SDIV\000"
    "SD_P8\000SEB\000SEH\000SH\000SH64\000SH64_P8\000SH_P8\000SLL\000SLL64_3"
    "2\000SLL64_64\000SLLV\000SLT\000SLT64\000SLTi\000SLTi64\000SLTiu\000SLT"
    "iu64\000SLTu\000SLTu64\000SRA\000SRAV\000SRL\000SRLV\000SUB\000SUBu\000"
    "SW\000SW64\000SW64_P8\000SWC1\000SWC1_P8\000SWL\000SWL_P8\000SWR\000SWR"
    "_P8\000SW_P8\000SYNC\000TRUNC_L_D64\000TRUNC_L_S\000TRUNC_W_D32\000TRUN"
    "C_W_D64\000TRUNC_W_S\000UDIV\000ULD\000ULD_P8\000ULH\000ULH64\000ULH64_"
    "P8\000ULH_P8\000ULHu\000ULHu64\000ULHu64_P8\000ULHu_P8\000ULW\000ULW64\000"
    "ULW64_P8\000ULW_P8\000USD\000USD_P8\000USH\000USH64\000USH64_P8\000USH_"
    "P8\000USW\000USW64\000USW64_P8\000USW_P8\000WSBH\000XOR\000XOR64\000XOR"
    "i\000XORi64\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_FGR32,
    RC_CPURegs,
    RC_FGR64,
    RC_CPU64Regs,
    RC_AFGR64,
    RC_HILO,
    RC_HILO64,
    RC_HWRegs,
    RC_CCR,
    RC_HWRegs64
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_FGR32:
    switch (Reg) {
    default: break;
    case Mips::F0:
    case Mips::F1:
    case Mips::F2:
    case Mips::F3:
    case Mips::F4:
    case Mips::F5:
    case Mips::F6:
    case Mips::F7:
    case Mips::F8:
    case Mips::F9:
    case Mips::F10:
    case Mips::F11:
    case Mips::F12:
    case Mips::F13:
    case Mips::F14:
    case Mips::F15:
    case Mips::F16:
    case Mips::F17:
    case Mips::F18:
    case Mips::F19:
    case Mips::F20:
    case Mips::F21:
    case Mips::F22:
    case Mips::F23:
    case Mips::F24:
    case Mips::F25:
    case Mips::F26:
    case Mips::F27:
    case Mips::F28:
    case Mips::F29:
    case Mips::F30:
    case Mips::F31:
      return true;
    }
    break;
  case RC_CPURegs:
    switch (Reg) {
    default: break;
    case Mips::V0:
    case Mips::V1:
    case Mips::A0:
    case Mips::A1:
    case Mips::A2:
    case Mips::A3:
    case Mips::T0:
    case Mips::T1:
    case Mips::T2:
    case Mips::T3:
    case Mips::T4:
    case Mips::T5:
    case Mips::T6:
    case Mips::T7:
    case Mips::T8:
    case Mips::T9:
    case Mips::S0:
    case Mips::S1:
    case Mips::S2:
    case Mips::S3:
    case Mips::S4:
    case Mips::S5:
    case Mips::S6:
    case Mips::S7:
    case Mips::ZERO:
    case Mips::AT:
    case Mips::K0:
    case Mips::K1:
    case Mips::GP:
    case Mips::SP:
    case Mips::FP:
    case Mips::RA:
      return true;
    }
    break;
  case RC_FGR64:
    switch (Reg) {
    default: break;
    case Mips::D0_64:
    case Mips::D1_64:
    case Mips::D2_64:
    case Mips::D3_64:
    case Mips::D4_64:
    case Mips::D5_64:
    case Mips::D6_64:
    case Mips::D7_64:
    case Mips::D8_64:
    case Mips::D9_64:
    case Mips::D10_64:
    case Mips::D11_64:
    case Mips::D12_64:
    case Mips::D13_64:
    case Mips::D14_64:
    case Mips::D15_64:
    case Mips::D16_64:
    case Mips::D17_64:
    case Mips::D18_64:
    case Mips::D19_64:
    case Mips::D20_64:
    case Mips::D21_64:
    case Mips::D22_64:
    case Mips::D23_64:
    case Mips::D24_64:
    case Mips::D25_64:
    case Mips::D26_64:
    case Mips::D27_64:
    case Mips::D28_64:
    case Mips::D29_64:
    case Mips::D30_64:
    case Mips::D31_64:
      return true;
    }
    break;
  case RC_CPU64Regs:
    switch (Reg) {
    default: break;
    case Mips::V0_64:
    case Mips::V1_64:
    case Mips::A0_64:
    case Mips::A1_64:
    case Mips::A2_64:
    case Mips::A3_64:
    case Mips::T0_64:
    case Mips::T1_64:
    case Mips::T2_64:
    case Mips::T3_64:
    case Mips::T4_64:
    case Mips::T5_64:
    case Mips::T6_64:
    case Mips::T7_64:
    case Mips::T8_64:
    case Mips::T9_64:
    case Mips::S0_64:
    case Mips::S1_64:
    case Mips::S2_64:
    case Mips::S3_64:
    case Mips::S4_64:
    case Mips::S5_64:
    case Mips::S6_64:
    case Mips::S7_64:
    case Mips::ZERO_64:
    case Mips::AT_64:
    case Mips::K0_64:
    case Mips::K1_64:
    case Mips::GP_64:
    case Mips::SP_64:
    case Mips::FP_64:
    case Mips::RA_64:
      return true;
    }
    break;
  case RC_AFGR64:
    switch (Reg) {
    default: break;
    case Mips::D0:
    case Mips::D1:
    case Mips::D6:
    case Mips::D7:
    case Mips::D2:
    case Mips::D3:
    case Mips::D4:
    case Mips::D5:
    case Mips::D8:
    case Mips::D9:
    case Mips::D10:
    case Mips::D11:
    case Mips::D12:
    case Mips::D13:
    case Mips::D14:
    case Mips::D15:
      return true;
    }
    break;
  case RC_HILO:
    switch (Reg) {
    default: break;
    case Mips::HI:
    case Mips::LO:
      return true;
    }
    break;
  case RC_HILO64:
    switch (Reg) {
    default: break;
    case Mips::HI64:
    case Mips::LO64:
      return true;
    }
    break;
  case RC_HWRegs:
    if (Reg == Mips::HWR29)
      return true;
    break;
  case RC_CCR:
    if (Reg == Mips::FCR31)
      return true;
    break;
  case RC_HWRegs64:
    if (Reg == Mips::HWR29_64)
      return true;
    break;
  }

  return false;
}

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
