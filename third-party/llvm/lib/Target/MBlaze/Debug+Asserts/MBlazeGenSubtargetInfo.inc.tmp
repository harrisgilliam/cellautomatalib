//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Subtarget Enumeration Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_SUBTARGETINFO_ENUM
#undef GET_SUBTARGETINFO_ENUM
namespace llvm {
namespace MBlaze {
enum {
  FeatureBarrel =  1ULL << 0,
  FeatureDiv =  1ULL << 1,
  FeatureFPU =  1ULL << 2,
  FeatureMul =  1ULL << 3,
  FeatureMul64 =  1ULL << 4,
  FeaturePatCmp =  1ULL << 5,
  FeatureSqrt =  1ULL << 6
};
}
} // End llvm namespace 
#endif // GET_SUBTARGETINFO_ENUM


#ifdef GET_SUBTARGETINFO_MC_DESC
#undef GET_SUBTARGETINFO_MC_DESC
namespace llvm {
// Sorted (by key) array of values for CPU features.
extern const llvm::SubtargetFeatureKV MBlazeFeatureKV[] = {
  { "barrel", "Implements barrel shifter", MBlaze::FeatureBarrel, 0ULL },
  { "div", "Implements hardware divider", MBlaze::FeatureDiv, 0ULL },
  { "fpu", "Implements floating point unit", MBlaze::FeatureFPU, 0ULL },
  { "mul", "Implements hardware multiplier", MBlaze::FeatureMul, 0ULL },
  { "mul64", "Implements multiplier with 64-bit result", MBlaze::FeatureMul64, 0ULL },
  { "patcmp", "Implements pattern compare instruction", MBlaze::FeaturePatCmp, 0ULL },
  { "sqrt", "Implements sqrt and floating point convert", MBlaze::FeatureSqrt, 0ULL }
};

// Sorted (by key) array of values for CPU subtype.
extern const llvm::SubtargetFeatureKV MBlazeSubTypeKV[] = {
  { "mblaze", "Select the mblaze processor", 0ULL, 0ULL },
  { "mblaze3", "Select the mblaze3 processor", 0ULL, 0ULL },
  { "mblaze5", "Select the mblaze5 processor", 0ULL, 0ULL }
};


// Functional units for itineraries "MBlazePipe3Itineraries"
namespace MBlazePipe3ItinerariesFU {
  const unsigned IF = 1 << 0;
  const unsigned ID = 1 << 1;
  const unsigned EX = 1 << 2;
}

// Functional units for itineraries "MBlazePipe5Itineraries"
namespace MBlazePipe5ItinerariesFU {
  const unsigned IF = 1 << 0;
  const unsigned ID = 1 << 1;
  const unsigned EX = 1 << 2;
  const unsigned MA = 1 << 3;
  const unsigned WB = 1 << 4;
}

extern const llvm::InstrStage MBlazeStages[] = {
  { 0, 0, 0, llvm::InstrStage::Required }, // No itinerary
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 1-3
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 3, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 4-6
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 34, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 7-9
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 2, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 10-12
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 6, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 13-15
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 30, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 16-18
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 7, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 19-21
  { 1, MBlazePipe3ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe3ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 29, MBlazePipe3ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 }, // 22-24
  { 1, MBlazePipe5ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::MA, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::WB, -1, (llvm::InstrStage::ReservationKinds)0 }, // 25-29
  { 1, MBlazePipe5ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 },   { 31, MBlazePipe5ItinerariesFU::MA, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::WB, -1, (llvm::InstrStage::ReservationKinds)0 }, // 30-34
  { 1, MBlazePipe5ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 },   { 2, MBlazePipe5ItinerariesFU::MA, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::WB, -1, (llvm::InstrStage::ReservationKinds)0 }, // 35-39
  { 1, MBlazePipe5ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 },   { 26, MBlazePipe5ItinerariesFU::MA, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::WB, -1, (llvm::InstrStage::ReservationKinds)0 }, // 40-44
  { 1, MBlazePipe5ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 },   { 3, MBlazePipe5ItinerariesFU::MA, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::WB, -1, (llvm::InstrStage::ReservationKinds)0 }, // 45-49
  { 1, MBlazePipe5ItinerariesFU::IF, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::ID, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::EX, -1, (llvm::InstrStage::ReservationKinds)0 },   { 25, MBlazePipe5ItinerariesFU::MA, -1, (llvm::InstrStage::ReservationKinds)0 },   { 1, MBlazePipe5ItinerariesFU::WB, -1, (llvm::InstrStage::ReservationKinds)0 }, // 50-54
  { 0, 0, 0, llvm::InstrStage::Required } // End itinerary
};
extern const unsigned MBlazeOperandCycles[] = {
  0, // No itinerary
  2,   1,   1, // 1-3
  4,   1,   1, // 4-6
  35,   1,   1, // 7-9
  3,   1,   1, // 10-12
  1, // 13
  1,   1, // 14-15
  2,   1, // 16-17
  1,   1, // 18-19
  7,   1,   1, // 20-22
  31,   1,   1, // 23-25
  8,   1, // 26-27
  7,   1, // 28-29
  30,   1, // 30-31
  4,   1,   1, // 32-34
  3,   1, // 35-36
  1,   1, // 37-38
  1,   1,   1, // 39-41
  3,   1,   1, // 42-44
  2,   1,   1, // 45-47
  2,   1,   1, // 48-50
  33,   1,   1, // 51-53
  3,   1,   1, // 54-56
  1, // 57
  1,   1, // 58-59
  4,   1, // 60-61
  1,   1, // 62-63
  5,   1,   1, // 64-66
  29,   1,   1, // 67-69
  6,   1, // 70-71
  5,   1, // 72-73
  28,   1, // 74-75
  2,   1,   1, // 76-78
  2,   1, // 79-80
  1,   1, // 81-82
  1,   1,   1, // 83-85
  4,   1,   1, // 86-88
  0 // End itinerary
};
extern const unsigned MBlazeForwardingPathes[] = {
  0, // No itinerary
 0,  0,  0, // 1-3
 0,  0,  0, // 4-6
 0,  0,  0, // 7-9
 0,  0,  0, // 10-12
 0, // 13
 0,  0, // 14-15
 0,  0, // 16-17
 0,  0, // 18-19
 0,  0,  0, // 20-22
 0,  0,  0, // 23-25
 0,  0, // 26-27
 0,  0, // 28-29
 0,  0, // 30-31
 0,  0,  0, // 32-34
 0,  0, // 35-36
 0,  0, // 37-38
 0,  0,  0, // 39-41
 0,  0,  0, // 42-44
 0,  0,  0, // 45-47
 0,  0,  0, // 48-50
 0,  0,  0, // 51-53
 0,  0,  0, // 54-56
 0, // 57
 0,  0, // 58-59
 0,  0, // 60-61
 0,  0, // 62-63
 0,  0,  0, // 64-66
 0,  0,  0, // 67-69
 0,  0, // 70-71
 0,  0, // 72-73
 0,  0, // 74-75
 0,  0,  0, // 76-78
 0,  0, // 79-80
 0,  0, // 81-82
 0,  0,  0, // 83-85
 0,  0,  0, // 86-88
  0 // End itinerary
};

static const llvm::InstrItinerary MBlazeGenericItineraries[] = {
  { 1, 0, 0, 0, 0 }, // 0 IIC_ALU
  { 1, 0, 0, 0, 0 }, // 1 IIC_ALUd
  { 1, 0, 0, 0, 0 }, // 2 IIC_ALUm
  { 1, 0, 0, 0, 0 }, // 3 IIC_BR
  { 1, 0, 0, 0, 0 }, // 4 IIC_BRc
  { 1, 0, 0, 0, 0 }, // 5 IIC_BRl
  { 1, 0, 0, 0, 0 }, // 6 IIC_FPU
  { 1, 0, 0, 0, 0 }, // 7 IIC_FPUc
  { 1, 0, 0, 0, 0 }, // 8 IIC_FPUd
  { 1, 0, 0, 0, 0 }, // 9 IIC_FPUf
  { 1, 0, 0, 0, 0 }, // 10 IIC_FPUi
  { 1, 0, 0, 0, 0 }, // 11 IIC_FPUs
  { 1, 0, 0, 0, 0 }, // 12 IIC_FSLg
  { 1, 0, 0, 0, 0 }, // 13 IIC_FSLp
  { 1, 0, 0, 0, 0 }, // 14 IIC_MEMl
  { 1, 0, 0, 0, 0 }, // 15 IIC_MEMs
  { 1, 0, 0, 0, 0 }, // 16 IIC_Pseudo
  { 1, 0, 0, 0, 0 }, // 17 IIC_SHT
  { 1, 0, 0, 0, 0 }, // 18 IIC_WDC
  { 1, 0, 0, 0, 0 }, // 19 NoItinerary
  { 1, ~0U, ~0U, ~0U, ~0U } // end marker
};

static const llvm::InstrItinerary MBlazePipe3Itineraries[] = {
  { 1, 1, 4, 1, 4 }, // 0 IIC_ALU
  { 1, 7, 10, 7, 10 }, // 1 IIC_ALUd
  { 1, 4, 7, 4, 7 }, // 2 IIC_ALUm
  { 1, 1, 4, 13, 14 }, // 3 IIC_BR
  { 1, 1, 4, 14, 16 }, // 4 IIC_BRc
  { 1, 1, 4, 16, 18 }, // 5 IIC_BRl
  { 1, 13, 16, 20, 23 }, // 6 IIC_FPU
  { 1, 4, 7, 32, 35 }, // 7 IIC_FPUc
  { 1, 16, 19, 23, 26 }, // 8 IIC_FPUd
  { 1, 13, 16, 28, 30 }, // 9 IIC_FPUf
  { 1, 19, 22, 26, 28 }, // 10 IIC_FPUi
  { 1, 22, 25, 30, 32 }, // 11 IIC_FPUs
  { 1, 10, 13, 35, 37 }, // 12 IIC_FSLg
  { 1, 10, 13, 37, 39 }, // 13 IIC_FSLp
  { 1, 10, 13, 42, 45 }, // 14 IIC_MEMl
  { 1, 10, 13, 39, 42 }, // 15 IIC_MEMs
  { 1, 0, 0, 0, 0 }, // 16 IIC_Pseudo
  { 1, 10, 13, 10, 13 }, // 17 IIC_SHT
  { 1, 10, 13, 18, 20 }, // 18 IIC_WDC
  { 1, 0, 0, 0, 0 }, // 19 NoItinerary
  { 1, ~0U, ~0U, ~0U, ~0U } // end marker
};

static const llvm::InstrItinerary MBlazePipe5Itineraries[] = {
  { 1, 25, 30, 45, 48 }, // 0 IIC_ALU
  { 1, 30, 35, 51, 54 }, // 1 IIC_ALUd
  { 1, 25, 30, 48, 51 }, // 2 IIC_ALUm
  { 1, 25, 30, 57, 58 }, // 3 IIC_BR
  { 1, 25, 30, 58, 60 }, // 4 IIC_BRc
  { 1, 25, 30, 60, 62 }, // 5 IIC_BRl
  { 1, 35, 40, 64, 67 }, // 6 IIC_FPU
  { 1, 25, 30, 76, 79 }, // 7 IIC_FPUc
  { 1, 40, 45, 67, 70 }, // 8 IIC_FPUd
  { 1, 35, 40, 72, 74 }, // 9 IIC_FPUf
  { 1, 45, 50, 70, 72 }, // 10 IIC_FPUi
  { 1, 50, 55, 74, 76 }, // 11 IIC_FPUs
  { 1, 25, 30, 79, 81 }, // 12 IIC_FSLg
  { 1, 25, 30, 81, 83 }, // 13 IIC_FSLp
  { 1, 25, 30, 86, 89 }, // 14 IIC_MEMl
  { 1, 25, 30, 83, 86 }, // 15 IIC_MEMs
  { 1, 0, 0, 0, 0 }, // 16 IIC_Pseudo
  { 1, 25, 30, 54, 57 }, // 17 IIC_SHT
  { 1, 35, 40, 62, 64 }, // 18 IIC_WDC
  { 1, 0, 0, 0, 0 }, // 19 NoItinerary
  { 1, ~0U, ~0U, ~0U, ~0U } // end marker
};

// Sorted (by key) array of itineraries for CPU subtype.
extern const llvm::SubtargetInfoKV MBlazeProcItinKV[] = {
  { "mblaze", (void *)&MBlazeGenericItineraries },
  { "mblaze3", (void *)&MBlazePipe3Itineraries },
  { "mblaze5", (void *)&MBlazePipe5Itineraries }
};

static inline void InitMBlazeMCSubtargetInfo(MCSubtargetInfo *II, StringRef TT, StringRef CPU, StringRef FS) {
  II->InitMCSubtargetInfo(TT, CPU, FS, MBlazeFeatureKV, MBlazeSubTypeKV, MBlazeProcItinKV, MBlazeStages, MBlazeOperandCycles, MBlazeForwardingPathes, 7, 3);
}

} // End llvm namespace 
#endif // GET_SUBTARGETINFO_MC_DESC


#ifdef GET_SUBTARGETINFO_TARGET_DESC
#undef GET_SUBTARGETINFO_TARGET_DESC
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"
// ParseSubtargetFeatures - Parses features string setting specified
// subtarget options.
void llvm::MBlazeSubtarget::ParseSubtargetFeatures(StringRef CPU, StringRef FS) {
  DEBUG(dbgs() << "\nFeatures:" << FS);
  DEBUG(dbgs() << "\nCPU:" << CPU);
  uint64_t Bits = ReInitMCSubtargetInfo(CPU, FS);
  if ((Bits & MBlaze::FeatureBarrel) != 0) HasBarrel = true;
  if ((Bits & MBlaze::FeatureDiv) != 0) HasDiv = true;
  if ((Bits & MBlaze::FeatureFPU) != 0) HasFPU = true;
  if ((Bits & MBlaze::FeatureMul) != 0) HasMul = true;
  if ((Bits & MBlaze::FeatureMul64) != 0) HasMul64 = true;
  if ((Bits & MBlaze::FeaturePatCmp) != 0) HasPatCmp = true;
  if ((Bits & MBlaze::FeatureSqrt) != 0) HasSqrt = true;
}
#endif // GET_SUBTARGETINFO_TARGET_DESC


#ifdef GET_SUBTARGETINFO_HEADER
#undef GET_SUBTARGETINFO_HEADER
namespace llvm {
class DFAPacketizer;
struct MBlazeGenSubtargetInfo : public TargetSubtargetInfo {
  explicit MBlazeGenSubtargetInfo(StringRef TT, StringRef CPU, StringRef FS);
public:
  DFAPacketizer *createDFAPacketizer(const InstrItineraryData *IID) const;
};
} // End llvm namespace 
#endif // GET_SUBTARGETINFO_HEADER


#ifdef GET_SUBTARGETINFO_CTOR
#undef GET_SUBTARGETINFO_CTOR
namespace llvm {
extern const llvm::SubtargetFeatureKV MBlazeFeatureKV[];
extern const llvm::SubtargetFeatureKV MBlazeSubTypeKV[];
extern const llvm::SubtargetInfoKV MBlazeProcItinKV[];
extern const llvm::InstrStage MBlazeStages[];
extern const unsigned MBlazeOperandCycles[];
extern const unsigned MBlazeForwardingPathes[];
MBlazeGenSubtargetInfo::MBlazeGenSubtargetInfo(StringRef TT, StringRef CPU, StringRef FS)
  : TargetSubtargetInfo() {
  InitMCSubtargetInfo(TT, CPU, FS, MBlazeFeatureKV, MBlazeSubTypeKV, MBlazeProcItinKV, MBlazeStages, MBlazeOperandCycles, MBlazeForwardingPathes, 7, 3);
}

} // End llvm namespace 
#endif // GET_SUBTARGETINFO_CTOR

