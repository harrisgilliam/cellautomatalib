//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// BUNDLE
    268435474U,	// ADD4
    268435474U,	// ADD8
    268435479U,	// ADDC
    268435479U,	// ADDC8
    268435485U,	// ADDE
    268435485U,	// ADDE8
    268451875U,	// ADDI
    268451875U,	// ADDI8
    268451881U,	// ADDIC
    268451881U,	// ADDIC8
    268451888U,	// ADDICo
    268468280U,	// ADDIS
    268468280U,	// ADDIS8
    268566591U,	// ADDME
    268566591U,	// ADDME8
    268566598U,	// ADDZE
    268566598U,	// ADDZE8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    268435533U,	// AND
    268435533U,	// AND8
    268435538U,	// ANDC
    268435538U,	// ANDC8
    268484696U,	// ANDISo
    268484696U,	// ANDISo8
    268484704U,	// ANDIo
    268484704U,	// ANDIo8
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    536871015U,	// B
    823132266U,	// BCC
    108U,	// BCTR
    108U,	// BCTR8
    113U,	// BCTRL8_Darwin
    113U,	// BCTRL8_ELF
    113U,	// BCTRL_Darwin
    113U,	// BCTRL_SVR4
    301990007U,	// BL8_Darwin
    301990007U,	// BL8_ELF
    1107296379U,	// BLA8_Darwin
    1107296379U,	// BLA8_ELF
    1107296379U,	// BLA_Darwin
    1107296379U,	// BLA_SVR4
    855638122U,	// BLR
    301990007U,	// BL_Darwin
    301990007U,	// BL_SVR4
    268435584U,	// CMPD
    268451974U,	// CMPDI
    268435597U,	// CMPLD
    268484756U,	// CMPLDI
    268435612U,	// CMPLW
    268484771U,	// CMPLWI
    268435627U,	// CMPW
    268452017U,	// CMPWI
    268566712U,	// CNTLZD
    268566720U,	// CNTLZW
    268435656U,	// CREQV
    268435663U,	// CROR
    270532808U,	// CRSET
    270532821U,	// CRUNSET
    1342177500U,	// DCBA
    1342177506U,	// DCBF
    1342177512U,	// DCBI
    1342177518U,	// DCBST
    1342177525U,	// DCBT
    1342177531U,	// DCBTST
    1342177539U,	// DCBZ
    1342177545U,	// DCBZL
    268435728U,	// DIVD
    268435734U,	// DIVDU
    268435741U,	// DIVW
    268435747U,	// DIVWU
    1610613034U,	// DSS
    303U,	// DSSALL
    1879048502U,	// DST
    1879048502U,	// DST64
    1879048507U,	// DSTST
    1879048507U,	// DSTST64
    1879048514U,	// DSTSTT
    1879048514U,	// DSTSTT64
    1879048522U,	// DSTT
    1879048522U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    268435792U,	// EQV
    268435792U,	// EQV8
    268566869U,	// EXTSB
    268566869U,	// EXTSB8
    268566876U,	// EXTSH
    268566876U,	// EXTSH8
    268566883U,	// EXTSW
    268566883U,	// EXTSW_32
    268566883U,	// EXTSW_32_64
    268566890U,	// FABSD
    268566890U,	// FABSS
    268435824U,	// FADD
    268435830U,	// FADDS
    268435824U,	// FADDrtz
    268566909U,	// FCFID
    268435844U,	// FCMPUD
    268435844U,	// FCMPUS
    268566923U,	// FCTIDZ
    268566931U,	// FCTIWZ
    268435867U,	// FDIV
    268435873U,	// FDIVS
    268444072U,	// FMADD
    268444079U,	// FMADDS
    268566967U,	// FMR
    268444092U,	// FMSUB
    268444099U,	// FMSUBS
    268435915U,	// FMUL
    268435921U,	// FMULS
    268567000U,	// FNABSD
    268567000U,	// FNABSS
    268567007U,	// FNEGD
    268567007U,	// FNEGS
    268444133U,	// FNMADD
    268444141U,	// FNMADDS
    268444150U,	// FNMSUB
    268444158U,	// FNMSUBS
    268567047U,	// FRSP
    268444173U,	// FSELD
    268444173U,	// FSELS
    268567059U,	// FSQRT
    268567066U,	// FSQRTS
    268436002U,	// FSUB
    268436008U,	// FSUBS
    271843887U,	// LA
    272630323U,	// LBZ
    272630323U,	// LBZ8
    273678904U,	// LBZU
    273678904U,	// LBZU8
    274727486U,	// LBZX
    274727486U,	// LBZX8
    275776068U,	// LD
    274727496U,	// LDARX
    276824655U,	// LDU
    274727508U,	// LDX
    335544921U,	// LDinto_toc
    0U,	// LDtoc
    610U,	// LDtoc_restore
    272630382U,	// LFD
    273678958U,	// LFDU
    274727539U,	// LFDX
    272630393U,	// LFS
    273678969U,	// LFSU
    274727550U,	// LFSX
    272630404U,	// LHA
    272630404U,	// LHA8
    273678985U,	// LHAU
    271975049U,	// LHAU8
    274727567U,	// LHAX
    274727567U,	// LHAX8
    274727573U,	// LHBRX
    272630428U,	// LHZ
    272630428U,	// LHZ8
    273679009U,	// LHZU
    273679009U,	// LHZU8
    274727591U,	// LHZX
    274727591U,	// LHZX8
    277873325U,	// LI
    277873325U,	// LI8
    278921905U,	// LIS
    278921905U,	// LIS8
    274727606U,	// LVEBX
    274727613U,	// LVEHX
    274727620U,	// LVEWX
    274727627U,	// LVSL
    274727633U,	// LVSR
    274727639U,	// LVX
    274727644U,	// LVXL
    275776226U,	// LWA
    274727655U,	// LWARX
    274727662U,	// LWAX
    274727668U,	// LWBRX
    272630523U,	// LWZ
    272630523U,	// LWZ8
    273679104U,	// LWZU
    273679104U,	// LWZU8
    274727686U,	// LWZX
    274727686U,	// LWZX8
    268567308U,	// MCRF
    301990674U,	// MFCR
    301990674U,	// MFCR8
    0U,	// MFCR8pseud
    0U,	// MFCRpseud
    301990680U,	// MFCTR
    301990680U,	// MFCTR8
    301990687U,	// MFFS
    301990693U,	// MFLR
    301990693U,	// MFLR8
    279970578U,	// MFOCRF
    352322347U,	// MFVRSAVE
    301990706U,	// MFVSCR
    2147484474U,	// MTCRF
    2147484474U,	// MTCRF8
    301990721U,	// MTCTR
    301990721U,	// MTCTR8
    2415919944U,	// MTFSB0
    2415919952U,	// MTFSB1
    2785018712U,	// MTFSF
    301990751U,	// MTLR
    301990751U,	// MTLR8
    301990757U,	// MTVRSAVE
    301990769U,	// MTVSCR
    268436345U,	// MULHD
    268436352U,	// MULHDU
    268436360U,	// MULHW
    268436367U,	// MULHWU
    268436375U,	// MULLD
    268452766U,	// MULLI
    268436389U,	// MULLW
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    268436396U,	// NAND
    268436396U,	// NAND8
    268567474U,	// NEG
    268567474U,	// NEG8
    951U,	// NOP
    268436411U,	// NOR
    268436411U,	// NOR8
    268436416U,	// OR
    268436416U,	// OR4To8
    268436416U,	// OR8
    268436416U,	// OR8To4
    268436420U,	// ORC
    268436420U,	// ORC8
    268485577U,	// ORI
    268485577U,	// ORI8
    268485582U,	// ORIS
    268485582U,	// ORIS8
    0U,	// RESTORE_CR
    268444628U,	// RLDCL
    268510171U,	// RLDICL
    268510179U,	// RLDICR
    281543659U,	// RLDIMI
    281674739U,	// RLWIMI
    268526587U,	// RLWINM
    268526587U,	// RLWINM8
    268526595U,	// RLWINMo
    268444684U,	// RLWNM
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_VRRC
    268436499U,	// SLD
    268436504U,	// SLW
    0U,	// SPILL_CR
    268436509U,	// SRAD
    268502051U,	// SRADI
    268436522U,	// SRAW
    268518448U,	// SRAWI
    268436535U,	// SRD
    268436540U,	// SRW
    272630849U,	// STB
    272630849U,	// STB8
    2801796166U,	// STBU
    2801796166U,	// STBU8
    274728012U,	// STBX
    274728012U,	// STBX8
    275776594U,	// STD
    274728023U,	// STDCX
    2818573407U,	// STDU
    274728037U,	// STDUX
    274728044U,	// STDX
    274728044U,	// STDX_32
    275776594U,	// STD_32
    272630898U,	// STFD
    2801796216U,	// STFDU
    274728063U,	// STFDX
    274728070U,	// STFIWX
    272630926U,	// STFS
    2801796244U,	// STFSU
    274728091U,	// STFSX
    272630946U,	// STH
    272630946U,	// STH8
    274728103U,	// STHBRX
    2801796271U,	// STHU
    2801796271U,	// STHU8
    274728117U,	// STHX
    274728117U,	// STHX8
    274728123U,	// STVEBX
    274728131U,	// STVEHX
    274728139U,	// STVEWX
    274728147U,	// STVX
    274728153U,	// STVXL
    272631008U,	// STW
    272631008U,	// STW8
    274728165U,	// STWBRX
    274728173U,	// STWCX
    2801796341U,	// STWU
    268436731U,	// STWUX
    274728194U,	// STWX
    274728194U,	// STWX8
    268436744U,	// SUBF
    268436744U,	// SUBF8
    268436750U,	// SUBFC
    268436750U,	// SUBFC8
    268436757U,	// SUBFE
    268436757U,	// SUBFE8
    268453148U,	// SUBFIC
    268453148U,	// SUBFIC8
    268567844U,	// SUBFME
    268567844U,	// SUBFME8
    268567852U,	// SUBFZE
    268567852U,	// SUBFZE8
    1332U,	// SYNC
    301989991U,	// TAILB
    301989991U,	// TAILB8
    1107297593U,	// TAILBA
    1107297593U,	// TAILBA8
    108U,	// TAILBCTR
    108U,	// TAILBCTR8
    1090651453U,	// TCRETURNai
    1090651466U,	// TCRETURNai8
    285345112U,	// TCRETURNdi
    285345125U,	// TCRETURNdi8
    285345139U,	// TCRETURNri
    285345152U,	// TCRETURNri8
    1422U,	// TRAP
    268567955U,	// UPDATE_VRSAVE
    268436898U,	// VADDCUW
    268436907U,	// VADDFP
    268436915U,	// VADDSBS
    268436924U,	// VADDSHS
    268436933U,	// VADDSWS
    268436942U,	// VADDUBM
    268436951U,	// VADDUBS
    268436960U,	// VADDUHM
    268436969U,	// VADDUHS
    268436978U,	// VADDUWM
    268436987U,	// VADDUWS
    268436996U,	// VAND
    268437002U,	// VANDC
    268437009U,	// VAVGSB
    268437017U,	// VAVGSH
    268437025U,	// VAVGSW
    268437033U,	// VAVGUB
    268437041U,	// VAVGUH
    268437049U,	// VAVGUW
    281806401U,	// VCFSX
    281806408U,	// VCFUX
    268437071U,	// VCMPBFP
    268437080U,	// VCMPBFPo
    268437090U,	// VCMPEQFP
    268437100U,	// VCMPEQFPo
    268437111U,	// VCMPEQUB
    268437121U,	// VCMPEQUBo
    268437132U,	// VCMPEQUH
    268437142U,	// VCMPEQUHo
    268437153U,	// VCMPEQUW
    268437163U,	// VCMPEQUWo
    268437174U,	// VCMPGEFP
    268437184U,	// VCMPGEFPo
    268437195U,	// VCMPGTFP
    268437205U,	// VCMPGTFPo
    268437216U,	// VCMPGTSB
    268437226U,	// VCMPGTSBo
    268437237U,	// VCMPGTSH
    268437247U,	// VCMPGTSHo
    268437258U,	// VCMPGTSW
    268437268U,	// VCMPGTSWo
    268437279U,	// VCMPGTUB
    268437289U,	// VCMPGTUBo
    268437300U,	// VCMPGTUH
    268437310U,	// VCMPGTUHo
    268437321U,	// VCMPGTUW
    268437331U,	// VCMPGTUWo
    281806686U,	// VCTSXS
    281806694U,	// VCTUXS
    268568430U,	// VEXPTEFP
    268568440U,	// VLOGEFP
    268445569U,	// VMADDFP
    268437386U,	// VMAXFP
    268437394U,	// VMAXSB
    268437402U,	// VMAXSH
    268437410U,	// VMAXSW
    268437418U,	// VMAXUB
    268437426U,	// VMAXUH
    268437434U,	// VMAXUW
    268445634U,	// VMHADDSHS
    268445645U,	// VMHRADDSHS
    268437465U,	// VMINFP
    268437473U,	// VMINSB
    268437481U,	// VMINSH
    268437489U,	// VMINSW
    268437497U,	// VMINUB
    268437505U,	// VMINUH
    268437513U,	// VMINUW
    268445713U,	// VMLADDUHM
    268437532U,	// VMRGHB
    268437540U,	// VMRGHH
    268437548U,	// VMRGHW
    268437556U,	// VMRGLB
    268437564U,	// VMRGLH
    268437572U,	// VMRGLW
    268445772U,	// VMSUMMBM
    268445782U,	// VMSUMSHM
    268445792U,	// VMSUMSHS
    268445802U,	// VMSUMUBM
    268445812U,	// VMSUMUHM
    268445822U,	// VMSUMUHS
    268437640U,	// VMULESB
    268437649U,	// VMULESH
    268437658U,	// VMULEUB
    268437667U,	// VMULEUH
    268437676U,	// VMULOSB
    268437685U,	// VMULOSH
    268437694U,	// VMULOUB
    268437703U,	// VMULOUH
    268445904U,	// VNMSUBFP
    268437722U,	// VNOR
    268437728U,	// VOR
    268445925U,	// VPERM
    268437740U,	// VPKPX
    268437747U,	// VPKSHSS
    268437756U,	// VPKSHUS
    268437765U,	// VPKSWSS
    268437774U,	// VPKSWUS
    268437783U,	// VPKUHUM
    268437792U,	// VPKUHUS
    268437801U,	// VPKUWUM
    268437810U,	// VPKUWUS
    268568891U,	// VREFP
    268568898U,	// VRFIM
    268568905U,	// VRFIN
    268568912U,	// VRFIP
    268568919U,	// VRFIZ
    268437854U,	// VRLB
    268437860U,	// VRLH
    268437866U,	// VRLW
    268568944U,	// VRSQRTEFP
    268446075U,	// VSEL
    268437889U,	// VSL
    268437894U,	// VSLB
    268446092U,	// VSLDOI
    268437908U,	// VSLH
    268437914U,	// VSLO
    268437920U,	// VSLW
    281807270U,	// VSPLTB
    281807278U,	// VSPLTH
    282069430U,	// VSPLTISB
    282069440U,	// VSPLTISH
    282069450U,	// VSPLTISW
    281807316U,	// VSPLTW
    268437980U,	// VSR
    268437985U,	// VSRAB
    268437992U,	// VSRAH
    268437999U,	// VSRAW
    268438006U,	// VSRB
    268438012U,	// VSRH
    268438018U,	// VSRO
    268438024U,	// VSRW
    268438030U,	// VSUBCUW
    268438039U,	// VSUBFP
    268438047U,	// VSUBSBS
    268438056U,	// VSUBSHS
    268438065U,	// VSUBSWS
    268438074U,	// VSUBUBM
    268438083U,	// VSUBUBS
    268438092U,	// VSUBUHM
    268438101U,	// VSUBUHS
    268438110U,	// VSUBUWM
    268438119U,	// VSUBUWS
    268438128U,	// VSUM2SWS
    268438138U,	// VSUM4SBS
    268438148U,	// VSUM4SHS
    268438158U,	// VSUM4UBS
    268438168U,	// VSUMSWS
    268569249U,	// VUPKHPX
    268569258U,	// VUPKHSB
    268569267U,	// VUPKHSH
    268569276U,	// VUPKLPX
    268569285U,	// VUPKLSB
    268569294U,	// VUPKLSH
    268438231U,	// VXOR
    270535383U,	// V_SET0
    268438237U,	// XOR
    268438237U,	// XOR8
    268487394U,	// XORI
    268487394U,	// XORI8
    268487400U,	// XORIS
    268487400U,	// XORIS8
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000BUNDLE\000add \000addc \000adde \000addi \000addic \000add"
    "ic. \000addis \000addme \000addze \000and \000andc \000andis. \000andi."
    " \000b \000b\000bctr\000bctrl\000bl \000bla \000cmpd \000cmpdi \000cmpl"
    "d \000cmpldi \000cmplw \000cmplwi \000cmpw \000cmpwi \000cntlzd \000cnt"
    "lzw \000creqv \000cror \000crxor \000dcba \000dcbf \000dcbi \000dcbst \000"
    "dcbt \000dcbtst \000dcbz \000dcbzl \000divd \000divdu \000divw \000divw"
    "u \000dss \000dssall\000dst \000dstst \000dststt \000dstt \000eqv \000e"
    "xtsb \000extsh \000extsw \000fabs \000fadd \000fadds \000fcfid \000fcmp"
    "u \000fctidz \000fctiwz \000fdiv \000fdivs \000fmadd \000fmadds \000fmr"
    " \000fmsub \000fmsubs \000fmul \000fmuls \000fnabs \000fneg \000fnmadd "
    "\000fnmadds \000fnmsub \000fnmsubs \000frsp \000fsel \000fsqrt \000fsqr"
    "ts \000fsub \000fsubs \000la \000lbz \000lbzu \000lbzx \000ld \000ldarx"
    " \000ldu \000ldx \000ld 2, 8(\000ld 2, 40(1)\000lfd \000lfdx \000lfs \000"
    "lfsx \000lha \000lhau \000lhax \000lhbrx \000lhz \000lhzu \000lhzx \000"
    "li \000lis \000lvebx \000lvehx \000lvewx \000lvsl \000lvsr \000lvx \000"
    "lvxl \000lwa \000lwarx \000lwax \000lwbrx \000lwz \000lwzu \000lwzx \000"
    "mcrf \000mfcr \000mfctr \000mffs \000mflr \000mfspr \000mfvscr \000mtcr"
    "f \000mtctr \000mtfsb0 \000mtfsb1 \000mtfsf \000mtlr \000mtspr 256, \000"
    "mtvscr \000mulhd \000mulhdu \000mulhw \000mulhwu \000mulld \000mulli \000"
    "mullw \000nand \000neg \000nop\000nor \000or \000orc \000ori \000oris \000"
    "rldcl \000rldicl \000rldicr \000rldimi \000rlwimi \000rlwinm \000rlwinm"
    ". \000rlwnm \000sld \000slw \000srad \000sradi \000sraw \000srawi \000s"
    "rd \000srw \000stb \000stbu \000stbx \000std \000stdcx. \000stdu \000st"
    "dux \000stdx \000stfd \000stfdu \000stfdx \000stfiwx \000stfs \000stfsu"
    " \000stfsx \000sth \000sthbrx \000sthu \000sthx \000stvebx \000stvehx \000"
    "stvewx \000stvx \000stvxl \000stw \000stwbrx \000stwcx. \000stwu \000st"
    "wux \000stwx \000subf \000subfc \000subfe \000subfic \000subfme \000sub"
    "fze \000sync\000ba \000#TC_RETURNa \000#TC_RETURNa8 \000#TC_RETURNd \000"
    "#TC_RETURNd8 \000#TC_RETURNr \000#TC_RETURNr8 \000trap\000UPDATE_VRSAVE"
    " \000vaddcuw \000vaddfp \000vaddsbs \000vaddshs \000vaddsws \000vaddubm"
    " \000vaddubs \000vadduhm \000vadduhs \000vadduwm \000vadduws \000vand \000"
    "vandc \000vavgsb \000vavgsh \000vavgsw \000vavgub \000vavguh \000vavguw"
    " \000vcfsx \000vcfux \000vcmpbfp \000vcmpbfp. \000vcmpeqfp \000vcmpeqfp"
    ". \000vcmpequb \000vcmpequb. \000vcmpequh \000vcmpequh. \000vcmpequw \000"
    "vcmpequw. \000vcmpgefp \000vcmpgefp. \000vcmpgtfp \000vcmpgtfp. \000vcm"
    "pgtsb \000vcmpgtsb. \000vcmpgtsh \000vcmpgtsh. \000vcmpgtsw \000vcmpgts"
    "w. \000vcmpgtub \000vcmpgtub. \000vcmpgtuh \000vcmpgtuh. \000vcmpgtuw \000"
    "vcmpgtuw. \000vctsxs \000vctuxs \000vexptefp \000vlogefp \000vmaddfp \000"
    "vmaxfp \000vmaxsb \000vmaxsh \000vmaxsw \000vmaxub \000vmaxuh \000vmaxu"
    "w \000vmhaddshs \000vmhraddshs \000vminfp \000vminsb \000vminsh \000vmi"
    "nsw \000vminub \000vminuh \000vminuw \000vmladduhm \000vmrghb \000vmrgh"
    "h \000vmrghw \000vmrglb \000vmrglh \000vmrglw \000vmsummbm \000vmsumshm"
    " \000vmsumshs \000vmsumubm \000vmsumuhm \000vmsumuhs \000vmulesb \000vm"
    "ulesh \000vmuleub \000vmuleuh \000vmulosb \000vmulosh \000vmuloub \000v"
    "mulouh \000vnmsubfp \000vnor \000vor \000vperm \000vpkpx \000vpkshss \000"
    "vpkshus \000vpkswss \000vpkswus \000vpkuhum \000vpkuhus \000vpkuwum \000"
    "vpkuwus \000vrefp \000vrfim \000vrfin \000vrfip \000vrfiz \000vrlb \000"
    "vrlh \000vrlw \000vrsqrtefp \000vsel \000vsl \000vslb \000vsldoi \000vs"
    "lh \000vslo \000vslw \000vspltb \000vsplth \000vspltisb \000vspltish \000"
    "vspltisw \000vspltw \000vsr \000vsrab \000vsrah \000vsraw \000vsrb \000"
    "vsrh \000vsro \000vsrw \000vsubcuw \000vsubfp \000vsubsbs \000vsubshs \000"
    "vsubsws \000vsububm \000vsububs \000vsubuhm \000vsubuhs \000vsubuwm \000"
    "vsubuws \000vsum2sws \000vsum4sbs \000vsum4shs \000vsum4ubs \000vsumsws"
    " \000vupkhpx \000vupkhsb \000vupkhsh \000vupklpx \000vupklsb \000vupkls"
    "h \000vxor \000xor \000xori \000xoris \000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 28) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, BCTR, BCTR8, BCTRL8_Darwin, BCTRL8_ELF, BCTRL_Darwi...
    return;
    break;
  case 1:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // B
    printBranchOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // BCC, BLR
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 4:
    // BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, TAILBA, TAILBA8, TCRETURN...
    printAbsAddrOperand(MI, 0, O); 
    break;
  case 5:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 6:
    // DSS
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // MTCRF, MTCRF8
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MTFSB0, MTFSB1
    printU5ImmOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // MTFSF, STBU, STBU8, STDU, STFDU, STFSU, STHU, STHU8, STWU
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  }


  // Fragment 1 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 24) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // BCC, TCRETURNai, TCRETURNai8, TCRETURNdi, TCRETURNdi8, TCRETURNri, TCR...
    O << ' '; 
    break;
  case 2:
    // BL8_Darwin, BL8_ELF, BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, BL_D...
    return;
    break;
  case 3:
    // BLR
    O << "lr "; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 4:
    // LDinto_toc
    O << ')'; 
    return;
    break;
  case 5:
    // MFVRSAVE
    O << ", 256"; 
    return;
    break;
  case 6:
    // MTFSF
    printOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // STBU, STBU8, STFDU, STFSU, STHU, STHU8, STWU
    printSymbolLo(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // STDU
    printS16X4ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 20) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // BCC
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // CRSET, CRUNSET, V_SET0
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // LA, LHAU8
    printSymbolLo(MI, 2, O); 
    O << '('; 
    break;
  case 4:
    // LBZ, LBZ8, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LWZ, LWZ8, STB, STB8, STFD,...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 5:
    // LBZU, LBZU8, LFDU, LFSU, LHAU, LHZU, LHZU8, LWZU, LWZU8
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 6:
    // LBZX, LBZX8, LDARX, LDX, LFDX, LFSX, LHAX, LHAX8, LHBRX, LHZX, LHZX8, ...
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 7:
    // LD, LWA, STD, STD_32
    printMemRegImmShifted(MI, 1, O); 
    return;
    break;
  case 8:
    // LDU
    printMemRegImmShifted(MI, 2, O); 
    return;
    break;
  case 9:
    // LI, LI8
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 10:
    // LIS, LIS8
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 11:
    // MFOCRF
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 12:
    // RLDIMI, RLWIMI, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 13:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDZE, ADDZE8, CNTLZD, CNTLZW, EXTSB, EXTSB8, EXTSH, EX...
    return;
    break;
  case 2:
    // LA
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 3:
    // LHAU8
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // RLDIMI
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 5:
    // RLWIMI
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 6:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 14) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, CMPDI, CMPWI, MULLI, SUBFIC, SUBFI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDIS, ADDIS8
    printSymbolHi(MI, 2, O); 
    return;
    break;
  case 3:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // RLDICL, RLDICR, SRADI
    printU6ImmOperand(MI, 2, O); 
    break;
  case 5:
    // RLWINM, RLWINM8, RLWINMo, SRAWI
    printU5ImmOperand(MI, 2, O); 
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 13) & 1) {
    // FMADD, FMADDS, FMSUB, FMSUBS, FNMADD, FNMADDS, FNMSUB, FNMSUBS, FSELD,...
    O << ", "; 
  } else {
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    return;
  }

  switch (MI->getOpcode()) {
  case PPC::FMADD:
  case PPC::FMADDS:
  case PPC::FMSUB:
  case PPC::FMSUBS:
  case PPC::FNMADD:
  case PPC::FNMADDS:
  case PPC::FNMSUB:
  case PPC::FNMSUBS:
  case PPC::FSELD:
  case PPC::FSELS:
  case PPC::RLDCL:
  case PPC::RLDICL:
  case PPC::RLDICR:
  case PPC::VMADDFP:
  case PPC::VMHADDSHS:
  case PPC::VMHRADDSHS:
  case PPC::VMLADDUHM:
  case PPC::VMSUMMBM:
  case PPC::VMSUMSHM:
  case PPC::VMSUMSHS:
  case PPC::VMSUMUBM:
  case PPC::VMSUMUHM:
  case PPC::VMSUMUHS:
  case PPC::VNMSUBFP:
  case PPC::VPERM:
  case PPC::VSEL:
  case PPC::VSLDOI:
    switch (MI->getOpcode()) {
    case PPC::FMADD: 
    case PPC::FMADDS: 
    case PPC::FMSUB: 
    case PPC::FMSUBS: 
    case PPC::FNMADD: 
    case PPC::FNMADDS: 
    case PPC::FNMSUB: 
    case PPC::FNMSUBS: 
    case PPC::FSELD: 
    case PPC::FSELS: 
    case PPC::VMADDFP: 
    case PPC::VMHADDSHS: 
    case PPC::VMHRADDSHS: 
    case PPC::VMLADDUHM: 
    case PPC::VMSUMMBM: 
    case PPC::VMSUMSHM: 
    case PPC::VMSUMSHS: 
    case PPC::VMSUMUBM: 
    case PPC::VMSUMUHM: 
    case PPC::VMSUMUHS: 
    case PPC::VNMSUBFP: 
    case PPC::VPERM: 
    case PPC::VSEL: printOperand(MI, 3, O); break;
    case PPC::RLDCL: 
    case PPC::RLDICL: 
    case PPC::RLDICR: printU6ImmOperand(MI, 3, O); break;
    case PPC::VSLDOI: printU5ImmOperand(MI, 3, O); break;
    }
    return;
    break;
  case PPC::RLWINM:
  case PPC::RLWINM8:
  case PPC::RLWINMo:
  case PPC::RLWNM:
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 176 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 7, 9, 11, 13, 15, 19, 21, 23, 25, 27, 31, 34,
    36, 38, 41, 45, 48, 51, 54, 57, 61, 64, 67, 70, 73, 77,
    80, 83, 86, 89, 93, 96, 99, 102, 105, 109, 112, 115, 118, 121,
    121, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 159, 163,
    167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219,
    223, 227, 231, 235, 239, 243, 243, 246, 249, 252, 255, 258, 261, 264,
    267, 270, 273, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316,
    320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 382, 385,
    388, 391, 394, 397, 400, 403, 406, 409, 412, 416, 420, 424, 428, 432,
    436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488,
    492, 496, 500, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276,
    280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332,
    336, 340, 344, 348, 352, 356, 360, 0
  };

  const char *AsmStrs =
    "ca\000cr0\0002\0001\0000\0003\000cr1\0006\0005\0004\0007\000cr2\00010\000"
    "9\0008\00011\000cr3\00014\00013\00012\00015\000cr4\00018\00017\00016\000"
    "19\000cr5\00022\00021\00020\00023\000cr6\00026\00025\00024\00027\000cr7"
    "\00030\00029\00028\00031\000ctr\000f0\000f1\000f2\000f3\000f4\000f5\000"
    "f6\000f7\000f8\000f9\000f10\000f11\000f12\000f13\000f14\000f15\000f16\000"
    "f17\000f18\000f19\000f20\000f21\000f22\000f23\000f24\000f25\000f26\000f"
    "27\000f28\000f29\000f30\000f31\000lr\000r0\000r1\000r2\000r3\000r4\000r"
    "5\000r6\000r7\000r8\000r9\000r10\000r11\000r12\000r13\000r14\000r15\000"
    "r16\000r17\000r18\000r19\000r20\000r21\000r22\000r23\000r24\000r25\000r"
    "26\000r27\000r28\000r29\000r30\000r31\000**ROUNDING MODE**\000v0\000v1\000"
    "v2\000v3\000v4\000v5\000v6\000v7\000v8\000v9\000v10\000v11\000v12\000v1"
    "3\000v14\000v15\000v16\000v17\000v18\000v19\000v20\000v21\000v22\000v23"
    "\000v24\000v25\000v26\000v27\000v28\000v29\000v30\000v31\000VRsave\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *PPCInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 529 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 158, 163, 168, 173, 179, 184, 190, 195, 201, 207, 214, 221, 227, 
    234, 240, 247, 253, 260, 277, 292, 296, 301, 306, 312, 319, 327, 333, 
    340, 360, 380, 400, 419, 439, 459, 479, 498, 518, 538, 558, 577, 598, 
    619, 640, 660, 679, 698, 717, 735, 755, 775, 795, 814, 834, 854, 874, 
    893, 909, 925, 941, 956, 958, 962, 967, 973, 987, 998, 1011, 1022, 1033, 
    1041, 1053, 1062, 1073, 1082, 1086, 1096, 1104, 1109, 1115, 1121, 1128, 1134, 1141, 
    1146, 1152, 1159, 1166, 1172, 1177, 1183, 1191, 1196, 1201, 1206, 1212, 1217, 1224, 
    1229, 1235, 1240, 1246, 1251, 1257, 1261, 1268, 1272, 1278, 1284, 1292, 1299, 1308, 
    1313, 1320, 1329, 1339, 1343, 1348, 1354, 1361, 1367, 1374, 1380, 1389, 1401, 1407, 
    1413, 1418, 1424, 1432, 1438, 1445, 1452, 1459, 1466, 1471, 1477, 1483, 1490, 1494, 
    1500, 1507, 1512, 1518, 1525, 1532, 1538, 1544, 1551, 1559, 1566, 1574, 1579, 1585, 
    1591, 1597, 1604, 1609, 1615, 1618, 1622, 1627, 1632, 1638, 1643, 1649, 1652, 1658, 
    1662, 1666, 1677, 1683, 1697, 1701, 1706, 1711, 1715, 1720, 1725, 1729, 1734, 1739, 
    1745, 1750, 1756, 1762, 1766, 1771, 1776, 1782, 1787, 1793, 1796, 1800, 1804, 1809, 
    1815, 1821, 1827, 1832, 1837, 1841, 1846, 1850, 1856, 1861, 1867, 1871, 1876, 1881, 
    1887, 1892, 1898, 1903, 1908, 1914, 1925, 1935, 1941, 1948, 1953, 1958, 1964, 1971, 
    1980, 1987, 1993, 2000, 2006, 2013, 2020, 2027, 2033, 2038, 2044, 2053, 2060, 2066, 
    2073, 2079, 2086, 2092, 2098, 2104, 2115, 2127, 2132, 2138, 2142, 2147, 2151, 2155, 
    2160, 2163, 2170, 2174, 2181, 2185, 2190, 2194, 2199, 2204, 2210, 2221, 2227, 2234, 
    2241, 2248, 2255, 2262, 2270, 2278, 2284, 2297, 2310, 2323, 2336, 2351, 2355, 2359, 
    2368, 2373, 2379, 2384, 2390, 2394, 2398, 2402, 2407, 2412, 2418, 2423, 2429, 2433, 
    2439, 2444, 2450, 2455, 2463, 2470, 2475, 2481, 2487, 2494, 2499, 2505, 2511, 2515, 
    2520, 2527, 2532, 2538, 2543, 2549, 2556, 2563, 2570, 2575, 2581, 2585, 2590, 2597, 
    2603, 2608, 2614, 2619, 2625, 2630, 2636, 2642, 2649, 2655, 2662, 2669, 2677, 2684, 
    2692, 2699, 2707, 2712, 2718, 2725, 2732, 2740, 2749, 2759, 2770, 2782, 2793, 2805, 
    2816, 2828, 2833, 2847, 2855, 2862, 2870, 2878, 2886, 2894, 2902, 2910, 2918, 2926, 
    2934, 2939, 2945, 2952, 2959, 2966, 2973, 2980, 2987, 2993, 2999, 3007, 3016, 3025, 
    3035, 3044, 3054, 3063, 3073, 3082, 3092, 3101, 3111, 3120, 3130, 3139, 3149, 3158, 
    3168, 3177, 3187, 3196, 3206, 3215, 3225, 3234, 3244, 3251, 3258, 3267, 3275, 3283, 
    3290, 3297, 3304, 3311, 3318, 3325, 3332, 3342, 3353, 3360, 3367, 3374, 3381, 3388, 
    3395, 3402, 3412, 3419, 3426, 3433, 3440, 3447, 3454, 3463, 3472, 3481, 3490, 3499, 
    3508, 3516, 3524, 3532, 3540, 3548, 3556, 3564, 3572, 3581, 3586, 3590, 3596, 3602, 
    3610, 3618, 3626, 3634, 3642, 3650, 3658, 3666, 3672, 3678, 3684, 3690, 3696, 3701, 
    3706, 3711, 3721, 3726, 3730, 3735, 3742, 3747, 3752, 3757, 3764, 3771, 3780, 3789, 
    3798, 3805, 3809, 3815, 3821, 3827, 3832, 3837, 3842, 3847, 3855, 3862, 3870, 3878, 
    3886, 3894, 3902, 3910, 3918, 3926, 3934, 3943, 3952, 3961, 3970, 3978, 3986, 3994, 
    4002, 4010, 4018, 4026, 4031, 4038, 4042, 4047, 4052, 4058, 4064, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000BUNDLE\000ADD4\000AD"
    "D8\000ADDC\000ADDC8\000ADDE\000ADDE8\000ADDI\000ADDI8\000ADDIC\000ADDIC"
    "8\000ADDICo\000ADDIS\000ADDIS8\000ADDME\000ADDME8\000ADDZE\000ADDZE8\000"
    "ADJCALLSTACKDOWN\000ADJCALLSTACKUP\000AND\000AND8\000ANDC\000ANDC8\000A"
    "NDISo\000ANDISo8\000ANDIo\000ANDIo8\000ATOMIC_CMP_SWAP_I16\000ATOMIC_CM"
    "P_SWAP_I32\000ATOMIC_CMP_SWAP_I64\000ATOMIC_CMP_SWAP_I8\000ATOMIC_LOAD_"
    "ADD_I16\000ATOMIC_LOAD_ADD_I32\000ATOMIC_LOAD_ADD_I64\000ATOMIC_LOAD_AD"
    "D_I8\000ATOMIC_LOAD_AND_I16\000ATOMIC_LOAD_AND_I32\000ATOMIC_LOAD_AND_I"
    "64\000ATOMIC_LOAD_AND_I8\000ATOMIC_LOAD_NAND_I16\000ATOMIC_LOAD_NAND_I3"
    "2\000ATOMIC_LOAD_NAND_I64\000ATOMIC_LOAD_NAND_I8\000ATOMIC_LOAD_OR_I16\000"
    "ATOMIC_LOAD_OR_I32\000ATOMIC_LOAD_OR_I64\000ATOMIC_LOAD_OR_I8\000ATOMIC"
    "_LOAD_SUB_I16\000ATOMIC_LOAD_SUB_I32\000ATOMIC_LOAD_SUB_I64\000ATOMIC_L"
    "OAD_SUB_I8\000ATOMIC_LOAD_XOR_I16\000ATOMIC_LOAD_XOR_I32\000ATOMIC_LOAD"
    "_XOR_I64\000ATOMIC_LOAD_XOR_I8\000ATOMIC_SWAP_I16\000ATOMIC_SWAP_I32\000"
    "ATOMIC_SWAP_I64\000ATOMIC_SWAP_I8\000B\000BCC\000BCTR\000BCTR8\000BCTRL"
    "8_Darwin\000BCTRL8_ELF\000BCTRL_Darwin\000BCTRL_SVR4\000BL8_Darwin\000B"
    "L8_ELF\000BLA8_Darwin\000BLA8_ELF\000BLA_Darwin\000BLA_SVR4\000BLR\000B"
    "L_Darwin\000BL_SVR4\000CMPD\000CMPDI\000CMPLD\000CMPLDI\000CMPLW\000CMP"
    "LWI\000CMPW\000CMPWI\000CNTLZD\000CNTLZW\000CREQV\000CROR\000CRSET\000C"
    "RUNSET\000DCBA\000DCBF\000DCBI\000DCBST\000DCBT\000DCBTST\000DCBZ\000DC"
    "BZL\000DIVD\000DIVDU\000DIVW\000DIVWU\000DSS\000DSSALL\000DST\000DST64\000"
    "DSTST\000DSTST64\000DSTSTT\000DSTSTT64\000DSTT\000DSTT64\000DYNALLOC\000"
    "DYNALLOC8\000EQV\000EQV8\000EXTSB\000EXTSB8\000EXTSH\000EXTSH8\000EXTSW"
    "\000EXTSW_32\000EXTSW_32_64\000FABSD\000FABSS\000FADD\000FADDS\000FADDr"
    "tz\000FCFID\000FCMPUD\000FCMPUS\000FCTIDZ\000FCTIWZ\000FDIV\000FDIVS\000"
    "FMADD\000FMADDS\000FMR\000FMSUB\000FMSUBS\000FMUL\000FMULS\000FNABSD\000"
    "FNABSS\000FNEGD\000FNEGS\000FNMADD\000FNMADDS\000FNMSUB\000FNMSUBS\000F"
    "RSP\000FSELD\000FSELS\000FSQRT\000FSQRTS\000FSUB\000FSUBS\000LA\000LBZ\000"
    "LBZ8\000LBZU\000LBZU8\000LBZX\000LBZX8\000LD\000LDARX\000LDU\000LDX\000"
    "LDinto_toc\000LDtoc\000LDtoc_restore\000LFD\000LFDU\000LFDX\000LFS\000L"
    "FSU\000LFSX\000LHA\000LHA8\000LHAU\000LHAU8\000LHAX\000LHAX8\000LHBRX\000"
    "LHZ\000LHZ8\000LHZU\000LHZU8\000LHZX\000LHZX8\000LI\000LI8\000LIS\000LI"
    "S8\000LVEBX\000LVEHX\000LVEWX\000LVSL\000LVSR\000LVX\000LVXL\000LWA\000"
    "LWARX\000LWAX\000LWBRX\000LWZ\000LWZ8\000LWZU\000LWZU8\000LWZX\000LWZX8"
    "\000MCRF\000MFCR\000MFCR8\000MFCR8pseud\000MFCRpseud\000MFCTR\000MFCTR8"
    "\000MFFS\000MFLR\000MFLR8\000MFOCRF\000MFVRSAVE\000MFVSCR\000MTCRF\000M"
    "TCRF8\000MTCTR\000MTCTR8\000MTFSB0\000MTFSB1\000MTFSF\000MTLR\000MTLR8\000"
    "MTVRSAVE\000MTVSCR\000MULHD\000MULHDU\000MULHW\000MULHWU\000MULLD\000MU"
    "LLI\000MULLW\000MovePCtoLR\000MovePCtoLR8\000NAND\000NAND8\000NEG\000NE"
    "G8\000NOP\000NOR\000NOR8\000OR\000OR4To8\000OR8\000OR8To4\000ORC\000ORC"
    "8\000ORI\000ORI8\000ORIS\000ORIS8\000RESTORE_CR\000RLDCL\000RLDICL\000R"
    "LDICR\000RLDIMI\000RLWIMI\000RLWINM\000RLWINM8\000RLWINMo\000RLWNM\000S"
    "ELECT_CC_F4\000SELECT_CC_F8\000SELECT_CC_I4\000SELECT_CC_I8\000SELECT_C"
    "C_VRRC\000SLD\000SLW\000SPILL_CR\000SRAD\000SRADI\000SRAW\000SRAWI\000S"
    "RD\000SRW\000STB\000STB8\000STBU\000STBU8\000STBX\000STBX8\000STD\000ST"
    "DCX\000STDU\000STDUX\000STDX\000STDX_32\000STD_32\000STFD\000STFDU\000S"
    "TFDX\000STFIWX\000STFS\000STFSU\000STFSX\000STH\000STH8\000STHBRX\000ST"
    "HU\000STHU8\000STHX\000STHX8\000STVEBX\000STVEHX\000STVEWX\000STVX\000S"
    "TVXL\000STW\000STW8\000STWBRX\000STWCX\000STWU\000STWUX\000STWX\000STWX"
    "8\000SUBF\000SUBF8\000SUBFC\000SUBFC8\000SUBFE\000SUBFE8\000SUBFIC\000S"
    "UBFIC8\000SUBFME\000SUBFME8\000SUBFZE\000SUBFZE8\000SYNC\000TAILB\000TA"
    "ILB8\000TAILBA\000TAILBA8\000TAILBCTR\000TAILBCTR8\000TCRETURNai\000TCR"
    "ETURNai8\000TCRETURNdi\000TCRETURNdi8\000TCRETURNri\000TCRETURNri8\000T"
    "RAP\000UPDATE_VRSAVE\000VADDCUW\000VADDFP\000VADDSBS\000VADDSHS\000VADD"
    "SWS\000VADDUBM\000VADDUBS\000VADDUHM\000VADDUHS\000VADDUWM\000VADDUWS\000"
    "VAND\000VANDC\000VAVGSB\000VAVGSH\000VAVGSW\000VAVGUB\000VAVGUH\000VAVG"
    "UW\000VCFSX\000VCFUX\000VCMPBFP\000VCMPBFPo\000VCMPEQFP\000VCMPEQFPo\000"
    "VCMPEQUB\000VCMPEQUBo\000VCMPEQUH\000VCMPEQUHo\000VCMPEQUW\000VCMPEQUWo"
    "\000VCMPGEFP\000VCMPGEFPo\000VCMPGTFP\000VCMPGTFPo\000VCMPGTSB\000VCMPG"
    "TSBo\000VCMPGTSH\000VCMPGTSHo\000VCMPGTSW\000VCMPGTSWo\000VCMPGTUB\000V"
    "CMPGTUBo\000VCMPGTUH\000VCMPGTUHo\000VCMPGTUW\000VCMPGTUWo\000VCTSXS\000"
    "VCTUXS\000VEXPTEFP\000VLOGEFP\000VMADDFP\000VMAXFP\000VMAXSB\000VMAXSH\000"
    "VMAXSW\000VMAXUB\000VMAXUH\000VMAXUW\000VMHADDSHS\000VMHRADDSHS\000VMIN"
    "FP\000VMINSB\000VMINSH\000VMINSW\000VMINUB\000VMINUH\000VMINUW\000VMLAD"
    "DUHM\000VMRGHB\000VMRGHH\000VMRGHW\000VMRGLB\000VMRGLH\000VMRGLW\000VMS"
    "UMMBM\000VMSUMSHM\000VMSUMSHS\000VMSUMUBM\000VMSUMUHM\000VMSUMUHS\000VM"
    "ULESB\000VMULESH\000VMULEUB\000VMULEUH\000VMULOSB\000VMULOSH\000VMULOUB"
    "\000VMULOUH\000VNMSUBFP\000VNOR\000VOR\000VPERM\000VPKPX\000VPKSHSS\000"
    "VPKSHUS\000VPKSWSS\000VPKSWUS\000VPKUHUM\000VPKUHUS\000VPKUWUM\000VPKUW"
    "US\000VREFP\000VRFIM\000VRFIN\000VRFIP\000VRFIZ\000VRLB\000VRLH\000VRLW"
    "\000VRSQRTEFP\000VSEL\000VSL\000VSLB\000VSLDOI\000VSLH\000VSLO\000VSLW\000"
    "VSPLTB\000VSPLTH\000VSPLTISB\000VSPLTISH\000VSPLTISW\000VSPLTW\000VSR\000"
    "VSRAB\000VSRAH\000VSRAW\000VSRB\000VSRH\000VSRO\000VSRW\000VSUBCUW\000V"
    "SUBFP\000VSUBSBS\000VSUBSHS\000VSUBSWS\000VSUBUBM\000VSUBUBS\000VSUBUHM"
    "\000VSUBUHS\000VSUBUWM\000VSUBUWS\000VSUM2SWS\000VSUM4SBS\000VSUM4SHS\000"
    "VSUM4UBS\000VSUMSWS\000VUPKHPX\000VUPKHSB\000VUPKHSH\000VUPKLPX\000VUPK"
    "LSB\000VUPKLSH\000VXOR\000V_SET0\000XOR\000XOR8\000XORI\000XORI8\000XOR"
    "IS\000XORIS8\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_GPRC,
    RC_G8RC,
    RC_F4RC,
    RC_CRBITRC,
    RC_G8RC_with_sub_32,
    RC_F8RC,
    RC_VRRC,
    RC_CRRC,
    RC_VRSAVERC,
    RC_CTRRC,
    RC_CARRYRC,
    RC_CTRRC8
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_GPRC:
    switch (Reg) {
    default: break;
    case PPC::R2:
    case PPC::R3:
    case PPC::R4:
    case PPC::R5:
    case PPC::R6:
    case PPC::R7:
    case PPC::R8:
    case PPC::R9:
    case PPC::R10:
    case PPC::R11:
    case PPC::R12:
    case PPC::R30:
    case PPC::R29:
    case PPC::R28:
    case PPC::R27:
    case PPC::R26:
    case PPC::R25:
    case PPC::R24:
    case PPC::R23:
    case PPC::R22:
    case PPC::R21:
    case PPC::R20:
    case PPC::R19:
    case PPC::R18:
    case PPC::R17:
    case PPC::R16:
    case PPC::R15:
    case PPC::R14:
    case PPC::R13:
    case PPC::R31:
    case PPC::R0:
    case PPC::R1:
    case PPC::LR:
      return true;
    }
    break;
  case RC_G8RC:
    switch (Reg) {
    default: break;
    case PPC::X2:
    case PPC::X3:
    case PPC::X4:
    case PPC::X5:
    case PPC::X6:
    case PPC::X7:
    case PPC::X8:
    case PPC::X9:
    case PPC::X10:
    case PPC::X11:
    case PPC::X12:
    case PPC::X30:
    case PPC::X29:
    case PPC::X28:
    case PPC::X27:
    case PPC::X26:
    case PPC::X25:
    case PPC::X24:
    case PPC::X23:
    case PPC::X22:
    case PPC::X21:
    case PPC::X20:
    case PPC::X19:
    case PPC::X18:
    case PPC::X17:
    case PPC::X16:
    case PPC::X15:
    case PPC::X14:
    case PPC::X31:
    case PPC::X13:
    case PPC::X0:
    case PPC::X1:
    case PPC::LR8:
      return true;
    }
    break;
  case RC_F4RC:
    switch (Reg) {
    default: break;
    case PPC::F0:
    case PPC::F1:
    case PPC::F2:
    case PPC::F3:
    case PPC::F4:
    case PPC::F5:
    case PPC::F6:
    case PPC::F7:
    case PPC::F8:
    case PPC::F9:
    case PPC::F10:
    case PPC::F11:
    case PPC::F12:
    case PPC::F13:
    case PPC::F31:
    case PPC::F30:
    case PPC::F29:
    case PPC::F28:
    case PPC::F27:
    case PPC::F26:
    case PPC::F25:
    case PPC::F24:
    case PPC::F23:
    case PPC::F22:
    case PPC::F21:
    case PPC::F20:
    case PPC::F19:
    case PPC::F18:
    case PPC::F17:
    case PPC::F16:
    case PPC::F15:
    case PPC::F14:
      return true;
    }
    break;
  case RC_CRBITRC:
    switch (Reg) {
    default: break;
    case PPC::CR0LT:
    case PPC::CR0GT:
    case PPC::CR0EQ:
    case PPC::CR0UN:
    case PPC::CR1LT:
    case PPC::CR1GT:
    case PPC::CR1EQ:
    case PPC::CR1UN:
    case PPC::CR2LT:
    case PPC::CR2GT:
    case PPC::CR2EQ:
    case PPC::CR2UN:
    case PPC::CR3LT:
    case PPC::CR3GT:
    case PPC::CR3EQ:
    case PPC::CR3UN:
    case PPC::CR4LT:
    case PPC::CR4GT:
    case PPC::CR4EQ:
    case PPC::CR4UN:
    case PPC::CR5LT:
    case PPC::CR5GT:
    case PPC::CR5EQ:
    case PPC::CR5UN:
    case PPC::CR6LT:
    case PPC::CR6GT:
    case PPC::CR6EQ:
    case PPC::CR6UN:
    case PPC::CR7LT:
    case PPC::CR7GT:
    case PPC::CR7EQ:
    case PPC::CR7UN:
      return true;
    }
    break;
  case RC_G8RC_with_sub_32:
    switch (Reg) {
    default: break;
    case PPC::X2:
    case PPC::X3:
    case PPC::X4:
    case PPC::X5:
    case PPC::X6:
    case PPC::X7:
    case PPC::X8:
    case PPC::X9:
    case PPC::X10:
    case PPC::X11:
    case PPC::X12:
    case PPC::X30:
    case PPC::X29:
    case PPC::X28:
    case PPC::X27:
    case PPC::X26:
    case PPC::X25:
    case PPC::X24:
    case PPC::X23:
    case PPC::X22:
    case PPC::X21:
    case PPC::X20:
    case PPC::X19:
    case PPC::X18:
    case PPC::X17:
    case PPC::X16:
    case PPC::X15:
    case PPC::X14:
    case PPC::X31:
    case PPC::X13:
    case PPC::X0:
    case PPC::X1:
      return true;
    }
    break;
  case RC_F8RC:
    switch (Reg) {
    default: break;
    case PPC::F0:
    case PPC::F1:
    case PPC::F2:
    case PPC::F3:
    case PPC::F4:
    case PPC::F5:
    case PPC::F6:
    case PPC::F7:
    case PPC::F8:
    case PPC::F9:
    case PPC::F10:
    case PPC::F11:
    case PPC::F12:
    case PPC::F13:
    case PPC::F31:
    case PPC::F30:
    case PPC::F29:
    case PPC::F28:
    case PPC::F27:
    case PPC::F26:
    case PPC::F25:
    case PPC::F24:
    case PPC::F23:
    case PPC::F22:
    case PPC::F21:
    case PPC::F20:
    case PPC::F19:
    case PPC::F18:
    case PPC::F17:
    case PPC::F16:
    case PPC::F15:
    case PPC::F14:
      return true;
    }
    break;
  case RC_VRRC:
    switch (Reg) {
    default: break;
    case PPC::V2:
    case PPC::V3:
    case PPC::V4:
    case PPC::V5:
    case PPC::V0:
    case PPC::V1:
    case PPC::V6:
    case PPC::V7:
    case PPC::V8:
    case PPC::V9:
    case PPC::V10:
    case PPC::V11:
    case PPC::V12:
    case PPC::V13:
    case PPC::V14:
    case PPC::V15:
    case PPC::V16:
    case PPC::V17:
    case PPC::V18:
    case PPC::V19:
    case PPC::V31:
    case PPC::V30:
    case PPC::V29:
    case PPC::V28:
    case PPC::V27:
    case PPC::V26:
    case PPC::V25:
    case PPC::V24:
    case PPC::V23:
    case PPC::V22:
    case PPC::V21:
    case PPC::V20:
      return true;
    }
    break;
  case RC_CRRC:
    switch (Reg) {
    default: break;
    case PPC::CR0:
    case PPC::CR1:
    case PPC::CR5:
    case PPC::CR6:
    case PPC::CR7:
    case PPC::CR2:
    case PPC::CR3:
    case PPC::CR4:
      return true;
    }
    break;
  case RC_VRSAVERC:
    if (Reg == PPC::VRSAVE)
      return true;
    break;
  case RC_CTRRC:
    if (Reg == PPC::CTR)
      return true;
    break;
  case RC_CARRYRC:
    if (Reg == PPC::CARRY)
      return true;
    break;
  case RC_CTRRC8:
    if (Reg == PPC::CTR8)
      return true;
    break;
  }

  return false;
}

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
