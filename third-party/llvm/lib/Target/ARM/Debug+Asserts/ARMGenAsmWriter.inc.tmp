//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// BUNDLE
    0U,	// ABS
    134217746U,	// ADCri
    134217746U,	// ADCrr
    268435474U,	// ADCrsi
    402653202U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    134217750U,	// ADDri
    134217750U,	// ADDrr
    268435478U,	// ADDrsi
    402653206U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    536870938U,	// ADR
    134217758U,	// ANDri
    134217758U,	// ANDrr
    268435486U,	// ANDrsi
    402653214U,	// ANDrsr
    136314914U,	// ASRi
    136314914U,	// ASRr
    0U,	// ATOMADD6432
    0U,	// ATOMAND6432
    0U,	// ATOMCMPXCHG6432
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMNAND6432
    0U,	// ATOMOR6432
    0U,	// ATOMSUB6432
    0U,	// ATOMSWAP6432
    0U,	// ATOMXOR6432
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    671088678U,	// BFC
    805306410U,	// BFI
    134217774U,	// BICri
    134217774U,	// BICrr
    268435502U,	// BICrsi
    402653230U,	// BICrsr
    939524146U,	// BKPT
    1077936183U,	// BL
    1077936187U,	// BLX
    939524160U,	// BLX_pred
    1077936187U,	// BLXi
    0U,	// BLXr9
    0U,	// BLXr9_pred
    939524164U,	// BL_pred
    0U,	// BLr9
    0U,	// BLr9_pred
    0U,	// BMOVPCRX_CALL
    0U,	// BMOVPCRXr9_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    1077936199U,	// BX
    939524171U,	// BXJ
    0U,	// BX_CALL
    1214251087U,	// BX_RET
    939524175U,	// BX_pred
    0U,	// BXr9_CALL
    939524178U,	// Bcc
    1342210132U,	// CDP
    1484849240U,	// CDP2
    94U,	// CLREX
    536871012U,	// CLZ
    536871016U,	// CMNzri
    536871016U,	// CMNzrr
    671088744U,	// CMNzrsi
    805306472U,	// CMNzrsr
    536871020U,	// CMPri
    536871020U,	// CMPrr
    671088748U,	// CMPrsi
    805306476U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    1077936240U,	// CPS1p
    1610711157U,	// CPS2p
    1610711157U,	// CPS3p
    939524217U,	// DBG
    1744830589U,	// DMB
    1744830594U,	// DSB
    134217863U,	// EORri
    134217863U,	// EORrr
    268435591U,	// EORrsi
    402653319U,	// EORrsr
    547487883U,	// FCONSTD
    549585035U,	// FCONSTS
    1222639760U,	// FMSTAT
    1744830613U,	// ISB
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_dispatchsetup_nofp
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    1493336218U,	// LDC2L_OFFSET
    1493368986U,	// LDC2L_OPTION
    1493368986U,	// LDC2L_POST
    1493336218U,	// LDC2L_PRE
    1493336225U,	// LDC2_OFFSET
    1493368993U,	// LDC2_OPTION
    1493368993U,	// LDC2_POST
    1493336225U,	// LDC2_PRE
    805339303U,	// LDCL_OFFSET
    805339303U,	// LDCL_OPTION
    805339303U,	// LDCL_POST
    805339303U,	// LDCL_PRE
    805339308U,	// LDC_OFFSET
    805339308U,	// LDC_OPTION
    805339308U,	// LDC_POST
    805339308U,	// LDC_PRE
    939524272U,	// LDMDA
    537100464U,	// LDMDA_UPD
    939524278U,	// LDMDB
    537100470U,	// LDMDB_UPD
    939524284U,	// LDMIA
    0U,	// LDMIA_RET
    537100476U,	// LDMIA_UPD
    939524288U,	// LDMIB
    537100480U,	// LDMIB_UPD
    1879048390U,	// LDRBT_POST_IMM
    1879048390U,	// LDRBT_POST_REG
    1879048396U,	// LDRB_POST_IMM
    1879048396U,	// LDRB_POST_REG
    805306572U,	// LDRB_PRE_IMM
    1879048396U,	// LDRB_PRE_REG
    671088844U,	// LDRBi12
    805306572U,	// LDRBrs
    1879048401U,	// LDRD
    1342177489U,	// LDRD_POST
    1342177489U,	// LDRD_PRE
    536871126U,	// LDREX
    536871132U,	// LDREXB
    671088867U,	// LDREXD
    536871146U,	// LDREXH
    805306609U,	// LDRH
    805306614U,	// LDRHTi
    1879048438U,	// LDRHTr
    1879048433U,	// LDRH_POST
    1879048433U,	// LDRH_PRE
    805306620U,	// LDRSB
    805306626U,	// LDRSBTi
    1879048450U,	// LDRSBTr
    1879048444U,	// LDRSB_POST
    1879048444U,	// LDRSB_PRE
    805306633U,	// LDRSH
    805306639U,	// LDRSHTi
    1879048463U,	// LDRSHTr
    1879048457U,	// LDRSH_POST
    1879048457U,	// LDRSH_PRE
    1879048470U,	// LDRT_POST_IMM
    1879048470U,	// LDRT_POST_REG
    1879048475U,	// LDR_POST_IMM
    1879048475U,	// LDR_POST_REG
    805306651U,	// LDR_PRE_IMM
    1879048475U,	// LDR_PRE_REG
    671088923U,	// LDRcp
    671088923U,	// LDRi12
    805306651U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    136315167U,	// LSLi
    136315167U,	// LSLr
    136315171U,	// LSRi
    136315171U,	// LSRr
    1342210343U,	// MCR
    1485046059U,	// MCR2
    1879081265U,	// MCRR
    1485046070U,	// MCRR2
    268435773U,	// MLA
    0U,	// MLAv5
    805306689U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    1226834245U,	// MOVPCLR
    0U,	// MOVPCRX
    671088969U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_dyn
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    2013266245U,	// MOVi
    536871246U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    2013266245U,	// MOVr
    2013266245U,	// MOVr_TC
    134218053U,	// MOVsi
    268435781U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    1342472531U,	// MRC
    2147483991U,	// MRC2
    1879081309U,	// MRRC
    1485046114U,	// MRRC2
    939524457U,	// MRS
    939524457U,	// MRSsys
    537198957U,	// MSR
    537198957U,	// MSRi
    134218097U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    2013266293U,	// MVNi
    2013266293U,	// MVNr
    134218101U,	// MVNsi
    268435829U,	// MVNsr
    1212154233U,	// NOP
    134218109U,	// ORRri
    134218109U,	// ORRrr
    268435837U,	// ORRrsi
    402653565U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    805306753U,	// PKHBT
    805306759U,	// PKHTB
    2281701773U,	// PLDWi12
    2415919501U,	// PLDWrs
    2281701779U,	// PLDi12
    2415919507U,	// PLDrs
    2281701784U,	// PLIi12
    2415919512U,	// PLIrs
    671089053U,	// QADD
    671089058U,	// QADD16
    671089065U,	// QADD8
    671089071U,	// QASX
    671089076U,	// QDADD
    671089082U,	// QDSUB
    671089088U,	// QSAX
    671089093U,	// QSUB
    671089098U,	// QSUB16
    671089105U,	// QSUB8
    536871383U,	// RBIT
    536871388U,	// REV
    536871392U,	// REV16
    536871398U,	// REVSH
    1077936620U,	// RFEDA
    1094713836U,	// RFEDA_UPD
    1077936627U,	// RFEDB
    1094713843U,	// RFEDB_UPD
    1077936634U,	// RFEIA
    1094713850U,	// RFEIA_UPD
    1077936641U,	// RFEIB
    1094713857U,	// RFEIB_UPD
    136315400U,	// RORi
    136315400U,	// RORr
    0U,	// RRX
    2015363596U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    134218256U,	// RSBri
    134218256U,	// RSBrr
    268435984U,	// RSBrsi
    402653712U,	// RSBrsr
    134218260U,	// RSCri
    134218260U,	// RSCrr
    268435988U,	// RSCrsi
    402653716U,	// RSCrsr
    671089176U,	// SADD16
    671089183U,	// SADD8
    671089189U,	// SASX
    134218282U,	// SBCri
    134218282U,	// SBCrr
    268436010U,	// SBCrsi
    402653738U,	// SBCrsr
    805306926U,	// SBFX
    671089203U,	// SEL
    2550137399U,	// SETEND
    1212154431U,	// SEV
    671089219U,	// SHADD16
    671089227U,	// SHADD8
    671089234U,	// SHASX
    671089240U,	// SHSAX
    671089246U,	// SHSUB16
    671089254U,	// SHSUB8
    939524717U,	// SMC
    805306993U,	// SMLABB
    805307000U,	// SMLABT
    805307007U,	// SMLAD
    805307013U,	// SMLADX
    268436108U,	// SMLAL
    805307026U,	// SMLALBB
    805307034U,	// SMLALBT
    805307042U,	// SMLALD
    805307049U,	// SMLALDX
    805307057U,	// SMLALTB
    805307065U,	// SMLALTT
    0U,	// SMLALv5
    805307073U,	// SMLATB
    805307080U,	// SMLATT
    805307087U,	// SMLAWB
    805307094U,	// SMLAWT
    805307101U,	// SMLSD
    805307107U,	// SMLSDX
    805307114U,	// SMLSLD
    805307121U,	// SMLSLDX
    805307129U,	// SMMLA
    805307135U,	// SMMLAR
    805307142U,	// SMMLS
    805307148U,	// SMMLSR
    671089427U,	// SMMUL
    671089433U,	// SMMULR
    671089440U,	// SMUAD
    671089446U,	// SMUADX
    671089453U,	// SMULBB
    671089460U,	// SMULBT
    268436283U,	// SMULL
    0U,	// SMULLv5
    671089473U,	// SMULTB
    671089480U,	// SMULTT
    671089487U,	// SMULWB
    671089494U,	// SMULWT
    671089501U,	// SMUSD
    671089507U,	// SMUSDX
    1077937002U,	// SRSDA
    1077937013U,	// SRSDA_UPD
    1077937025U,	// SRSDB
    1077937036U,	// SRSDB_UPD
    1077937048U,	// SRSIA
    1077937059U,	// SRSIA_UPD
    1077937071U,	// SRSIB
    1077937082U,	// SRSIB_UPD
    805307334U,	// SSAT
    671089611U,	// SSAT16
    671089618U,	// SSAX
    671089623U,	// SSUB16
    671089630U,	// SSUB8
    1493337060U,	// STC2L_OFFSET
    1493369828U,	// STC2L_OPTION
    1493369828U,	// STC2L_POST
    1493337060U,	// STC2L_PRE
    1493337067U,	// STC2_OFFSET
    1493369835U,	// STC2_OPTION
    1493369835U,	// STC2_POST
    1493337067U,	// STC2_PRE
    805340145U,	// STCL_OFFSET
    805340145U,	// STCL_OPTION
    805340145U,	// STCL_POST
    805340145U,	// STCL_PRE
    805340150U,	// STC_OFFSET
    805340150U,	// STC_OPTION
    805340150U,	// STC_POST
    805340150U,	// STC_PRE
    939525114U,	// STMDA
    537101306U,	// STMDA_UPD
    939525120U,	// STMDB
    537101312U,	// STMDB_UPD
    939525126U,	// STMIA
    537101318U,	// STMIA_UPD
    939525130U,	// STMIB
    537101322U,	// STMIB_UPD
    1879278608U,	// STRBT_POST_IMM
    1879278608U,	// STRBT_POST_REG
    1879278614U,	// STRB_POST_IMM
    1879278614U,	// STRB_POST_REG
    805536790U,	// STRB_PRE_IMM
    1879278614U,	// STRB_PRE_REG
    671089686U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    805307414U,	// STRBrs
    1879049243U,	// STRD
    1342407707U,	// STRD_POST
    1342407707U,	// STRD_PRE
    671089696U,	// STREX
    671089702U,	// STREXB
    805307437U,	// STREXD
    671089716U,	// STREXH
    805307451U,	// STRH
    805536832U,	// STRHTi
    1879278656U,	// STRHTr
    1879278651U,	// STRH_POST
    1879278651U,	// STRH_PRE
    0U,	// STRH_preidx
    1879278662U,	// STRT_POST_IMM
    1879278662U,	// STRT_POST_REG
    1879278667U,	// STR_POST_IMM
    1879278667U,	// STR_POST_REG
    805536843U,	// STR_PRE_IMM
    1879278667U,	// STR_PRE_REG
    671089739U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    805307467U,	// STRrs
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    134218831U,	// SUBri
    134218831U,	// SUBrr
    268436559U,	// SUBrsi
    402654287U,	// SUBrsr
    939525203U,	// SVC
    671089751U,	// SWP
    671089755U,	// SWPB
    805307488U,	// SXTAB
    805307494U,	// SXTAB16
    805307502U,	// SXTAH
    671089780U,	// SXTB
    671089785U,	// SXTB16
    671089792U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPdND
    0U,	// TAILJMPr
    0U,	// TAILJMPrND
    0U,	// TCRETURNdi
    0U,	// TCRETURNdiND
    0U,	// TCRETURNri
    0U,	// TCRETURNriND
    536872069U,	// TEQri
    536872069U,	// TEQrr
    671089797U,	// TEQrsi
    805307525U,	// TEQrsr
    0U,	// TPsoft
    1161U,	// TRAP
    536872078U,	// TSTri
    536872078U,	// TSTrr
    671089806U,	// TSTrsi
    805307534U,	// TSTrsr
    671089810U,	// UADD16
    671089817U,	// UADD8
    671089823U,	// UASX
    805307556U,	// UBFX
    671089833U,	// UHADD16
    671089841U,	// UHADD8
    671089848U,	// UHASX
    671089854U,	// UHSAX
    671089860U,	// UHSUB16
    671089868U,	// UHSUB8
    805307603U,	// UMAAL
    0U,	// UMAALv5
    268436697U,	// UMLAL
    0U,	// UMLALv5
    268436703U,	// UMULL
    0U,	// UMULLv5
    671089893U,	// UQADD16
    671089901U,	// UQADD8
    671089908U,	// UQASX
    671089914U,	// UQSAX
    671089920U,	// UQSUB16
    671089928U,	// UQSUB8
    671089935U,	// USAD8
    805307669U,	// USADA8
    805307676U,	// USAT
    671089953U,	// USAT16
    671089960U,	// USAX
    671089965U,	// USUB16
    671089972U,	// USUB8
    805307706U,	// UXTAB
    805307712U,	// UXTAB16
    805307720U,	// UXTAH
    671089998U,	// UXTB
    671090003U,	// UXTB16
    671090010U,	// UXTH
    828638559U,	// VABALsv2i64
    830735711U,	// VABALsv4i32
    832832863U,	// VABALsv8i16
    834930015U,	// VABALuv2i64
    837027167U,	// VABALuv4i32
    839124319U,	// VABALuv8i16
    832832869U,	// VABAsv16i8
    828638565U,	// VABAsv2i32
    830735717U,	// VABAsv4i16
    828638565U,	// VABAsv4i32
    830735717U,	// VABAsv8i16
    832832869U,	// VABAsv8i8
    839124325U,	// VABAuv16i8
    834930021U,	// VABAuv2i32
    837027173U,	// VABAuv4i16
    834930021U,	// VABAuv4i32
    837027173U,	// VABAuv8i16
    839124325U,	// VABAuv8i8
    694388074U,	// VABDLsv2i64
    696485226U,	// VABDLsv4i32
    698582378U,	// VABDLsv8i16
    700679530U,	// VABDLuv2i64
    702776682U,	// VABDLuv4i32
    704873834U,	// VABDLuv8i16
    683804016U,	// VABDfd
    683804016U,	// VABDfq
    698582384U,	// VABDsv16i8
    694388080U,	// VABDsv2i32
    696485232U,	// VABDsv4i16
    694388080U,	// VABDsv4i32
    696485232U,	// VABDsv8i16
    698582384U,	// VABDsv8i8
    704873840U,	// VABDuv16i8
    700679536U,	// VABDuv2i32
    702776688U,	// VABDuv4i16
    700679536U,	// VABDuv4i32
    702776688U,	// VABDuv8i16
    704873840U,	// VABDuv8i8
    547489141U,	// VABSD
    549586293U,	// VABSS
    549586293U,	// VABSfd
    549586293U,	// VABSfq
    564364661U,	// VABSv16i8
    560170357U,	// VABSv2i32
    562267509U,	// VABSv4i16
    560170357U,	// VABSv4i32
    562267509U,	// VABSv8i16
    564364661U,	// VABSv8i8
    683804026U,	// VACGEd
    683804026U,	// VACGEq
    683804032U,	// VACGTd
    683804032U,	// VACGTq
    681706886U,	// VADDD
    706971019U,	// VADDHNv2i32
    709068171U,	// VADDHNv4i16
    711165323U,	// VADDHNv8i8
    694388114U,	// VADDLsv2i64
    696485266U,	// VADDLsv4i32
    698582418U,	// VADDLsv8i16
    700679570U,	// VADDLuv2i64
    702776722U,	// VADDLuv4i32
    704873874U,	// VADDLuv8i16
    683804038U,	// VADDS
    694388120U,	// VADDWsv2i64
    696485272U,	// VADDWsv4i32
    698582424U,	// VADDWsv8i16
    700679576U,	// VADDWuv2i64
    702776728U,	// VADDWuv4i32
    704873880U,	// VADDWuv8i16
    683804038U,	// VADDfd
    683804038U,	// VADDfq
    713262470U,	// VADDv16i8
    706971014U,	// VADDv1i64
    709068166U,	// VADDv2i32
    706971014U,	// VADDv2i64
    711165318U,	// VADDv4i16
    709068166U,	// VADDv4i32
    711165318U,	// VADDv8i16
    713262470U,	// VADDv8i8
    671090078U,	// VANDd
    671090078U,	// VANDq
    671090083U,	// VBICd
    709199267U,	// VBICiv2i32
    711296419U,	// VBICiv4i16
    709199267U,	// VBICiv4i32
    711296419U,	// VBICiv8i16
    671090083U,	// VBICq
    805307816U,	// VBIFd
    805307816U,	// VBIFq
    805307821U,	// VBITd
    805307821U,	// VBITq
    805307826U,	// VBSLd
    805307826U,	// VBSLq
    683804087U,	// VCEQfd
    683804087U,	// VCEQfq
    713262519U,	// VCEQv16i8
    709068215U,	// VCEQv2i32
    711165367U,	// VCEQv4i16
    709068215U,	// VCEQv4i32
    711165367U,	// VCEQv8i16
    713262519U,	// VCEQv8i8
    579044791U,	// VCEQzv16i8
    549586359U,	// VCEQzv2f32
    574850487U,	// VCEQzv2i32
    549586359U,	// VCEQzv4f32
    576947639U,	// VCEQzv4i16
    574850487U,	// VCEQzv4i32
    576947639U,	// VCEQzv8i16
    579044791U,	// VCEQzv8i8
    683804092U,	// VCGEfd
    683804092U,	// VCGEfq
    698582460U,	// VCGEsv16i8
    694388156U,	// VCGEsv2i32
    696485308U,	// VCGEsv4i16
    694388156U,	// VCGEsv4i32
    696485308U,	// VCGEsv8i16
    698582460U,	// VCGEsv8i8
    704873916U,	// VCGEuv16i8
    700679612U,	// VCGEuv2i32
    702776764U,	// VCGEuv4i16
    700679612U,	// VCGEuv4i32
    702776764U,	// VCGEuv8i16
    704873916U,	// VCGEuv8i8
    564364732U,	// VCGEzv16i8
    549586364U,	// VCGEzv2f32
    560170428U,	// VCGEzv2i32
    549586364U,	// VCGEzv4f32
    562267580U,	// VCGEzv4i16
    560170428U,	// VCGEzv4i32
    562267580U,	// VCGEzv8i16
    564364732U,	// VCGEzv8i8
    683804097U,	// VCGTfd
    683804097U,	// VCGTfq
    698582465U,	// VCGTsv16i8
    694388161U,	// VCGTsv2i32
    696485313U,	// VCGTsv4i16
    694388161U,	// VCGTsv4i32
    696485313U,	// VCGTsv8i16
    698582465U,	// VCGTsv8i8
    704873921U,	// VCGTuv16i8
    700679617U,	// VCGTuv2i32
    702776769U,	// VCGTuv4i16
    700679617U,	// VCGTuv4i32
    702776769U,	// VCGTuv8i16
    704873921U,	// VCGTuv8i8
    564364737U,	// VCGTzv16i8
    549586369U,	// VCGTzv2f32
    560170433U,	// VCGTzv2i32
    549586369U,	// VCGTzv4f32
    562267585U,	// VCGTzv4i16
    560170433U,	// VCGTzv4i32
    562267585U,	// VCGTzv8i16
    564364737U,	// VCGTzv8i8
    564364742U,	// VCLEzv16i8
    549586374U,	// VCLEzv2f32
    560170438U,	// VCLEzv2i32
    549586374U,	// VCLEzv4f32
    562267590U,	// VCLEzv4i16
    560170438U,	// VCLEzv4i32
    562267590U,	// VCLEzv8i16
    564364742U,	// VCLEzv8i8
    564364747U,	// VCLSv16i8
    560170443U,	// VCLSv2i32
    562267595U,	// VCLSv4i16
    560170443U,	// VCLSv4i32
    562267595U,	// VCLSv8i16
    564364747U,	// VCLSv8i8
    564364752U,	// VCLTzv16i8
    549586384U,	// VCLTzv2f32
    560170448U,	// VCLTzv2i32
    549586384U,	// VCLTzv4f32
    562267600U,	// VCLTzv4i16
    560170448U,	// VCLTzv4i32
    562267600U,	// VCLTzv8i16
    564364752U,	// VCLTzv8i8
    579044821U,	// VCLZv16i8
    574850517U,	// VCLZv2i32
    576947669U,	// VCLZv4i16
    574850517U,	// VCLZv4i32
    576947669U,	// VCLZv8i16
    579044821U,	// VCLZv8i8
    547489242U,	// VCMPD
    547489247U,	// VCMPED
    549586399U,	// VCMPES
    950404575U,	// VCMPEZD
    952501727U,	// VCMPEZS
    549586394U,	// VCMPS
    950404570U,	// VCMPZD
    952501722U,	// VCMPZS
    580912613U,	// VCNTd
    580912613U,	// VCNTq
    583009770U,	// VCVTBHS
    585106922U,	// VCVTBSH
    587204080U,	// VCVTDS
    589301232U,	// VCVTSD
    583009781U,	// VCVTTHS
    585106933U,	// VCVTTSH
    583009776U,	// VCVTf2h
    591824368U,	// VCVTf2sd
    591824368U,	// VCVTf2sq
    593921520U,	// VCVTf2ud
    593921520U,	// VCVTf2uq
    725747184U,	// VCVTf2xsd
    725747184U,	// VCVTf2xsq
    727844336U,	// VCVTf2xud
    727844336U,	// VCVTf2xuq
    585106928U,	// VCVTh2f
    596018672U,	// VCVTs2fd
    596018672U,	// VCVTs2fq
    598115824U,	// VCVTu2fd
    598115824U,	// VCVTu2fq
    729941488U,	// VCVTxs2fd
    729941488U,	// VCVTxs2fq
    732038640U,	// VCVTxu2fd
    732038640U,	// VCVTxu2fq
    681707003U,	// VDIVD
    683804155U,	// VDIVS
    599787008U,	// VDUP16d
    599787008U,	// VDUP16q
    601884160U,	// VDUP32d
    601884160U,	// VDUP32q
    580912640U,	// VDUP8d
    580912640U,	// VDUP8q
    734004736U,	// VDUPLN16d
    734004736U,	// VDUPLN16q
    736101888U,	// VDUPLN32d
    736101888U,	// VDUPLN32q
    715130368U,	// VDUPLN8d
    715130368U,	// VDUPLN8q
    0U,	// VDUPfdf
    0U,	// VDUPfqf
    671090181U,	// VEORd
    671090181U,	// VEORq
    868222474U,	// VEXTd16
    870319626U,	// VEXTd32
    849348106U,	// VEXTd8
    868222474U,	// VEXTq16
    870319626U,	// VEXTq32
    872416778U,	// VEXTq64
    849348106U,	// VEXTq8
    815924751U,	// VFMAD
    818021903U,	// VFMAS
    818021903U,	// VFMAfd
    818021903U,	// VFMAfq
    815924756U,	// VFMSD
    818021908U,	// VFMSS
    818021908U,	// VFMSfd
    818021908U,	// VFMSfq
    815924761U,	// VFNMAD
    818021913U,	// VFNMAS
    815924767U,	// VFNMSD
    818021919U,	// VFNMSS
    736100491U,	// VGETLNi32
    696483979U,	// VGETLNs16
    698581131U,	// VGETLNs8
    702775435U,	// VGETLNu16
    704872587U,	// VGETLNu8
    698582565U,	// VHADDsv16i8
    694388261U,	// VHADDsv2i32
    696485413U,	// VHADDsv4i16
    694388261U,	// VHADDsv4i32
    696485413U,	// VHADDsv8i16
    698582565U,	// VHADDsv8i8
    704874021U,	// VHADDuv16i8
    700679717U,	// VHADDuv2i32
    702776869U,	// VHADDuv4i16
    700679717U,	// VHADDuv4i32
    702776869U,	// VHADDuv8i16
    704874021U,	// VHADDuv8i8
    698582571U,	// VHSUBsv16i8
    694388267U,	// VHSUBsv2i32
    696485419U,	// VHSUBsv4i16
    694388267U,	// VHSUBsv4i32
    696485419U,	// VHSUBsv8i16
    698582571U,	// VHSUBsv8i8
    704874027U,	// VHSUBuv16i8
    700679723U,	// VHSUBuv2i32
    702776875U,	// VHSUBuv4i16
    700679723U,	// VHSUBuv4i32
    702776875U,	// VHSUBuv8i16
    704874027U,	// VHSUBuv8i8
    734463537U,	// VLD1DUPd16
    868681265U,	// VLD1DUPd16wb_fixed
    1942423089U,	// VLD1DUPd16wb_register
    736560689U,	// VLD1DUPd32
    870778417U,	// VLD1DUPd32wb_fixed
    1944520241U,	// VLD1DUPd32wb_register
    715589169U,	// VLD1DUPd8
    849806897U,	// VLD1DUPd8wb_fixed
    1923548721U,	// VLD1DUPd8wb_register
    734496305U,	// VLD1DUPq16
    0U,	// VLD1DUPq16Pseudo
    0U,	// VLD1DUPq16PseudoWB_fixed
    0U,	// VLD1DUPq16PseudoWB_register
    868714033U,	// VLD1DUPq16wb_fixed
    1942455857U,	// VLD1DUPq16wb_register
    736593457U,	// VLD1DUPq32
    0U,	// VLD1DUPq32Pseudo
    0U,	// VLD1DUPq32PseudoWB_fixed
    0U,	// VLD1DUPq32PseudoWB_register
    870811185U,	// VLD1DUPq32wb_fixed
    1944553009U,	// VLD1DUPq32wb_register
    715621937U,	// VLD1DUPq8
    0U,	// VLD1DUPq8Pseudo
    0U,	// VLD1DUPq8PseudoWB_fixed
    0U,	// VLD1DUPq8PseudoWB_register
    849839665U,	// VLD1DUPq8wb_fixed
    1923581489U,	// VLD1DUPq8wb_register
    1948255793U,	// VLD1LNd16
    2753562161U,	// VLD1LNd16_UPD
    1950352945U,	// VLD1LNd32
    2755659313U,	// VLD1LNd32_UPD
    1952450097U,	// VLD1LNd8
    2757756465U,	// VLD1LNd8_UPD
    868222513U,	// VLD1LNdAsm_16
    870319665U,	// VLD1LNdAsm_32
    849348145U,	// VLD1LNdAsm_8
    881231409U,	// VLD1LNdAsm_F
    818021937U,	// VLD1LNdAsm_F32
    845678129U,	// VLD1LNdAsm_I16
    843580977U,	// VLD1LNdAsm_I32
    847775281U,	// VLD1LNdAsm_I8
    883328561U,	// VLD1LNdAsm_P16
    885524017U,	// VLD1LNdAsm_P8
    830998065U,	// VLD1LNdAsm_S16
    828900913U,	// VLD1LNdAsm_S32
    833095217U,	// VLD1LNdAsm_S8
    837289521U,	// VLD1LNdAsm_U16
    835192369U,	// VLD1LNdAsm_U32
    839386673U,	// VLD1LNdAsm_U8
    868222513U,	// VLD1LNdWB_fixed_Asm_16
    870319665U,	// VLD1LNdWB_fixed_Asm_32
    849348145U,	// VLD1LNdWB_fixed_Asm_8
    881362481U,	// VLD1LNdWB_fixed_Asm_F
    818021937U,	// VLD1LNdWB_fixed_Asm_F32
    845678129U,	// VLD1LNdWB_fixed_Asm_I16
    843580977U,	// VLD1LNdWB_fixed_Asm_I32
    847775281U,	// VLD1LNdWB_fixed_Asm_I8
    883459633U,	// VLD1LNdWB_fixed_Asm_P16
    885524017U,	// VLD1LNdWB_fixed_Asm_P8
    830998065U,	// VLD1LNdWB_fixed_Asm_S16
    828900913U,	// VLD1LNdWB_fixed_Asm_S32
    833095217U,	// VLD1LNdWB_fixed_Asm_S8
    837289521U,	// VLD1LNdWB_fixed_Asm_U16
    835192369U,	// VLD1LNdWB_fixed_Asm_U32
    839386673U,	// VLD1LNdWB_fixed_Asm_U8
    1941964337U,	// VLD1LNdWB_register_Asm_16
    1944061489U,	// VLD1LNdWB_register_Asm_32
    1923089969U,	// VLD1LNdWB_register_Asm_8
    1954678321U,	// VLD1LNdWB_register_Asm_F
    1891763761U,	// VLD1LNdWB_register_Asm_F32
    1919419953U,	// VLD1LNdWB_register_Asm_I16
    1917322801U,	// VLD1LNdWB_register_Asm_I32
    1921517105U,	// VLD1LNdWB_register_Asm_I8
    1956775473U,	// VLD1LNdWB_register_Asm_P16
    1959265841U,	// VLD1LNdWB_register_Asm_P8
    1904739889U,	// VLD1LNdWB_register_Asm_S16
    1902642737U,	// VLD1LNdWB_register_Asm_S32
    1906837041U,	// VLD1LNdWB_register_Asm_S8
    1911031345U,	// VLD1LNdWB_register_Asm_U16
    1908934193U,	// VLD1LNdWB_register_Asm_U32
    1913128497U,	// VLD1LNdWB_register_Asm_U8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    734594609U,	// VLD1d16
    734627377U,	// VLD1d16Q
    868845105U,	// VLD1d16Qwb_fixed
    1942586929U,	// VLD1d16Qwb_register
    734660145U,	// VLD1d16T
    868877873U,	// VLD1d16Twb_fixed
    1942619697U,	// VLD1d16Twb_register
    868812337U,	// VLD1d16wb_fixed
    1942554161U,	// VLD1d16wb_register
    736691761U,	// VLD1d32
    736724529U,	// VLD1d32Q
    870942257U,	// VLD1d32Qwb_fixed
    1944684081U,	// VLD1d32Qwb_register
    736757297U,	// VLD1d32T
    870975025U,	// VLD1d32Twb_fixed
    1944716849U,	// VLD1d32Twb_register
    870909489U,	// VLD1d32wb_fixed
    1944651313U,	// VLD1d32wb_register
    738788913U,	// VLD1d64
    738821681U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    873039409U,	// VLD1d64Qwb_fixed
    1946781233U,	// VLD1d64Qwb_register
    738854449U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    873072177U,	// VLD1d64Twb_fixed
    1946814001U,	// VLD1d64Twb_register
    873006641U,	// VLD1d64wb_fixed
    1946748465U,	// VLD1d64wb_register
    715720241U,	// VLD1d8
    715753009U,	// VLD1d8Q
    849970737U,	// VLD1d8Qwb_fixed
    1923712561U,	// VLD1d8Qwb_register
    715785777U,	// VLD1d8T
    850003505U,	// VLD1d8Twb_fixed
    1923745329U,	// VLD1d8Twb_register
    849937969U,	// VLD1d8wb_fixed
    1923679793U,	// VLD1d8wb_register
    734692913U,	// VLD1q16
    0U,	// VLD1q16Pseudo
    0U,	// VLD1q16PseudoWB_fixed
    0U,	// VLD1q16PseudoWB_register
    868910641U,	// VLD1q16wb_fixed
    1942652465U,	// VLD1q16wb_register
    736790065U,	// VLD1q32
    0U,	// VLD1q32Pseudo
    0U,	// VLD1q32PseudoWB_fixed
    0U,	// VLD1q32PseudoWB_register
    871007793U,	// VLD1q32wb_fixed
    1944749617U,	// VLD1q32wb_register
    738887217U,	// VLD1q64
    0U,	// VLD1q64Pseudo
    0U,	// VLD1q64PseudoWB_fixed
    0U,	// VLD1q64PseudoWB_register
    873104945U,	// VLD1q64wb_fixed
    1946846769U,	// VLD1q64wb_register
    715818545U,	// VLD1q8
    0U,	// VLD1q8Pseudo
    0U,	// VLD1q8PseudoWB_fixed
    0U,	// VLD1q8PseudoWB_register
    850036273U,	// VLD1q8wb_fixed
    1923778097U,	// VLD1q8wb_register
    734496310U,	// VLD2DUPd16
    0U,	// VLD2DUPd16Pseudo
    0U,	// VLD2DUPd16PseudoWB_fixed
    0U,	// VLD2DUPd16PseudoWB_register
    868714038U,	// VLD2DUPd16wb_fixed
    1942455862U,	// VLD2DUPd16wb_register
    734725686U,	// VLD2DUPd16x2
    868943414U,	// VLD2DUPd16x2wb_fixed
    1942685238U,	// VLD2DUPd16x2wb_register
    736593462U,	// VLD2DUPd32
    0U,	// VLD2DUPd32Pseudo
    0U,	// VLD2DUPd32PseudoWB_fixed
    0U,	// VLD2DUPd32PseudoWB_register
    870811190U,	// VLD2DUPd32wb_fixed
    1944553014U,	// VLD2DUPd32wb_register
    736822838U,	// VLD2DUPd32x2
    871040566U,	// VLD2DUPd32x2wb_fixed
    1944782390U,	// VLD2DUPd32x2wb_register
    715621942U,	// VLD2DUPd8
    0U,	// VLD2DUPd8Pseudo
    0U,	// VLD2DUPd8PseudoWB_fixed
    0U,	// VLD2DUPd8PseudoWB_register
    849839670U,	// VLD2DUPd8wb_fixed
    1923581494U,	// VLD2DUPd8wb_register
    715851318U,	// VLD2DUPd8x2
    850069046U,	// VLD2DUPd8x2wb_fixed
    1923810870U,	// VLD2DUPd8x2wb_register
    2753562166U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    2887779894U,	// VLD2LNd16_UPD
    2755659318U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    2889877046U,	// VLD2LNd32_UPD
    2757756470U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    2891974198U,	// VLD2LNd8_UPD
    868222518U,	// VLD2LNdAsm_16
    870319670U,	// VLD2LNdAsm_32
    849348150U,	// VLD2LNdAsm_8
    881231414U,	// VLD2LNdAsm_F
    818021942U,	// VLD2LNdAsm_F32
    845678134U,	// VLD2LNdAsm_I16
    843580982U,	// VLD2LNdAsm_I32
    847775286U,	// VLD2LNdAsm_I8
    883328566U,	// VLD2LNdAsm_P16
    885524022U,	// VLD2LNdAsm_P8
    830998070U,	// VLD2LNdAsm_S16
    828900918U,	// VLD2LNdAsm_S32
    833095222U,	// VLD2LNdAsm_S8
    837289526U,	// VLD2LNdAsm_U16
    835192374U,	// VLD2LNdAsm_U32
    839386678U,	// VLD2LNdAsm_U8
    868222518U,	// VLD2LNdWB_fixed_Asm_16
    870319670U,	// VLD2LNdWB_fixed_Asm_32
    849348150U,	// VLD2LNdWB_fixed_Asm_8
    881362486U,	// VLD2LNdWB_fixed_Asm_F
    818021942U,	// VLD2LNdWB_fixed_Asm_F32
    845678134U,	// VLD2LNdWB_fixed_Asm_I16
    843580982U,	// VLD2LNdWB_fixed_Asm_I32
    847775286U,	// VLD2LNdWB_fixed_Asm_I8
    883459638U,	// VLD2LNdWB_fixed_Asm_P16
    885524022U,	// VLD2LNdWB_fixed_Asm_P8
    830998070U,	// VLD2LNdWB_fixed_Asm_S16
    828900918U,	// VLD2LNdWB_fixed_Asm_S32
    833095222U,	// VLD2LNdWB_fixed_Asm_S8
    837289526U,	// VLD2LNdWB_fixed_Asm_U16
    835192374U,	// VLD2LNdWB_fixed_Asm_U32
    839386678U,	// VLD2LNdWB_fixed_Asm_U8
    1941964342U,	// VLD2LNdWB_register_Asm_16
    1944061494U,	// VLD2LNdWB_register_Asm_32
    1923089974U,	// VLD2LNdWB_register_Asm_8
    1954678326U,	// VLD2LNdWB_register_Asm_F
    1891763766U,	// VLD2LNdWB_register_Asm_F32
    1919419958U,	// VLD2LNdWB_register_Asm_I16
    1917322806U,	// VLD2LNdWB_register_Asm_I32
    1921517110U,	// VLD2LNdWB_register_Asm_I8
    1956775478U,	// VLD2LNdWB_register_Asm_P16
    1959265846U,	// VLD2LNdWB_register_Asm_P8
    1904739894U,	// VLD2LNdWB_register_Asm_S16
    1902642742U,	// VLD2LNdWB_register_Asm_S32
    1906837046U,	// VLD2LNdWB_register_Asm_S8
    1911031350U,	// VLD2LNdWB_register_Asm_U16
    1908934198U,	// VLD2LNdWB_register_Asm_U32
    1913128502U,	// VLD2LNdWB_register_Asm_U8
    2753562166U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    2887779894U,	// VLD2LNq16_UPD
    2755659318U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    2889877046U,	// VLD2LNq32_UPD
    868222518U,	// VLD2LNqAsm_16
    870319670U,	// VLD2LNqAsm_32
    881231414U,	// VLD2LNqAsm_F
    818021942U,	// VLD2LNqAsm_F32
    845678134U,	// VLD2LNqAsm_I16
    843580982U,	// VLD2LNqAsm_I32
    883328566U,	// VLD2LNqAsm_P16
    830998070U,	// VLD2LNqAsm_S16
    828900918U,	// VLD2LNqAsm_S32
    837289526U,	// VLD2LNqAsm_U16
    835192374U,	// VLD2LNqAsm_U32
    868222518U,	// VLD2LNqWB_fixed_Asm_16
    870319670U,	// VLD2LNqWB_fixed_Asm_32
    881362486U,	// VLD2LNqWB_fixed_Asm_F
    818021942U,	// VLD2LNqWB_fixed_Asm_F32
    845678134U,	// VLD2LNqWB_fixed_Asm_I16
    843580982U,	// VLD2LNqWB_fixed_Asm_I32
    883459638U,	// VLD2LNqWB_fixed_Asm_P16
    830998070U,	// VLD2LNqWB_fixed_Asm_S16
    828900918U,	// VLD2LNqWB_fixed_Asm_S32
    837289526U,	// VLD2LNqWB_fixed_Asm_U16
    835192374U,	// VLD2LNqWB_fixed_Asm_U32
    1941964342U,	// VLD2LNqWB_register_Asm_16
    1944061494U,	// VLD2LNqWB_register_Asm_32
    1954678326U,	// VLD2LNqWB_register_Asm_F
    1891763766U,	// VLD2LNqWB_register_Asm_F32
    1919419958U,	// VLD2LNqWB_register_Asm_I16
    1917322806U,	// VLD2LNqWB_register_Asm_I32
    1956775478U,	// VLD2LNqWB_register_Asm_P16
    1904739894U,	// VLD2LNqWB_register_Asm_S16
    1902642742U,	// VLD2LNqWB_register_Asm_S32
    1911031350U,	// VLD2LNqWB_register_Asm_U16
    1908934198U,	// VLD2LNqWB_register_Asm_U32
    734758454U,	// VLD2b16
    868976182U,	// VLD2b16wb_fixed
    1942718006U,	// VLD2b16wb_register
    736855606U,	// VLD2b32
    871073334U,	// VLD2b32wb_fixed
    1944815158U,	// VLD2b32wb_register
    715884086U,	// VLD2b8
    850101814U,	// VLD2b8wb_fixed
    1923843638U,	// VLD2b8wb_register
    734692918U,	// VLD2d16
    0U,	// VLD2d16Pseudo
    0U,	// VLD2d16PseudoWB_fixed
    0U,	// VLD2d16PseudoWB_register
    868910646U,	// VLD2d16wb_fixed
    1942652470U,	// VLD2d16wb_register
    736790070U,	// VLD2d32
    0U,	// VLD2d32Pseudo
    0U,	// VLD2d32PseudoWB_fixed
    0U,	// VLD2d32PseudoWB_register
    871007798U,	// VLD2d32wb_fixed
    1944749622U,	// VLD2d32wb_register
    715818550U,	// VLD2d8
    0U,	// VLD2d8Pseudo
    0U,	// VLD2d8PseudoWB_fixed
    0U,	// VLD2d8PseudoWB_register
    850036278U,	// VLD2d8wb_fixed
    1923778102U,	// VLD2d8wb_register
    734627382U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    868845110U,	// VLD2q16wb_fixed
    1942586934U,	// VLD2q16wb_register
    736724534U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    870942262U,	// VLD2q32wb_fixed
    1944684086U,	// VLD2q32wb_register
    715753014U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    849970742U,	// VLD2q8wb_fixed
    1923712566U,	// VLD2q8wb_register
    1948255803U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    2753562171U,	// VLD3DUPd16_UPD
    1948255803U,	// VLD3DUPd16x2
    2753562171U,	// VLD3DUPd16x2_UPD
    1950352955U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    2755659323U,	// VLD3DUPd32_UPD
    1950352955U,	// VLD3DUPd32x2
    2755659323U,	// VLD3DUPd32x2_UPD
    1952450107U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    2757756475U,	// VLD3DUPd8_UPD
    1952450107U,	// VLD3DUPd8x2
    2757756475U,	// VLD3DUPd8x2_UPD
    2887779899U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    3021997627U,	// VLD3LNd16_UPD
    2889877051U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    3024094779U,	// VLD3LNd32_UPD
    2891974203U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    3026191931U,	// VLD3LNd8_UPD
    2887779899U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    3021997627U,	// VLD3LNq16_UPD
    2889877051U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    3024094779U,	// VLD3LNq32_UPD
    1948255803U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    2753562171U,	// VLD3d16_UPD
    1950352955U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    2755659323U,	// VLD3d32_UPD
    1952450107U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    2757756475U,	// VLD3d8_UPD
    1948255803U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    2753562171U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    1950352955U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    2755659323U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    1952450107U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    2757756475U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    1411384896U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    3156215360U,	// VLD4DUPd16_UPD
    1411384896U,	// VLD4DUPd16x2
    3156215360U,	// VLD4DUPd16x2_UPD
    1413482048U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    3158312512U,	// VLD4DUPd32_UPD
    1413482048U,	// VLD4DUPd32x2
    3158312512U,	// VLD4DUPd32x2_UPD
    1415579200U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    3160409664U,	// VLD4DUPd8_UPD
    1415579200U,	// VLD4DUPd8x2
    3160409664U,	// VLD4DUPd8x2_UPD
    3021997632U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    3290433088U,	// VLD4LNd16_UPD
    3024094784U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    3292530240U,	// VLD4LNd32_UPD
    3026191936U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    3294627392U,	// VLD4LNd8_UPD
    3021997632U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    3290433088U,	// VLD4LNq16_UPD
    3024094784U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    3292530240U,	// VLD4LNq32_UPD
    1411384896U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    3156215360U,	// VLD4d16_UPD
    1413482048U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    3158312512U,	// VLD4d32_UPD
    1415579200U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    3160409664U,	// VLD4d8_UPD
    1411384896U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    3156215360U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    1413482048U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    3158312512U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    1415579200U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    3160409664U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    537101893U,	// VLDMDDB_UPD
    939525708U,	// VLDMDIA
    537101900U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    537101893U,	// VLDMSDB_UPD
    939525708U,	// VLDMSIA
    537101900U,	// VLDMSIA_UPD
    671090259U,	// VLDRD
    671090259U,	// VLDRS
    683804248U,	// VMAXfd
    683804248U,	// VMAXfq
    698582616U,	// VMAXsv16i8
    694388312U,	// VMAXsv2i32
    696485464U,	// VMAXsv4i16
    694388312U,	// VMAXsv4i32
    696485464U,	// VMAXsv8i16
    698582616U,	// VMAXsv8i8
    704874072U,	// VMAXuv16i8
    700679768U,	// VMAXuv2i32
    702776920U,	// VMAXuv4i16
    700679768U,	// VMAXuv4i32
    702776920U,	// VMAXuv8i16
    704874072U,	// VMAXuv8i8
    683804253U,	// VMINfd
    683804253U,	// VMINfq
    698582621U,	// VMINsv16i8
    694388317U,	// VMINsv2i32
    696485469U,	// VMINsv4i16
    694388317U,	// VMINsv4i32
    696485469U,	// VMINsv8i16
    698582621U,	// VMINsv8i8
    704874077U,	// VMINuv16i8
    700679773U,	// VMINuv2i32
    702776925U,	// VMINuv4i16
    700679773U,	// VMINuv4i32
    702776925U,	// VMINuv8i16
    704874077U,	// VMINuv8i8
    815924834U,	// VMLAD
    1902380647U,	// VMLALslsv2i32
    1904477799U,	// VMLALslsv4i16
    1908672103U,	// VMLALsluv2i32
    1910769255U,	// VMLALsluv4i16
    828638823U,	// VMLALsv2i64
    830735975U,	// VMLALsv4i32
    832833127U,	// VMLALsv8i16
    834930279U,	// VMLALuv2i64
    837027431U,	// VMLALuv4i32
    839124583U,	// VMLALuv8i16
    818021986U,	// VMLAS
    818021986U,	// VMLAfd
    818021986U,	// VMLAfq
    1891763810U,	// VMLAslfd
    1891763810U,	// VMLAslfq
    1917060706U,	// VMLAslv2i32
    1919157858U,	// VMLAslv4i16
    1917060706U,	// VMLAslv4i32
    1919157858U,	// VMLAslv8i16
    847513186U,	// VMLAv16i8
    843318882U,	// VMLAv2i32
    845416034U,	// VMLAv4i16
    843318882U,	// VMLAv4i32
    845416034U,	// VMLAv8i16
    847513186U,	// VMLAv8i8
    815924845U,	// VMLSD
    1902380658U,	// VMLSLslsv2i32
    1904477810U,	// VMLSLslsv4i16
    1908672114U,	// VMLSLsluv2i32
    1910769266U,	// VMLSLsluv4i16
    828638834U,	// VMLSLsv2i64
    830735986U,	// VMLSLsv4i32
    832833138U,	// VMLSLsv8i16
    834930290U,	// VMLSLuv2i64
    837027442U,	// VMLSLuv4i32
    839124594U,	// VMLSLuv8i16
    818021997U,	// VMLSS
    818021997U,	// VMLSfd
    818021997U,	// VMLSfq
    1891763821U,	// VMLSslfd
    1891763821U,	// VMLSslfq
    1917060717U,	// VMLSslv2i32
    1919157869U,	// VMLSslv4i16
    1917060717U,	// VMLSslv4i32
    1919157869U,	// VMLSslv8i16
    847513197U,	// VMLSv16i8
    843318893U,	// VMLSv2i32
    845416045U,	// VMLSv4i16
    843318893U,	// VMLSv4i32
    845416045U,	// VMLSv8i16
    847513197U,	// VMLSv8i8
    547487883U,	// VMOVD
    671088779U,	// VMOVDRR
    0U,	// VMOVDcc
    560170616U,	// VMOVLsv2i64
    562267768U,	// VMOVLsv4i32
    564364920U,	// VMOVLsv8i16
    566462072U,	// VMOVLuv2i64
    568559224U,	// VMOVLuv4i32
    570656376U,	// VMOVLuv8i16
    572753534U,	// VMOVNv2i32
    574850686U,	// VMOVNv4i16
    576947838U,	// VMOVNv8i8
    671088779U,	// VMOVRRD
    805306507U,	// VMOVRRS
    536871051U,	// VMOVRS
    549585035U,	// VMOVS
    536871051U,	// VMOVSR
    805306507U,	// VMOVSRR
    0U,	// VMOVScc
    579174539U,	// VMOVv16i8
    572883083U,	// VMOVv1i64
    549585035U,	// VMOVv2f32
    574980235U,	// VMOVv2i32
    572883083U,	// VMOVv2i64
    549585035U,	// VMOVv4f32
    577077387U,	// VMOVv4i16
    574980235U,	// VMOVv4i32
    577077387U,	// VMOVv8i16
    579174539U,	// VMOVv8i8
    939524240U,	// VMRS
    939524240U,	// VMRS_FPEXC
    939524240U,	// VMRS_FPSID
    1021314692U,	// VMSR
    1023411844U,	// VMSR_FPEXC
    1025508996U,	// VMSR_FPSID
    681707145U,	// VMULD
    751011470U,	// VMULLp
    828606094U,	// VMULLslsv2i32
    830703246U,	// VMULLslsv4i16
    834897550U,	// VMULLsluv2i32
    836994702U,	// VMULLsluv4i16
    694388366U,	// VMULLsv2i64
    696485518U,	// VMULLsv4i32
    698582670U,	// VMULLsv8i16
    700679822U,	// VMULLuv2i64
    702776974U,	// VMULLuv4i32
    704874126U,	// VMULLuv8i16
    683804297U,	// VMULS
    683804297U,	// VMULfd
    683804297U,	// VMULfq
    751011465U,	// VMULpd
    751011465U,	// VMULpq
    818022025U,	// VMULslfd
    818022025U,	// VMULslfq
    843286153U,	// VMULslv2i32
    845383305U,	// VMULslv4i16
    843286153U,	// VMULslv4i32
    845383305U,	// VMULslv8i16
    713262729U,	// VMULv16i8
    709068425U,	// VMULv2i32
    711165577U,	// VMULv4i16
    709068425U,	// VMULv4i32
    711165577U,	// VMULv8i16
    713262729U,	// VMULv8i8
    536872596U,	// VMVNd
    536872596U,	// VMVNq
    574981780U,	// VMVNv2i32
    577078932U,	// VMVNv4i16
    574981780U,	// VMVNv4i32
    577078932U,	// VMVNv8i16
    547489433U,	// VNEGD
    549586585U,	// VNEGS
    549586585U,	// VNEGf32q
    549586585U,	// VNEGfd
    562267801U,	// VNEGs16d
    562267801U,	// VNEGs16q
    560170649U,	// VNEGs32d
    560170649U,	// VNEGs32q
    564364953U,	// VNEGs8d
    564364953U,	// VNEGs8q
    815924894U,	// VNMLAD
    818022046U,	// VNMLAS
    815924900U,	// VNMLSD
    818022052U,	// VNMLSS
    681707178U,	// VNMULD
    683804330U,	// VNMULS
    671090352U,	// VORNd
    671090352U,	// VORNq
    671090357U,	// VORRd
    709199541U,	// VORRiv2i32
    711296693U,	// VORRiv4i16
    709199541U,	// VORRiv4i32
    711296693U,	// VORRiv8i16
    671090357U,	// VORRq
    698615482U,	// VPADALsv16i8
    694421178U,	// VPADALsv2i32
    696518330U,	// VPADALsv4i16
    694421178U,	// VPADALsv4i32
    696518330U,	// VPADALsv8i16
    698615482U,	// VPADALsv8i8
    704906938U,	// VPADALuv16i8
    700712634U,	// VPADALuv2i32
    702809786U,	// VPADALuv4i16
    700712634U,	// VPADALuv4i32
    702809786U,	// VPADALuv8i16
    704906938U,	// VPADALuv8i8
    564364993U,	// VPADDLsv16i8
    560170689U,	// VPADDLsv2i32
    562267841U,	// VPADDLsv4i16
    560170689U,	// VPADDLsv4i32
    562267841U,	// VPADDLsv8i16
    564364993U,	// VPADDLsv8i8
    570656449U,	// VPADDLuv16i8
    566462145U,	// VPADDLuv2i32
    568559297U,	// VPADDLuv4i16
    566462145U,	// VPADDLuv4i32
    568559297U,	// VPADDLuv8i16
    570656449U,	// VPADDLuv8i8
    683804360U,	// VPADDf
    711165640U,	// VPADDi16
    709068488U,	// VPADDi32
    713262792U,	// VPADDi8
    683804366U,	// VPMAXf
    696485582U,	// VPMAXs16
    694388430U,	// VPMAXs32
    698582734U,	// VPMAXs8
    702777038U,	// VPMAXu16
    700679886U,	// VPMAXu32
    704874190U,	// VPMAXu8
    683804372U,	// VPMINf
    696485588U,	// VPMINs16
    694388436U,	// VPMINs32
    698582740U,	// VPMINs8
    702777044U,	// VPMINu16
    700679892U,	// VPMINu32
    704874196U,	// VPMINu8
    564365018U,	// VQABSv16i8
    560170714U,	// VQABSv2i32
    562267866U,	// VQABSv4i16
    560170714U,	// VQABSv4i32
    562267866U,	// VQABSv8i16
    564365018U,	// VQABSv8i8
    698582752U,	// VQADDsv16i8
    759400160U,	// VQADDsv1i64
    694388448U,	// VQADDsv2i32
    759400160U,	// VQADDsv2i64
    696485600U,	// VQADDsv4i16
    694388448U,	// VQADDsv4i32
    696485600U,	// VQADDsv8i16
    698582752U,	// VQADDsv8i8
    704874208U,	// VQADDuv16i8
    761497312U,	// VQADDuv1i64
    700679904U,	// VQADDuv2i32
    761497312U,	// VQADDuv2i64
    702777056U,	// VQADDuv4i16
    700679904U,	// VQADDuv4i32
    702777056U,	// VQADDuv8i16
    704874208U,	// VQADDuv8i8
    1902380774U,	// VQDMLALslv2i32
    1904477926U,	// VQDMLALslv4i16
    828638950U,	// VQDMLALv2i64
    830736102U,	// VQDMLALv4i32
    1902380782U,	// VQDMLSLslv2i32
    1904477934U,	// VQDMLSLslv4i16
    828638958U,	// VQDMLSLv2i64
    830736110U,	// VQDMLSLv4i32
    828606198U,	// VQDMULHslv2i32
    830703350U,	// VQDMULHslv4i16
    828606198U,	// VQDMULHslv4i32
    830703350U,	// VQDMULHslv8i16
    694388470U,	// VQDMULHv2i32
    696485622U,	// VQDMULHv4i16
    694388470U,	// VQDMULHv4i32
    696485622U,	// VQDMULHv8i16
    828606206U,	// VQDMULLslv2i32
    830703358U,	// VQDMULLslv4i16
    694388478U,	// VQDMULLv2i64
    696485630U,	// VQDMULLv4i32
    625182470U,	// VQMOVNsuv2i32
    560170758U,	// VQMOVNsuv4i16
    562267910U,	// VQMOVNsuv8i8
    625182478U,	// VQMOVNsv2i32
    560170766U,	// VQMOVNsv4i16
    562267918U,	// VQMOVNsv8i8
    627279630U,	// VQMOVNuv2i32
    566462222U,	// VQMOVNuv4i16
    568559374U,	// VQMOVNuv8i8
    564365077U,	// VQNEGv16i8
    560170773U,	// VQNEGv2i32
    562267925U,	// VQNEGv4i16
    560170773U,	// VQNEGv4i32
    562267925U,	// VQNEGv8i16
    564365077U,	// VQNEGv8i8
    828606235U,	// VQRDMULHslv2i32
    830703387U,	// VQRDMULHslv4i16
    828606235U,	// VQRDMULHslv4i32
    830703387U,	// VQRDMULHslv8i16
    694388507U,	// VQRDMULHv2i32
    696485659U,	// VQRDMULHv4i16
    694388507U,	// VQRDMULHv4i32
    696485659U,	// VQRDMULHv8i16
    698582820U,	// VQRSHLsv16i8
    759400228U,	// VQRSHLsv1i64
    694388516U,	// VQRSHLsv2i32
    759400228U,	// VQRSHLsv2i64
    696485668U,	// VQRSHLsv4i16
    694388516U,	// VQRSHLsv4i32
    696485668U,	// VQRSHLsv8i16
    698582820U,	// VQRSHLsv8i8
    704874276U,	// VQRSHLuv16i8
    761497380U,	// VQRSHLuv1i64
    700679972U,	// VQRSHLuv2i32
    761497380U,	// VQRSHLuv2i64
    702777124U,	// VQRSHLuv4i16
    700679972U,	// VQRSHLuv4i32
    702777124U,	// VQRSHLuv8i16
    704874276U,	// VQRSHLuv8i8
    759400235U,	// VQRSHRNsv2i32
    694388523U,	// VQRSHRNsv4i16
    696485675U,	// VQRSHRNsv8i8
    761497387U,	// VQRSHRNuv2i32
    700679979U,	// VQRSHRNuv4i16
    702777131U,	// VQRSHRNuv8i8
    759400243U,	// VQRSHRUNv2i32
    694388531U,	// VQRSHRUNv4i16
    696485683U,	// VQRSHRUNv8i8
    698582844U,	// VQSHLsiv16i8
    759400252U,	// VQSHLsiv1i64
    694388540U,	// VQSHLsiv2i32
    759400252U,	// VQSHLsiv2i64
    696485692U,	// VQSHLsiv4i16
    694388540U,	// VQSHLsiv4i32
    696485692U,	// VQSHLsiv8i16
    698582844U,	// VQSHLsiv8i8
    698582850U,	// VQSHLsuv16i8
    759400258U,	// VQSHLsuv1i64
    694388546U,	// VQSHLsuv2i32
    759400258U,	// VQSHLsuv2i64
    696485698U,	// VQSHLsuv4i16
    694388546U,	// VQSHLsuv4i32
    696485698U,	// VQSHLsuv8i16
    698582850U,	// VQSHLsuv8i8
    698582844U,	// VQSHLsv16i8
    759400252U,	// VQSHLsv1i64
    694388540U,	// VQSHLsv2i32
    759400252U,	// VQSHLsv2i64
    696485692U,	// VQSHLsv4i16
    694388540U,	// VQSHLsv4i32
    696485692U,	// VQSHLsv8i16
    698582844U,	// VQSHLsv8i8
    704874300U,	// VQSHLuiv16i8
    761497404U,	// VQSHLuiv1i64
    700679996U,	// VQSHLuiv2i32
    761497404U,	// VQSHLuiv2i64
    702777148U,	// VQSHLuiv4i16
    700679996U,	// VQSHLuiv4i32
    702777148U,	// VQSHLuiv8i16
    704874300U,	// VQSHLuiv8i8
    704874300U,	// VQSHLuv16i8
    761497404U,	// VQSHLuv1i64
    700679996U,	// VQSHLuv2i32
    761497404U,	// VQSHLuv2i64
    702777148U,	// VQSHLuv4i16
    700679996U,	// VQSHLuv4i32
    702777148U,	// VQSHLuv8i16
    704874300U,	// VQSHLuv8i8
    759400265U,	// VQSHRNsv2i32
    694388553U,	// VQSHRNsv4i16
    696485705U,	// VQSHRNsv8i8
    761497417U,	// VQSHRNuv2i32
    700680009U,	// VQSHRNuv4i16
    702777161U,	// VQSHRNuv8i8
    759400272U,	// VQSHRUNv2i32
    694388560U,	// VQSHRUNv4i16
    696485712U,	// VQSHRUNv8i8
    698582872U,	// VQSUBsv16i8
    759400280U,	// VQSUBsv1i64
    694388568U,	// VQSUBsv2i32
    759400280U,	// VQSUBsv2i64
    696485720U,	// VQSUBsv4i16
    694388568U,	// VQSUBsv4i32
    696485720U,	// VQSUBsv8i16
    698582872U,	// VQSUBsv8i8
    704874328U,	// VQSUBuv16i8
    761497432U,	// VQSUBuv1i64
    700680024U,	// VQSUBuv2i32
    761497432U,	// VQSUBuv2i64
    702777176U,	// VQSUBuv4i16
    700680024U,	// VQSUBuv4i32
    702777176U,	// VQSUBuv8i16
    704874328U,	// VQSUBuv8i8
    706971486U,	// VRADDHNv2i32
    709068638U,	// VRADDHNv4i16
    711165790U,	// VRADDHNv8i8
    566462310U,	// VRECPEd
    549586790U,	// VRECPEfd
    549586790U,	// VRECPEfq
    566462310U,	// VRECPEq
    683804525U,	// VRECPSfd
    683804525U,	// VRECPSfq
    580913012U,	// VREV16d8
    580913012U,	// VREV16q8
    599787387U,	// VREV32d16
    580913019U,	// VREV32d8
    599787387U,	// VREV32q16
    580913019U,	// VREV32q8
    599787394U,	// VREV64d16
    601884546U,	// VREV64d32
    580913026U,	// VREV64d8
    599787394U,	// VREV64q16
    601884546U,	// VREV64q32
    580913026U,	// VREV64q8
    698582921U,	// VRHADDsv16i8
    694388617U,	// VRHADDsv2i32
    696485769U,	// VRHADDsv4i16
    694388617U,	// VRHADDsv4i32
    696485769U,	// VRHADDsv8i16
    698582921U,	// VRHADDsv8i8
    704874377U,	// VRHADDuv16i8
    700680073U,	// VRHADDuv2i32
    702777225U,	// VRHADDuv4i16
    700680073U,	// VRHADDuv4i32
    702777225U,	// VRHADDuv8i16
    704874377U,	// VRHADDuv8i8
    698582928U,	// VRSHLsv16i8
    759400336U,	// VRSHLsv1i64
    694388624U,	// VRSHLsv2i32
    759400336U,	// VRSHLsv2i64
    696485776U,	// VRSHLsv4i16
    694388624U,	// VRSHLsv4i32
    696485776U,	// VRSHLsv8i16
    698582928U,	// VRSHLsv8i8
    704874384U,	// VRSHLuv16i8
    761497488U,	// VRSHLuv1i64
    700680080U,	// VRSHLuv2i32
    761497488U,	// VRSHLuv2i64
    702777232U,	// VRSHLuv4i16
    700680080U,	// VRSHLuv4i32
    702777232U,	// VRSHLuv8i16
    704874384U,	// VRSHLuv8i8
    706971542U,	// VRSHRNv2i32
    709068694U,	// VRSHRNv4i16
    711165846U,	// VRSHRNv8i8
    698582941U,	// VRSHRsv16i8
    759400349U,	// VRSHRsv1i64
    694388637U,	// VRSHRsv2i32
    759400349U,	// VRSHRsv2i64
    696485789U,	// VRSHRsv4i16
    694388637U,	// VRSHRsv4i32
    696485789U,	// VRSHRsv8i16
    698582941U,	// VRSHRsv8i8
    704874397U,	// VRSHRuv16i8
    761497501U,	// VRSHRuv1i64
    700680093U,	// VRSHRuv2i32
    761497501U,	// VRSHRuv2i64
    702777245U,	// VRSHRuv4i16
    700680093U,	// VRSHRuv4i32
    702777245U,	// VRSHRuv8i16
    704874397U,	// VRSHRuv8i8
    566462371U,	// VRSQRTEd
    549586851U,	// VRSQRTEfd
    549586851U,	// VRSQRTEfq
    566462371U,	// VRSQRTEq
    683804587U,	// VRSQRTSfd
    683804587U,	// VRSQRTSfq
    832833459U,	// VRSRAsv16i8
    893650867U,	// VRSRAsv1i64
    828639155U,	// VRSRAsv2i32
    893650867U,	// VRSRAsv2i64
    830736307U,	// VRSRAsv4i16
    828639155U,	// VRSRAsv4i32
    830736307U,	// VRSRAsv8i16
    832833459U,	// VRSRAsv8i8
    839124915U,	// VRSRAuv16i8
    895748019U,	// VRSRAuv1i64
    834930611U,	// VRSRAuv2i32
    895748019U,	// VRSRAuv2i64
    837027763U,	// VRSRAuv4i16
    834930611U,	// VRSRAuv4i32
    837027763U,	// VRSRAuv8i16
    839124915U,	// VRSRAuv8i8
    706971577U,	// VRSUBHNv2i32
    709068729U,	// VRSUBHNv4i16
    711165881U,	// VRSUBHNv8i8
    868221067U,	// VSETLNi16
    870318219U,	// VSETLNi32
    849346699U,	// VSETLNi8
    711165889U,	// VSHLLi16
    709068737U,	// VSHLLi32
    713263041U,	// VSHLLi8
    694388673U,	// VSHLLsv2i64
    696485825U,	// VSHLLsv4i32
    698582977U,	// VSHLLsv8i16
    700680129U,	// VSHLLuv2i64
    702777281U,	// VSHLLuv4i32
    704874433U,	// VSHLLuv8i16
    713263047U,	// VSHLiv16i8
    706971591U,	// VSHLiv1i64
    709068743U,	// VSHLiv2i32
    706971591U,	// VSHLiv2i64
    711165895U,	// VSHLiv4i16
    709068743U,	// VSHLiv4i32
    711165895U,	// VSHLiv8i16
    713263047U,	// VSHLiv8i8
    698582983U,	// VSHLsv16i8
    759400391U,	// VSHLsv1i64
    694388679U,	// VSHLsv2i32
    759400391U,	// VSHLsv2i64
    696485831U,	// VSHLsv4i16
    694388679U,	// VSHLsv4i32
    696485831U,	// VSHLsv8i16
    698582983U,	// VSHLsv8i8
    704874439U,	// VSHLuv16i8
    761497543U,	// VSHLuv1i64
    700680135U,	// VSHLuv2i32
    761497543U,	// VSHLuv2i64
    702777287U,	// VSHLuv4i16
    700680135U,	// VSHLuv4i32
    702777287U,	// VSHLuv8i16
    704874439U,	// VSHLuv8i8
    706971596U,	// VSHRNv2i32
    709068748U,	// VSHRNv4i16
    711165900U,	// VSHRNv8i8
    698582994U,	// VSHRsv16i8
    759400402U,	// VSHRsv1i64
    694388690U,	// VSHRsv2i32
    759400402U,	// VSHRsv2i64
    696485842U,	// VSHRsv4i16
    694388690U,	// VSHRsv4i32
    696485842U,	// VSHRsv8i16
    698582994U,	// VSHRsv8i8
    704874450U,	// VSHRuv16i8
    761497554U,	// VSHRuv1i64
    700680146U,	// VSHRuv2i32
    761497554U,	// VSHRuv2i64
    702777298U,	// VSHRuv4i16
    700680146U,	// VSHRuv4i32
    702777298U,	// VSHRuv8i16
    704874450U,	// VSHRuv8i8
    763364848U,	// VSHTOD
    765462000U,	// VSHTOS
    633767408U,	// VSITOD
    596018672U,	// VSITOS
    849348567U,	// VSLIv16i8
    872417239U,	// VSLIv1i64
    870320087U,	// VSLIv2i32
    872417239U,	// VSLIv2i64
    868222935U,	// VSLIv4i16
    870320087U,	// VSLIv4i32
    868222935U,	// VSLIv8i16
    849348567U,	// VSLIv8i8
    767690224U,	// VSLTOD
    729941488U,	// VSLTOS
    547489756U,	// VSQRTD
    549586908U,	// VSQRTS
    832833506U,	// VSRAsv16i8
    893650914U,	// VSRAsv1i64
    828639202U,	// VSRAsv2i32
    893650914U,	// VSRAsv2i64
    830736354U,	// VSRAsv4i16
    828639202U,	// VSRAsv4i32
    830736354U,	// VSRAsv8i16
    832833506U,	// VSRAsv8i8
    839124962U,	// VSRAuv16i8
    895748066U,	// VSRAuv1i64
    834930658U,	// VSRAuv2i32
    895748066U,	// VSRAuv2i64
    837027810U,	// VSRAuv4i16
    834930658U,	// VSRAuv4i32
    837027810U,	// VSRAuv8i16
    839124962U,	// VSRAuv8i8
    849348583U,	// VSRIv16i8
    872417255U,	// VSRIv1i64
    870320103U,	// VSRIv2i32
    872417255U,	// VSRIv2i64
    868222951U,	// VSRIv4i16
    870320103U,	// VSRIv4i32
    868222951U,	// VSRIv8i16
    849348583U,	// VSRIv8i8
    874776556U,	// VST1LNd16
    1412171756U,	// VST1LNd16_UPD
    876873708U,	// VST1LNd32
    1414268908U,	// VST1LNd32_UPD
    878970860U,	// VST1LNd8
    1416366060U,	// VST1LNd8_UPD
    868222956U,	// VST1LNdAsm_16
    870320108U,	// VST1LNdAsm_32
    849348588U,	// VST1LNdAsm_8
    881231852U,	// VST1LNdAsm_F
    818022380U,	// VST1LNdAsm_F32
    845678572U,	// VST1LNdAsm_I16
    843581420U,	// VST1LNdAsm_I32
    847775724U,	// VST1LNdAsm_I8
    883329004U,	// VST1LNdAsm_P16
    885524460U,	// VST1LNdAsm_P8
    830998508U,	// VST1LNdAsm_S16
    828901356U,	// VST1LNdAsm_S32
    833095660U,	// VST1LNdAsm_S8
    837289964U,	// VST1LNdAsm_U16
    835192812U,	// VST1LNdAsm_U32
    839387116U,	// VST1LNdAsm_U8
    868222956U,	// VST1LNdWB_fixed_Asm_16
    870320108U,	// VST1LNdWB_fixed_Asm_32
    849348588U,	// VST1LNdWB_fixed_Asm_8
    881362924U,	// VST1LNdWB_fixed_Asm_F
    818022380U,	// VST1LNdWB_fixed_Asm_F32
    845678572U,	// VST1LNdWB_fixed_Asm_I16
    843581420U,	// VST1LNdWB_fixed_Asm_I32
    847775724U,	// VST1LNdWB_fixed_Asm_I8
    883460076U,	// VST1LNdWB_fixed_Asm_P16
    885524460U,	// VST1LNdWB_fixed_Asm_P8
    830998508U,	// VST1LNdWB_fixed_Asm_S16
    828901356U,	// VST1LNdWB_fixed_Asm_S32
    833095660U,	// VST1LNdWB_fixed_Asm_S8
    837289964U,	// VST1LNdWB_fixed_Asm_U16
    835192812U,	// VST1LNdWB_fixed_Asm_U32
    839387116U,	// VST1LNdWB_fixed_Asm_U8
    1941964780U,	// VST1LNdWB_register_Asm_16
    1944061932U,	// VST1LNdWB_register_Asm_32
    1923090412U,	// VST1LNdWB_register_Asm_8
    1954678764U,	// VST1LNdWB_register_Asm_F
    1891764204U,	// VST1LNdWB_register_Asm_F32
    1919420396U,	// VST1LNdWB_register_Asm_I16
    1917323244U,	// VST1LNdWB_register_Asm_I32
    1921517548U,	// VST1LNdWB_register_Asm_I8
    1956775916U,	// VST1LNdWB_register_Asm_P16
    1959266284U,	// VST1LNdWB_register_Asm_P8
    1904740332U,	// VST1LNdWB_register_Asm_S16
    1902643180U,	// VST1LNdWB_register_Asm_S32
    1906837484U,	// VST1LNdWB_register_Asm_S8
    1911031788U,	// VST1LNdWB_register_Asm_U16
    1908934636U,	// VST1LNdWB_register_Asm_U32
    1913128940U,	// VST1LNdWB_register_Asm_U8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    734824428U,	// VST1d16
    734857196U,	// VST1d16Q
    869107692U,	// VST1d16Qwb_fixed
    1942882284U,	// VST1d16Qwb_register
    734955500U,	// VST1d16T
    869205996U,	// VST1d16Twb_fixed
    1942980588U,	// VST1d16Twb_register
    869271532U,	// VST1d16wb_fixed
    1943046124U,	// VST1d16wb_register
    736921580U,	// VST1d32
    736954348U,	// VST1d32Q
    871204844U,	// VST1d32Qwb_fixed
    1944979436U,	// VST1d32Qwb_register
    737052652U,	// VST1d32T
    871303148U,	// VST1d32Twb_fixed
    1945077740U,	// VST1d32Twb_register
    871368684U,	// VST1d32wb_fixed
    1945143276U,	// VST1d32wb_register
    739018732U,	// VST1d64
    739051500U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    873301996U,	// VST1d64Qwb_fixed
    1947076588U,	// VST1d64Qwb_register
    739149804U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    873400300U,	// VST1d64Twb_fixed
    1947174892U,	// VST1d64Twb_register
    873465836U,	// VST1d64wb_fixed
    1947240428U,	// VST1d64wb_register
    715950060U,	// VST1d8
    715982828U,	// VST1d8Q
    850233324U,	// VST1d8Qwb_fixed
    1924007916U,	// VST1d8Qwb_register
    716081132U,	// VST1d8T
    850331628U,	// VST1d8Twb_fixed
    1924106220U,	// VST1d8Twb_register
    850397164U,	// VST1d8wb_fixed
    1924171756U,	// VST1d8wb_register
    735119340U,	// VST1q16
    0U,	// VST1q16Pseudo
    0U,	// VST1q16PseudoWB_fixed
    0U,	// VST1q16PseudoWB_register
    869369836U,	// VST1q16wb_fixed
    1943144428U,	// VST1q16wb_register
    737216492U,	// VST1q32
    0U,	// VST1q32Pseudo
    0U,	// VST1q32PseudoWB_fixed
    0U,	// VST1q32PseudoWB_register
    871466988U,	// VST1q32wb_fixed
    1945241580U,	// VST1q32wb_register
    739313644U,	// VST1q64
    0U,	// VST1q64Pseudo
    0U,	// VST1q64PseudoWB_fixed
    0U,	// VST1q64PseudoWB_register
    873564140U,	// VST1q64wb_fixed
    1947338732U,	// VST1q64wb_register
    716244972U,	// VST1q8
    0U,	// VST1q8Pseudo
    0U,	// VST1q8PseudoWB_fixed
    0U,	// VST1q8PseudoWB_register
    850495468U,	// VST1q8wb_fixed
    1924270060U,	// VST1q8wb_register
    1948518385U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    2754349041U,	// VST2LNd16_UPD
    1950615537U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    2756446193U,	// VST2LNd32_UPD
    1952712689U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    2758543345U,	// VST2LNd8_UPD
    868222961U,	// VST2LNdAsm_16
    870320113U,	// VST2LNdAsm_32
    849348593U,	// VST2LNdAsm_8
    881231857U,	// VST2LNdAsm_F
    818022385U,	// VST2LNdAsm_F32
    845678577U,	// VST2LNdAsm_I16
    843581425U,	// VST2LNdAsm_I32
    847775729U,	// VST2LNdAsm_I8
    883329009U,	// VST2LNdAsm_P16
    885524465U,	// VST2LNdAsm_P8
    830998513U,	// VST2LNdAsm_S16
    828901361U,	// VST2LNdAsm_S32
    833095665U,	// VST2LNdAsm_S8
    837289969U,	// VST2LNdAsm_U16
    835192817U,	// VST2LNdAsm_U32
    839387121U,	// VST2LNdAsm_U8
    868222961U,	// VST2LNdWB_fixed_Asm_16
    870320113U,	// VST2LNdWB_fixed_Asm_32
    849348593U,	// VST2LNdWB_fixed_Asm_8
    881362929U,	// VST2LNdWB_fixed_Asm_F
    818022385U,	// VST2LNdWB_fixed_Asm_F32
    845678577U,	// VST2LNdWB_fixed_Asm_I16
    843581425U,	// VST2LNdWB_fixed_Asm_I32
    847775729U,	// VST2LNdWB_fixed_Asm_I8
    883460081U,	// VST2LNdWB_fixed_Asm_P16
    885524465U,	// VST2LNdWB_fixed_Asm_P8
    830998513U,	// VST2LNdWB_fixed_Asm_S16
    828901361U,	// VST2LNdWB_fixed_Asm_S32
    833095665U,	// VST2LNdWB_fixed_Asm_S8
    837289969U,	// VST2LNdWB_fixed_Asm_U16
    835192817U,	// VST2LNdWB_fixed_Asm_U32
    839387121U,	// VST2LNdWB_fixed_Asm_U8
    1941964785U,	// VST2LNdWB_register_Asm_16
    1944061937U,	// VST2LNdWB_register_Asm_32
    1923090417U,	// VST2LNdWB_register_Asm_8
    1954678769U,	// VST2LNdWB_register_Asm_F
    1891764209U,	// VST2LNdWB_register_Asm_F32
    1919420401U,	// VST2LNdWB_register_Asm_I16
    1917323249U,	// VST2LNdWB_register_Asm_I32
    1921517553U,	// VST2LNdWB_register_Asm_I8
    1956775921U,	// VST2LNdWB_register_Asm_P16
    1959266289U,	// VST2LNdWB_register_Asm_P8
    1904740337U,	// VST2LNdWB_register_Asm_S16
    1902643185U,	// VST2LNdWB_register_Asm_S32
    1906837489U,	// VST2LNdWB_register_Asm_S8
    1911031793U,	// VST2LNdWB_register_Asm_U16
    1908934641U,	// VST2LNdWB_register_Asm_U32
    1913128945U,	// VST2LNdWB_register_Asm_U8
    1948518385U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    2754349041U,	// VST2LNq16_UPD
    1950615537U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    2756446193U,	// VST2LNq32_UPD
    868222961U,	// VST2LNqAsm_16
    870320113U,	// VST2LNqAsm_32
    881231857U,	// VST2LNqAsm_F
    818022385U,	// VST2LNqAsm_F32
    845678577U,	// VST2LNqAsm_I16
    843581425U,	// VST2LNqAsm_I32
    883329009U,	// VST2LNqAsm_P16
    830998513U,	// VST2LNqAsm_S16
    828901361U,	// VST2LNqAsm_S32
    837289969U,	// VST2LNqAsm_U16
    835192817U,	// VST2LNqAsm_U32
    868222961U,	// VST2LNqWB_fixed_Asm_16
    870320113U,	// VST2LNqWB_fixed_Asm_32
    881362929U,	// VST2LNqWB_fixed_Asm_F
    818022385U,	// VST2LNqWB_fixed_Asm_F32
    845678577U,	// VST2LNqWB_fixed_Asm_I16
    843581425U,	// VST2LNqWB_fixed_Asm_I32
    883460081U,	// VST2LNqWB_fixed_Asm_P16
    830998513U,	// VST2LNqWB_fixed_Asm_S16
    828901361U,	// VST2LNqWB_fixed_Asm_S32
    837289969U,	// VST2LNqWB_fixed_Asm_U16
    835192817U,	// VST2LNqWB_fixed_Asm_U32
    1941964785U,	// VST2LNqWB_register_Asm_16
    1944061937U,	// VST2LNqWB_register_Asm_32
    1954678769U,	// VST2LNqWB_register_Asm_F
    1891764209U,	// VST2LNqWB_register_Asm_F32
    1919420401U,	// VST2LNqWB_register_Asm_I16
    1917323249U,	// VST2LNqWB_register_Asm_I32
    1956775921U,	// VST2LNqWB_register_Asm_P16
    1904740337U,	// VST2LNqWB_register_Asm_S16
    1902643185U,	// VST2LNqWB_register_Asm_S32
    1911031793U,	// VST2LNqWB_register_Asm_U16
    1908934641U,	// VST2LNqWB_register_Asm_U32
    735217649U,	// VST2b16
    869468145U,	// VST2b16wb_fixed
    1943242737U,	// VST2b16wb_register
    737314801U,	// VST2b32
    871565297U,	// VST2b32wb_fixed
    1945339889U,	// VST2b32wb_register
    716343281U,	// VST2b8
    850593777U,	// VST2b8wb_fixed
    1924368369U,	// VST2b8wb_register
    735119345U,	// VST2d16
    0U,	// VST2d16Pseudo
    0U,	// VST2d16PseudoWB_fixed
    0U,	// VST2d16PseudoWB_register
    869369841U,	// VST2d16wb_fixed
    1943144433U,	// VST2d16wb_register
    737216497U,	// VST2d32
    0U,	// VST2d32Pseudo
    0U,	// VST2d32PseudoWB_fixed
    0U,	// VST2d32PseudoWB_register
    871466993U,	// VST2d32wb_fixed
    1945241585U,	// VST2d32wb_register
    716244977U,	// VST2d8
    0U,	// VST2d8Pseudo
    0U,	// VST2d8PseudoWB_fixed
    0U,	// VST2d8PseudoWB_register
    850495473U,	// VST2d8wb_fixed
    1924270065U,	// VST2d8wb_register
    734857201U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    869107697U,	// VST2q16wb_fixed
    1942882289U,	// VST2q16wb_register
    736954353U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    871204849U,	// VST2q32wb_fixed
    1944979441U,	// VST2q32wb_register
    715982833U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    850233329U,	// VST2q8wb_fixed
    1924007921U,	// VST2q8wb_register
    1411647478U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    3157002230U,	// VST3LNd16_UPD
    1413744630U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    3159099382U,	// VST3LNd32_UPD
    1415841782U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    3161196534U,	// VST3LNd8_UPD
    1411647478U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    3157002230U,	// VST3LNq16_UPD
    1413744630U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    3159099382U,	// VST3LNq32_UPD
    1948518390U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    2754349046U,	// VST3d16_UPD
    1950615542U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    2756446198U,	// VST3d32_UPD
    1952712694U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    2758543350U,	// VST3d8_UPD
    1948518390U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    2754349046U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    1950615542U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    2756446198U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    1952712694U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    2758543350U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    2753824763U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    2888566779U,	// VST4LNd16_UPD
    2755921915U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    2890663931U,	// VST4LNd32_UPD
    2758019067U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    2892761083U,	// VST4LNd8_UPD
    2753824763U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    2888566779U,	// VST4LNq16_UPD
    2755921915U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    2890663931U,	// VST4LNq32_UPD
    1411647483U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    3157002235U,	// VST4d16_UPD
    1413744635U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    3159099387U,	// VST4d32_UPD
    1415841787U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    3161196539U,	// VST4d8_UPD
    1411647483U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    3157002235U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    1413744635U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    3159099387U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    1415841787U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    3161196539U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    537102336U,	// VSTMDDB_UPD
    939526151U,	// VSTMDIA
    537102343U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    537102336U,	// VSTMSDB_UPD
    939526151U,	// VSTMSIA
    537102343U,	// VSTMSIA_UPD
    671090702U,	// VSTRD
    671090702U,	// VSTRS
    681707539U,	// VSUBD
    706971672U,	// VSUBHNv2i32
    709068824U,	// VSUBHNv4i16
    711165976U,	// VSUBHNv8i8
    694388767U,	// VSUBLsv2i64
    696485919U,	// VSUBLsv4i32
    698583071U,	// VSUBLsv8i16
    700680223U,	// VSUBLuv2i64
    702777375U,	// VSUBLuv4i32
    704874527U,	// VSUBLuv8i16
    683804691U,	// VSUBS
    694388773U,	// VSUBWsv2i64
    696485925U,	// VSUBWsv4i32
    698583077U,	// VSUBWsv8i16
    700680229U,	// VSUBWuv2i64
    702777381U,	// VSUBWuv4i32
    704874533U,	// VSUBWuv8i16
    683804691U,	// VSUBfd
    683804691U,	// VSUBfq
    713263123U,	// VSUBv16i8
    706971667U,	// VSUBv1i64
    709068819U,	// VSUBv2i32
    706971667U,	// VSUBv2i64
    711165971U,	// VSUBv4i16
    709068819U,	// VSUBv4i32
    711165971U,	// VSUBv8i16
    713263123U,	// VSUBv8i8
    536873003U,	// VSWPd
    536873003U,	// VSWPq
    715130928U,	// VTBL1
    715130928U,	// VTBL2
    0U,	// VTBL2Pseudo
    715130928U,	// VTBL3
    0U,	// VTBL3Pseudo
    715130928U,	// VTBL4
    0U,	// VTBL4Pseudo
    849348661U,	// VTBX1
    849348661U,	// VTBX2
    0U,	// VTBX2Pseudo
    849348661U,	// VTBX3
    0U,	// VTBX3Pseudo
    849348661U,	// VTBX4
    0U,	// VTBX4Pseudo
    769656304U,	// VTOSHD
    771753456U,	// VTOSHS
    640059450U,	// VTOSIRD
    591824954U,	// VTOSIRS
    640058864U,	// VTOSIZD
    591824368U,	// VTOSIZS
    773981680U,	// VTOSLD
    725747184U,	// VTOSLS
    775947760U,	// VTOUHD
    778044912U,	// VTOUHS
    646350906U,	// VTOUIRD
    593922106U,	// VTOUIRS
    646350320U,	// VTOUIZD
    593921520U,	// VTOUIZS
    780273136U,	// VTOULD
    727844336U,	// VTOULS
    868223040U,	// VTRNd16
    870320192U,	// VTRNd32
    849348672U,	// VTRNd8
    868223040U,	// VTRNq16
    870320192U,	// VTRNq32
    849348672U,	// VTRNq8
    715130949U,	// VTSTv16i8
    736102469U,	// VTSTv2i32
    734005317U,	// VTSTv4i16
    736102469U,	// VTSTv4i32
    734005317U,	// VTSTv8i16
    715130949U,	// VTSTv8i8
    782239216U,	// VUHTOD
    784336368U,	// VUHTOS
    652641776U,	// VUITOD
    598115824U,	// VUITOS
    786564592U,	// VULTOD
    732038640U,	// VULTOS
    868223050U,	// VUZPd16
    870320202U,	// VUZPd32
    849348682U,	// VUZPd8
    868223050U,	// VUZPq16
    870320202U,	// VUZPq32
    849348682U,	// VUZPq8
    868223055U,	// VZIPd16
    870320207U,	// VZIPd32
    849348687U,	// VZIPd8
    868223055U,	// VZIPq16
    870320207U,	// VZIPq32
    849348687U,	// VZIPq8
    1212155988U,	// WFE
    1212155992U,	// WFI
    1212155996U,	// YIELD
    939524272U,	// sysLDMDA
    537100464U,	// sysLDMDA_UPD
    939524278U,	// sysLDMDB
    537100470U,	// sysLDMDB_UPD
    939524284U,	// sysLDMIA
    537100476U,	// sysLDMIA_UPD
    939524288U,	// sysLDMIB
    537100480U,	// sysLDMIB_UPD
    939525114U,	// sysSTMDA
    537101306U,	// sysSTMDA_UPD
    939525120U,	// sysSTMDB
    537101312U,	// sysSTMDB_UPD
    939525126U,	// sysSTMIA
    537101318U,	// sysSTMIA_UPD
    939525130U,	// sysSTMIB
    537101322U,	// sysSTMIB_UPD
    0U,	// t2ABS
    134217746U,	// t2ADCri
    251658258U,	// t2ADCrr
    385875986U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    251658262U,	// t2ADDri
    671090786U,	// t2ADDri12
    251658262U,	// t2ADDrr
    385875990U,	// t2ADDrs
    654311450U,	// t2ADR
    134217758U,	// t2ANDri
    251658270U,	// t2ANDrr
    385875998U,	// t2ANDrs
    251658274U,	// t2ASRri
    251658274U,	// t2ASRrr
    1056964690U,	// t2B
    671088678U,	// t2BFC
    805306410U,	// t2BFI
    134217774U,	// t2BICri
    251658286U,	// t2BICrr
    385876014U,	// t2BICrs
    0U,	// t2BR_JT
    939524171U,	// t2BXJ
    1056964690U,	// t2Bcc
    1484849240U,	// t2CDP2
    1212153950U,	// t2CLREX
    536871012U,	// t2CLZ
    654311528U,	// t2CMNzri
    654311528U,	// t2CMNzrr
    788529256U,	// t2CMNzrs
    654311532U,	// t2CMPri
    654311532U,	// t2CMPrr
    788529260U,	// t2CMPrs
    1077936240U,	// t2CPS1p
    1728151669U,	// t2CPS2p
    1728151669U,	// t2CPS3p
    939524217U,	// t2DBG
    1744830589U,	// t2DMB
    1744830594U,	// t2DSB
    134217863U,	// t2EORri
    251658375U,	// t2EORrr
    385876103U,	// t2EORrs
    1744830613U,	// t2ISB
    3355445351U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    805341290U,	// t2LDC2L_OFFSET
    805341290U,	// t2LDC2L_OPTION
    805341290U,	// t2LDC2L_POST
    805341290U,	// t2LDC2L_PRE
    805341296U,	// t2LDC2_OFFSET
    805341296U,	// t2LDC2_OPTION
    805341296U,	// t2LDC2_POST
    805341296U,	// t2LDC2_PRE
    805339303U,	// t2LDCL_OFFSET
    805339303U,	// t2LDCL_OPTION
    805339303U,	// t2LDCL_POST
    805339303U,	// t2LDCL_PRE
    805339308U,	// t2LDC_OFFSET
    805339308U,	// t2LDC_OPTION
    805339308U,	// t2LDC_POST
    805339308U,	// t2LDC_PRE
    939524278U,	// t2LDMDB
    537100470U,	// t2LDMDB_UPD
    1056964796U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    654540988U,	// t2LDMIA_UPD
    671088838U,	// t2LDRBT
    805306572U,	// t2LDRB_POST
    805306572U,	// t2LDRB_PRE
    788529356U,	// t2LDRBi12
    671088844U,	// t2LDRBi8
    654311628U,	// t2LDRBpci
    538968268U,	// t2LDRBpcrel
    922747084U,	// t2LDRBs
    1879048401U,	// t2LDRD_POST
    1879048401U,	// t2LDRD_PRE
    805306577U,	// t2LDRDi8
    671088854U,	// t2LDREX
    536871132U,	// t2LDREXB
    671088867U,	// t2LDREXD
    536871146U,	// t2LDREXH
    671088886U,	// t2LDRHT
    805306609U,	// t2LDRH_POST
    805306609U,	// t2LDRH_PRE
    788529393U,	// t2LDRHi12
    671088881U,	// t2LDRHi8
    654311665U,	// t2LDRHpci
    538968305U,	// t2LDRHpcrel
    922747121U,	// t2LDRHs
    671088898U,	// t2LDRSBT
    805306620U,	// t2LDRSB_POST
    805306620U,	// t2LDRSB_PRE
    788529404U,	// t2LDRSBi12
    671088892U,	// t2LDRSBi8
    654311676U,	// t2LDRSBpci
    538968316U,	// t2LDRSBpcrel
    922747132U,	// t2LDRSBs
    671088911U,	// t2LDRSHT
    805306633U,	// t2LDRSH_POST
    805306633U,	// t2LDRSH_PRE
    788529417U,	// t2LDRSHi12
    671088905U,	// t2LDRSHi8
    654311689U,	// t2LDRSHpci
    538968329U,	// t2LDRSHpcrel
    922747145U,	// t2LDRSHs
    671088918U,	// t2LDRT
    805306651U,	// t2LDR_POST
    805306651U,	// t2LDR_PRE
    788529435U,	// t2LDRi12
    671088923U,	// t2LDRi8
    654311707U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    538968347U,	// t2LDRpcrel
    922747163U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    251658527U,	// t2LSLri
    251658527U,	// t2LSLrr
    251658531U,	// t2LSRri
    251658531U,	// t2LSRrr
    1485047925U,	// t2MCR
    1485046059U,	// t2MCR2
    1485047930U,	// t2MCRR
    1485046070U,	// t2MCRR2
    805306685U,	// t2MLA
    805306689U,	// t2MLS
    922746914U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    671088974U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    922747167U,	// t2MOVCClsl
    922747171U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    922747400U,	// t2MOVCCror
    673187968U,	// t2MOVSsi
    807405696U,	// t2MOVSsr
    671088969U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_dyn
    0U,	// t2MOV_ga_pcrel
    2130706757U,	// t2MOVi
    536871246U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    2130706757U,	// t2MOVr
    673186117U,	// t2MOVsi
    807403845U,	// t2MOVsr
    654313605U,	// t2MOVsra_flag
    654313610U,	// t2MOVsrl_flag
    2147485839U,	// t2MRC
    2147483991U,	// t2MRC2
    1485047956U,	// t2MRRC
    1485046114U,	// t2MRRC2
    939524457U,	// t2MRS_AR
    536871273U,	// t2MRS_M
    939524457U,	// t2MRSsys_AR
    537198957U,	// t2MSR_AR
    537198957U,	// t2MSR_M
    671089009U,	// t2MUL
    671089013U,	// t2MVNCCi
    2013266293U,	// t2MVNi
    2130706805U,	// t2MVNr
    251658613U,	// t2MVNs
    1327497593U,	// t2NOP
    134219930U,	// t2ORNri
    134219930U,	// t2ORNrr
    268437658U,	// t2ORNrs
    134218109U,	// t2ORRri
    251658621U,	// t2ORRrr
    385876349U,	// t2ORRrs
    805306753U,	// t2PKHBT
    805306759U,	// t2PKHTB
    538183838U,	// t2PLDWi12
    538216606U,	// t2PLDWi8
    672467102U,	// t2PLDWs
    538183843U,	// t2PLDi12
    538216611U,	// t2PLDi8
    672467107U,	// t2PLDs
    538183847U,	// t2PLIi12
    538216615U,	// t2PLIi8
    672467111U,	// t2PLIs
    671089053U,	// t2QADD
    671089058U,	// t2QADD16
    671089065U,	// t2QADD8
    671089071U,	// t2QASX
    671089076U,	// t2QDADD
    671089082U,	// t2QDSUB
    671089088U,	// t2QSAX
    671089093U,	// t2QSUB
    671089098U,	// t2QSUB16
    671089105U,	// t2QSUB8
    536871383U,	// t2RBIT
    654311900U,	// t2REV
    654311904U,	// t2REV16
    654311910U,	// t2REVSH
    939526315U,	// t2RFEDB
    939526315U,	// t2RFEDBW
    939526321U,	// t2RFEIA
    939526321U,	// t2RFEIAW
    251658760U,	// t2RORri
    251658760U,	// t2RORrr
    2013266444U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    251658768U,	// t2RSBri
    134218256U,	// t2RSBrr
    268435984U,	// t2RSBrs
    671089176U,	// t2SADD16
    671089183U,	// t2SADD8
    671089189U,	// t2SASX
    134218282U,	// t2SBCri
    251658794U,	// t2SBCrr
    385876522U,	// t2SBCrs
    805306926U,	// t2SBFX
    671090871U,	// t2SDIV
    671089203U,	// t2SEL
    1327497791U,	// t2SEV
    671089219U,	// t2SHADD16
    671089227U,	// t2SHADD8
    671089234U,	// t2SHASX
    671089240U,	// t2SHSAX
    671089246U,	// t2SHSUB16
    671089254U,	// t2SHSUB8
    939524717U,	// t2SMC
    805306993U,	// t2SMLABB
    805307000U,	// t2SMLABT
    805307007U,	// t2SMLAD
    805307013U,	// t2SMLADX
    805307020U,	// t2SMLAL
    805307026U,	// t2SMLALBB
    805307034U,	// t2SMLALBT
    805307042U,	// t2SMLALD
    805307049U,	// t2SMLALDX
    805307057U,	// t2SMLALTB
    805307065U,	// t2SMLALTT
    805307073U,	// t2SMLATB
    805307080U,	// t2SMLATT
    805307087U,	// t2SMLAWB
    805307094U,	// t2SMLAWT
    805307101U,	// t2SMLSD
    805307107U,	// t2SMLSDX
    805307114U,	// t2SMLSLD
    805307121U,	// t2SMLSLDX
    805307129U,	// t2SMMLA
    805307135U,	// t2SMMLAR
    805307142U,	// t2SMMLS
    805307148U,	// t2SMMLSR
    671089427U,	// t2SMMUL
    671089433U,	// t2SMMULR
    671089440U,	// t2SMUAD
    671089446U,	// t2SMUADX
    671089453U,	// t2SMULBB
    671089460U,	// t2SMULBT
    805307195U,	// t2SMULL
    671089473U,	// t2SMULTB
    671089480U,	// t2SMULTT
    671089487U,	// t2SMULWB
    671089494U,	// t2SMULWT
    671089501U,	// t2SMUSD
    671089507U,	// t2SMUSDX
    1061161148U,	// t2SRSDB
    1063258300U,	// t2SRSDB_UPD
    1061161154U,	// t2SRSIA
    1063258306U,	// t2SRSIA_UPD
    805307334U,	// t2SSAT
    671089611U,	// t2SSAT16
    671089618U,	// t2SSAX
    671089623U,	// t2SSUB16
    671089630U,	// t2SSUB8
    805341384U,	// t2STC2L_OFFSET
    805341384U,	// t2STC2L_OPTION
    805341384U,	// t2STC2L_POST
    805341384U,	// t2STC2L_PRE
    805341390U,	// t2STC2_OFFSET
    805341390U,	// t2STC2_OPTION
    805341390U,	// t2STC2_POST
    805341390U,	// t2STC2_PRE
    805340145U,	// t2STCL_OFFSET
    805340145U,	// t2STCL_OPTION
    805340145U,	// t2STCL_POST
    805340145U,	// t2STCL_PRE
    805340150U,	// t2STC_OFFSET
    805340150U,	// t2STC_OPTION
    805340150U,	// t2STC_POST
    805340150U,	// t2STC_PRE
    939525120U,	// t2STMDB
    537101312U,	// t2STMDB_UPD
    1056965638U,	// t2STMIA
    654541830U,	// t2STMIA_UPD
    671089680U,	// t2STRBT
    805536790U,	// t2STRB_POST
    805536790U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    788530198U,	// t2STRBi12
    671089686U,	// t2STRBi8
    922747926U,	// t2STRBs
    1879278619U,	// t2STRD_POST
    1879278619U,	// t2STRD_PRE
    805307419U,	// t2STRDi8
    805307424U,	// t2STREX
    671089702U,	// t2STREXB
    805307437U,	// t2STREXD
    671089716U,	// t2STREXH
    671089728U,	// t2STRHT
    805536827U,	// t2STRH_POST
    805536827U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    788530235U,	// t2STRHi12
    671089723U,	// t2STRHi8
    922747963U,	// t2STRHs
    671089734U,	// t2STRT
    805536843U,	// t2STR_POST
    805536843U,	// t2STR_PRE
    0U,	// t2STR_preidx
    788530251U,	// t2STRi12
    671089739U,	// t2STRi8
    922747979U,	// t2STRs
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    251659343U,	// t2SUBri
    671090899U,	// t2SUBri12
    251659343U,	// t2SUBrr
    385877071U,	// t2SUBrs
    805307488U,	// t2SXTAB
    805307494U,	// t2SXTAB16
    805307502U,	// t2SXTAH
    788530292U,	// t2SXTB
    671089785U,	// t2SXTB16
    788530304U,	// t2SXTH
    538282200U,	// t2TBB
    0U,	// t2TBB_JT
    538314972U,	// t2TBH
    0U,	// t2TBH_JT
    654312581U,	// t2TEQri
    654312581U,	// t2TEQrr
    788530309U,	// t2TEQrs
    654312590U,	// t2TSTri
    654312590U,	// t2TSTrr
    788530318U,	// t2TSTrs
    671089810U,	// t2UADD16
    671089817U,	// t2UADD8
    671089823U,	// t2UASX
    805307556U,	// t2UBFX
    671090912U,	// t2UDIV
    671089833U,	// t2UHADD16
    671089841U,	// t2UHADD8
    671089848U,	// t2UHASX
    671089854U,	// t2UHSAX
    671089860U,	// t2UHSUB16
    671089868U,	// t2UHSUB8
    805307603U,	// t2UMAAL
    805307609U,	// t2UMLAL
    805307615U,	// t2UMULL
    671089893U,	// t2UQADD16
    671089901U,	// t2UQADD8
    671089908U,	// t2UQASX
    671089914U,	// t2UQSAX
    671089920U,	// t2UQSUB16
    671089928U,	// t2UQSUB8
    671089935U,	// t2USAD8
    805307669U,	// t2USADA8
    805307676U,	// t2USAT
    671089953U,	// t2USAT16
    671089960U,	// t2USAX
    671089965U,	// t2USUB16
    671089972U,	// t2USUB8
    805307706U,	// t2UXTAB
    805307712U,	// t2UXTAB16
    805307720U,	// t2UXTAH
    788530510U,	// t2UXTB
    671090003U,	// t2UXTB16
    788530522U,	// t2UXTH
    1327499348U,	// t2WFE
    1327499352U,	// t2WFI
    1327499356U,	// t2YIELD
    3616964626U,	// tADC
    671088662U,	// tADDhirr
    3615752214U,	// tADDi3
    3616964630U,	// tADDi8
    671088662U,	// tADDrSP
    671088662U,	// tADDrSPi
    3615752214U,	// tADDrr
    671088662U,	// tADDspi
    671088662U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    536870938U,	// tADR
    3616964638U,	// tAND
    3615752226U,	// tASRri
    3616964642U,	// tASRrr
    939524178U,	// tB
    3616964654U,	// tBIC
    1077938405U,	// tBKPT
    1208221764U,	// tBL
    1208221760U,	// tBLXi
    0U,	// tBLXi_r9
    1208221760U,	// tBLXr
    0U,	// tBLXr_r9
    0U,	// tBLr9
    0U,	// tBRIND
    0U,	// tBR_JTr
    939524175U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    0U,	// tBXr9_CALL
    939524178U,	// tBcc
    0U,	// tBfar
    1201670379U,	// tCBNZ
    1201670385U,	// tCBZ
    1484851446U,	// tCDP
    536871016U,	// tCMNz
    536871020U,	// tCMPhir
    536871020U,	// tCMPi8
    536871020U,	// tCMPr
    1612808309U,	// tCPS
    3616964743U,	// tEOR
    0U,	// tInt_eh_sjlj_dispatchsetup
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    939524284U,	// tLDMIA
    0U,	// tLDMIA_UPD
    671088844U,	// tLDRBi
    671088844U,	// tLDRBr
    671088881U,	// tLDRHi
    671088881U,	// tLDRHr
    671088892U,	// tLDRSB
    671088905U,	// tLDRSH
    671088923U,	// tLDRi
    666894619U,	// tLDRpci
    536871195U,	// tLDRpciASM
    0U,	// tLDRpci_pic
    671088923U,	// tLDRr
    671088923U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    3615752479U,	// tLSLri
    3616964895U,	// tLSLrr
    3615752483U,	// tLSRri
    3616964899U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    1201670395U,	// tMOVSr
    3622207813U,	// tMOVi8
    536871237U,	// tMOVr
    3615752561U,	// tMUL
    3622207861U,	// tMVN
    1212154233U,	// tNOP
    3616964989U,	// tORR
    0U,	// tPICADD
    1209469185U,	// tPOP
    0U,	// tPOP_RET
    1209469189U,	// tPUSH
    536871388U,	// tREV
    536871392U,	// tREV16
    536871398U,	// tREVSH
    3616965128U,	// tROR
    3622175248U,	// tRSB
    3616965162U,	// tSBC
    2550137399U,	// tSETEND
    1212154431U,	// tSEV
    537101318U,	// tSTMIA_UPD
    671089686U,	// tSTRBi
    671089686U,	// tSTRBr
    671089723U,	// tSTRHi
    671089723U,	// tSTRHr
    671089739U,	// tSTRi
    671089739U,	// tSTRr
    671089739U,	// tSTRspi
    3615753295U,	// tSUBi3
    3616965711U,	// tSUBi8
    3615753295U,	// tSUBrr
    671089743U,	// tSUBspi
    939525203U,	// tSVC
    536872052U,	// tSXTB
    536872064U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTAILJMPrND
    0U,	// tTPsoft
    1161U,	// tTRAP
    536872078U,	// tTST
    536872270U,	// tUXTB
    536872282U,	// tUXTH
    1212155988U,	// tWFE
    1212155992U,	// tWFI
    1212155996U,	// tYIELD
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000BUNDLE\000adc\000add\000adr\000and\000asr\000bfc\000bfi\000"
    "bic\000bkpt\000bl\t\000blx\t\000blx\000bl\000bx\t\000bxj\000bx\000b\000"
    "cdp\000cdp2\t\000clrex\000clz\000cmn\000cmp\000cps\t\000cps\000dbg\000d"
    "mb\t\000dsb\t\000eor\000vmov\000vmrs\000isb\t\000ldc2l\t\000ldc2\t\000l"
    "dcl\000ldc\000ldmda\000ldmdb\000ldm\000ldmib\000ldrbt\000ldrb\000ldrd\000"
    "ldrex\000ldrexb\000ldrexd\000ldrexh\000ldrh\000ldrht\000ldrsb\000ldrsbt"
    "\000ldrsh\000ldrsht\000ldrt\000ldr\000lsl\000lsr\000mcr\000mcr2\t\000mc"
    "rr\000mcrr2\t\000mla\000mls\000mov\000movt\000movw\000mrc\000mrc2\t\000"
    "mrrc\000mrrc2\t\000mrs\000msr\000mul\000mvn\000nop\000orr\000pkhbt\000p"
    "khtb\000pldw\t\000pld\t\000pli\t\000qadd\000qadd16\000qadd8\000qasx\000"
    "qdadd\000qdsub\000qsax\000qsub\000qsub16\000qsub8\000rbit\000rev\000rev"
    "16\000revsh\000rfeda\t\000rfedb\t\000rfeia\t\000rfeib\t\000ror\000rrx\000"
    "rsb\000rsc\000sadd16\000sadd8\000sasx\000sbc\000sbfx\000sel\000setend\t"
    "\000sev\000shadd16\000shadd8\000shasx\000shsax\000shsub16\000shsub8\000"
    "smc\000smlabb\000smlabt\000smlad\000smladx\000smlal\000smlalbb\000smlal"
    "bt\000smlald\000smlaldx\000smlaltb\000smlaltt\000smlatb\000smlatt\000sm"
    "lawb\000smlawt\000smlsd\000smlsdx\000smlsld\000smlsldx\000smmla\000smml"
    "ar\000smmls\000smmlsr\000smmul\000smmulr\000smuad\000smuadx\000smulbb\000"
    "smulbt\000smull\000smultb\000smultt\000smulwb\000smulwt\000smusd\000smu"
    "sdx\000srsda\tsp, \000srsda\tsp!, \000srsdb\tsp, \000srsdb\tsp!, \000sr"
    "sia\tsp, \000srsia\tsp!, \000srsib\tsp, \000srsib\tsp!, \000ssat\000ssa"
    "t16\000ssax\000ssub16\000ssub8\000stc2l\t\000stc2\t\000stcl\000stc\000s"
    "tmda\000stmdb\000stm\000stmib\000strbt\000strb\000strd\000strex\000stre"
    "xb\000strexd\000strexh\000strh\000strht\000strt\000str\000sub\000svc\000"
    "swp\000swpb\000sxtab\000sxtab16\000sxtah\000sxtb\000sxtb16\000sxth\000t"
    "eq\000trap\000tst\000uadd16\000uadd8\000uasx\000ubfx\000uhadd16\000uhad"
    "d8\000uhasx\000uhsax\000uhsub16\000uhsub8\000umaal\000umlal\000umull\000"
    "uqadd16\000uqadd8\000uqasx\000uqsax\000uqsub16\000uqsub8\000usad8\000us"
    "ada8\000usat\000usat16\000usax\000usub16\000usub8\000uxtab\000uxtab16\000"
    "uxtah\000uxtb\000uxtb16\000uxth\000vabal\000vaba\000vabdl\000vabd\000va"
    "bs\000vacge\000vacgt\000vadd\000vaddhn\000vaddl\000vaddw\000vand\000vbi"
    "c\000vbif\000vbit\000vbsl\000vceq\000vcge\000vcgt\000vcle\000vcls\000vc"
    "lt\000vclz\000vcmp\000vcmpe\000vcnt\000vcvtb\000vcvt\000vcvtt\000vdiv\000"
    "vdup\000veor\000vext\000vfma\000vfms\000vfnma\000vfnms\000vhadd\000vhsu"
    "b\000vld1\000vld2\000vld3\000vld4\000vldmdb\000vldmia\000vldr\000vmax\000"
    "vmin\000vmla\000vmlal\000vmls\000vmlsl\000vmovl\000vmovn\000vmsr\000vmu"
    "l\000vmull\000vmvn\000vneg\000vnmla\000vnmls\000vnmul\000vorn\000vorr\000"
    "vpadal\000vpaddl\000vpadd\000vpmax\000vpmin\000vqabs\000vqadd\000vqdmla"
    "l\000vqdmlsl\000vqdmulh\000vqdmull\000vqmovun\000vqmovn\000vqneg\000vqr"
    "dmulh\000vqrshl\000vqrshrn\000vqrshrun\000vqshl\000vqshlu\000vqshrn\000"
    "vqshrun\000vqsub\000vraddhn\000vrecpe\000vrecps\000vrev16\000vrev32\000"
    "vrev64\000vrhadd\000vrshl\000vrshrn\000vrshr\000vrsqrte\000vrsqrts\000v"
    "rsra\000vrsubhn\000vshll\000vshl\000vshrn\000vshr\000vsli\000vsqrt\000v"
    "sra\000vsri\000vst1\000vst2\000vst3\000vst4\000vstmdb\000vstmia\000vstr"
    "\000vsub\000vsubhn\000vsubl\000vsubw\000vswp\000vtbl\000vtbx\000vcvtr\000"
    "vtrn\000vtst\000vuzp\000vzip\000wfe\000wfi\000yield\000addw\000it\000ld"
    "c2l\000ldc2\000mcr\t\000mcrr\t\000movs\000asrs\000lsrs\000mrc\t\000mrrc"
    "\t\000orn\000pldw\000pld\000pli\000rfedb\000rfeia\000sdiv\000srsdb\000s"
    "rsia\000stc2l\000stc2\000subw\000tbb\000tbh\000udiv\000bkpt\t\000cbnz\t"
    "\000cbz\t\000cdp\t\000movs\t\000pop\000push\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 5 bits for 27 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, CLREX, TRAP, tTRAP
    return;
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    printSBitModifierOperand(MI, 5, O); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 2:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, MLA, MOVsr, MVNsr, ORRrsi, RSB...
    printSBitModifierOperand(MI, 6, O); 
    printPredicateOperand(MI, 4, O); 
    break;
  case 3:
    // ADCrsr, ADDrsr, ANDrsr, BICrsr, EORrsr, ORRrsr, RSBrsr, RSCrsr, SBCrsr...
    printSBitModifierOperand(MI, 7, O); 
    printPredicateOperand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printSORegRegOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ADR, CLZ, CMNzri, CMNzrr, CMPri, CMPrr, FCONSTD, FCONSTS, LDMDA_UPD, L...
    printPredicateOperand(MI, 2, O); 
    break;
  case 5:
    // BFC, CMNzrsi, CMPrsi, LDRBi12, LDREXD, LDRcp, LDRi12, MOVTi16, QADD, Q...
    printPredicateOperand(MI, 3, O); 
    break;
  case 6:
    // BFI, CMNzrsr, CMPrsr, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, L...
    printPredicateOperand(MI, 4, O); 
    break;
  case 7:
    // BKPT, BLX_pred, BL_pred, BXJ, BX_pred, Bcc, DBG, LDMDA, LDMDB, LDMIA, ...
    printPredicateOperand(MI, 1, O); 
    break;
  case 8:
    // BL, BLX, BLXi, BX, CPS1p, RFEDA, RFEDA_UPD, RFEDB, RFEDB_UPD, RFEIA, R...
    printOperand(MI, 0, O); 
    break;
  case 9:
    // BX_RET, FMSTAT, MOVPCLR, NOP, SEV, WFE, WFI, YIELD, t2CLREX, t2NOP, t2...
    printPredicateOperand(MI, 0, O); 
    break;
  case 10:
    // CDP, LDRD_POST, LDRD_PRE, MCR, MRC, STRD_POST, STRD_PRE, VLD4DUPd16, V...
    printPredicateOperand(MI, 6, O); 
    break;
  case 11:
    // CDP2, LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, ...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIMod(MI, 0, O); 
    break;
  case 13:
    // DMB, DSB, ISB, t2DMB, t2DSB, t2ISB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 14:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRB_PRE...
    printPredicateOperand(MI, 5, O); 
    break;
  case 15:
    // MOVi, MOVr, MOVr_TC, MVNi, MVNr, RRXi, t2MOVi, t2MOVr, t2MVNi, t2MVNr,...
    printSBitModifierOperand(MI, 4, O); 
    printPredicateOperand(MI, 2, O); 
    break;
  case 16:
    // MRC2, t2MRC, t2MRC2
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 17:
    // PLDWi12, PLDi12, PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 18:
    // PLDWrs, PLDrs, PLIrs
    printAddrMode2Operand(MI, 0, O); 
    return;
    break;
  case 19:
    // SETEND, tSETEND
    printSetendOperand(MI, 0, O); 
    return;
    break;
  case 20:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printPredicateOperand(MI, 7, O); 
    break;
  case 21:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, O); 
    break;
  case 22:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, O); 
    break;
  case 23:
    // VLD4DUPd16_UPD, VLD4DUPd16x2_UPD, VLD4DUPd32_UPD, VLD4DUPd32x2_UPD, VL...
    printPredicateOperand(MI, 8, O); 
    break;
  case 24:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, O); 
    break;
  case 25:
    // t2IT
    printThumbITMask(MI, 1, O); 
    O << "\t"; 
    printMandatoryPredicateOperand(MI, 0, O); 
    return;
    break;
  case 26:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 6 bits for 64 unique commands.
  switch ((Bits >> 21) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    O << "\t"; 
    break;
  case 1:
    // ASRi, ASRr, LSLi, LSLr, LSRi, LSRr, RORi, RORr, RRXi, t2LDRBpcrel, t2L...
    O << ' '; 
    break;
  case 2:
    // BL, BLX, BLXi, BX, CPS1p, NOP, RFEDA, RFEDB, RFEIA, RFEIB, SEV, SRSDA,...
    return;
    break;
  case 3:
    // BX_RET
    O << "\tlr"; 
    return;
    break;
  case 4:
    // CDP2, MCR2, MCRR2, MRRC2, t2CDP2, t2MCR, t2MCR2, t2MCRR, t2MCRR2, t2MR...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 5:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VFMAD, V...
    O << ".f64\t"; 
    printOperand(MI, 0, O); 
    break;
  case 6:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfq, VACGEd, VACGEq, VACGTd...
    O << ".f32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 7:
    // FMSTAT
    O << "\tapsr_nzcv, fpscr"; 
    return;
    break;
  case 8:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    printCImmediate(MI, 1, O); 
    O << ", "; 
    break;
  case 9:
    // MOVPCLR
    O << "\tpc, lr"; 
    return;
    break;
  case 10:
    // RFEDA_UPD, RFEDB_UPD, RFEIA_UPD, RFEIB_UPD
    O << '!'; 
    return;
    break;
  case 11:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 13:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 14:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 15:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 16:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 17:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 18:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VBICiv2i32, VBICiv4i32, VCEQv2i32, ...
    O << ".i32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VBICiv4i16, VBICiv8i16, VCEQv4i16, V...
    O << ".i16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    O << ".i8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VLD1...
    O << ".8\t"; 
    break;
  case 22:
    // VCVTBHS, VCVTTHS, VCVTf2h
    O << ".f16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 23:
    // VCVTBSH, VCVTTSH, VCVTh2f
    O << ".f32.f16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // VCVTDS
    O << ".f64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 25:
    // VCVTSD
    O << ".f32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 26:
    // VCVTf2sd, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSIZS, VTOSLS
    O << ".s32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 27:
    // VCVTf2ud, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUIZS, VTOULS
    O << ".u32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 28:
    // VCVTs2fd, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    O << ".f32.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 29:
    // VCVTu2fd, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    O << ".f32.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 30:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VLD1DUPd16, ...
    O << ".16\t"; 
    break;
  case 31:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VEXTd32, VEXTq32, VGETLNi32, V...
    O << ".32\t"; 
    break;
  case 32:
    // VEXTq64, VLD1d64, VLD1d64Q, VLD1d64Qwb_fixed, VLD1d64Qwb_register, VLD...
    O << ".64\t"; 
    break;
  case 33:
    // VLD1LNd16, VLD1LNd16_UPD, VLD2LNd16, VLD2LNd16_UPD, VLD2LNq16, VLD2LNq...
    O << ".16\t{"; 
    break;
  case 34:
    // VLD1LNd32, VLD1LNd32_UPD, VLD2LNd32, VLD2LNd32_UPD, VLD2LNq32, VLD2LNq...
    O << ".32\t{"; 
    break;
  case 35:
    // VLD1LNd8, VLD1LNd8_UPD, VLD2LNd8, VLD2LNd8_UPD, VLD3DUPd8, VLD3DUPd8_U...
    O << ".8\t{"; 
    break;
  case 36:
    // VLD1LNdAsm_F, VLD1LNdWB_fixed_Asm_F, VLD1LNdWB_register_Asm_F, VLD2LNd...
    O << ".f\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 2, O); 
    break;
  case 37:
    // VLD1LNdAsm_P16, VLD1LNdWB_fixed_Asm_P16, VLD1LNdWB_register_Asm_P16, V...
    O << ".p16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 2, O); 
    break;
  case 38:
    // VLD1LNdAsm_P8, VLD1LNdWB_fixed_Asm_P8, VLD1LNdWB_register_Asm_P8, VLD2...
    O << ".p8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 39:
    // VMSR
    O << "\tfpscr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 40:
    // VMSR_FPEXC
    O << "\tfpexc, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 41:
    // VMSR_FPSID
    O << "\tfpsid, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 42:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 43:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 44:
    // VSHTOD
    O << ".f64.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 45:
    // VSHTOS
    O << ".f32.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 46:
    // VSITOD, VSLTOD
    O << ".f64.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // VTOSHD
    O << ".s16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 48:
    // VTOSHS
    O << ".s16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 49:
    // VTOSIRD, VTOSIZD, VTOSLD
    O << ".s32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 50:
    // VTOUHD
    O << ".u16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 51:
    // VTOUHS
    O << ".u16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 52:
    // VTOUIRD, VTOUIZD, VTOULD
    O << ".u32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 53:
    // VUHTOD
    O << ".f64.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 54:
    // VUHTOS
    O << ".f32.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 55:
    // VUITOD, VULTOD
    O << ".f64.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 56:
    // t2ADCrr, t2ADCrs, t2ADDri, t2ADDrr, t2ADDrs, t2ADR, t2ANDrr, t2ANDrs, ...
    O << ".w\t"; 
    break;
  case 57:
    // t2NOP, t2SEV, t2WFE, t2WFI, t2YIELD
    O << ".w"; 
    return;
    break;
  case 58:
    // t2SRSDB, t2SRSIA
    O << "\tsp, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 59:
    // t2SRSDB_UPD, t2SRSIA_UPD
    O << "\tsp!, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 60:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 61:
    // tCBNZ, tCBZ, tMOVSr
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 62:
    // tLDRpci
    O << ".n\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 63:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 2 encoded into 6 bits for 47 unique commands.
  switch ((Bits >> 15) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    printOperand(MI, 0, O); 
    break;
  case 1:
    // CDP, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OP...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    break;
  case 2:
    // CDP2, t2CDP2, tCDP
    printCImmediate(MI, 2, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 3:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIFlag(MI, 1, O); 
    break;
  case 4:
    // FCONSTD, FCONSTS, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VACGEd...
    O << ", "; 
    break;
  case 5:
    // LDC2L_OFFSET, LDC2L_PRE, LDC2_OFFSET, LDC2_PRE, STC2L_OFFSET, STC2L_PR...
    printAddrMode5Operand(MI, 2, O); 
    break;
  case 6:
    // LDC2L_OPTION, LDC2L_POST, LDC2_OPTION, LDC2_POST, STC2L_OPTION, STC2L_...
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    break;
  case 7:
    // LDMDA_UPD, LDMDB_UPD, LDMIA_UPD, LDMIB_UPD, STMDA_UPD, STMDB_UPD, STMI...
    printOperand(MI, 1, O); 
    break;
  case 8:
    // MCR2, MCRR2, MRRC2, VABALsv2i64, VABALsv4i32, VABALsv8i16, VABALuv2i64...
    printOperand(MI, 2, O); 
    break;
  case 9:
    // MRC
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 10:
    // MSR, MSRi, t2MSR_AR, t2MSR_M
    printMSRMaskOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // VBICiv2i32, VBICiv4i16, VBICiv4i32, VBICiv8i16, VMOVv16i8, VMOVv1i64, ...
    printNEONModImmOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    O << ", #0"; 
    return;
    break;
  case 13:
    // VCVTf2sd, VCVTf2sq, VCVTf2ud, VCVTf2uq, VCVTs2fd, VCVTs2fq, VCVTu2fd, ...
    return;
    break;
  case 14:
    // VLD1DUPd16, VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32, VLD...
    printVectorListOneAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 15:
    // VLD1DUPq16, VLD1DUPq16wb_fixed, VLD1DUPq16wb_register, VLD1DUPq32, VLD...
    printVectorListTwoAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 16:
    // VLD1LNdAsm_I16, VLD1LNdAsm_I32, VLD1LNdAsm_I8, VLD1LNdAsm_P8, VLD1LNdA...
    printAddrMode6Operand(MI, 2, O); 
    break;
  case 17:
    // VLD1LNdWB_fixed_Asm_F, VLD1LNdWB_fixed_Asm_P16, VLD2LNdWB_fixed_Asm_F,...
    O << '!'; 
    return;
    break;
  case 18:
    // VLD1d16, VLD1d16wb_fixed, VLD1d16wb_register, VLD1d32, VLD1d32wb_fixed...
    printVectorListOne(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VLD1d16Q, VLD1d16Qwb_fixed, VLD1d16Qwb_register, VLD1d32Q, VLD1d32Qwb_...
    printVectorListFour(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VLD1d16T, VLD1d16Twb_fixed, VLD1d16Twb_register, VLD1d32T, VLD1d32Twb_...
    printVectorListThree(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VLD1q16, VLD1q16wb_fixed, VLD1q16wb_register, VLD1q32, VLD1q32wb_fixed...
    printVectorListTwo(MI, 0, O); 
    O << ", "; 
    break;
  case 22:
    // VLD2DUPd16x2, VLD2DUPd16x2wb_fixed, VLD2DUPd16x2wb_register, VLD2DUPd3...
    printVectorListTwoSpacedAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 23:
    // VLD2b16, VLD2b16wb_fixed, VLD2b16wb_register, VLD2b32, VLD2b32wb_fixed...
    printVectorListTwoSpaced(MI, 0, O); 
    O << ", "; 
    break;
  case 24:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST2LNd16_UPD, VST2LNd32_U...
    printOperand(MI, 4, O); 
    break;
  case 25:
    // VST1d16, VST1d32, VST1d64, VST1d8
    printVectorListOne(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 26:
    // VST1d16Q, VST1d32Q, VST1d64Q, VST1d8Q, VST2q16, VST2q32, VST2q8
    printVectorListFour(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 27:
    // VST1d16Qwb_fixed, VST1d32Qwb_fixed, VST1d64Qwb_fixed, VST1d8Qwb_fixed,...
    printVectorListFour(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 28:
    // VST1d16Qwb_register, VST1d32Qwb_register, VST1d64Qwb_register, VST1d8Q...
    printVectorListFour(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 29:
    // VST1d16T, VST1d32T, VST1d64T, VST1d8T
    printVectorListThree(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 30:
    // VST1d16Twb_fixed, VST1d32Twb_fixed, VST1d64Twb_fixed, VST1d8Twb_fixed
    printVectorListThree(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 31:
    // VST1d16Twb_register, VST1d32Twb_register, VST1d64Twb_register, VST1d8T...
    printVectorListThree(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 32:
    // VST1d16wb_fixed, VST1d32wb_fixed, VST1d64wb_fixed, VST1d8wb_fixed
    printVectorListOne(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 33:
    // VST1d16wb_register, VST1d32wb_register, VST1d64wb_register, VST1d8wb_r...
    printVectorListOne(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 34:
    // VST1q16, VST1q32, VST1q64, VST1q8, VST2d16, VST2d32, VST2d8
    printVectorListTwo(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 35:
    // VST1q16wb_fixed, VST1q32wb_fixed, VST1q64wb_fixed, VST1q8wb_fixed, VST...
    printVectorListTwo(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 36:
    // VST1q16wb_register, VST1q32wb_register, VST1q64wb_register, VST1q8wb_r...
    printVectorListTwo(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 37:
    // VST2b16, VST2b32, VST2b8
    printVectorListTwoSpaced(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 38:
    // VST2b16wb_fixed, VST2b32wb_fixed, VST2b8wb_fixed
    printVectorListTwoSpaced(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 39:
    // VST2b16wb_register, VST2b32wb_register, VST2b8wb_register
    printVectorListTwoSpaced(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 40:
    // t2PLDWi12, t2PLDi12, t2PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 41:
    // t2PLDWi8, t2PLDi8, t2PLIi8
    printT2AddrModeImm8Operand(MI, 0, O); 
    return;
    break;
  case 42:
    // t2PLDWs, t2PLDs, t2PLIs
    printT2AddrModeSoRegOperand(MI, 0, O); 
    return;
    break;
  case 43:
    // t2TBB
    printAddrModeTBB(MI, 0, O); 
    return;
    break;
  case 44:
    // t2TBH
    printAddrModeTBH(MI, 0, O); 
    return;
    break;
  case 45:
    // tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tORR, tROR, tS...
    printOperand(MI, 3, O); 
    return;
    break;
  case 46:
    // tPOP, tPUSH
    printRegisterList(MI, 2, O); 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case ARM::ADCri:
  case ARM::ADCrr:
  case ARM::ADCrsi:
  case ARM::ADDri:
  case ARM::ADDrr:
  case ARM::ADDrsi:
  case ARM::ANDri:
  case ARM::ANDrr:
  case ARM::ANDrsi:
  case ARM::ASRi:
  case ARM::ASRr:
  case ARM::BICri:
  case ARM::BICrr:
  case ARM::BICrsi:
  case ARM::EORri:
  case ARM::EORrr:
  case ARM::EORrsi:
  case ARM::LDRD:
  case ARM::LDREXD:
  case ARM::LSLi:
  case ARM::LSLr:
  case ARM::LSRi:
  case ARM::LSRr:
  case ARM::MUL:
  case ARM::ORRri:
  case ARM::ORRrr:
  case ARM::ORRrsi:
  case ARM::QADD:
  case ARM::QADD16:
  case ARM::QADD8:
  case ARM::QASX:
  case ARM::QDADD:
  case ARM::QDSUB:
  case ARM::QSAX:
  case ARM::QSUB:
  case ARM::QSUB16:
  case ARM::QSUB8:
  case ARM::RORi:
  case ARM::RORr:
  case ARM::RSBri:
  case ARM::RSBrr:
  case ARM::RSBrsi:
  case ARM::RSCri:
  case ARM::RSCrr:
  case ARM::RSCrsi:
  case ARM::SADD16:
  case ARM::SADD8:
  case ARM::SASX:
  case ARM::SBCri:
  case ARM::SBCrr:
  case ARM::SBCrsi:
  case ARM::SEL:
  case ARM::SHADD16:
  case ARM::SHADD8:
  case ARM::SHASX:
  case ARM::SHSAX:
  case ARM::SHSUB16:
  case ARM::SHSUB8:
  case ARM::SMMUL:
  case ARM::SMMULR:
  case ARM::SMUAD:
  case ARM::SMUADX:
  case ARM::SMULBB:
  case ARM::SMULBT:
  case ARM::SMULTB:
  case ARM::SMULTT:
  case ARM::SMULWB:
  case ARM::SMULWT:
  case ARM::SMUSD:
  case ARM::SMUSDX:
  case ARM::SSAX:
  case ARM::SSUB16:
  case ARM::SSUB8:
  case ARM::STRD:
  case ARM::STREX:
  case ARM::STREXB:
  case ARM::STREXH:
  case ARM::SUBri:
  case ARM::SUBrr:
  case ARM::SUBrsi:
  case ARM::SWP:
  case ARM::SWPB:
  case ARM::UADD16:
  case ARM::UADD8:
  case ARM::UASX:
  case ARM::UHADD16:
  case ARM::UHADD8:
  case ARM::UHASX:
  case ARM::UHSAX:
  case ARM::UHSUB16:
  case ARM::UHSUB8:
  case ARM::UQADD16:
  case ARM::UQADD8:
  case ARM::UQASX:
  case ARM::UQSAX:
  case ARM::UQSUB16:
  case ARM::UQSUB8:
  case ARM::USAD8:
  case ARM::USAT16:
  case ARM::USAX:
  case ARM::USUB16:
  case ARM::USUB8:
  case ARM::VANDd:
  case ARM::VANDq:
  case ARM::VBICd:
  case ARM::VBICq:
  case ARM::VEORd:
  case ARM::VEORq:
  case ARM::VMOVDRR:
  case ARM::VMOVRRD:
  case ARM::VORNd:
  case ARM::VORNq:
  case ARM::VORRd:
  case ARM::VORRq:
  case ARM::VTSTv16i8:
  case ARM::VTSTv2i32:
  case ARM::VTSTv4i16:
  case ARM::VTSTv4i32:
  case ARM::VTSTv8i16:
  case ARM::VTSTv8i8:
  case ARM::t2ADCri:
  case ARM::t2ADCrr:
  case ARM::t2ADCrs:
  case ARM::t2ADDri:
  case ARM::t2ADDri12:
  case ARM::t2ADDrr:
  case ARM::t2ADDrs:
  case ARM::t2ANDri:
  case ARM::t2ANDrr:
  case ARM::t2ANDrs:
  case ARM::t2ASRri:
  case ARM::t2ASRrr:
  case ARM::t2BICri:
  case ARM::t2BICrr:
  case ARM::t2BICrs:
  case ARM::t2EORri:
  case ARM::t2EORrr:
  case ARM::t2EORrs:
  case ARM::t2LDRDi8:
  case ARM::t2LDREXD:
  case ARM::t2LSLri:
  case ARM::t2LSLrr:
  case ARM::t2LSRri:
  case ARM::t2LSRrr:
  case ARM::t2MUL:
  case ARM::t2ORNri:
  case ARM::t2ORNrr:
  case ARM::t2ORNrs:
  case ARM::t2ORRri:
  case ARM::t2ORRrr:
  case ARM::t2ORRrs:
  case ARM::t2QADD:
  case ARM::t2QADD16:
  case ARM::t2QADD8:
  case ARM::t2QASX:
  case ARM::t2QDADD:
  case ARM::t2QDSUB:
  case ARM::t2QSAX:
  case ARM::t2QSUB:
  case ARM::t2QSUB16:
  case ARM::t2QSUB8:
  case ARM::t2RORri:
  case ARM::t2RORrr:
  case ARM::t2RSBri:
  case ARM::t2RSBrr:
  case ARM::t2RSBrs:
  case ARM::t2SADD16:
  case ARM::t2SADD8:
  case ARM::t2SASX:
  case ARM::t2SBCri:
  case ARM::t2SBCrr:
  case ARM::t2SBCrs:
  case ARM::t2SDIV:
  case ARM::t2SEL:
  case ARM::t2SHADD16:
  case ARM::t2SHADD8:
  case ARM::t2SHASX:
  case ARM::t2SHSAX:
  case ARM::t2SHSUB16:
  case ARM::t2SHSUB8:
  case ARM::t2SMMUL:
  case ARM::t2SMMULR:
  case ARM::t2SMUAD:
  case ARM::t2SMUADX:
  case ARM::t2SMULBB:
  case ARM::t2SMULBT:
  case ARM::t2SMULTB:
  case ARM::t2SMULTT:
  case ARM::t2SMULWB:
  case ARM::t2SMULWT:
  case ARM::t2SMUSD:
  case ARM::t2SMUSDX:
  case ARM::t2SSAX:
  case ARM::t2SSUB16:
  case ARM::t2SSUB8:
  case ARM::t2STRDi8:
  case ARM::t2STREX:
  case ARM::t2STREXB:
  case ARM::t2STREXH:
  case ARM::t2SUBri:
  case ARM::t2SUBri12:
  case ARM::t2SUBrr:
  case ARM::t2SUBrs:
  case ARM::t2UADD16:
  case ARM::t2UADD8:
  case ARM::t2UASX:
  case ARM::t2UDIV:
  case ARM::t2UHADD16:
  case ARM::t2UHADD8:
  case ARM::t2UHASX:
  case ARM::t2UHSAX:
  case ARM::t2UHSUB16:
  case ARM::t2UHSUB8:
  case ARM::t2UQADD16:
  case ARM::t2UQADD8:
  case ARM::t2UQASX:
  case ARM::t2UQSAX:
  case ARM::t2UQSUB16:
  case ARM::t2UQSUB8:
  case ARM::t2USAD8:
  case ARM::t2USAT16:
  case ARM::t2USAX:
  case ARM::t2USUB16:
  case ARM::t2USUB8:
  case ARM::tADDrSPi:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCri: 
    case ARM::ADCrr: 
    case ARM::ADDri: 
    case ARM::ADDrr: 
    case ARM::ANDri: 
    case ARM::ANDrr: 
    case ARM::ASRi: 
    case ARM::ASRr: 
    case ARM::BICri: 
    case ARM::BICrr: 
    case ARM::EORri: 
    case ARM::EORrr: 
    case ARM::LSLi: 
    case ARM::LSLr: 
    case ARM::LSRi: 
    case ARM::LSRr: 
    case ARM::MUL: 
    case ARM::ORRri: 
    case ARM::ORRrr: 
    case ARM::QADD: 
    case ARM::QADD16: 
    case ARM::QADD8: 
    case ARM::QASX: 
    case ARM::QDADD: 
    case ARM::QDSUB: 
    case ARM::QSAX: 
    case ARM::QSUB: 
    case ARM::QSUB16: 
    case ARM::QSUB8: 
    case ARM::RORi: 
    case ARM::RORr: 
    case ARM::RSBri: 
    case ARM::RSBrr: 
    case ARM::RSCri: 
    case ARM::RSCrr: 
    case ARM::SADD16: 
    case ARM::SADD8: 
    case ARM::SASX: 
    case ARM::SBCri: 
    case ARM::SBCrr: 
    case ARM::SEL: 
    case ARM::SHADD16: 
    case ARM::SHADD8: 
    case ARM::SHASX: 
    case ARM::SHSAX: 
    case ARM::SHSUB16: 
    case ARM::SHSUB8: 
    case ARM::SMMUL: 
    case ARM::SMMULR: 
    case ARM::SMUAD: 
    case ARM::SMUADX: 
    case ARM::SMULBB: 
    case ARM::SMULBT: 
    case ARM::SMULTB: 
    case ARM::SMULTT: 
    case ARM::SMULWB: 
    case ARM::SMULWT: 
    case ARM::SMUSD: 
    case ARM::SMUSDX: 
    case ARM::SSAX: 
    case ARM::SSUB16: 
    case ARM::SSUB8: 
    case ARM::SUBri: 
    case ARM::SUBrr: 
    case ARM::UADD16: 
    case ARM::UADD8: 
    case ARM::UASX: 
    case ARM::UHADD16: 
    case ARM::UHADD8: 
    case ARM::UHASX: 
    case ARM::UHSAX: 
    case ARM::UHSUB16: 
    case ARM::UHSUB8: 
    case ARM::UQADD16: 
    case ARM::UQADD8: 
    case ARM::UQASX: 
    case ARM::UQSAX: 
    case ARM::UQSUB16: 
    case ARM::UQSUB8: 
    case ARM::USAD8: 
    case ARM::USAT16: 
    case ARM::USAX: 
    case ARM::USUB16: 
    case ARM::USUB8: 
    case ARM::VANDd: 
    case ARM::VANDq: 
    case ARM::VBICd: 
    case ARM::VBICq: 
    case ARM::VEORd: 
    case ARM::VEORq: 
    case ARM::VMOVDRR: 
    case ARM::VMOVRRD: 
    case ARM::VORNd: 
    case ARM::VORNq: 
    case ARM::VORRd: 
    case ARM::VORRq: 
    case ARM::VTSTv16i8: 
    case ARM::VTSTv2i32: 
    case ARM::VTSTv4i16: 
    case ARM::VTSTv4i32: 
    case ARM::VTSTv8i16: 
    case ARM::VTSTv8i8: 
    case ARM::t2ADCri: 
    case ARM::t2ADCrr: 
    case ARM::t2ADDri: 
    case ARM::t2ADDri12: 
    case ARM::t2ADDrr: 
    case ARM::t2ANDri: 
    case ARM::t2ANDrr: 
    case ARM::t2ASRrr: 
    case ARM::t2BICri: 
    case ARM::t2BICrr: 
    case ARM::t2EORri: 
    case ARM::t2EORrr: 
    case ARM::t2LSLri: 
    case ARM::t2LSLrr: 
    case ARM::t2LSRrr: 
    case ARM::t2MUL: 
    case ARM::t2ORNri: 
    case ARM::t2ORNrr: 
    case ARM::t2ORRri: 
    case ARM::t2ORRrr: 
    case ARM::t2QADD: 
    case ARM::t2QADD16: 
    case ARM::t2QADD8: 
    case ARM::t2QASX: 
    case ARM::t2QDADD: 
    case ARM::t2QDSUB: 
    case ARM::t2QSAX: 
    case ARM::t2QSUB: 
    case ARM::t2QSUB16: 
    case ARM::t2QSUB8: 
    case ARM::t2RORri: 
    case ARM::t2RORrr: 
    case ARM::t2RSBri: 
    case ARM::t2RSBrr: 
    case ARM::t2SADD16: 
    case ARM::t2SADD8: 
    case ARM::t2SASX: 
    case ARM::t2SBCri: 
    case ARM::t2SBCrr: 
    case ARM::t2SDIV: 
    case ARM::t2SEL: 
    case ARM::t2SHADD16: 
    case ARM::t2SHADD8: 
    case ARM::t2SHASX: 
    case ARM::t2SHSAX: 
    case ARM::t2SHSUB16: 
    case ARM::t2SHSUB8: 
    case ARM::t2SMMUL: 
    case ARM::t2SMMULR: 
    case ARM::t2SMUAD: 
    case ARM::t2SMUADX: 
    case ARM::t2SMULBB: 
    case ARM::t2SMULBT: 
    case ARM::t2SMULTB: 
    case ARM::t2SMULTT: 
    case ARM::t2SMULWB: 
    case ARM::t2SMULWT: 
    case ARM::t2SMUSD: 
    case ARM::t2SMUSDX: 
    case ARM::t2SSAX: 
    case ARM::t2SSUB16: 
    case ARM::t2SSUB8: 
    case ARM::t2SUBri: 
    case ARM::t2SUBri12: 
    case ARM::t2SUBrr: 
    case ARM::t2UADD16: 
    case ARM::t2UADD8: 
    case ARM::t2UASX: 
    case ARM::t2UDIV: 
    case ARM::t2UHADD16: 
    case ARM::t2UHADD8: 
    case ARM::t2UHASX: 
    case ARM::t2UHSAX: 
    case ARM::t2UHSUB16: 
    case ARM::t2UHSUB8: 
    case ARM::t2UQADD16: 
    case ARM::t2UQADD8: 
    case ARM::t2UQASX: 
    case ARM::t2UQSAX: 
    case ARM::t2UQSUB16: 
    case ARM::t2UQSUB8: 
    case ARM::t2USAD8: 
    case ARM::t2USAT16: 
    case ARM::t2USAX: 
    case ARM::t2USUB16: 
    case ARM::t2USUB8: printOperand(MI, 2, O); break;
    case ARM::ADCrsi: 
    case ARM::ADDrsi: 
    case ARM::ANDrsi: 
    case ARM::BICrsi: 
    case ARM::EORrsi: 
    case ARM::ORRrsi: 
    case ARM::RSBrsi: 
    case ARM::RSCrsi: 
    case ARM::SBCrsi: 
    case ARM::SUBrsi: printSORegImmOperand(MI, 2, O); break;
    case ARM::LDRD: 
    case ARM::STRD: printAddrMode3Operand(MI, 2, O); break;
    case ARM::LDREXD: 
    case ARM::STREX: 
    case ARM::STREXB: 
    case ARM::STREXH: 
    case ARM::SWP: 
    case ARM::SWPB: 
    case ARM::t2LDREXD: 
    case ARM::t2STREXB: 
    case ARM::t2STREXH: printAddrMode7Operand(MI, 2, O); break;
    case ARM::t2ADCrs: 
    case ARM::t2ADDrs: 
    case ARM::t2ANDrs: 
    case ARM::t2BICrs: 
    case ARM::t2EORrs: 
    case ARM::t2ORNrs: 
    case ARM::t2ORRrs: 
    case ARM::t2RSBrs: 
    case ARM::t2SBCrs: 
    case ARM::t2SUBrs: printT2SOOperand(MI, 2, O); break;
    case ARM::t2ASRri: 
    case ARM::t2LSRri: printThumbSRImm(MI, 2, O); break;
    case ARM::t2LDRDi8: 
    case ARM::t2STRDi8: printT2AddrModeImm8s4Operand(MI, 2, O); break;
    case ARM::t2STREX: printT2AddrModeImm0_1020s4Operand(MI, 2, O); break;
    case ARM::tADDrSPi: printThumbS4ImmOperand(MI, 2, O); break;
    }
    return;
    break;
  case ARM::ADR:
  case ARM::BFC:
  case ARM::CLZ:
  case ARM::CMNzri:
  case ARM::CMNzrr:
  case ARM::CMNzrsi:
  case ARM::CMNzrsr:
  case ARM::CMPri:
  case ARM::CMPrr:
  case ARM::CMPrsi:
  case ARM::CMPrsr:
  case ARM::CPS3p:
  case ARM::LDMDA:
  case ARM::LDMDB:
  case ARM::LDMIA:
  case ARM::LDMIB:
  case ARM::LDRBi12:
  case ARM::LDRBrs:
  case ARM::LDREX:
  case ARM::LDREXB:
  case ARM::LDREXH:
  case ARM::LDRH:
  case ARM::LDRSB:
  case ARM::LDRSH:
  case ARM::LDRcp:
  case ARM::LDRi12:
  case ARM::LDRrs:
  case ARM::MOVTi16:
  case ARM::MOVi:
  case ARM::MOVi16:
  case ARM::MOVr:
  case ARM::MOVr_TC:
  case ARM::MOVsi:
  case ARM::MOVsr:
  case ARM::MVNi:
  case ARM::MVNr:
  case ARM::MVNsi:
  case ARM::MVNsr:
  case ARM::RBIT:
  case ARM::REV:
  case ARM::REV16:
  case ARM::REVSH:
  case ARM::RRXi:
  case ARM::STMDA:
  case ARM::STMDB:
  case ARM::STMIA:
  case ARM::STMIB:
  case ARM::STRBi12:
  case ARM::STRBrs:
  case ARM::STRH:
  case ARM::STRi12:
  case ARM::STRrs:
  case ARM::TEQri:
  case ARM::TEQrr:
  case ARM::TEQrsi:
  case ARM::TEQrsr:
  case ARM::TSTri:
  case ARM::TSTrr:
  case ARM::TSTrsi:
  case ARM::TSTrsr:
  case ARM::VABALsv2i64:
  case ARM::VABALsv4i32:
  case ARM::VABALsv8i16:
  case ARM::VABALuv2i64:
  case ARM::VABALuv4i32:
  case ARM::VABALuv8i16:
  case ARM::VABAsv16i8:
  case ARM::VABAsv2i32:
  case ARM::VABAsv4i16:
  case ARM::VABAsv4i32:
  case ARM::VABAsv8i16:
  case ARM::VABAsv8i8:
  case ARM::VABAuv16i8:
  case ARM::VABAuv2i32:
  case ARM::VABAuv4i16:
  case ARM::VABAuv4i32:
  case ARM::VABAuv8i16:
  case ARM::VABAuv8i8:
  case ARM::VABDLsv2i64:
  case ARM::VABDLsv4i32:
  case ARM::VABDLsv8i16:
  case ARM::VABDLuv2i64:
  case ARM::VABDLuv4i32:
  case ARM::VABDLuv8i16:
  case ARM::VABDsv16i8:
  case ARM::VABDsv2i32:
  case ARM::VABDsv4i16:
  case ARM::VABDsv4i32:
  case ARM::VABDsv8i16:
  case ARM::VABDsv8i8:
  case ARM::VABDuv16i8:
  case ARM::VABDuv2i32:
  case ARM::VABDuv4i16:
  case ARM::VABDuv4i32:
  case ARM::VABDuv8i16:
  case ARM::VABDuv8i8:
  case ARM::VADDHNv2i32:
  case ARM::VADDHNv4i16:
  case ARM::VADDHNv8i8:
  case ARM::VADDLsv2i64:
  case ARM::VADDLsv4i32:
  case ARM::VADDLsv8i16:
  case ARM::VADDLuv2i64:
  case ARM::VADDLuv4i32:
  case ARM::VADDLuv8i16:
  case ARM::VADDWsv2i64:
  case ARM::VADDWsv4i32:
  case ARM::VADDWsv8i16:
  case ARM::VADDWuv2i64:
  case ARM::VADDWuv4i32:
  case ARM::VADDWuv8i16:
  case ARM::VADDv16i8:
  case ARM::VADDv1i64:
  case ARM::VADDv2i32:
  case ARM::VADDv2i64:
  case ARM::VADDv4i16:
  case ARM::VADDv4i32:
  case ARM::VADDv8i16:
  case ARM::VADDv8i8:
  case ARM::VCEQv16i8:
  case ARM::VCEQv2i32:
  case ARM::VCEQv4i16:
  case ARM::VCEQv4i32:
  case ARM::VCEQv8i16:
  case ARM::VCEQv8i8:
  case ARM::VCGEsv16i8:
  case ARM::VCGEsv2i32:
  case ARM::VCGEsv4i16:
  case ARM::VCGEsv4i32:
  case ARM::VCGEsv8i16:
  case ARM::VCGEsv8i8:
  case ARM::VCGEuv16i8:
  case ARM::VCGEuv2i32:
  case ARM::VCGEuv4i16:
  case ARM::VCGEuv4i32:
  case ARM::VCGEuv8i16:
  case ARM::VCGEuv8i8:
  case ARM::VCGTsv16i8:
  case ARM::VCGTsv2i32:
  case ARM::VCGTsv4i16:
  case ARM::VCGTsv4i32:
  case ARM::VCGTsv8i16:
  case ARM::VCGTsv8i8:
  case ARM::VCGTuv16i8:
  case ARM::VCGTuv2i32:
  case ARM::VCGTuv4i16:
  case ARM::VCGTuv4i32:
  case ARM::VCGTuv8i16:
  case ARM::VCGTuv8i8:
  case ARM::VCNTd:
  case ARM::VCNTq:
  case ARM::VDUP16d:
  case ARM::VDUP16q:
  case ARM::VDUP32d:
  case ARM::VDUP32q:
  case ARM::VDUP8d:
  case ARM::VDUP8q:
  case ARM::VHADDsv16i8:
  case ARM::VHADDsv2i32:
  case ARM::VHADDsv4i16:
  case ARM::VHADDsv4i32:
  case ARM::VHADDsv8i16:
  case ARM::VHADDsv8i8:
  case ARM::VHADDuv16i8:
  case ARM::VHADDuv2i32:
  case ARM::VHADDuv4i16:
  case ARM::VHADDuv4i32:
  case ARM::VHADDuv8i16:
  case ARM::VHADDuv8i8:
  case ARM::VHSUBsv16i8:
  case ARM::VHSUBsv2i32:
  case ARM::VHSUBsv4i16:
  case ARM::VHSUBsv4i32:
  case ARM::VHSUBsv8i16:
  case ARM::VHSUBsv8i8:
  case ARM::VHSUBuv16i8:
  case ARM::VHSUBuv2i32:
  case ARM::VHSUBuv4i16:
  case ARM::VHSUBuv4i32:
  case ARM::VHSUBuv8i16:
  case ARM::VHSUBuv8i8:
  case ARM::VLD1LNdAsm_16:
  case ARM::VLD1LNdAsm_32:
  case ARM::VLD1LNdAsm_8:
  case ARM::VLD1LNdWB_register_Asm_I16:
  case ARM::VLD1LNdWB_register_Asm_I32:
  case ARM::VLD1LNdWB_register_Asm_I8:
  case ARM::VLD1LNdWB_register_Asm_P8:
  case ARM::VLD1LNdWB_register_Asm_S16:
  case ARM::VLD1LNdWB_register_Asm_S32:
  case ARM::VLD1LNdWB_register_Asm_S8:
  case ARM::VLD1LNdWB_register_Asm_U16:
  case ARM::VLD1LNdWB_register_Asm_U32:
  case ARM::VLD1LNdWB_register_Asm_U8:
  case ARM::VLD2LNdAsm_16:
  case ARM::VLD2LNdAsm_32:
  case ARM::VLD2LNdAsm_8:
  case ARM::VLD2LNdWB_register_Asm_I16:
  case ARM::VLD2LNdWB_register_Asm_I32:
  case ARM::VLD2LNdWB_register_Asm_I8:
  case ARM::VLD2LNdWB_register_Asm_P8:
  case ARM::VLD2LNdWB_register_Asm_S16:
  case ARM::VLD2LNdWB_register_Asm_S32:
  case ARM::VLD2LNdWB_register_Asm_S8:
  case ARM::VLD2LNdWB_register_Asm_U16:
  case ARM::VLD2LNdWB_register_Asm_U32:
  case ARM::VLD2LNdWB_register_Asm_U8:
  case ARM::VLD2LNqAsm_16:
  case ARM::VLD2LNqAsm_32:
  case ARM::VLD2LNqWB_register_Asm_I16:
  case ARM::VLD2LNqWB_register_Asm_I32:
  case ARM::VLD2LNqWB_register_Asm_S16:
  case ARM::VLD2LNqWB_register_Asm_S32:
  case ARM::VLD2LNqWB_register_Asm_U16:
  case ARM::VLD2LNqWB_register_Asm_U32:
  case ARM::VLDMDIA:
  case ARM::VLDMSIA:
  case ARM::VLDRD:
  case ARM::VLDRS:
  case ARM::VMAXsv16i8:
  case ARM::VMAXsv2i32:
  case ARM::VMAXsv4i16:
  case ARM::VMAXsv4i32:
  case ARM::VMAXsv8i16:
  case ARM::VMAXsv8i8:
  case ARM::VMAXuv16i8:
  case ARM::VMAXuv2i32:
  case ARM::VMAXuv4i16:
  case ARM::VMAXuv4i32:
  case ARM::VMAXuv8i16:
  case ARM::VMAXuv8i8:
  case ARM::VMINsv16i8:
  case ARM::VMINsv2i32:
  case ARM::VMINsv4i16:
  case ARM::VMINsv4i32:
  case ARM::VMINsv8i16:
  case ARM::VMINsv8i8:
  case ARM::VMINuv16i8:
  case ARM::VMINuv2i32:
  case ARM::VMINuv4i16:
  case ARM::VMINuv4i32:
  case ARM::VMINuv8i16:
  case ARM::VMINuv8i8:
  case ARM::VMLALsv2i64:
  case ARM::VMLALsv4i32:
  case ARM::VMLALsv8i16:
  case ARM::VMLALuv2i64:
  case ARM::VMLALuv4i32:
  case ARM::VMLALuv8i16:
  case ARM::VMLAv16i8:
  case ARM::VMLAv2i32:
  case ARM::VMLAv4i16:
  case ARM::VMLAv4i32:
  case ARM::VMLAv8i16:
  case ARM::VMLAv8i8:
  case ARM::VMLSLsv2i64:
  case ARM::VMLSLsv4i32:
  case ARM::VMLSLsv8i16:
  case ARM::VMLSLuv2i64:
  case ARM::VMLSLuv4i32:
  case ARM::VMLSLuv8i16:
  case ARM::VMLSv16i8:
  case ARM::VMLSv2i32:
  case ARM::VMLSv4i16:
  case ARM::VMLSv4i32:
  case ARM::VMLSv8i16:
  case ARM::VMLSv8i8:
  case ARM::VMOVRS:
  case ARM::VMOVSR:
  case ARM::VMULLp:
  case ARM::VMULLsv2i64:
  case ARM::VMULLsv4i32:
  case ARM::VMULLsv8i16:
  case ARM::VMULLuv2i64:
  case ARM::VMULLuv4i32:
  case ARM::VMULLuv8i16:
  case ARM::VMULpd:
  case ARM::VMULpq:
  case ARM::VMULv16i8:
  case ARM::VMULv2i32:
  case ARM::VMULv4i16:
  case ARM::VMULv4i32:
  case ARM::VMULv8i16:
  case ARM::VMULv8i8:
  case ARM::VMVNd:
  case ARM::VMVNq:
  case ARM::VPADDi16:
  case ARM::VPADDi32:
  case ARM::VPADDi8:
  case ARM::VPMAXs16:
  case ARM::VPMAXs32:
  case ARM::VPMAXs8:
  case ARM::VPMAXu16:
  case ARM::VPMAXu32:
  case ARM::VPMAXu8:
  case ARM::VPMINs16:
  case ARM::VPMINs32:
  case ARM::VPMINs8:
  case ARM::VPMINu16:
  case ARM::VPMINu32:
  case ARM::VPMINu8:
  case ARM::VQADDsv16i8:
  case ARM::VQADDsv1i64:
  case ARM::VQADDsv2i32:
  case ARM::VQADDsv2i64:
  case ARM::VQADDsv4i16:
  case ARM::VQADDsv4i32:
  case ARM::VQADDsv8i16:
  case ARM::VQADDsv8i8:
  case ARM::VQADDuv16i8:
  case ARM::VQADDuv1i64:
  case ARM::VQADDuv2i32:
  case ARM::VQADDuv2i64:
  case ARM::VQADDuv4i16:
  case ARM::VQADDuv4i32:
  case ARM::VQADDuv8i16:
  case ARM::VQADDuv8i8:
  case ARM::VQDMLALv2i64:
  case ARM::VQDMLALv4i32:
  case ARM::VQDMLSLv2i64:
  case ARM::VQDMLSLv4i32:
  case ARM::VQDMULHv2i32:
  case ARM::VQDMULHv4i16:
  case ARM::VQDMULHv4i32:
  case ARM::VQDMULHv8i16:
  case ARM::VQDMULLv2i64:
  case ARM::VQDMULLv4i32:
  case ARM::VQRDMULHv2i32:
  case ARM::VQRDMULHv4i16:
  case ARM::VQRDMULHv4i32:
  case ARM::VQRDMULHv8i16:
  case ARM::VQRSHLsv16i8:
  case ARM::VQRSHLsv1i64:
  case ARM::VQRSHLsv2i32:
  case ARM::VQRSHLsv2i64:
  case ARM::VQRSHLsv4i16:
  case ARM::VQRSHLsv4i32:
  case ARM::VQRSHLsv8i16:
  case ARM::VQRSHLsv8i8:
  case ARM::VQRSHLuv16i8:
  case ARM::VQRSHLuv1i64:
  case ARM::VQRSHLuv2i32:
  case ARM::VQRSHLuv2i64:
  case ARM::VQRSHLuv4i16:
  case ARM::VQRSHLuv4i32:
  case ARM::VQRSHLuv8i16:
  case ARM::VQRSHLuv8i8:
  case ARM::VQRSHRNsv2i32:
  case ARM::VQRSHRNsv4i16:
  case ARM::VQRSHRNsv8i8:
  case ARM::VQRSHRNuv2i32:
  case ARM::VQRSHRNuv4i16:
  case ARM::VQRSHRNuv8i8:
  case ARM::VQRSHRUNv2i32:
  case ARM::VQRSHRUNv4i16:
  case ARM::VQRSHRUNv8i8:
  case ARM::VQSHLsiv16i8:
  case ARM::VQSHLsiv1i64:
  case ARM::VQSHLsiv2i32:
  case ARM::VQSHLsiv2i64:
  case ARM::VQSHLsiv4i16:
  case ARM::VQSHLsiv4i32:
  case ARM::VQSHLsiv8i16:
  case ARM::VQSHLsiv8i8:
  case ARM::VQSHLsuv16i8:
  case ARM::VQSHLsuv1i64:
  case ARM::VQSHLsuv2i32:
  case ARM::VQSHLsuv2i64:
  case ARM::VQSHLsuv4i16:
  case ARM::VQSHLsuv4i32:
  case ARM::VQSHLsuv8i16:
  case ARM::VQSHLsuv8i8:
  case ARM::VQSHLsv16i8:
  case ARM::VQSHLsv1i64:
  case ARM::VQSHLsv2i32:
  case ARM::VQSHLsv2i64:
  case ARM::VQSHLsv4i16:
  case ARM::VQSHLsv4i32:
  case ARM::VQSHLsv8i16:
  case ARM::VQSHLsv8i8:
  case ARM::VQSHLuiv16i8:
  case ARM::VQSHLuiv1i64:
  case ARM::VQSHLuiv2i32:
  case ARM::VQSHLuiv2i64:
  case ARM::VQSHLuiv4i16:
  case ARM::VQSHLuiv4i32:
  case ARM::VQSHLuiv8i16:
  case ARM::VQSHLuiv8i8:
  case ARM::VQSHLuv16i8:
  case ARM::VQSHLuv1i64:
  case ARM::VQSHLuv2i32:
  case ARM::VQSHLuv2i64:
  case ARM::VQSHLuv4i16:
  case ARM::VQSHLuv4i32:
  case ARM::VQSHLuv8i16:
  case ARM::VQSHLuv8i8:
  case ARM::VQSHRNsv2i32:
  case ARM::VQSHRNsv4i16:
  case ARM::VQSHRNsv8i8:
  case ARM::VQSHRNuv2i32:
  case ARM::VQSHRNuv4i16:
  case ARM::VQSHRNuv8i8:
  case ARM::VQSHRUNv2i32:
  case ARM::VQSHRUNv4i16:
  case ARM::VQSHRUNv8i8:
  case ARM::VQSUBsv16i8:
  case ARM::VQSUBsv1i64:
  case ARM::VQSUBsv2i32:
  case ARM::VQSUBsv2i64:
  case ARM::VQSUBsv4i16:
  case ARM::VQSUBsv4i32:
  case ARM::VQSUBsv8i16:
  case ARM::VQSUBsv8i8:
  case ARM::VQSUBuv16i8:
  case ARM::VQSUBuv1i64:
  case ARM::VQSUBuv2i32:
  case ARM::VQSUBuv2i64:
  case ARM::VQSUBuv4i16:
  case ARM::VQSUBuv4i32:
  case ARM::VQSUBuv8i16:
  case ARM::VQSUBuv8i8:
  case ARM::VRADDHNv2i32:
  case ARM::VRADDHNv4i16:
  case ARM::VRADDHNv8i8:
  case ARM::VREV16d8:
  case ARM::VREV16q8:
  case ARM::VREV32d16:
  case ARM::VREV32d8:
  case ARM::VREV32q16:
  case ARM::VREV32q8:
  case ARM::VREV64d16:
  case ARM::VREV64d32:
  case ARM::VREV64d8:
  case ARM::VREV64q16:
  case ARM::VREV64q32:
  case ARM::VREV64q8:
  case ARM::VRHADDsv16i8:
  case ARM::VRHADDsv2i32:
  case ARM::VRHADDsv4i16:
  case ARM::VRHADDsv4i32:
  case ARM::VRHADDsv8i16:
  case ARM::VRHADDsv8i8:
  case ARM::VRHADDuv16i8:
  case ARM::VRHADDuv2i32:
  case ARM::VRHADDuv4i16:
  case ARM::VRHADDuv4i32:
  case ARM::VRHADDuv8i16:
  case ARM::VRHADDuv8i8:
  case ARM::VRSHLsv16i8:
  case ARM::VRSHLsv1i64:
  case ARM::VRSHLsv2i32:
  case ARM::VRSHLsv2i64:
  case ARM::VRSHLsv4i16:
  case ARM::VRSHLsv4i32:
  case ARM::VRSHLsv8i16:
  case ARM::VRSHLsv8i8:
  case ARM::VRSHLuv16i8:
  case ARM::VRSHLuv1i64:
  case ARM::VRSHLuv2i32:
  case ARM::VRSHLuv2i64:
  case ARM::VRSHLuv4i16:
  case ARM::VRSHLuv4i32:
  case ARM::VRSHLuv8i16:
  case ARM::VRSHLuv8i8:
  case ARM::VRSHRNv2i32:
  case ARM::VRSHRNv4i16:
  case ARM::VRSHRNv8i8:
  case ARM::VRSHRsv16i8:
  case ARM::VRSHRsv1i64:
  case ARM::VRSHRsv2i32:
  case ARM::VRSHRsv2i64:
  case ARM::VRSHRsv4i16:
  case ARM::VRSHRsv4i32:
  case ARM::VRSHRsv8i16:
  case ARM::VRSHRsv8i8:
  case ARM::VRSHRuv16i8:
  case ARM::VRSHRuv1i64:
  case ARM::VRSHRuv2i32:
  case ARM::VRSHRuv2i64:
  case ARM::VRSHRuv4i16:
  case ARM::VRSHRuv4i32:
  case ARM::VRSHRuv8i16:
  case ARM::VRSHRuv8i8:
  case ARM::VRSRAsv16i8:
  case ARM::VRSRAsv1i64:
  case ARM::VRSRAsv2i32:
  case ARM::VRSRAsv2i64:
  case ARM::VRSRAsv4i16:
  case ARM::VRSRAsv4i32:
  case ARM::VRSRAsv8i16:
  case ARM::VRSRAsv8i8:
  case ARM::VRSRAuv16i8:
  case ARM::VRSRAuv1i64:
  case ARM::VRSRAuv2i32:
  case ARM::VRSRAuv2i64:
  case ARM::VRSRAuv4i16:
  case ARM::VRSRAuv4i32:
  case ARM::VRSRAuv8i16:
  case ARM::VRSRAuv8i8:
  case ARM::VRSUBHNv2i32:
  case ARM::VRSUBHNv4i16:
  case ARM::VRSUBHNv8i8:
  case ARM::VSHLLi16:
  case ARM::VSHLLi32:
  case ARM::VSHLLi8:
  case ARM::VSHLLsv2i64:
  case ARM::VSHLLsv4i32:
  case ARM::VSHLLsv8i16:
  case ARM::VSHLLuv2i64:
  case ARM::VSHLLuv4i32:
  case ARM::VSHLLuv8i16:
  case ARM::VSHLiv16i8:
  case ARM::VSHLiv1i64:
  case ARM::VSHLiv2i32:
  case ARM::VSHLiv2i64:
  case ARM::VSHLiv4i16:
  case ARM::VSHLiv4i32:
  case ARM::VSHLiv8i16:
  case ARM::VSHLiv8i8:
  case ARM::VSHLsv16i8:
  case ARM::VSHLsv1i64:
  case ARM::VSHLsv2i32:
  case ARM::VSHLsv2i64:
  case ARM::VSHLsv4i16:
  case ARM::VSHLsv4i32:
  case ARM::VSHLsv8i16:
  case ARM::VSHLsv8i8:
  case ARM::VSHLuv16i8:
  case ARM::VSHLuv1i64:
  case ARM::VSHLuv2i32:
  case ARM::VSHLuv2i64:
  case ARM::VSHLuv4i16:
  case ARM::VSHLuv4i32:
  case ARM::VSHLuv8i16:
  case ARM::VSHLuv8i8:
  case ARM::VSHRNv2i32:
  case ARM::VSHRNv4i16:
  case ARM::VSHRNv8i8:
  case ARM::VSHRsv16i8:
  case ARM::VSHRsv1i64:
  case ARM::VSHRsv2i32:
  case ARM::VSHRsv2i64:
  case ARM::VSHRsv4i16:
  case ARM::VSHRsv4i32:
  case ARM::VSHRsv8i16:
  case ARM::VSHRsv8i8:
  case ARM::VSHRuv16i8:
  case ARM::VSHRuv1i64:
  case ARM::VSHRuv2i32:
  case ARM::VSHRuv2i64:
  case ARM::VSHRuv4i16:
  case ARM::VSHRuv4i32:
  case ARM::VSHRuv8i16:
  case ARM::VSHRuv8i8:
  case ARM::VSRAsv16i8:
  case ARM::VSRAsv1i64:
  case ARM::VSRAsv2i32:
  case ARM::VSRAsv2i64:
  case ARM::VSRAsv4i16:
  case ARM::VSRAsv4i32:
  case ARM::VSRAsv8i16:
  case ARM::VSRAsv8i8:
  case ARM::VSRAuv16i8:
  case ARM::VSRAuv1i64:
  case ARM::VSRAuv2i32:
  case ARM::VSRAuv2i64:
  case ARM::VSRAuv4i16:
  case ARM::VSRAuv4i32:
  case ARM::VSRAuv8i16:
  case ARM::VSRAuv8i8:
  case ARM::VST1LNdAsm_16:
  case ARM::VST1LNdAsm_32:
  case ARM::VST1LNdAsm_8:
  case ARM::VST1LNdWB_register_Asm_I16:
  case ARM::VST1LNdWB_register_Asm_I32:
  case ARM::VST1LNdWB_register_Asm_I8:
  case ARM::VST1LNdWB_register_Asm_P8:
  case ARM::VST1LNdWB_register_Asm_S16:
  case ARM::VST1LNdWB_register_Asm_S32:
  case ARM::VST1LNdWB_register_Asm_S8:
  case ARM::VST1LNdWB_register_Asm_U16:
  case ARM::VST1LNdWB_register_Asm_U32:
  case ARM::VST1LNdWB_register_Asm_U8:
  case ARM::VST2LNdAsm_16:
  case ARM::VST2LNdAsm_32:
  case ARM::VST2LNdAsm_8:
  case ARM::VST2LNdWB_register_Asm_I16:
  case ARM::VST2LNdWB_register_Asm_I32:
  case ARM::VST2LNdWB_register_Asm_I8:
  case ARM::VST2LNdWB_register_Asm_P8:
  case ARM::VST2LNdWB_register_Asm_S16:
  case ARM::VST2LNdWB_register_Asm_S32:
  case ARM::VST2LNdWB_register_Asm_S8:
  case ARM::VST2LNdWB_register_Asm_U16:
  case ARM::VST2LNdWB_register_Asm_U32:
  case ARM::VST2LNdWB_register_Asm_U8:
  case ARM::VST2LNqAsm_16:
  case ARM::VST2LNqAsm_32:
  case ARM::VST2LNqWB_register_Asm_I16:
  case ARM::VST2LNqWB_register_Asm_I32:
  case ARM::VST2LNqWB_register_Asm_S16:
  case ARM::VST2LNqWB_register_Asm_S32:
  case ARM::VST2LNqWB_register_Asm_U16:
  case ARM::VST2LNqWB_register_Asm_U32:
  case ARM::VSTMDIA:
  case ARM::VSTMSIA:
  case ARM::VSTRD:
  case ARM::VSTRS:
  case ARM::VSUBHNv2i32:
  case ARM::VSUBHNv4i16:
  case ARM::VSUBHNv8i8:
  case ARM::VSUBLsv2i64:
  case ARM::VSUBLsv4i32:
  case ARM::VSUBLsv8i16:
  case ARM::VSUBLuv2i64:
  case ARM::VSUBLuv4i32:
  case ARM::VSUBLuv8i16:
  case ARM::VSUBWsv2i64:
  case ARM::VSUBWsv4i32:
  case ARM::VSUBWsv8i16:
  case ARM::VSUBWuv2i64:
  case ARM::VSUBWuv4i32:
  case ARM::VSUBWuv8i16:
  case ARM::VSUBv16i8:
  case ARM::VSUBv1i64:
  case ARM::VSUBv2i32:
  case ARM::VSUBv2i64:
  case ARM::VSUBv4i16:
  case ARM::VSUBv4i32:
  case ARM::VSUBv8i16:
  case ARM::VSUBv8i8:
  case ARM::VSWPd:
  case ARM::VSWPq:
  case ARM::VTRNd16:
  case ARM::VTRNd32:
  case ARM::VTRNd8:
  case ARM::VTRNq16:
  case ARM::VTRNq32:
  case ARM::VTRNq8:
  case ARM::VUZPd16:
  case ARM::VUZPd32:
  case ARM::VUZPd8:
  case ARM::VUZPq16:
  case ARM::VUZPq32:
  case ARM::VUZPq8:
  case ARM::VZIPd16:
  case ARM::VZIPd32:
  case ARM::VZIPd8:
  case ARM::VZIPq16:
  case ARM::VZIPq32:
  case ARM::VZIPq8:
  case ARM::t2ADR:
  case ARM::t2BFC:
  case ARM::t2CLZ:
  case ARM::t2CMNzri:
  case ARM::t2CMNzrr:
  case ARM::t2CMNzrs:
  case ARM::t2CMPri:
  case ARM::t2CMPrr:
  case ARM::t2CMPrs:
  case ARM::t2CPS3p:
  case ARM::t2LDMDB:
  case ARM::t2LDMIA:
  case ARM::t2LDRBT:
  case ARM::t2LDRBi12:
  case ARM::t2LDRBi8:
  case ARM::t2LDRBpci:
  case ARM::t2LDRBpcrel:
  case ARM::t2LDRBs:
  case ARM::t2LDREX:
  case ARM::t2LDREXB:
  case ARM::t2LDREXH:
  case ARM::t2LDRHT:
  case ARM::t2LDRHi12:
  case ARM::t2LDRHi8:
  case ARM::t2LDRHpci:
  case ARM::t2LDRHpcrel:
  case ARM::t2LDRHs:
  case ARM::t2LDRSBT:
  case ARM::t2LDRSBi12:
  case ARM::t2LDRSBi8:
  case ARM::t2LDRSBpci:
  case ARM::t2LDRSBpcrel:
  case ARM::t2LDRSBs:
  case ARM::t2LDRSHT:
  case ARM::t2LDRSHi12:
  case ARM::t2LDRSHi8:
  case ARM::t2LDRSHpci:
  case ARM::t2LDRSHpcrel:
  case ARM::t2LDRSHs:
  case ARM::t2LDRT:
  case ARM::t2LDRi12:
  case ARM::t2LDRi8:
  case ARM::t2LDRpci:
  case ARM::t2LDRpcrel:
  case ARM::t2LDRs:
  case ARM::t2MOVCCi16:
  case ARM::t2MOVSsi:
  case ARM::t2MOVSsr:
  case ARM::t2MOVTi16:
  case ARM::t2MOVi:
  case ARM::t2MOVi16:
  case ARM::t2MOVr:
  case ARM::t2MOVsi:
  case ARM::t2MOVsr:
  case ARM::t2MRS_M:
  case ARM::t2MVNCCi:
  case ARM::t2MVNi:
  case ARM::t2MVNr:
  case ARM::t2MVNs:
  case ARM::t2RBIT:
  case ARM::t2REV:
  case ARM::t2REV16:
  case ARM::t2REVSH:
  case ARM::t2RRX:
  case ARM::t2STMDB:
  case ARM::t2STMIA:
  case ARM::t2STRBT:
  case ARM::t2STRBi12:
  case ARM::t2STRBi8:
  case ARM::t2STRBs:
  case ARM::t2STRHT:
  case ARM::t2STRHi12:
  case ARM::t2STRHi8:
  case ARM::t2STRHs:
  case ARM::t2STRT:
  case ARM::t2STRi12:
  case ARM::t2STRi8:
  case ARM::t2STRs:
  case ARM::t2TEQri:
  case ARM::t2TEQrr:
  case ARM::t2TEQrs:
  case ARM::t2TSTri:
  case ARM::t2TSTrr:
  case ARM::t2TSTrs:
  case ARM::tADDhirr:
  case ARM::tADDi3:
  case ARM::tADDrr:
  case ARM::tADDspi:
  case ARM::tADDspr:
  case ARM::tADR:
  case ARM::tASRri:
  case ARM::tCMNz:
  case ARM::tCMPhir:
  case ARM::tCMPi8:
  case ARM::tCMPr:
  case ARM::tLDMIA:
  case ARM::tLDRBi:
  case ARM::tLDRBr:
  case ARM::tLDRHi:
  case ARM::tLDRHr:
  case ARM::tLDRSB:
  case ARM::tLDRSH:
  case ARM::tLDRi:
  case ARM::tLDRpciASM:
  case ARM::tLDRr:
  case ARM::tLDRspi:
  case ARM::tLSLri:
  case ARM::tLSRri:
  case ARM::tMOVr:
  case ARM::tMUL:
  case ARM::tREV:
  case ARM::tREV16:
  case ARM::tREVSH:
  case ARM::tSTRBi:
  case ARM::tSTRBr:
  case ARM::tSTRHi:
  case ARM::tSTRHr:
  case ARM::tSTRi:
  case ARM::tSTRr:
  case ARM::tSTRspi:
  case ARM::tSUBi3:
  case ARM::tSUBrr:
  case ARM::tSUBspi:
  case ARM::tSXTB:
  case ARM::tSXTH:
  case ARM::tTST:
  case ARM::tUXTB:
  case ARM::tUXTH:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADR: 
    case ARM::CLZ: 
    case ARM::CMNzri: 
    case ARM::CMNzrr: 
    case ARM::CMPri: 
    case ARM::CMPrr: 
    case ARM::MOVi: 
    case ARM::MOVi16: 
    case ARM::MOVr: 
    case ARM::MOVr_TC: 
    case ARM::MVNi: 
    case ARM::MVNr: 
    case ARM::RBIT: 
    case ARM::REV: 
    case ARM::REV16: 
    case ARM::REVSH: 
    case ARM::RRXi: 
    case ARM::TEQri: 
    case ARM::TEQrr: 
    case ARM::TSTri: 
    case ARM::TSTrr: 
    case ARM::VCNTd: 
    case ARM::VCNTq: 
    case ARM::VDUP16d: 
    case ARM::VDUP16q: 
    case ARM::VDUP32d: 
    case ARM::VDUP32q: 
    case ARM::VDUP8d: 
    case ARM::VDUP8q: 
    case ARM::VMOVRS: 
    case ARM::VMOVSR: 
    case ARM::VMVNd: 
    case ARM::VMVNq: 
    case ARM::VREV16d8: 
    case ARM::VREV16q8: 
    case ARM::VREV32d16: 
    case ARM::VREV32d8: 
    case ARM::VREV32q16: 
    case ARM::VREV32q8: 
    case ARM::VREV64d16: 
    case ARM::VREV64d32: 
    case ARM::VREV64d8: 
    case ARM::VREV64q16: 
    case ARM::VREV64q32: 
    case ARM::VREV64q8: 
    case ARM::VSWPd: 
    case ARM::VSWPq: 
    case ARM::VTRNd16: 
    case ARM::VTRNd32: 
    case ARM::VTRNd8: 
    case ARM::VTRNq16: 
    case ARM::VTRNq32: 
    case ARM::VTRNq8: 
    case ARM::VUZPd16: 
    case ARM::VUZPd32: 
    case ARM::VUZPd8: 
    case ARM::VUZPq16: 
    case ARM::VUZPq32: 
    case ARM::VUZPq8: 
    case ARM::VZIPd16: 
    case ARM::VZIPd32: 
    case ARM::VZIPd8: 
    case ARM::VZIPq16: 
    case ARM::VZIPq32: 
    case ARM::VZIPq8: 
    case ARM::t2ADR: 
    case ARM::t2CLZ: 
    case ARM::t2CMNzri: 
    case ARM::t2CMNzrr: 
    case ARM::t2CMPri: 
    case ARM::t2CMPrr: 
    case ARM::t2LDRBpcrel: 
    case ARM::t2LDRHpcrel: 
    case ARM::t2LDRSBpcrel: 
    case ARM::t2LDRSHpcrel: 
    case ARM::t2LDRpcrel: 
    case ARM::t2MOVi: 
    case ARM::t2MOVi16: 
    case ARM::t2MOVr: 
    case ARM::t2MVNi: 
    case ARM::t2MVNr: 
    case ARM::t2RBIT: 
    case ARM::t2REV: 
    case ARM::t2REV16: 
    case ARM::t2REVSH: 
    case ARM::t2RRX: 
    case ARM::t2TEQri: 
    case ARM::t2TEQrr: 
    case ARM::t2TSTri: 
    case ARM::t2TSTrr: 
    case ARM::tADR: 
    case ARM::tCMNz: 
    case ARM::tCMPhir: 
    case ARM::tCMPi8: 
    case ARM::tCMPr: 
    case ARM::tLDRpciASM: 
    case ARM::tMOVr: 
    case ARM::tREV: 
    case ARM::tREV16: 
    case ARM::tREVSH: 
    case ARM::tSXTB: 
    case ARM::tSXTH: 
    case ARM::tTST: 
    case ARM::tUXTB: 
    case ARM::tUXTH: printOperand(MI, 1, O); break;
    case ARM::BFC: 
    case ARM::t2BFC: printBitfieldInvMaskImmOperand(MI, 2, O); break;
    case ARM::CMNzrsi: 
    case ARM::CMPrsi: 
    case ARM::MOVsi: 
    case ARM::MVNsi: 
    case ARM::TEQrsi: 
    case ARM::TSTrsi: printSORegImmOperand(MI, 1, O); break;
    case ARM::CMNzrsr: 
    case ARM::CMPrsr: 
    case ARM::MOVsr: 
    case ARM::MVNsr: 
    case ARM::TEQrsr: 
    case ARM::TSTrsr: 
    case ARM::t2MOVSsr: 
    case ARM::t2MOVsr: printSORegRegOperand(MI, 1, O); break;
    case ARM::CPS3p: 
    case ARM::MOVTi16: 
    case ARM::VABDLsv2i64: 
    case ARM::VABDLsv4i32: 
    case ARM::VABDLsv8i16: 
    case ARM::VABDLuv2i64: 
    case ARM::VABDLuv4i32: 
    case ARM::VABDLuv8i16: 
    case ARM::VABDsv16i8: 
    case ARM::VABDsv2i32: 
    case ARM::VABDsv4i16: 
    case ARM::VABDsv4i32: 
    case ARM::VABDsv8i16: 
    case ARM::VABDsv8i8: 
    case ARM::VABDuv16i8: 
    case ARM::VABDuv2i32: 
    case ARM::VABDuv4i16: 
    case ARM::VABDuv4i32: 
    case ARM::VABDuv8i16: 
    case ARM::VABDuv8i8: 
    case ARM::VADDHNv2i32: 
    case ARM::VADDHNv4i16: 
    case ARM::VADDHNv8i8: 
    case ARM::VADDLsv2i64: 
    case ARM::VADDLsv4i32: 
    case ARM::VADDLsv8i16: 
    case ARM::VADDLuv2i64: 
    case ARM::VADDLuv4i32: 
    case ARM::VADDLuv8i16: 
    case ARM::VADDWsv2i64: 
    case ARM::VADDWsv4i32: 
    case ARM::VADDWsv8i16: 
    case ARM::VADDWuv2i64: 
    case ARM::VADDWuv4i32: 
    case ARM::VADDWuv8i16: 
    case ARM::VADDv16i8: 
    case ARM::VADDv1i64: 
    case ARM::VADDv2i32: 
    case ARM::VADDv2i64: 
    case ARM::VADDv4i16: 
    case ARM::VADDv4i32: 
    case ARM::VADDv8i16: 
    case ARM::VADDv8i8: 
    case ARM::VCEQv16i8: 
    case ARM::VCEQv2i32: 
    case ARM::VCEQv4i16: 
    case ARM::VCEQv4i32: 
    case ARM::VCEQv8i16: 
    case ARM::VCEQv8i8: 
    case ARM::VCGEsv16i8: 
    case ARM::VCGEsv2i32: 
    case ARM::VCGEsv4i16: 
    case ARM::VCGEsv4i32: 
    case ARM::VCGEsv8i16: 
    case ARM::VCGEsv8i8: 
    case ARM::VCGEuv16i8: 
    case ARM::VCGEuv2i32: 
    case ARM::VCGEuv4i16: 
    case ARM::VCGEuv4i32: 
    case ARM::VCGEuv8i16: 
    case ARM::VCGEuv8i8: 
    case ARM::VCGTsv16i8: 
    case ARM::VCGTsv2i32: 
    case ARM::VCGTsv4i16: 
    case ARM::VCGTsv4i32: 
    case ARM::VCGTsv8i16: 
    case ARM::VCGTsv8i8: 
    case ARM::VCGTuv16i8: 
    case ARM::VCGTuv2i32: 
    case ARM::VCGTuv4i16: 
    case ARM::VCGTuv4i32: 
    case ARM::VCGTuv8i16: 
    case ARM::VCGTuv8i8: 
    case ARM::VHADDsv16i8: 
    case ARM::VHADDsv2i32: 
    case ARM::VHADDsv4i16: 
    case ARM::VHADDsv4i32: 
    case ARM::VHADDsv8i16: 
    case ARM::VHADDsv8i8: 
    case ARM::VHADDuv16i8: 
    case ARM::VHADDuv2i32: 
    case ARM::VHADDuv4i16: 
    case ARM::VHADDuv4i32: 
    case ARM::VHADDuv8i16: 
    case ARM::VHADDuv8i8: 
    case ARM::VHSUBsv16i8: 
    case ARM::VHSUBsv2i32: 
    case ARM::VHSUBsv4i16: 
    case ARM::VHSUBsv4i32: 
    case ARM::VHSUBsv8i16: 
    case ARM::VHSUBsv8i8: 
    case ARM::VHSUBuv16i8: 
    case ARM::VHSUBuv2i32: 
    case ARM::VHSUBuv4i16: 
    case ARM::VHSUBuv4i32: 
    case ARM::VHSUBuv8i16: 
    case ARM::VHSUBuv8i8: 
    case ARM::VMAXsv16i8: 
    case ARM::VMAXsv2i32: 
    case ARM::VMAXsv4i16: 
    case ARM::VMAXsv4i32: 
    case ARM::VMAXsv8i16: 
    case ARM::VMAXsv8i8: 
    case ARM::VMAXuv16i8: 
    case ARM::VMAXuv2i32: 
    case ARM::VMAXuv4i16: 
    case ARM::VMAXuv4i32: 
    case ARM::VMAXuv8i16: 
    case ARM::VMAXuv8i8: 
    case ARM::VMINsv16i8: 
    case ARM::VMINsv2i32: 
    case ARM::VMINsv4i16: 
    case ARM::VMINsv4i32: 
    case ARM::VMINsv8i16: 
    case ARM::VMINsv8i8: 
    case ARM::VMINuv16i8: 
    case ARM::VMINuv2i32: 
    case ARM::VMINuv4i16: 
    case ARM::VMINuv4i32: 
    case ARM::VMINuv8i16: 
    case ARM::VMINuv8i8: 
    case ARM::VMULLp: 
    case ARM::VMULLsv2i64: 
    case ARM::VMULLsv4i32: 
    case ARM::VMULLsv8i16: 
    case ARM::VMULLuv2i64: 
    case ARM::VMULLuv4i32: 
    case ARM::VMULLuv8i16: 
    case ARM::VMULpd: 
    case ARM::VMULpq: 
    case ARM::VMULv16i8: 
    case ARM::VMULv2i32: 
    case ARM::VMULv4i16: 
    case ARM::VMULv4i32: 
    case ARM::VMULv8i16: 
    case ARM::VMULv8i8: 
    case ARM::VPADDi16: 
    case ARM::VPADDi32: 
    case ARM::VPADDi8: 
    case ARM::VPMAXs16: 
    case ARM::VPMAXs32: 
    case ARM::VPMAXs8: 
    case ARM::VPMAXu16: 
    case ARM::VPMAXu32: 
    case ARM::VPMAXu8: 
    case ARM::VPMINs16: 
    case ARM::VPMINs32: 
    case ARM::VPMINs8: 
    case ARM::VPMINu16: 
    case ARM::VPMINu32: 
    case ARM::VPMINu8: 
    case ARM::VQADDsv16i8: 
    case ARM::VQADDsv1i64: 
    case ARM::VQADDsv2i32: 
    case ARM::VQADDsv2i64: 
    case ARM::VQADDsv4i16: 
    case ARM::VQADDsv4i32: 
    case ARM::VQADDsv8i16: 
    case ARM::VQADDsv8i8: 
    case ARM::VQADDuv16i8: 
    case ARM::VQADDuv1i64: 
    case ARM::VQADDuv2i32: 
    case ARM::VQADDuv2i64: 
    case ARM::VQADDuv4i16: 
    case ARM::VQADDuv4i32: 
    case ARM::VQADDuv8i16: 
    case ARM::VQADDuv8i8: 
    case ARM::VQDMULHv2i32: 
    case ARM::VQDMULHv4i16: 
    case ARM::VQDMULHv4i32: 
    case ARM::VQDMULHv8i16: 
    case ARM::VQDMULLv2i64: 
    case ARM::VQDMULLv4i32: 
    case ARM::VQRDMULHv2i32: 
    case ARM::VQRDMULHv4i16: 
    case ARM::VQRDMULHv4i32: 
    case ARM::VQRDMULHv8i16: 
    case ARM::VQRSHLsv16i8: 
    case ARM::VQRSHLsv1i64: 
    case ARM::VQRSHLsv2i32: 
    case ARM::VQRSHLsv2i64: 
    case ARM::VQRSHLsv4i16: 
    case ARM::VQRSHLsv4i32: 
    case ARM::VQRSHLsv8i16: 
    case ARM::VQRSHLsv8i8: 
    case ARM::VQRSHLuv16i8: 
    case ARM::VQRSHLuv1i64: 
    case ARM::VQRSHLuv2i32: 
    case ARM::VQRSHLuv2i64: 
    case ARM::VQRSHLuv4i16: 
    case ARM::VQRSHLuv4i32: 
    case ARM::VQRSHLuv8i16: 
    case ARM::VQRSHLuv8i8: 
    case ARM::VQRSHRNsv2i32: 
    case ARM::VQRSHRNsv4i16: 
    case ARM::VQRSHRNsv8i8: 
    case ARM::VQRSHRNuv2i32: 
    case ARM::VQRSHRNuv4i16: 
    case ARM::VQRSHRNuv8i8: 
    case ARM::VQRSHRUNv2i32: 
    case ARM::VQRSHRUNv4i16: 
    case ARM::VQRSHRUNv8i8: 
    case ARM::VQSHLsiv16i8: 
    case ARM::VQSHLsiv1i64: 
    case ARM::VQSHLsiv2i32: 
    case ARM::VQSHLsiv2i64: 
    case ARM::VQSHLsiv4i16: 
    case ARM::VQSHLsiv4i32: 
    case ARM::VQSHLsiv8i16: 
    case ARM::VQSHLsiv8i8: 
    case ARM::VQSHLsuv16i8: 
    case ARM::VQSHLsuv1i64: 
    case ARM::VQSHLsuv2i32: 
    case ARM::VQSHLsuv2i64: 
    case ARM::VQSHLsuv4i16: 
    case ARM::VQSHLsuv4i32: 
    case ARM::VQSHLsuv8i16: 
    case ARM::VQSHLsuv8i8: 
    case ARM::VQSHLsv16i8: 
    case ARM::VQSHLsv1i64: 
    case ARM::VQSHLsv2i32: 
    case ARM::VQSHLsv2i64: 
    case ARM::VQSHLsv4i16: 
    case ARM::VQSHLsv4i32: 
    case ARM::VQSHLsv8i16: 
    case ARM::VQSHLsv8i8: 
    case ARM::VQSHLuiv16i8: 
    case ARM::VQSHLuiv1i64: 
    case ARM::VQSHLuiv2i32: 
    case ARM::VQSHLuiv2i64: 
    case ARM::VQSHLuiv4i16: 
    case ARM::VQSHLuiv4i32: 
    case ARM::VQSHLuiv8i16: 
    case ARM::VQSHLuiv8i8: 
    case ARM::VQSHLuv16i8: 
    case ARM::VQSHLuv1i64: 
    case ARM::VQSHLuv2i32: 
    case ARM::VQSHLuv2i64: 
    case ARM::VQSHLuv4i16: 
    case ARM::VQSHLuv4i32: 
    case ARM::VQSHLuv8i16: 
    case ARM::VQSHLuv8i8: 
    case ARM::VQSHRNsv2i32: 
    case ARM::VQSHRNsv4i16: 
    case ARM::VQSHRNsv8i8: 
    case ARM::VQSHRNuv2i32: 
    case ARM::VQSHRNuv4i16: 
    case ARM::VQSHRNuv8i8: 
    case ARM::VQSHRUNv2i32: 
    case ARM::VQSHRUNv4i16: 
    case ARM::VQSHRUNv8i8: 
    case ARM::VQSUBsv16i8: 
    case ARM::VQSUBsv1i64: 
    case ARM::VQSUBsv2i32: 
    case ARM::VQSUBsv2i64: 
    case ARM::VQSUBsv4i16: 
    case ARM::VQSUBsv4i32: 
    case ARM::VQSUBsv8i16: 
    case ARM::VQSUBsv8i8: 
    case ARM::VQSUBuv16i8: 
    case ARM::VQSUBuv1i64: 
    case ARM::VQSUBuv2i32: 
    case ARM::VQSUBuv2i64: 
    case ARM::VQSUBuv4i16: 
    case ARM::VQSUBuv4i32: 
    case ARM::VQSUBuv8i16: 
    case ARM::VQSUBuv8i8: 
    case ARM::VRADDHNv2i32: 
    case ARM::VRADDHNv4i16: 
    case ARM::VRADDHNv8i8: 
    case ARM::VRHADDsv16i8: 
    case ARM::VRHADDsv2i32: 
    case ARM::VRHADDsv4i16: 
    case ARM::VRHADDsv4i32: 
    case ARM::VRHADDsv8i16: 
    case ARM::VRHADDsv8i8: 
    case ARM::VRHADDuv16i8: 
    case ARM::VRHADDuv2i32: 
    case ARM::VRHADDuv4i16: 
    case ARM::VRHADDuv4i32: 
    case ARM::VRHADDuv8i16: 
    case ARM::VRHADDuv8i8: 
    case ARM::VRSHLsv16i8: 
    case ARM::VRSHLsv1i64: 
    case ARM::VRSHLsv2i32: 
    case ARM::VRSHLsv2i64: 
    case ARM::VRSHLsv4i16: 
    case ARM::VRSHLsv4i32: 
    case ARM::VRSHLsv8i16: 
    case ARM::VRSHLsv8i8: 
    case ARM::VRSHLuv16i8: 
    case ARM::VRSHLuv1i64: 
    case ARM::VRSHLuv2i32: 
    case ARM::VRSHLuv2i64: 
    case ARM::VRSHLuv4i16: 
    case ARM::VRSHLuv4i32: 
    case ARM::VRSHLuv8i16: 
    case ARM::VRSHLuv8i8: 
    case ARM::VRSHRNv2i32: 
    case ARM::VRSHRNv4i16: 
    case ARM::VRSHRNv8i8: 
    case ARM::VRSHRsv16i8: 
    case ARM::VRSHRsv1i64: 
    case ARM::VRSHRsv2i32: 
    case ARM::VRSHRsv2i64: 
    case ARM::VRSHRsv4i16: 
    case ARM::VRSHRsv4i32: 
    case ARM::VRSHRsv8i16: 
    case ARM::VRSHRsv8i8: 
    case ARM::VRSHRuv16i8: 
    case ARM::VRSHRuv1i64: 
    case ARM::VRSHRuv2i32: 
    case ARM::VRSHRuv2i64: 
    case ARM::VRSHRuv4i16: 
    case ARM::VRSHRuv4i32: 
    case ARM::VRSHRuv8i16: 
    case ARM::VRSHRuv8i8: 
    case ARM::VRSUBHNv2i32: 
    case ARM::VRSUBHNv4i16: 
    case ARM::VRSUBHNv8i8: 
    case ARM::VSHLLi16: 
    case ARM::VSHLLi32: 
    case ARM::VSHLLi8: 
    case ARM::VSHLLsv2i64: 
    case ARM::VSHLLsv4i32: 
    case ARM::VSHLLsv8i16: 
    case ARM::VSHLLuv2i64: 
    case ARM::VSHLLuv4i32: 
    case ARM::VSHLLuv8i16: 
    case ARM::VSHLiv16i8: 
    case ARM::VSHLiv1i64: 
    case ARM::VSHLiv2i32: 
    case ARM::VSHLiv2i64: 
    case ARM::VSHLiv4i16: 
    case ARM::VSHLiv4i32: 
    case ARM::VSHLiv8i16: 
    case ARM::VSHLiv8i8: 
    case ARM::VSHLsv16i8: 
    case ARM::VSHLsv1i64: 
    case ARM::VSHLsv2i32: 
    case ARM::VSHLsv2i64: 
    case ARM::VSHLsv4i16: 
    case ARM::VSHLsv4i32: 
    case ARM::VSHLsv8i16: 
    case ARM::VSHLsv8i8: 
    case ARM::VSHLuv16i8: 
    case ARM::VSHLuv1i64: 
    case ARM::VSHLuv2i32: 
    case ARM::VSHLuv2i64: 
    case ARM::VSHLuv4i16: 
    case ARM::VSHLuv4i32: 
    case ARM::VSHLuv8i16: 
    case ARM::VSHLuv8i8: 
    case ARM::VSHRNv2i32: 
    case ARM::VSHRNv4i16: 
    case ARM::VSHRNv8i8: 
    case ARM::VSHRsv16i8: 
    case ARM::VSHRsv1i64: 
    case ARM::VSHRsv2i32: 
    case ARM::VSHRsv2i64: 
    case ARM::VSHRsv4i16: 
    case ARM::VSHRsv4i32: 
    case ARM::VSHRsv8i16: 
    case ARM::VSHRsv8i8: 
    case ARM::VSHRuv16i8: 
    case ARM::VSHRuv1i64: 
    case ARM::VSHRuv2i32: 
    case ARM::VSHRuv2i64: 
    case ARM::VSHRuv4i16: 
    case ARM::VSHRuv4i32: 
    case ARM::VSHRuv8i16: 
    case ARM::VSHRuv8i8: 
    case ARM::VSUBHNv2i32: 
    case ARM::VSUBHNv4i16: 
    case ARM::VSUBHNv8i8: 
    case ARM::VSUBLsv2i64: 
    case ARM::VSUBLsv4i32: 
    case ARM::VSUBLsv8i16: 
    case ARM::VSUBLuv2i64: 
    case ARM::VSUBLuv4i32: 
    case ARM::VSUBLuv8i16: 
    case ARM::VSUBWsv2i64: 
    case ARM::VSUBWsv4i32: 
    case ARM::VSUBWsv8i16: 
    case ARM::VSUBWuv2i64: 
    case ARM::VSUBWuv4i32: 
    case ARM::VSUBWuv8i16: 
    case ARM::VSUBv16i8: 
    case ARM::VSUBv1i64: 
    case ARM::VSUBv2i32: 
    case ARM::VSUBv2i64: 
    case ARM::VSUBv4i16: 
    case ARM::VSUBv4i32: 
    case ARM::VSUBv8i16: 
    case ARM::VSUBv8i8: 
    case ARM::t2CPS3p: 
    case ARM::t2MOVCCi16: 
    case ARM::t2MOVTi16: 
    case ARM::t2MVNCCi: 
    case ARM::tADDhirr: 
    case ARM::tADDspr: printOperand(MI, 2, O); break;
    case ARM::LDMDA: 
    case ARM::LDMDB: 
    case ARM::LDMIA: 
    case ARM::LDMIB: 
    case ARM::STMDA: 
    case ARM::STMDB: 
    case ARM::STMIA: 
    case ARM::STMIB: 
    case ARM::VLDMDIA: 
    case ARM::VLDMSIA: 
    case ARM::VSTMDIA: 
    case ARM::VSTMSIA: 
    case ARM::t2LDMDB: 
    case ARM::t2LDMIA: 
    case ARM::t2STMDB: 
    case ARM::t2STMIA: 
    case ARM::tLDMIA: printRegisterList(MI, 3, O); break;
    case ARM::LDRBi12: 
    case ARM::LDRcp: 
    case ARM::LDRi12: 
    case ARM::STRBi12: 
    case ARM::STRi12: 
    case ARM::t2LDRBi12: 
    case ARM::t2LDRHi12: 
    case ARM::t2LDRSBi12: 
    case ARM::t2LDRSHi12: 
    case ARM::t2LDRi12: 
    case ARM::t2STRBi12: 
    case ARM::t2STRHi12: 
    case ARM::t2STRi12: printAddrModeImm12Operand(MI, 1, O); break;
    case ARM::LDRBrs: 
    case ARM::LDRrs: 
    case ARM::STRBrs: 
    case ARM::STRrs: printAddrMode2Operand(MI, 1, O); break;
    case ARM::LDREX: 
    case ARM::LDREXB: 
    case ARM::LDREXH: 
    case ARM::t2LDREXB: 
    case ARM::t2LDREXH: printAddrMode7Operand(MI, 1, O); break;
    case ARM::LDRH: 
    case ARM::LDRSB: 
    case ARM::LDRSH: 
    case ARM::STRH: printAddrMode3Operand(MI, 1, O); break;
    case ARM::VABALsv2i64: 
    case ARM::VABALsv4i32: 
    case ARM::VABALsv8i16: 
    case ARM::VABALuv2i64: 
    case ARM::VABALuv4i32: 
    case ARM::VABALuv8i16: 
    case ARM::VABAsv16i8: 
    case ARM::VABAsv2i32: 
    case ARM::VABAsv4i16: 
    case ARM::VABAsv4i32: 
    case ARM::VABAsv8i16: 
    case ARM::VABAsv8i8: 
    case ARM::VABAuv16i8: 
    case ARM::VABAuv2i32: 
    case ARM::VABAuv4i16: 
    case ARM::VABAuv4i32: 
    case ARM::VABAuv8i16: 
    case ARM::VABAuv8i8: 
    case ARM::VMLALsv2i64: 
    case ARM::VMLALsv4i32: 
    case ARM::VMLALsv8i16: 
    case ARM::VMLALuv2i64: 
    case ARM::VMLALuv4i32: 
    case ARM::VMLALuv8i16: 
    case ARM::VMLAv16i8: 
    case ARM::VMLAv2i32: 
    case ARM::VMLAv4i16: 
    case ARM::VMLAv4i32: 
    case ARM::VMLAv8i16: 
    case ARM::VMLAv8i8: 
    case ARM::VMLSLsv2i64: 
    case ARM::VMLSLsv4i32: 
    case ARM::VMLSLsv8i16: 
    case ARM::VMLSLuv2i64: 
    case ARM::VMLSLuv4i32: 
    case ARM::VMLSLuv8i16: 
    case ARM::VMLSv16i8: 
    case ARM::VMLSv2i32: 
    case ARM::VMLSv4i16: 
    case ARM::VMLSv4i32: 
    case ARM::VMLSv8i16: 
    case ARM::VMLSv8i8: 
    case ARM::VQDMLALv2i64: 
    case ARM::VQDMLALv4i32: 
    case ARM::VQDMLSLv2i64: 
    case ARM::VQDMLSLv4i32: 
    case ARM::VRSRAsv16i8: 
    case ARM::VRSRAsv1i64: 
    case ARM::VRSRAsv2i32: 
    case ARM::VRSRAsv2i64: 
    case ARM::VRSRAsv4i16: 
    case ARM::VRSRAsv4i32: 
    case ARM::VRSRAsv8i16: 
    case ARM::VRSRAsv8i8: 
    case ARM::VRSRAuv16i8: 
    case ARM::VRSRAuv1i64: 
    case ARM::VRSRAuv2i32: 
    case ARM::VRSRAuv2i64: 
    case ARM::VRSRAuv4i16: 
    case ARM::VRSRAuv4i32: 
    case ARM::VRSRAuv8i16: 
    case ARM::VRSRAuv8i8: 
    case ARM::VSRAsv16i8: 
    case ARM::VSRAsv1i64: 
    case ARM::VSRAsv2i32: 
    case ARM::VSRAsv2i64: 
    case ARM::VSRAsv4i16: 
    case ARM::VSRAsv4i32: 
    case ARM::VSRAsv8i16: 
    case ARM::VSRAsv8i8: 
    case ARM::VSRAuv16i8: 
    case ARM::VSRAuv1i64: 
    case ARM::VSRAuv2i32: 
    case ARM::VSRAuv2i64: 
    case ARM::VSRAuv4i16: 
    case ARM::VSRAuv4i32: 
    case ARM::VSRAuv8i16: 
    case ARM::VSRAuv8i8: 
    case ARM::tADDi3: 
    case ARM::tADDrr: 
    case ARM::tLSLri: 
    case ARM::tMUL: 
    case ARM::tSUBi3: 
    case ARM::tSUBrr: printOperand(MI, 3, O); break;
    case ARM::VLD1LNdAsm_16: 
    case ARM::VLD1LNdAsm_32: 
    case ARM::VLD1LNdAsm_8: 
    case ARM::VLD2LNdAsm_16: 
    case ARM::VLD2LNdAsm_32: 
    case ARM::VLD2LNdAsm_8: 
    case ARM::VLD2LNqAsm_16: 
    case ARM::VLD2LNqAsm_32: 
    case ARM::VST1LNdAsm_16: 
    case ARM::VST1LNdAsm_32: 
    case ARM::VST1LNdAsm_8: 
    case ARM::VST2LNdAsm_16: 
    case ARM::VST2LNdAsm_32: 
    case ARM::VST2LNdAsm_8: 
    case ARM::VST2LNqAsm_16: 
    case ARM::VST2LNqAsm_32: printAddrMode6Operand(MI, 2, O); break;
    case ARM::VLD1LNdWB_register_Asm_I16: 
    case ARM::VLD1LNdWB_register_Asm_I32: 
    case ARM::VLD1LNdWB_register_Asm_I8: 
    case ARM::VLD1LNdWB_register_Asm_P8: 
    case ARM::VLD1LNdWB_register_Asm_S16: 
    case ARM::VLD1LNdWB_register_Asm_S32: 
    case ARM::VLD1LNdWB_register_Asm_S8: 
    case ARM::VLD1LNdWB_register_Asm_U16: 
    case ARM::VLD1LNdWB_register_Asm_U32: 
    case ARM::VLD1LNdWB_register_Asm_U8: 
    case ARM::VLD2LNdWB_register_Asm_I16: 
    case ARM::VLD2LNdWB_register_Asm_I32: 
    case ARM::VLD2LNdWB_register_Asm_I8: 
    case ARM::VLD2LNdWB_register_Asm_P8: 
    case ARM::VLD2LNdWB_register_Asm_S16: 
    case ARM::VLD2LNdWB_register_Asm_S32: 
    case ARM::VLD2LNdWB_register_Asm_S8: 
    case ARM::VLD2LNdWB_register_Asm_U16: 
    case ARM::VLD2LNdWB_register_Asm_U32: 
    case ARM::VLD2LNdWB_register_Asm_U8: 
    case ARM::VLD2LNqWB_register_Asm_I16: 
    case ARM::VLD2LNqWB_register_Asm_I32: 
    case ARM::VLD2LNqWB_register_Asm_S16: 
    case ARM::VLD2LNqWB_register_Asm_S32: 
    case ARM::VLD2LNqWB_register_Asm_U16: 
    case ARM::VLD2LNqWB_register_Asm_U32: 
    case ARM::VST1LNdWB_register_Asm_I16: 
    case ARM::VST1LNdWB_register_Asm_I32: 
    case ARM::VST1LNdWB_register_Asm_I8: 
    case ARM::VST1LNdWB_register_Asm_P8: 
    case ARM::VST1LNdWB_register_Asm_S16: 
    case ARM::VST1LNdWB_register_Asm_S32: 
    case ARM::VST1LNdWB_register_Asm_S8: 
    case ARM::VST1LNdWB_register_Asm_U16: 
    case ARM::VST1LNdWB_register_Asm_U32: 
    case ARM::VST1LNdWB_register_Asm_U8: 
    case ARM::VST2LNdWB_register_Asm_I16: 
    case ARM::VST2LNdWB_register_Asm_I32: 
    case ARM::VST2LNdWB_register_Asm_I8: 
    case ARM::VST2LNdWB_register_Asm_P8: 
    case ARM::VST2LNdWB_register_Asm_S16: 
    case ARM::VST2LNdWB_register_Asm_S32: 
    case ARM::VST2LNdWB_register_Asm_S8: 
    case ARM::VST2LNdWB_register_Asm_U16: 
    case ARM::VST2LNdWB_register_Asm_U32: 
    case ARM::VST2LNdWB_register_Asm_U8: 
    case ARM::VST2LNqWB_register_Asm_I16: 
    case ARM::VST2LNqWB_register_Asm_I32: 
    case ARM::VST2LNqWB_register_Asm_S16: 
    case ARM::VST2LNqWB_register_Asm_S32: 
    case ARM::VST2LNqWB_register_Asm_U16: 
    case ARM::VST2LNqWB_register_Asm_U32: printOperand(MI, 4, O); break;
    case ARM::VLDRD: 
    case ARM::VLDRS: 
    case ARM::VSTRD: 
    case ARM::VSTRS: printAddrMode5Operand(MI, 1, O); break;
    case ARM::t2CMNzrs: 
    case ARM::t2CMPrs: 
    case ARM::t2MOVSsi: 
    case ARM::t2MOVsi: 
    case ARM::t2MVNs: 
    case ARM::t2TEQrs: 
    case ARM::t2TSTrs: printT2SOOperand(MI, 1, O); break;
    case ARM::t2LDRBT: 
    case ARM::t2LDRBi8: 
    case ARM::t2LDRHT: 
    case ARM::t2LDRHi8: 
    case ARM::t2LDRSBT: 
    case ARM::t2LDRSBi8: 
    case ARM::t2LDRSHT: 
    case ARM::t2LDRSHi8: 
    case ARM::t2LDRT: 
    case ARM::t2LDRi8: 
    case ARM::t2STRBT: 
    case ARM::t2STRBi8: 
    case ARM::t2STRHT: 
    case ARM::t2STRHi8: 
    case ARM::t2STRT: 
    case ARM::t2STRi8: printT2AddrModeImm8Operand(MI, 1, O); break;
    case ARM::t2LDRBpci: 
    case ARM::t2LDRHpci: 
    case ARM::t2LDRSBpci: 
    case ARM::t2LDRSHpci: 
    case ARM::t2LDRpci: printT2LdrLabelOperand(MI, 1, O); break;
    case ARM::t2LDRBs: 
    case ARM::t2LDRHs: 
    case ARM::t2LDRSBs: 
    case ARM::t2LDRSHs: 
    case ARM::t2LDRs: 
    case ARM::t2STRBs: 
    case ARM::t2STRHs: 
    case ARM::t2STRs: printT2AddrModeSoRegOperand(MI, 1, O); break;
    case ARM::t2LDREX: printT2AddrModeImm0_1020s4Operand(MI, 1, O); break;
    case ARM::t2MRS_M: printMSRMaskOperand(MI, 1, O); break;
    case ARM::tADDspi: 
    case ARM::tSUBspi: printThumbS4ImmOperand(MI, 2, O); break;
    case ARM::tASRri: 
    case ARM::tLSRri: printThumbSRImm(MI, 3, O); break;
    case ARM::tLDRBi: 
    case ARM::tSTRBi: printThumbAddrModeImm5S1Operand(MI, 1, O); break;
    case ARM::tLDRBr: 
    case ARM::tLDRHr: 
    case ARM::tLDRSB: 
    case ARM::tLDRSH: 
    case ARM::tLDRr: 
    case ARM::tSTRBr: 
    case ARM::tSTRHr: 
    case ARM::tSTRr: printThumbAddrModeRROperand(MI, 1, O); break;
    case ARM::tLDRHi: 
    case ARM::tSTRHi: printThumbAddrModeImm5S2Operand(MI, 1, O); break;
    case ARM::tLDRi: 
    case ARM::tSTRi: printThumbAddrModeImm5S4Operand(MI, 1, O); break;
    case ARM::tLDRspi: 
    case ARM::tSTRspi: printThumbAddrModeSPOperand(MI, 1, O); break;
    }
    return;
    break;
  case ARM::BFI:
  case ARM::VBIFd:
  case ARM::VBIFq:
  case ARM::VBITd:
  case ARM::VBITq:
  case ARM::VBSLd:
  case ARM::VBSLq:
  case ARM::VSLIv16i8:
  case ARM::VSLIv1i64:
  case ARM::VSLIv2i32:
  case ARM::VSLIv2i64:
  case ARM::VSLIv4i16:
  case ARM::VSLIv4i32:
  case ARM::VSLIv8i16:
  case ARM::VSLIv8i8:
  case ARM::VSRIv16i8:
  case ARM::VSRIv1i64:
  case ARM::VSRIv2i32:
  case ARM::VSRIv2i64:
  case ARM::VSRIv4i16:
  case ARM::VSRIv4i32:
  case ARM::VSRIv8i16:
  case ARM::VSRIv8i8:
  case ARM::t2BFI:
  case ARM::t2MOVCCasr:
  case ARM::t2MOVCClsl:
  case ARM::t2MOVCClsr:
  case ARM::t2MOVCCror:
  case ARM::tADDrSP:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::BFI: 
    case ARM::t2BFI: printBitfieldInvMaskImmOperand(MI, 3, O); break;
    case ARM::VBIFd: 
    case ARM::VBIFq: 
    case ARM::VBITd: 
    case ARM::VBITq: 
    case ARM::VBSLd: 
    case ARM::VBSLq: 
    case ARM::VSLIv16i8: 
    case ARM::VSLIv1i64: 
    case ARM::VSLIv2i32: 
    case ARM::VSLIv2i64: 
    case ARM::VSLIv4i16: 
    case ARM::VSLIv4i32: 
    case ARM::VSLIv8i16: 
    case ARM::VSLIv8i8: 
    case ARM::VSRIv16i8: 
    case ARM::VSRIv1i64: 
    case ARM::VSRIv2i32: 
    case ARM::VSRIv2i64: 
    case ARM::VSRIv4i16: 
    case ARM::VSRIv4i32: 
    case ARM::VSRIv8i16: 
    case ARM::VSRIv8i8: 
    case ARM::t2MOVCCasr: 
    case ARM::t2MOVCClsl: 
    case ARM::t2MOVCClsr: 
    case ARM::t2MOVCCror: printOperand(MI, 3, O); break;
    case ARM::tADDrSP: printOperand(MI, 1, O); break;
    }
    return;
    break;
  case ARM::BKPT:
  case ARM::BLX_pred:
  case ARM::BL_pred:
  case ARM::BXJ:
  case ARM::BX_pred:
  case ARM::Bcc:
  case ARM::CPS2p:
  case ARM::DBG:
  case ARM::LDC2L_OFFSET:
  case ARM::LDC2_OFFSET:
  case ARM::SMC:
  case ARM::STC2L_OFFSET:
  case ARM::STC2_OFFSET:
  case ARM::SVC:
  case ARM::VABSv16i8:
  case ARM::VABSv2i32:
  case ARM::VABSv4i16:
  case ARM::VABSv4i32:
  case ARM::VABSv8i16:
  case ARM::VABSv8i8:
  case ARM::VCLSv16i8:
  case ARM::VCLSv2i32:
  case ARM::VCLSv4i16:
  case ARM::VCLSv4i32:
  case ARM::VCLSv8i16:
  case ARM::VCLSv8i8:
  case ARM::VCLZv16i8:
  case ARM::VCLZv2i32:
  case ARM::VCLZv4i16:
  case ARM::VCLZv4i32:
  case ARM::VCLZv8i16:
  case ARM::VCLZv8i8:
  case ARM::VLD1LNdAsm_I16:
  case ARM::VLD1LNdAsm_I32:
  case ARM::VLD1LNdAsm_I8:
  case ARM::VLD1LNdAsm_P8:
  case ARM::VLD1LNdAsm_S16:
  case ARM::VLD1LNdAsm_S32:
  case ARM::VLD1LNdAsm_S8:
  case ARM::VLD1LNdAsm_U16:
  case ARM::VLD1LNdAsm_U32:
  case ARM::VLD1LNdAsm_U8:
  case ARM::VLD2LNdAsm_I16:
  case ARM::VLD2LNdAsm_I32:
  case ARM::VLD2LNdAsm_I8:
  case ARM::VLD2LNdAsm_P8:
  case ARM::VLD2LNdAsm_S16:
  case ARM::VLD2LNdAsm_S32:
  case ARM::VLD2LNdAsm_S8:
  case ARM::VLD2LNdAsm_U16:
  case ARM::VLD2LNdAsm_U32:
  case ARM::VLD2LNdAsm_U8:
  case ARM::VLD2LNqAsm_I16:
  case ARM::VLD2LNqAsm_I32:
  case ARM::VLD2LNqAsm_S16:
  case ARM::VLD2LNqAsm_S32:
  case ARM::VLD2LNqAsm_U16:
  case ARM::VLD2LNqAsm_U32:
  case ARM::VMOVLsv2i64:
  case ARM::VMOVLsv4i32:
  case ARM::VMOVLsv8i16:
  case ARM::VMOVLuv2i64:
  case ARM::VMOVLuv4i32:
  case ARM::VMOVLuv8i16:
  case ARM::VMOVNv2i32:
  case ARM::VMOVNv4i16:
  case ARM::VMOVNv8i8:
  case ARM::VNEGs16d:
  case ARM::VNEGs16q:
  case ARM::VNEGs32d:
  case ARM::VNEGs32q:
  case ARM::VNEGs8d:
  case ARM::VNEGs8q:
  case ARM::VPADALsv16i8:
  case ARM::VPADALsv2i32:
  case ARM::VPADALsv4i16:
  case ARM::VPADALsv4i32:
  case ARM::VPADALsv8i16:
  case ARM::VPADALsv8i8:
  case ARM::VPADALuv16i8:
  case ARM::VPADALuv2i32:
  case ARM::VPADALuv4i16:
  case ARM::VPADALuv4i32:
  case ARM::VPADALuv8i16:
  case ARM::VPADALuv8i8:
  case ARM::VPADDLsv16i8:
  case ARM::VPADDLsv2i32:
  case ARM::VPADDLsv4i16:
  case ARM::VPADDLsv4i32:
  case ARM::VPADDLsv8i16:
  case ARM::VPADDLsv8i8:
  case ARM::VPADDLuv16i8:
  case ARM::VPADDLuv2i32:
  case ARM::VPADDLuv4i16:
  case ARM::VPADDLuv4i32:
  case ARM::VPADDLuv8i16:
  case ARM::VPADDLuv8i8:
  case ARM::VQABSv16i8:
  case ARM::VQABSv2i32:
  case ARM::VQABSv4i16:
  case ARM::VQABSv4i32:
  case ARM::VQABSv8i16:
  case ARM::VQABSv8i8:
  case ARM::VQMOVNsuv2i32:
  case ARM::VQMOVNsuv4i16:
  case ARM::VQMOVNsuv8i8:
  case ARM::VQMOVNsv2i32:
  case ARM::VQMOVNsv4i16:
  case ARM::VQMOVNsv8i8:
  case ARM::VQMOVNuv2i32:
  case ARM::VQMOVNuv4i16:
  case ARM::VQMOVNuv8i8:
  case ARM::VQNEGv16i8:
  case ARM::VQNEGv2i32:
  case ARM::VQNEGv4i16:
  case ARM::VQNEGv4i32:
  case ARM::VQNEGv8i16:
  case ARM::VQNEGv8i8:
  case ARM::VRECPEd:
  case ARM::VRECPEq:
  case ARM::VRSQRTEd:
  case ARM::VRSQRTEq:
  case ARM::VST1LNdAsm_I16:
  case ARM::VST1LNdAsm_I32:
  case ARM::VST1LNdAsm_I8:
  case ARM::VST1LNdAsm_P8:
  case ARM::VST1LNdAsm_S16:
  case ARM::VST1LNdAsm_S32:
  case ARM::VST1LNdAsm_S8:
  case ARM::VST1LNdAsm_U16:
  case ARM::VST1LNdAsm_U32:
  case ARM::VST1LNdAsm_U8:
  case ARM::VST2LNdAsm_I16:
  case ARM::VST2LNdAsm_I32:
  case ARM::VST2LNdAsm_I8:
  case ARM::VST2LNdAsm_P8:
  case ARM::VST2LNdAsm_S16:
  case ARM::VST2LNdAsm_S32:
  case ARM::VST2LNdAsm_S8:
  case ARM::VST2LNdAsm_U16:
  case ARM::VST2LNdAsm_U32:
  case ARM::VST2LNdAsm_U8:
  case ARM::VST2LNqAsm_I16:
  case ARM::VST2LNqAsm_I32:
  case ARM::VST2LNqAsm_S16:
  case ARM::VST2LNqAsm_S32:
  case ARM::VST2LNqAsm_U16:
  case ARM::VST2LNqAsm_U32:
  case ARM::t2B:
  case ARM::t2BXJ:
  case ARM::t2Bcc:
  case ARM::t2CPS2p:
  case ARM::t2DBG:
  case ARM::t2RFEDB:
  case ARM::t2RFEIA:
  case ARM::t2SMC:
  case ARM::tB:
  case ARM::tBL:
  case ARM::tBLXi:
  case ARM::tBLXr:
  case ARM::tBX:
  case ARM::tBcc:
  case ARM::tCPS:
  case ARM::tSVC:
    return;
    break;
  case ARM::CDP:
  case ARM::MCR:
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::CDP: printCImmediate(MI, 2, O); break;
    case ARM::MCR: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::FCONSTD:
  case ARM::FCONSTS:
  case ARM::LDC2L_OPTION:
  case ARM::LDC2L_POST:
  case ARM::LDC2L_PRE:
  case ARM::LDC2_OPTION:
  case ARM::LDC2_POST:
  case ARM::LDC2_PRE:
  case ARM::MRS:
  case ARM::MRSsys:
  case ARM::STC2L_OPTION:
  case ARM::STC2L_POST:
  case ARM::STC2L_PRE:
  case ARM::STC2_OPTION:
  case ARM::STC2_POST:
  case ARM::STC2_PRE:
  case ARM::VABSD:
  case ARM::VABSS:
  case ARM::VABSfd:
  case ARM::VABSfq:
  case ARM::VCEQzv16i8:
  case ARM::VCEQzv2i32:
  case ARM::VCEQzv4i16:
  case ARM::VCEQzv4i32:
  case ARM::VCEQzv8i16:
  case ARM::VCEQzv8i8:
  case ARM::VCGEzv16i8:
  case ARM::VCGEzv2i32:
  case ARM::VCGEzv4i16:
  case ARM::VCGEzv4i32:
  case ARM::VCGEzv8i16:
  case ARM::VCGEzv8i8:
  case ARM::VCGTzv16i8:
  case ARM::VCGTzv2i32:
  case ARM::VCGTzv4i16:
  case ARM::VCGTzv4i32:
  case ARM::VCGTzv8i16:
  case ARM::VCGTzv8i8:
  case ARM::VCLEzv16i8:
  case ARM::VCLEzv2i32:
  case ARM::VCLEzv4i16:
  case ARM::VCLEzv4i32:
  case ARM::VCLEzv8i16:
  case ARM::VCLEzv8i8:
  case ARM::VCLTzv16i8:
  case ARM::VCLTzv2i32:
  case ARM::VCLTzv4i16:
  case ARM::VCLTzv4i32:
  case ARM::VCLTzv8i16:
  case ARM::VCLTzv8i8:
  case ARM::VCMPD:
  case ARM::VCMPED:
  case ARM::VCMPES:
  case ARM::VCMPS:
  case ARM::VCVTf2xsd:
  case ARM::VCVTf2xsq:
  case ARM::VCVTf2xud:
  case ARM::VCVTf2xuq:
  case ARM::VCVTxs2fd:
  case ARM::VCVTxs2fq:
  case ARM::VCVTxu2fd:
  case ARM::VCVTxu2fq:
  case ARM::VGETLNs16:
  case ARM::VGETLNs8:
  case ARM::VGETLNu16:
  case ARM::VGETLNu8:
  case ARM::VLD1DUPd16:
  case ARM::VLD1DUPd32:
  case ARM::VLD1DUPd8:
  case ARM::VLD1DUPq16:
  case ARM::VLD1DUPq32:
  case ARM::VLD1DUPq8:
  case ARM::VLD1LNdAsm_F32:
  case ARM::VLD1LNdWB_fixed_Asm_I16:
  case ARM::VLD1LNdWB_fixed_Asm_I32:
  case ARM::VLD1LNdWB_fixed_Asm_I8:
  case ARM::VLD1LNdWB_fixed_Asm_P8:
  case ARM::VLD1LNdWB_fixed_Asm_S16:
  case ARM::VLD1LNdWB_fixed_Asm_S32:
  case ARM::VLD1LNdWB_fixed_Asm_S8:
  case ARM::VLD1LNdWB_fixed_Asm_U16:
  case ARM::VLD1LNdWB_fixed_Asm_U32:
  case ARM::VLD1LNdWB_fixed_Asm_U8:
  case ARM::VLD1LNdWB_register_Asm_F:
  case ARM::VLD1LNdWB_register_Asm_P16:
  case ARM::VLD1d16:
  case ARM::VLD1d16Q:
  case ARM::VLD1d16T:
  case ARM::VLD1d32:
  case ARM::VLD1d32Q:
  case ARM::VLD1d32T:
  case ARM::VLD1d64:
  case ARM::VLD1d64Q:
  case ARM::VLD1d64T:
  case ARM::VLD1d8:
  case ARM::VLD1d8Q:
  case ARM::VLD1d8T:
  case ARM::VLD1q16:
  case ARM::VLD1q32:
  case ARM::VLD1q64:
  case ARM::VLD1q8:
  case ARM::VLD2DUPd16:
  case ARM::VLD2DUPd16x2:
  case ARM::VLD2DUPd32:
  case ARM::VLD2DUPd32x2:
  case ARM::VLD2DUPd8:
  case ARM::VLD2DUPd8x2:
  case ARM::VLD2LNdAsm_F32:
  case ARM::VLD2LNdWB_fixed_Asm_I16:
  case ARM::VLD2LNdWB_fixed_Asm_I32:
  case ARM::VLD2LNdWB_fixed_Asm_I8:
  case ARM::VLD2LNdWB_fixed_Asm_P8:
  case ARM::VLD2LNdWB_fixed_Asm_S16:
  case ARM::VLD2LNdWB_fixed_Asm_S32:
  case ARM::VLD2LNdWB_fixed_Asm_S8:
  case ARM::VLD2LNdWB_fixed_Asm_U16:
  case ARM::VLD2LNdWB_fixed_Asm_U32:
  case ARM::VLD2LNdWB_fixed_Asm_U8:
  case ARM::VLD2LNdWB_register_Asm_F:
  case ARM::VLD2LNdWB_register_Asm_P16:
  case ARM::VLD2LNqAsm_F32:
  case ARM::VLD2LNqWB_fixed_Asm_I16:
  case ARM::VLD2LNqWB_fixed_Asm_I32:
  case ARM::VLD2LNqWB_fixed_Asm_S16:
  case ARM::VLD2LNqWB_fixed_Asm_S32:
  case ARM::VLD2LNqWB_fixed_Asm_U16:
  case ARM::VLD2LNqWB_fixed_Asm_U32:
  case ARM::VLD2LNqWB_register_Asm_F:
  case ARM::VLD2LNqWB_register_Asm_P16:
  case ARM::VLD2b16:
  case ARM::VLD2b32:
  case ARM::VLD2b8:
  case ARM::VLD2d16:
  case ARM::VLD2d32:
  case ARM::VLD2d8:
  case ARM::VLD2q16:
  case ARM::VLD2q32:
  case ARM::VLD2q8:
  case ARM::VMOVD:
  case ARM::VMOVS:
  case ARM::VMOVv2f32:
  case ARM::VMOVv4f32:
  case ARM::VMRS:
  case ARM::VMRS_FPEXC:
  case ARM::VMRS_FPSID:
  case ARM::VNEGD:
  case ARM::VNEGS:
  case ARM::VNEGf32q:
  case ARM::VNEGfd:
  case ARM::VRECPEfd:
  case ARM::VRECPEfq:
  case ARM::VRSQRTEfd:
  case ARM::VRSQRTEfq:
  case ARM::VSLTOD:
  case ARM::VSLTOS:
  case ARM::VSQRTD:
  case ARM::VSQRTS:
  case ARM::VST1LNdAsm_F32:
  case ARM::VST1LNdWB_fixed_Asm_I16:
  case ARM::VST1LNdWB_fixed_Asm_I32:
  case ARM::VST1LNdWB_fixed_Asm_I8:
  case ARM::VST1LNdWB_fixed_Asm_P8:
  case ARM::VST1LNdWB_fixed_Asm_S16:
  case ARM::VST1LNdWB_fixed_Asm_S32:
  case ARM::VST1LNdWB_fixed_Asm_S8:
  case ARM::VST1LNdWB_fixed_Asm_U16:
  case ARM::VST1LNdWB_fixed_Asm_U32:
  case ARM::VST1LNdWB_fixed_Asm_U8:
  case ARM::VST1LNdWB_register_Asm_F:
  case ARM::VST1LNdWB_register_Asm_P16:
  case ARM::VST2LNdAsm_F32:
  case ARM::VST2LNdWB_fixed_Asm_I16:
  case ARM::VST2LNdWB_fixed_Asm_I32:
  case ARM::VST2LNdWB_fixed_Asm_I8:
  case ARM::VST2LNdWB_fixed_Asm_P8:
  case ARM::VST2LNdWB_fixed_Asm_S16:
  case ARM::VST2LNdWB_fixed_Asm_S32:
  case ARM::VST2LNdWB_fixed_Asm_S8:
  case ARM::VST2LNdWB_fixed_Asm_U16:
  case ARM::VST2LNdWB_fixed_Asm_U32:
  case ARM::VST2LNdWB_fixed_Asm_U8:
  case ARM::VST2LNdWB_register_Asm_F:
  case ARM::VST2LNdWB_register_Asm_P16:
  case ARM::VST2LNqAsm_F32:
  case ARM::VST2LNqWB_fixed_Asm_I16:
  case ARM::VST2LNqWB_fixed_Asm_I32:
  case ARM::VST2LNqWB_fixed_Asm_S16:
  case ARM::VST2LNqWB_fixed_Asm_S32:
  case ARM::VST2LNqWB_fixed_Asm_U16:
  case ARM::VST2LNqWB_fixed_Asm_U32:
  case ARM::VST2LNqWB_register_Asm_F:
  case ARM::VST2LNqWB_register_Asm_P16:
  case ARM::VTOSLD:
  case ARM::VTOSLS:
  case ARM::VTOULD:
  case ARM::VTOULS:
  case ARM::VULTOD:
  case ARM::VULTOS:
  case ARM::t2MRS_AR:
  case ARM::t2MRSsys_AR:
  case ARM::t2RFEDBW:
  case ARM::t2RFEIAW:
    switch (MI->getOpcode()) {
    case ARM::FCONSTD: 
    case ARM::FCONSTS: 
    case ARM::VMOVv2f32: 
    case ARM::VMOVv4f32: printFPImmOperand(MI, 1, O); break;
    case ARM::LDC2L_OPTION: 
    case ARM::LDC2_OPTION: 
    case ARM::STC2L_OPTION: 
    case ARM::STC2_OPTION: printCoprocOptionImm(MI, 3, O); break;
    case ARM::LDC2L_POST: 
    case ARM::LDC2_POST: 
    case ARM::STC2L_POST: 
    case ARM::STC2_POST: printPostIdxImm8s4Operand(MI, 3, O); break;
    case ARM::LDC2L_PRE: 
    case ARM::LDC2_PRE: 
    case ARM::STC2L_PRE: 
    case ARM::STC2_PRE: 
    case ARM::VLD1LNdWB_fixed_Asm_I16: 
    case ARM::VLD1LNdWB_fixed_Asm_I32: 
    case ARM::VLD1LNdWB_fixed_Asm_I8: 
    case ARM::VLD1LNdWB_fixed_Asm_P8: 
    case ARM::VLD1LNdWB_fixed_Asm_S16: 
    case ARM::VLD1LNdWB_fixed_Asm_S32: 
    case ARM::VLD1LNdWB_fixed_Asm_S8: 
    case ARM::VLD1LNdWB_fixed_Asm_U16: 
    case ARM::VLD1LNdWB_fixed_Asm_U32: 
    case ARM::VLD1LNdWB_fixed_Asm_U8: 
    case ARM::VLD2LNdWB_fixed_Asm_I16: 
    case ARM::VLD2LNdWB_fixed_Asm_I32: 
    case ARM::VLD2LNdWB_fixed_Asm_I8: 
    case ARM::VLD2LNdWB_fixed_Asm_P8: 
    case ARM::VLD2LNdWB_fixed_Asm_S16: 
    case ARM::VLD2LNdWB_fixed_Asm_S32: 
    case ARM::VLD2LNdWB_fixed_Asm_S8: 
    case ARM::VLD2LNdWB_fixed_Asm_U16: 
    case ARM::VLD2LNdWB_fixed_Asm_U32: 
    case ARM::VLD2LNdWB_fixed_Asm_U8: 
    case ARM::VLD2LNqWB_fixed_Asm_I16: 
    case ARM::VLD2LNqWB_fixed_Asm_I32: 
    case ARM::VLD2LNqWB_fixed_Asm_S16: 
    case ARM::VLD2LNqWB_fixed_Asm_S32: 
    case ARM::VLD2LNqWB_fixed_Asm_U16: 
    case ARM::VLD2LNqWB_fixed_Asm_U32: 
    case ARM::VST1LNdWB_fixed_Asm_I16: 
    case ARM::VST1LNdWB_fixed_Asm_I32: 
    case ARM::VST1LNdWB_fixed_Asm_I8: 
    case ARM::VST1LNdWB_fixed_Asm_P8: 
    case ARM::VST1LNdWB_fixed_Asm_S16: 
    case ARM::VST1LNdWB_fixed_Asm_S32: 
    case ARM::VST1LNdWB_fixed_Asm_S8: 
    case ARM::VST1LNdWB_fixed_Asm_U16: 
    case ARM::VST1LNdWB_fixed_Asm_U32: 
    case ARM::VST1LNdWB_fixed_Asm_U8: 
    case ARM::VST2LNdWB_fixed_Asm_I16: 
    case ARM::VST2LNdWB_fixed_Asm_I32: 
    case ARM::VST2LNdWB_fixed_Asm_I8: 
    case ARM::VST2LNdWB_fixed_Asm_P8: 
    case ARM::VST2LNdWB_fixed_Asm_S16: 
    case ARM::VST2LNdWB_fixed_Asm_S32: 
    case ARM::VST2LNdWB_fixed_Asm_S8: 
    case ARM::VST2LNdWB_fixed_Asm_U16: 
    case ARM::VST2LNdWB_fixed_Asm_U32: 
    case ARM::VST2LNdWB_fixed_Asm_U8: 
    case ARM::VST2LNqWB_fixed_Asm_I16: 
    case ARM::VST2LNqWB_fixed_Asm_I32: 
    case ARM::VST2LNqWB_fixed_Asm_S16: 
    case ARM::VST2LNqWB_fixed_Asm_S32: 
    case ARM::VST2LNqWB_fixed_Asm_U16: 
    case ARM::VST2LNqWB_fixed_Asm_U32: 
    case ARM::t2RFEDBW: 
    case ARM::t2RFEIAW: O << '!'; break;
    case ARM::MRS: 
    case ARM::t2MRS_AR: O << ", apsr"; break;
    case ARM::MRSsys: 
    case ARM::t2MRSsys_AR: O << ", spsr"; break;
    case ARM::VABSD: 
    case ARM::VABSS: 
    case ARM::VABSfd: 
    case ARM::VABSfq: 
    case ARM::VCMPD: 
    case ARM::VCMPED: 
    case ARM::VCMPES: 
    case ARM::VCMPS: 
    case ARM::VMOVD: 
    case ARM::VMOVS: 
    case ARM::VNEGD: 
    case ARM::VNEGS: 
    case ARM::VNEGf32q: 
    case ARM::VNEGfd: 
    case ARM::VRECPEfd: 
    case ARM::VRECPEfq: 
    case ARM::VRSQRTEfd: 
    case ARM::VRSQRTEfq: 
    case ARM::VSQRTD: 
    case ARM::VSQRTS: printOperand(MI, 1, O); break;
    case ARM::VCEQzv16i8: 
    case ARM::VCEQzv2i32: 
    case ARM::VCEQzv4i16: 
    case ARM::VCEQzv4i32: 
    case ARM::VCEQzv8i16: 
    case ARM::VCEQzv8i8: 
    case ARM::VCGEzv16i8: 
    case ARM::VCGEzv2i32: 
    case ARM::VCGEzv4i16: 
    case ARM::VCGEzv4i32: 
    case ARM::VCGEzv8i16: 
    case ARM::VCGEzv8i8: 
    case ARM::VCGTzv16i8: 
    case ARM::VCGTzv2i32: 
    case ARM::VCGTzv4i16: 
    case ARM::VCGTzv4i32: 
    case ARM::VCGTzv8i16: 
    case ARM::VCGTzv8i8: 
    case ARM::VCLEzv16i8: 
    case ARM::VCLEzv2i32: 
    case ARM::VCLEzv4i16: 
    case ARM::VCLEzv4i32: 
    case ARM::VCLEzv8i16: 
    case ARM::VCLEzv8i8: 
    case ARM::VCLTzv16i8: 
    case ARM::VCLTzv2i32: 
    case ARM::VCLTzv4i16: 
    case ARM::VCLTzv4i32: 
    case ARM::VCLTzv8i16: 
    case ARM::VCLTzv8i8: O << ", #0"; break;
    case ARM::VCVTf2xsd: 
    case ARM::VCVTf2xsq: 
    case ARM::VCVTf2xud: 
    case ARM::VCVTf2xuq: 
    case ARM::VCVTxs2fd: 
    case ARM::VCVTxs2fq: 
    case ARM::VCVTxu2fd: 
    case ARM::VCVTxu2fq: printOperand(MI, 2, O); break;
    case ARM::VGETLNs16: 
    case ARM::VGETLNs8: 
    case ARM::VGETLNu16: 
    case ARM::VGETLNu8: printVectorIndex(MI, 2, O); break;
    case ARM::VLD1DUPd16: 
    case ARM::VLD1DUPd32: 
    case ARM::VLD1DUPd8: 
    case ARM::VLD1DUPq16: 
    case ARM::VLD1DUPq32: 
    case ARM::VLD1DUPq8: 
    case ARM::VLD1d16: 
    case ARM::VLD1d16Q: 
    case ARM::VLD1d16T: 
    case ARM::VLD1d32: 
    case ARM::VLD1d32Q: 
    case ARM::VLD1d32T: 
    case ARM::VLD1d64: 
    case ARM::VLD1d64Q: 
    case ARM::VLD1d64T: 
    case ARM::VLD1d8: 
    case ARM::VLD1d8Q: 
    case ARM::VLD1d8T: 
    case ARM::VLD1q16: 
    case ARM::VLD1q32: 
    case ARM::VLD1q64: 
    case ARM::VLD1q8: 
    case ARM::VLD2DUPd16: 
    case ARM::VLD2DUPd16x2: 
    case ARM::VLD2DUPd32: 
    case ARM::VLD2DUPd32x2: 
    case ARM::VLD2DUPd8: 
    case ARM::VLD2DUPd8x2: 
    case ARM::VLD2b16: 
    case ARM::VLD2b32: 
    case ARM::VLD2b8: 
    case ARM::VLD2d16: 
    case ARM::VLD2d32: 
    case ARM::VLD2d8: 
    case ARM::VLD2q16: 
    case ARM::VLD2q32: 
    case ARM::VLD2q8: printAddrMode6Operand(MI, 1, O); break;
    case ARM::VLD1LNdAsm_F32: 
    case ARM::VLD2LNdAsm_F32: 
    case ARM::VLD2LNqAsm_F32: 
    case ARM::VST1LNdAsm_F32: 
    case ARM::VST2LNdAsm_F32: 
    case ARM::VST2LNqAsm_F32: printAddrMode6Operand(MI, 2, O); break;
    case ARM::VLD1LNdWB_register_Asm_F: 
    case ARM::VLD1LNdWB_register_Asm_P16: 
    case ARM::VLD2LNdWB_register_Asm_F: 
    case ARM::VLD2LNdWB_register_Asm_P16: 
    case ARM::VLD2LNqWB_register_Asm_F: 
    case ARM::VLD2LNqWB_register_Asm_P16: 
    case ARM::VST1LNdWB_register_Asm_F: 
    case ARM::VST1LNdWB_register_Asm_P16: 
    case ARM::VST2LNdWB_register_Asm_F: 
    case ARM::VST2LNdWB_register_Asm_P16: 
    case ARM::VST2LNqWB_register_Asm_F: 
    case ARM::VST2LNqWB_register_Asm_P16: printOperand(MI, 4, O); break;
    case ARM::VMRS: O << ", fpscr"; break;
    case ARM::VMRS_FPEXC: O << ", fpexc"; break;
    case ARM::VMRS_FPSID: O << ", fpsid"; break;
    case ARM::VSLTOD: 
    case ARM::VSLTOS: 
    case ARM::VTOSLD: 
    case ARM::VTOSLS: 
    case ARM::VTOULD: 
    case ARM::VTOULS: 
    case ARM::VULTOD: 
    case ARM::VULTOS: printFBits32(MI, 2, O); break;
    }
    return;
    break;
  case ARM::LDCL_OFFSET:
  case ARM::LDC_OFFSET:
  case ARM::STCL_OFFSET:
  case ARM::STC_OFFSET:
  case ARM::t2LDC2L_OFFSET:
  case ARM::t2LDC2_OFFSET:
  case ARM::t2LDCL_OFFSET:
  case ARM::t2LDC_OFFSET:
  case ARM::t2STC2L_OFFSET:
  case ARM::t2STC2_OFFSET:
  case ARM::t2STCL_OFFSET:
  case ARM::t2STC_OFFSET:
    printCImmediate(MI, 1, O); 
    O << ", "; 
    printAddrMode5Operand(MI, 2, O); 
    return;
    break;
  case ARM::LDCL_OPTION:
  case ARM::LDCL_POST:
  case ARM::LDC_OPTION:
  case ARM::LDC_POST:
  case ARM::STCL_OPTION:
  case ARM::STCL_POST:
  case ARM::STC_OPTION:
  case ARM::STC_POST:
  case ARM::t2LDC2L_OPTION:
  case ARM::t2LDC2L_POST:
  case ARM::t2LDC2_OPTION:
  case ARM::t2LDC2_POST:
  case ARM::t2LDCL_OPTION:
  case ARM::t2LDCL_POST:
  case ARM::t2LDC_OPTION:
  case ARM::t2LDC_POST:
  case ARM::t2STC2L_OPTION:
  case ARM::t2STC2L_POST:
  case ARM::t2STC2_OPTION:
  case ARM::t2STC2_POST:
  case ARM::t2STCL_OPTION:
  case ARM::t2STCL_POST:
  case ARM::t2STC_OPTION:
  case ARM::t2STC_POST:
    printCImmediate(MI, 1, O); 
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDCL_OPTION: 
    case ARM::LDC_OPTION: 
    case ARM::STCL_OPTION: 
    case ARM::STC_OPTION: 
    case ARM::t2LDC2L_OPTION: 
    case ARM::t2LDC2_OPTION: 
    case ARM::t2LDCL_OPTION: 
    case ARM::t2LDC_OPTION: 
    case ARM::t2STC2L_OPTION: 
    case ARM::t2STC2_OPTION: 
    case ARM::t2STCL_OPTION: 
    case ARM::t2STC_OPTION: printCoprocOptionImm(MI, 3, O); break;
    case ARM::LDCL_POST: 
    case ARM::LDC_POST: 
    case ARM::STCL_POST: 
    case ARM::STC_POST: 
    case ARM::t2LDC2L_POST: 
    case ARM::t2LDC2_POST: 
    case ARM::t2LDCL_POST: 
    case ARM::t2LDC_POST: 
    case ARM::t2STC2L_POST: 
    case ARM::t2STC2_POST: 
    case ARM::t2STCL_POST: 
    case ARM::t2STC_POST: printPostIdxImm8s4Operand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::LDCL_PRE:
  case ARM::LDC_PRE:
  case ARM::STCL_PRE:
  case ARM::STC_PRE:
  case ARM::t2LDC2L_PRE:
  case ARM::t2LDC2_PRE:
  case ARM::t2LDCL_PRE:
  case ARM::t2LDC_PRE:
  case ARM::t2STC2L_PRE:
  case ARM::t2STC2_PRE:
  case ARM::t2STCL_PRE:
  case ARM::t2STC_PRE:
    printCImmediate(MI, 1, O); 
    O << ", "; 
    printAddrMode5Operand(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case ARM::LDMDA_UPD:
  case ARM::LDMDB_UPD:
  case ARM::LDMIA_UPD:
  case ARM::LDMIB_UPD:
  case ARM::STMDA_UPD:
  case ARM::STMDB_UPD:
  case ARM::STMIA_UPD:
  case ARM::STMIB_UPD:
  case ARM::VLDMDDB_UPD:
  case ARM::VLDMDIA_UPD:
  case ARM::VLDMSDB_UPD:
  case ARM::VLDMSIA_UPD:
  case ARM::VSTMDDB_UPD:
  case ARM::VSTMDIA_UPD:
  case ARM::VSTMSDB_UPD:
  case ARM::VSTMSIA_UPD:
  case ARM::t2LDMDB_UPD:
  case ARM::t2LDMIA_UPD:
  case ARM::t2STMDB_UPD:
  case ARM::t2STMIA_UPD:
  case ARM::tSTMIA_UPD:
    O << "!, "; 
    printRegisterList(MI, 4, O); 
    return;
    break;
  case ARM::LDRBT_POST_IMM:
  case ARM::LDRBT_POST_REG:
  case ARM::LDRB_POST_IMM:
  case ARM::LDRB_POST_REG:
  case ARM::LDRHTi:
  case ARM::LDRHTr:
  case ARM::LDRH_POST:
  case ARM::LDRSBTi:
  case ARM::LDRSBTr:
  case ARM::LDRSB_POST:
  case ARM::LDRSHTi:
  case ARM::LDRSHTr:
  case ARM::LDRSH_POST:
  case ARM::LDRT_POST_IMM:
  case ARM::LDRT_POST_REG:
  case ARM::LDR_POST_IMM:
  case ARM::LDR_POST_REG:
  case ARM::STRBT_POST_IMM:
  case ARM::STRBT_POST_REG:
  case ARM::STRB_POST_IMM:
  case ARM::STRB_POST_REG:
  case ARM::STRHTi:
  case ARM::STRHTr:
  case ARM::STRH_POST:
  case ARM::STRT_POST_IMM:
  case ARM::STRT_POST_REG:
  case ARM::STR_POST_IMM:
  case ARM::STR_POST_REG:
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRBT_POST_IMM: 
    case ARM::LDRBT_POST_REG: 
    case ARM::LDRB_POST_IMM: 
    case ARM::LDRB_POST_REG: 
    case ARM::LDRT_POST_IMM: 
    case ARM::LDRT_POST_REG: 
    case ARM::LDR_POST_IMM: 
    case ARM::LDR_POST_REG: 
    case ARM::STRBT_POST_IMM: 
    case ARM::STRBT_POST_REG: 
    case ARM::STRB_POST_IMM: 
    case ARM::STRB_POST_REG: 
    case ARM::STRT_POST_IMM: 
    case ARM::STRT_POST_REG: 
    case ARM::STR_POST_IMM: 
    case ARM::STR_POST_REG: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::LDRHTi: 
    case ARM::LDRSBTi: 
    case ARM::LDRSHTi: 
    case ARM::STRHTi: printPostIdxImm8Operand(MI, 3, O); break;
    case ARM::LDRHTr: 
    case ARM::LDRSBTr: 
    case ARM::LDRSHTr: 
    case ARM::STRHTr: printPostIdxRegOperand(MI, 3, O); break;
    case ARM::LDRH_POST: 
    case ARM::LDRSB_POST: 
    case ARM::LDRSH_POST: 
    case ARM::STRH_POST: printAddrMode3OffsetOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::LDRB_PRE_IMM:
  case ARM::LDRB_PRE_REG:
  case ARM::LDRH_PRE:
  case ARM::LDRSB_PRE:
  case ARM::LDRSH_PRE:
  case ARM::LDR_PRE_IMM:
  case ARM::LDR_PRE_REG:
  case ARM::STRB_PRE_IMM:
  case ARM::STRB_PRE_REG:
  case ARM::STRH_PRE:
  case ARM::STR_PRE_IMM:
  case ARM::STR_PRE_REG:
  case ARM::VLD1LNdWB_fixed_Asm_16:
  case ARM::VLD1LNdWB_fixed_Asm_32:
  case ARM::VLD1LNdWB_fixed_Asm_8:
  case ARM::VLD2LNdWB_fixed_Asm_16:
  case ARM::VLD2LNdWB_fixed_Asm_32:
  case ARM::VLD2LNdWB_fixed_Asm_8:
  case ARM::VLD2LNqWB_fixed_Asm_16:
  case ARM::VLD2LNqWB_fixed_Asm_32:
  case ARM::VST1LNdWB_fixed_Asm_16:
  case ARM::VST1LNdWB_fixed_Asm_32:
  case ARM::VST1LNdWB_fixed_Asm_8:
  case ARM::VST2LNdWB_fixed_Asm_16:
  case ARM::VST2LNdWB_fixed_Asm_32:
  case ARM::VST2LNdWB_fixed_Asm_8:
  case ARM::VST2LNqWB_fixed_Asm_16:
  case ARM::VST2LNqWB_fixed_Asm_32:
  case ARM::t2LDRB_PRE:
  case ARM::t2LDRH_PRE:
  case ARM::t2LDRSB_PRE:
  case ARM::t2LDRSH_PRE:
  case ARM::t2LDR_PRE:
  case ARM::t2STRB_PRE:
  case ARM::t2STRH_PRE:
  case ARM::t2STR_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_PRE_IMM: 
    case ARM::LDR_PRE_IMM: 
    case ARM::STRB_PRE_IMM: 
    case ARM::STR_PRE_IMM: printAddrModeImm12Operand(MI, 2, O); break;
    case ARM::LDRB_PRE_REG: 
    case ARM::LDR_PRE_REG: 
    case ARM::STRB_PRE_REG: 
    case ARM::STR_PRE_REG: printAddrMode2Operand(MI, 2, O); break;
    case ARM::LDRH_PRE: 
    case ARM::LDRSB_PRE: 
    case ARM::LDRSH_PRE: 
    case ARM::STRH_PRE: printAddrMode3Operand(MI, 2, O); break;
    case ARM::VLD1LNdWB_fixed_Asm_16: 
    case ARM::VLD1LNdWB_fixed_Asm_32: 
    case ARM::VLD1LNdWB_fixed_Asm_8: 
    case ARM::VLD2LNdWB_fixed_Asm_16: 
    case ARM::VLD2LNdWB_fixed_Asm_32: 
    case ARM::VLD2LNdWB_fixed_Asm_8: 
    case ARM::VLD2LNqWB_fixed_Asm_16: 
    case ARM::VLD2LNqWB_fixed_Asm_32: 
    case ARM::VST1LNdWB_fixed_Asm_16: 
    case ARM::VST1LNdWB_fixed_Asm_32: 
    case ARM::VST1LNdWB_fixed_Asm_8: 
    case ARM::VST2LNdWB_fixed_Asm_16: 
    case ARM::VST2LNdWB_fixed_Asm_32: 
    case ARM::VST2LNdWB_fixed_Asm_8: 
    case ARM::VST2LNqWB_fixed_Asm_16: 
    case ARM::VST2LNqWB_fixed_Asm_32: printAddrMode6Operand(MI, 2, O); break;
    case ARM::t2LDRB_PRE: 
    case ARM::t2LDRH_PRE: 
    case ARM::t2LDRSB_PRE: 
    case ARM::t2LDRSH_PRE: 
    case ARM::t2LDR_PRE: 
    case ARM::t2STRB_PRE: 
    case ARM::t2STRH_PRE: 
    case ARM::t2STR_PRE: printT2AddrModeImm8Operand(MI, 2, O); break;
    }
    O << '!'; 
    return;
    break;
  case ARM::LDRD_POST:
  case ARM::STRD_POST:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRD_POST: printOperand(MI, 1, O); break;
    case ARM::STRD_POST: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode7Operand(MI, 3, O); 
    O << ", "; 
    printAddrMode3OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::LDRD_PRE:
  case ARM::STRD_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRD_PRE: printOperand(MI, 1, O); break;
    case ARM::STRD_PRE: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode3Operand(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case ARM::MCR2:
  case ARM::t2MCR:
  case ARM::t2MCR2:
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::MCRR:
  case ARM::MRRC:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MCRR2:
  case ARM::MRRC2:
  case ARM::t2MCRR:
  case ARM::t2MCRR2:
  case ARM::t2MRRC:
  case ARM::t2MRRC2:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MLA:
  case ARM::MLS:
  case ARM::SBFX:
  case ARM::SMLABB:
  case ARM::SMLABT:
  case ARM::SMLAD:
  case ARM::SMLADX:
  case ARM::SMLAL:
  case ARM::SMLALBB:
  case ARM::SMLALBT:
  case ARM::SMLALD:
  case ARM::SMLALDX:
  case ARM::SMLALTB:
  case ARM::SMLALTT:
  case ARM::SMLATB:
  case ARM::SMLATT:
  case ARM::SMLAWB:
  case ARM::SMLAWT:
  case ARM::SMLSD:
  case ARM::SMLSDX:
  case ARM::SMLSLD:
  case ARM::SMLSLDX:
  case ARM::SMMLA:
  case ARM::SMMLAR:
  case ARM::SMMLS:
  case ARM::SMMLSR:
  case ARM::SMULL:
  case ARM::STREXD:
  case ARM::UBFX:
  case ARM::UMAAL:
  case ARM::UMLAL:
  case ARM::UMULL:
  case ARM::USADA8:
  case ARM::VEXTd16:
  case ARM::VEXTd32:
  case ARM::VEXTd8:
  case ARM::VEXTq16:
  case ARM::VEXTq32:
  case ARM::VEXTq64:
  case ARM::VEXTq8:
  case ARM::VMOVRRS:
  case ARM::VMOVSRR:
  case ARM::t2MLA:
  case ARM::t2MLS:
  case ARM::t2SBFX:
  case ARM::t2SMLABB:
  case ARM::t2SMLABT:
  case ARM::t2SMLAD:
  case ARM::t2SMLADX:
  case ARM::t2SMLAL:
  case ARM::t2SMLALBB:
  case ARM::t2SMLALBT:
  case ARM::t2SMLALD:
  case ARM::t2SMLALDX:
  case ARM::t2SMLALTB:
  case ARM::t2SMLALTT:
  case ARM::t2SMLATB:
  case ARM::t2SMLATT:
  case ARM::t2SMLAWB:
  case ARM::t2SMLAWT:
  case ARM::t2SMLSD:
  case ARM::t2SMLSDX:
  case ARM::t2SMLSLD:
  case ARM::t2SMMLA:
  case ARM::t2SMMLAR:
  case ARM::t2SMMLS:
  case ARM::t2SMMLSR:
  case ARM::t2SMULL:
  case ARM::t2STREXD:
  case ARM::t2UBFX:
  case ARM::t2UMAAL:
  case ARM::t2UMLAL:
  case ARM::t2UMULL:
  case ARM::t2USADA8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::MLA: 
    case ARM::MLS: 
    case ARM::SMLABB: 
    case ARM::SMLABT: 
    case ARM::SMLAD: 
    case ARM::SMLADX: 
    case ARM::SMLAL: 
    case ARM::SMLALBB: 
    case ARM::SMLALBT: 
    case ARM::SMLALD: 
    case ARM::SMLALDX: 
    case ARM::SMLALTB: 
    case ARM::SMLALTT: 
    case ARM::SMLATB: 
    case ARM::SMLATT: 
    case ARM::SMLAWB: 
    case ARM::SMLAWT: 
    case ARM::SMLSD: 
    case ARM::SMLSDX: 
    case ARM::SMLSLD: 
    case ARM::SMLSLDX: 
    case ARM::SMMLA: 
    case ARM::SMMLAR: 
    case ARM::SMMLS: 
    case ARM::SMMLSR: 
    case ARM::SMULL: 
    case ARM::UMAAL: 
    case ARM::UMLAL: 
    case ARM::UMULL: 
    case ARM::USADA8: 
    case ARM::VEXTd16: 
    case ARM::VEXTd32: 
    case ARM::VEXTd8: 
    case ARM::VEXTq16: 
    case ARM::VEXTq32: 
    case ARM::VEXTq64: 
    case ARM::VEXTq8: 
    case ARM::VMOVRRS: 
    case ARM::VMOVSRR: 
    case ARM::t2MLA: 
    case ARM::t2MLS: 
    case ARM::t2SMLABB: 
    case ARM::t2SMLABT: 
    case ARM::t2SMLAD: 
    case ARM::t2SMLADX: 
    case ARM::t2SMLAL: 
    case ARM::t2SMLALBB: 
    case ARM::t2SMLALBT: 
    case ARM::t2SMLALD: 
    case ARM::t2SMLALDX: 
    case ARM::t2SMLALTB: 
    case ARM::t2SMLALTT: 
    case ARM::t2SMLATB: 
    case ARM::t2SMLATT: 
    case ARM::t2SMLAWB: 
    case ARM::t2SMLAWT: 
    case ARM::t2SMLSD: 
    case ARM::t2SMLSDX: 
    case ARM::t2SMLSLD: 
    case ARM::t2SMMLA: 
    case ARM::t2SMMLAR: 
    case ARM::t2SMMLS: 
    case ARM::t2SMMLSR: 
    case ARM::t2SMULL: 
    case ARM::t2UMAAL: 
    case ARM::t2UMLAL: 
    case ARM::t2UMULL: 
    case ARM::t2USADA8: printOperand(MI, 3, O); break;
    case ARM::SBFX: 
    case ARM::UBFX: 
    case ARM::t2SBFX: 
    case ARM::t2UBFX: printImmPlusOneOperand(MI, 3, O); break;
    case ARM::STREXD: 
    case ARM::t2STREXD: printAddrMode7Operand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::PKHBT:
  case ARM::PKHTB:
  case ARM::SXTAB:
  case ARM::SXTAB16:
  case ARM::SXTAH:
  case ARM::USAT:
  case ARM::UXTAB:
  case ARM::UXTAB16:
  case ARM::UXTAH:
  case ARM::t2PKHBT:
  case ARM::t2PKHTB:
  case ARM::t2SXTAB:
  case ARM::t2SXTAB16:
  case ARM::t2SXTAH:
  case ARM::t2USAT:
  case ARM::t2UXTAB:
  case ARM::t2UXTAB16:
  case ARM::t2UXTAH:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::PKHBT: 
    case ARM::t2PKHBT: printPKHLSLShiftImm(MI, 3, O); break;
    case ARM::PKHTB: 
    case ARM::t2PKHTB: printPKHASRShiftImm(MI, 3, O); break;
    case ARM::SXTAB: 
    case ARM::SXTAB16: 
    case ARM::SXTAH: 
    case ARM::UXTAB: 
    case ARM::UXTAB16: 
    case ARM::UXTAH: 
    case ARM::t2SXTAB: 
    case ARM::t2SXTAB16: 
    case ARM::t2SXTAH: 
    case ARM::t2UXTAB: 
    case ARM::t2UXTAB16: 
    case ARM::t2UXTAH: printRotImmOperand(MI, 3, O); break;
    case ARM::USAT: 
    case ARM::t2USAT: printShiftImmOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::SSAT:
  case ARM::t2SSAT:
    O << ", "; 
    printImmPlusOneOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case ARM::SSAT16:
  case ARM::VTBL1:
  case ARM::VTBL2:
  case ARM::VTBL3:
  case ARM::VTBL4:
  case ARM::t2SSAT16:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::SSAT16: 
    case ARM::t2SSAT16: printImmPlusOneOperand(MI, 1, O); break;
    case ARM::VTBL1: printVectorListOne(MI, 1, O); break;
    case ARM::VTBL2: printVectorListTwo(MI, 1, O); break;
    case ARM::VTBL3: printVectorListThree(MI, 1, O); break;
    case ARM::VTBL4: printVectorListFour(MI, 1, O); break;
    }
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::SXTB:
  case ARM::SXTB16:
  case ARM::SXTH:
  case ARM::UXTB:
  case ARM::UXTB16:
  case ARM::UXTH:
  case ARM::VDUPLN16d:
  case ARM::VDUPLN16q:
  case ARM::VDUPLN32d:
  case ARM::VDUPLN32q:
  case ARM::VDUPLN8d:
  case ARM::VDUPLN8q:
  case ARM::VGETLNi32:
  case ARM::t2MOVsra_flag:
  case ARM::t2MOVsrl_flag:
  case ARM::t2SXTB:
  case ARM::t2SXTB16:
  case ARM::t2SXTH:
  case ARM::t2UXTB:
  case ARM::t2UXTB16:
  case ARM::t2UXTH:
    O << ", "; 
    printOperand(MI, 1, O); 
    switch (MI->getOpcode()) {
    case ARM::SXTB: 
    case ARM::SXTB16: 
    case ARM::SXTH: 
    case ARM::UXTB: 
    case ARM::UXTB16: 
    case ARM::UXTH: 
    case ARM::t2SXTB: 
    case ARM::t2SXTB16: 
    case ARM::t2SXTH: 
    case ARM::t2UXTB: 
    case ARM::t2UXTB16: 
    case ARM::t2UXTH: printRotImmOperand(MI, 2, O); break;
    case ARM::VDUPLN16d: 
    case ARM::VDUPLN16q: 
    case ARM::VDUPLN32d: 
    case ARM::VDUPLN32q: 
    case ARM::VDUPLN8d: 
    case ARM::VDUPLN8q: 
    case ARM::VGETLNi32: printVectorIndex(MI, 2, O); break;
    case ARM::t2MOVsra_flag: 
    case ARM::t2MOVsrl_flag: O << ", #1"; break;
    }
    return;
    break;
  case ARM::VABDfd:
  case ARM::VABDfq:
  case ARM::VACGEd:
  case ARM::VACGEq:
  case ARM::VACGTd:
  case ARM::VACGTq:
  case ARM::VADDD:
  case ARM::VADDS:
  case ARM::VADDfd:
  case ARM::VADDfq:
  case ARM::VCEQfd:
  case ARM::VCEQfq:
  case ARM::VCGEfd:
  case ARM::VCGEfq:
  case ARM::VCGTfd:
  case ARM::VCGTfq:
  case ARM::VDIVD:
  case ARM::VDIVS:
  case ARM::VMAXfd:
  case ARM::VMAXfq:
  case ARM::VMINfd:
  case ARM::VMINfq:
  case ARM::VMULD:
  case ARM::VMULS:
  case ARM::VMULfd:
  case ARM::VMULfq:
  case ARM::VNMULD:
  case ARM::VNMULS:
  case ARM::VPADDf:
  case ARM::VPMAXf:
  case ARM::VPMINf:
  case ARM::VRECPSfd:
  case ARM::VRECPSfq:
  case ARM::VRSQRTSfd:
  case ARM::VRSQRTSfq:
  case ARM::VSETLNi16:
  case ARM::VSETLNi32:
  case ARM::VSETLNi8:
  case ARM::VSUBD:
  case ARM::VSUBS:
  case ARM::VSUBfd:
  case ARM::VSUBfq:
    switch (MI->getOpcode()) {
    case ARM::VABDfd: 
    case ARM::VABDfq: 
    case ARM::VACGEd: 
    case ARM::VACGEq: 
    case ARM::VACGTd: 
    case ARM::VACGTq: 
    case ARM::VADDD: 
    case ARM::VADDS: 
    case ARM::VADDfd: 
    case ARM::VADDfq: 
    case ARM::VCEQfd: 
    case ARM::VCEQfq: 
    case ARM::VCGEfd: 
    case ARM::VCGEfq: 
    case ARM::VCGTfd: 
    case ARM::VCGTfq: 
    case ARM::VDIVD: 
    case ARM::VDIVS: 
    case ARM::VMAXfd: 
    case ARM::VMAXfq: 
    case ARM::VMINfd: 
    case ARM::VMINfq: 
    case ARM::VMULD: 
    case ARM::VMULS: 
    case ARM::VMULfd: 
    case ARM::VMULfq: 
    case ARM::VNMULD: 
    case ARM::VNMULS: 
    case ARM::VPADDf: 
    case ARM::VPMAXf: 
    case ARM::VPMINf: 
    case ARM::VRECPSfd: 
    case ARM::VRECPSfq: 
    case ARM::VRSQRTSfd: 
    case ARM::VRSQRTSfq: 
    case ARM::VSUBD: 
    case ARM::VSUBS: 
    case ARM::VSUBfd: 
    case ARM::VSUBfq: printOperand(MI, 1, O); break;
    case ARM::VSETLNi16: 
    case ARM::VSETLNi32: 
    case ARM::VSETLNi8: printVectorIndex(MI, 3, O); break;
    }
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VCEQzv2f32:
  case ARM::VCEQzv4f32:
  case ARM::VCGEzv2f32:
  case ARM::VCGEzv4f32:
  case ARM::VCGTzv2f32:
  case ARM::VCGTzv4f32:
  case ARM::VCLEzv2f32:
  case ARM::VCLEzv4f32:
  case ARM::VCLTzv2f32:
  case ARM::VCLTzv4f32:
    printOperand(MI, 1, O); 
    O << ", #0"; 
    return;
    break;
  case ARM::VFMAD:
  case ARM::VFMAS:
  case ARM::VFMAfd:
  case ARM::VFMAfq:
  case ARM::VFMSD:
  case ARM::VFMSS:
  case ARM::VFMSfd:
  case ARM::VFMSfq:
  case ARM::VFNMAD:
  case ARM::VFNMAS:
  case ARM::VFNMSD:
  case ARM::VFNMSS:
  case ARM::VMLAD:
  case ARM::VMLAS:
  case ARM::VMLAfd:
  case ARM::VMLAfq:
  case ARM::VMLSD:
  case ARM::VMLSS:
  case ARM::VMLSfd:
  case ARM::VMLSfq:
  case ARM::VNMLAD:
  case ARM::VNMLAS:
  case ARM::VNMLSD:
  case ARM::VNMLSS:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VLD1DUPd16wb_fixed:
  case ARM::VLD1DUPd32wb_fixed:
  case ARM::VLD1DUPd8wb_fixed:
  case ARM::VLD1DUPq16wb_fixed:
  case ARM::VLD1DUPq32wb_fixed:
  case ARM::VLD1DUPq8wb_fixed:
  case ARM::VLD1LNdWB_fixed_Asm_F32:
  case ARM::VLD1d16Qwb_fixed:
  case ARM::VLD1d16Twb_fixed:
  case ARM::VLD1d16wb_fixed:
  case ARM::VLD1d32Qwb_fixed:
  case ARM::VLD1d32Twb_fixed:
  case ARM::VLD1d32wb_fixed:
  case ARM::VLD1d64Qwb_fixed:
  case ARM::VLD1d64Twb_fixed:
  case ARM::VLD1d64wb_fixed:
  case ARM::VLD1d8Qwb_fixed:
  case ARM::VLD1d8Twb_fixed:
  case ARM::VLD1d8wb_fixed:
  case ARM::VLD1q16wb_fixed:
  case ARM::VLD1q32wb_fixed:
  case ARM::VLD1q64wb_fixed:
  case ARM::VLD1q8wb_fixed:
  case ARM::VLD2DUPd16wb_fixed:
  case ARM::VLD2DUPd16x2wb_fixed:
  case ARM::VLD2DUPd32wb_fixed:
  case ARM::VLD2DUPd32x2wb_fixed:
  case ARM::VLD2DUPd8wb_fixed:
  case ARM::VLD2DUPd8x2wb_fixed:
  case ARM::VLD2LNdWB_fixed_Asm_F32:
  case ARM::VLD2LNqWB_fixed_Asm_F32:
  case ARM::VLD2b16wb_fixed:
  case ARM::VLD2b32wb_fixed:
  case ARM::VLD2b8wb_fixed:
  case ARM::VLD2d16wb_fixed:
  case ARM::VLD2d32wb_fixed:
  case ARM::VLD2d8wb_fixed:
  case ARM::VLD2q16wb_fixed:
  case ARM::VLD2q32wb_fixed:
  case ARM::VLD2q8wb_fixed:
  case ARM::VST1LNdWB_fixed_Asm_F32:
  case ARM::VST2LNdWB_fixed_Asm_F32:
  case ARM::VST2LNqWB_fixed_Asm_F32:
    printAddrMode6Operand(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case ARM::VLD1DUPd16wb_register:
  case ARM::VLD1DUPd32wb_register:
  case ARM::VLD1DUPd8wb_register:
  case ARM::VLD1DUPq16wb_register:
  case ARM::VLD1DUPq32wb_register:
  case ARM::VLD1DUPq8wb_register:
  case ARM::VLD1LNdWB_register_Asm_F32:
  case ARM::VLD1d16Qwb_register:
  case ARM::VLD1d16Twb_register:
  case ARM::VLD1d16wb_register:
  case ARM::VLD1d32Qwb_register:
  case ARM::VLD1d32Twb_register:
  case ARM::VLD1d32wb_register:
  case ARM::VLD1d64Qwb_register:
  case ARM::VLD1d64Twb_register:
  case ARM::VLD1d64wb_register:
  case ARM::VLD1d8Qwb_register:
  case ARM::VLD1d8Twb_register:
  case ARM::VLD1d8wb_register:
  case ARM::VLD1q16wb_register:
  case ARM::VLD1q32wb_register:
  case ARM::VLD1q64wb_register:
  case ARM::VLD1q8wb_register:
  case ARM::VLD2DUPd16wb_register:
  case ARM::VLD2DUPd16x2wb_register:
  case ARM::VLD2DUPd32wb_register:
  case ARM::VLD2DUPd32x2wb_register:
  case ARM::VLD2DUPd8wb_register:
  case ARM::VLD2DUPd8x2wb_register:
  case ARM::VLD2LNdWB_register_Asm_F32:
  case ARM::VLD2LNqWB_register_Asm_F32:
  case ARM::VLD2b16wb_register:
  case ARM::VLD2b32wb_register:
  case ARM::VLD2b8wb_register:
  case ARM::VLD2d16wb_register:
  case ARM::VLD2d32wb_register:
  case ARM::VLD2d8wb_register:
  case ARM::VLD2q16wb_register:
  case ARM::VLD2q32wb_register:
  case ARM::VLD2q8wb_register:
  case ARM::VST1LNdWB_register_Asm_F32:
  case ARM::VST2LNdWB_register_Asm_F32:
  case ARM::VST2LNqWB_register_Asm_F32:
    printAddrMode6Operand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1LNd16:
  case ARM::VLD1LNd32:
  case ARM::VLD1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    return;
    break;
  case ARM::VLD1LNd16_UPD:
  case ARM::VLD1LNd32_UPD:
  case ARM::VLD1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1LNdWB_register_Asm_16:
  case ARM::VLD1LNdWB_register_Asm_32:
  case ARM::VLD1LNdWB_register_Asm_8:
  case ARM::VLD2LNdWB_register_Asm_16:
  case ARM::VLD2LNdWB_register_Asm_32:
  case ARM::VLD2LNdWB_register_Asm_8:
  case ARM::VLD2LNqWB_register_Asm_16:
  case ARM::VLD2LNqWB_register_Asm_32:
  case ARM::VST1LNdWB_register_Asm_16:
  case ARM::VST1LNdWB_register_Asm_32:
  case ARM::VST1LNdWB_register_Asm_8:
  case ARM::VST2LNdWB_register_Asm_16:
  case ARM::VST2LNdWB_register_Asm_32:
  case ARM::VST2LNdWB_register_Asm_8:
  case ARM::VST2LNqWB_register_Asm_16:
  case ARM::VST2LNqWB_register_Asm_32:
    O << ", "; 
    printAddrMode6Operand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD2LNd16:
  case ARM::VLD2LNd32:
  case ARM::VLD2LNd8:
  case ARM::VLD2LNq16:
  case ARM::VLD2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD2LNd16_UPD:
  case ARM::VLD2LNd32_UPD:
  case ARM::VLD2LNd8_UPD:
  case ARM::VLD2LNq16_UPD:
  case ARM::VLD2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD3DUPd16:
  case ARM::VLD3DUPd16x2:
  case ARM::VLD3DUPd32:
  case ARM::VLD3DUPd32x2:
  case ARM::VLD3DUPd8:
  case ARM::VLD3DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3DUPd16_UPD:
  case ARM::VLD3DUPd16x2_UPD:
  case ARM::VLD3DUPd32_UPD:
  case ARM::VLD3DUPd32x2_UPD:
  case ARM::VLD3DUPd8_UPD:
  case ARM::VLD3DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD3LNd16:
  case ARM::VLD3LNd32:
  case ARM::VLD3LNd8:
  case ARM::VLD3LNq16:
  case ARM::VLD3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3LNd16_UPD:
  case ARM::VLD3LNd32_UPD:
  case ARM::VLD3LNd8_UPD:
  case ARM::VLD3LNq16_UPD:
  case ARM::VLD3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD3d16:
  case ARM::VLD3d32:
  case ARM::VLD3d8:
  case ARM::VLD3q16:
  case ARM::VLD3q32:
  case ARM::VLD3q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3d16_UPD:
  case ARM::VLD3d32_UPD:
  case ARM::VLD3d8_UPD:
  case ARM::VLD3q16_UPD:
  case ARM::VLD3q32_UPD:
  case ARM::VLD3q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD4DUPd16:
  case ARM::VLD4DUPd16x2:
  case ARM::VLD4DUPd32:
  case ARM::VLD4DUPd32x2:
  case ARM::VLD4DUPd8:
  case ARM::VLD4DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4DUPd16_UPD:
  case ARM::VLD4DUPd16x2_UPD:
  case ARM::VLD4DUPd32_UPD:
  case ARM::VLD4DUPd32x2_UPD:
  case ARM::VLD4DUPd8_UPD:
  case ARM::VLD4DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD4LNd16:
  case ARM::VLD4LNd32:
  case ARM::VLD4LNd8:
  case ARM::VLD4LNq16:
  case ARM::VLD4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4LNd16_UPD:
  case ARM::VLD4LNd32_UPD:
  case ARM::VLD4LNd8_UPD:
  case ARM::VLD4LNq16_UPD:
  case ARM::VLD4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD4d16:
  case ARM::VLD4d32:
  case ARM::VLD4d8:
  case ARM::VLD4q16:
  case ARM::VLD4q32:
  case ARM::VLD4q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4d16_UPD:
  case ARM::VLD4d32_UPD:
  case ARM::VLD4d8_UPD:
  case ARM::VLD4q16_UPD:
  case ARM::VLD4q32_UPD:
  case ARM::VLD4q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VMLALslsv2i32:
  case ARM::VMLALslsv4i16:
  case ARM::VMLALsluv2i32:
  case ARM::VMLALsluv4i16:
  case ARM::VMLAslv2i32:
  case ARM::VMLAslv4i16:
  case ARM::VMLAslv4i32:
  case ARM::VMLAslv8i16:
  case ARM::VMLSLslsv2i32:
  case ARM::VMLSLslsv4i16:
  case ARM::VMLSLsluv2i32:
  case ARM::VMLSLsluv4i16:
  case ARM::VMLSslv2i32:
  case ARM::VMLSslv4i16:
  case ARM::VMLSslv4i32:
  case ARM::VMLSslv8i16:
  case ARM::VQDMLALslv2i32:
  case ARM::VQDMLALslv4i16:
  case ARM::VQDMLSLslv2i32:
  case ARM::VQDMLSLslv4i16:
    O << ", "; 
    printOperand(MI, 3, O); 
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case ARM::VMLAslfd:
  case ARM::VMLAslfq:
  case ARM::VMLSslfd:
  case ARM::VMLSslfq:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case ARM::VMULLslsv2i32:
  case ARM::VMULLslsv4i16:
  case ARM::VMULLsluv2i32:
  case ARM::VMULLsluv4i16:
  case ARM::VMULslv2i32:
  case ARM::VMULslv4i16:
  case ARM::VMULslv4i32:
  case ARM::VMULslv8i16:
  case ARM::VQDMULHslv2i32:
  case ARM::VQDMULHslv4i16:
  case ARM::VQDMULHslv4i32:
  case ARM::VQDMULHslv8i16:
  case ARM::VQDMULLslv2i32:
  case ARM::VQDMULLslv4i16:
  case ARM::VQRDMULHslv2i32:
  case ARM::VQRDMULHslv4i16:
  case ARM::VQRDMULHslv4i32:
  case ARM::VQRDMULHslv8i16:
    O << ", "; 
    printOperand(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case ARM::VMULslfd:
  case ARM::VMULslfq:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case ARM::VST1LNd16:
  case ARM::VST1LNd32:
  case ARM::VST1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1LNd16_UPD:
  case ARM::VST1LNd32_UPD:
  case ARM::VST1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST2LNd16:
  case ARM::VST2LNd32:
  case ARM::VST2LNd8:
  case ARM::VST2LNq16:
  case ARM::VST2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST2LNd16_UPD:
  case ARM::VST2LNd32_UPD:
  case ARM::VST2LNd8_UPD:
  case ARM::VST2LNq16_UPD:
  case ARM::VST2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST3LNd16:
  case ARM::VST3LNd32:
  case ARM::VST3LNd8:
  case ARM::VST3LNq16:
  case ARM::VST3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST3LNd16_UPD:
  case ARM::VST3LNd32_UPD:
  case ARM::VST3LNd8_UPD:
  case ARM::VST3LNq16_UPD:
  case ARM::VST3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST3d16:
  case ARM::VST3d32:
  case ARM::VST3d8:
  case ARM::VST3q16:
  case ARM::VST3q32:
  case ARM::VST3q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST3d16_UPD:
  case ARM::VST3d32_UPD:
  case ARM::VST3d8_UPD:
  case ARM::VST3q16_UPD:
  case ARM::VST3q32_UPD:
  case ARM::VST3q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST4LNd16:
  case ARM::VST4LNd32:
  case ARM::VST4LNd8:
  case ARM::VST4LNq16:
  case ARM::VST4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST4LNd16_UPD:
  case ARM::VST4LNd32_UPD:
  case ARM::VST4LNd8_UPD:
  case ARM::VST4LNq16_UPD:
  case ARM::VST4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 7, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST4d16:
  case ARM::VST4d32:
  case ARM::VST4d8:
  case ARM::VST4q16:
  case ARM::VST4q32:
  case ARM::VST4q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST4d16_UPD:
  case ARM::VST4d32_UPD:
  case ARM::VST4d8_UPD:
  case ARM::VST4q16_UPD:
  case ARM::VST4q32_UPD:
  case ARM::VST4q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VTBX1:
  case ARM::VTBX2:
  case ARM::VTBX3:
  case ARM::VTBX4:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::VTBX1: printVectorListOne(MI, 2, O); break;
    case ARM::VTBX2: printVectorListTwo(MI, 2, O); break;
    case ARM::VTBX3: printVectorListThree(MI, 2, O); break;
    case ARM::VTBX4: printVectorListFour(MI, 2, O); break;
    }
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::sysLDMDA:
  case ARM::sysLDMDB:
  case ARM::sysLDMIA:
  case ARM::sysLDMIB:
  case ARM::sysSTMDA:
  case ARM::sysSTMDB:
  case ARM::sysSTMIA:
  case ARM::sysSTMIB:
    O << ", "; 
    printRegisterList(MI, 3, O); 
    O << " ^"; 
    return;
    break;
  case ARM::sysLDMDA_UPD:
  case ARM::sysLDMDB_UPD:
  case ARM::sysLDMIA_UPD:
  case ARM::sysLDMIB_UPD:
  case ARM::sysSTMDA_UPD:
  case ARM::sysSTMDB_UPD:
  case ARM::sysSTMIA_UPD:
  case ARM::sysSTMIB_UPD:
    O << "!, "; 
    printRegisterList(MI, 4, O); 
    O << " ^"; 
    return;
    break;
  case ARM::t2LDRB_POST:
  case ARM::t2LDRH_POST:
  case ARM::t2LDRSB_POST:
  case ARM::t2LDRSH_POST:
  case ARM::t2LDR_POST:
  case ARM::t2STRB_POST:
  case ARM::t2STRH_POST:
  case ARM::t2STR_POST:
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    printT2AddrModeImm8OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::t2LDRD_POST:
  case ARM::t2STRD_POST:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::t2LDRD_POST: printOperand(MI, 1, O); break;
    case ARM::t2STRD_POST: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode7Operand(MI, 3, O); 
    printT2AddrModeImm8s4OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::t2LDRD_PRE:
  case ARM::t2STRD_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::t2LDRD_PRE: printOperand(MI, 1, O); break;
    case ARM::t2STRD_PRE: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printT2AddrModeImm8s4Operand(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case ARM::t2SMLSLDX:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 116 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 5, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 44,
    48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100,
    104, 108, 112, 116, 120, 124, 128, 134, 140, 146, 154, 157, 160, 163,
    166, 169, 172, 175, 178, 181, 184, 187, 190, 194, 198, 202, 206, 210,
    214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 248, 252, 256,
    259, 262, 265, 268, 271, 274, 277, 280, 283, 286, 290, 294, 298, 302,
    306, 310, 314, 318, 322, 326, 330, 334, 338, 342, 346, 350, 354, 358,
    362, 366, 370, 374, 377, 382, 388, 394, 400, 406, 412, 420, 428, 436,
    448, 460, 474, 0
  };

  const char *AsmStrs =
    "apsr\000cpsr\000d0\000d1\000d2\000d3\000d4\000d5\000d6\000d7\000d8\000d"
    "9\000d10\000d11\000d12\000d13\000d14\000d15\000d16\000d17\000d18\000d19"
    "\000d20\000d21\000d22\000d23\000d24\000d25\000d26\000d27\000d28\000d29\000"
    "d30\000d31\000fpexc\000fpscr\000fpsid\000itstate\000lr\000pc\000q0\000q"
    "1\000q2\000q3\000q4\000q5\000q6\000q7\000q8\000q9\000q10\000q11\000q12\000"
    "q13\000q14\000q15\000r0\000r1\000r2\000r3\000r4\000r5\000r6\000r7\000r8"
    "\000r9\000r10\000r11\000r12\000s0\000s1\000s2\000s3\000s4\000s5\000s6\000"
    "s7\000s8\000s9\000s10\000s11\000s12\000s13\000s14\000s15\000s16\000s17\000"
    "s18\000s19\000s20\000s21\000s22\000s23\000s24\000s25\000s26\000s27\000s"
    "28\000s29\000s30\000s31\000sp\000spsr\000Q0_Q1\000Q2_Q3\000Q4_Q5\000Q6_"
    "Q7\000Q8_Q9\000Q10_Q11\000Q12_Q13\000Q14_Q15\000Q0_Q1_Q2_Q3\000Q4_Q5_Q6"
    "_Q7\000Q8_Q9_Q10_Q11\000Q12_Q13_Q14_Q15\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *ARMInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 2789 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 158, 162, 168, 174, 181, 188, 195, 202, 210, 218, 224, 230, 237, 
    244, 261, 276, 280, 286, 292, 299, 306, 311, 316, 328, 340, 356, 376, 
    396, 415, 435, 455, 474, 494, 514, 533, 553, 573, 592, 612, 632, 651, 
    672, 693, 713, 732, 751, 769, 789, 809, 828, 849, 870, 890, 911, 932, 
    952, 972, 992, 1011, 1027, 1043, 1058, 1071, 1082, 1094, 1107, 1119, 1121, 1129, 
    1136, 1140, 1144, 1150, 1156, 1163, 1170, 1175, 1178, 1182, 1191, 1196, 1202, 1213, 
    1221, 1226, 1236, 1250, 1266, 1275, 1282, 1289, 1292, 1296, 1304, 1311, 1319, 1329, 
    1333, 1337, 1342, 1348, 1352, 1359, 1366, 1374, 1382, 1388, 1394, 1401, 1408, 1424, 
    1430, 1436, 1442, 1446, 1450, 1454, 1460, 1466, 1473, 1480, 1488, 1496, 1503, 1507, 
    1533, 1564, 1584, 1603, 1627, 1640, 1653, 1664, 1674, 1686, 1698, 1708, 1717, 1729, 
    1741, 1751, 1760, 1771, 1782, 1791, 1799, 1805, 1815, 1821, 1831, 1837, 1847, 1857, 
    1863, 1873, 1888, 1903, 1917, 1931, 1944, 1957, 1965, 1972, 1977, 1987, 1996, 2002, 
    2009, 2016, 2023, 2028, 2035, 2042, 2052, 2061, 2067, 2075, 2083, 2094, 2104, 2110, 
    2118, 2126, 2137, 2147, 2161, 2175, 2188, 2201, 2213, 2225, 2231, 2238, 2244, 2253, 
    2264, 2269, 2274, 2279, 2284, 2288, 2293, 2298, 2304, 2308, 2314, 2318, 2325, 2334, 
    2346, 2353, 2361, 2369, 2377, 2385, 2393, 2410, 2421, 2434, 2451, 2456, 2463, 2479, 
    2489, 2494, 2502, 2508, 2514, 2526, 2538, 2542, 2547, 2552, 2558, 2562, 2569, 2573, 
    2578, 2582, 2588, 2595, 2600, 2605, 2611, 2617, 2621, 2627, 2633, 2640, 2647, 2654, 
    2661, 2669, 2677, 2686, 2695, 2702, 2710, 2718, 2724, 2730, 2738, 2745, 2752, 2758, 
    2765, 2771, 2776, 2783, 2789, 2794, 2800, 2806, 2811, 2816, 2823, 2829, 2834, 2838, 
    2844, 2850, 2856, 2866, 2872, 2882, 2888, 2898, 2904, 2914, 2919, 2924, 2928, 2933, 
    2940, 2948, 2956, 2962, 2968, 2975, 2982, 2988, 2994, 3001, 3008, 3015, 3021, 3026, 
    3032, 3038, 3045, 3052, 3057, 3061, 3068, 3072, 3080, 3087, 3093, 3099, 3107, 3114, 
    3118, 3125, 3132, 3138, 3145, 3151, 3159, 3167, 3174, 3182, 3190, 3198, 3206, 3213, 
    3220, 3227, 3234, 3240, 3247, 3254, 3262, 3268, 3275, 3281, 3288, 3294, 3301, 3307, 
    3314, 3321, 3328, 3334, 3342, 3349, 3356, 3363, 3370, 3376, 3383, 3389, 3399, 3405, 
    3415, 3421, 3431, 3437, 3447, 3452, 3459, 3464, 3471, 3477, 3490, 3503, 3514, 3524, 
    3536, 3548, 3558, 3567, 3579, 3591, 3601, 3610, 3621, 3632, 3641, 3649, 3655, 3665, 
    3671, 3681, 3687, 3697, 3703, 3713, 3728, 3743, 3757, 3771, 3784, 3797, 3805, 3818, 
    3831, 3838, 3843, 3853, 3862, 3868, 3875, 3882, 3889, 3894, 3901, 3908, 3918, 3927, 
    3939, 3953, 3967, 3980, 3993, 4005, 4017, 4024, 4036, 4048, 4054, 4061, 4068, 4076, 
    4084, 4090, 4096, 4103, 4110, 4114, 4118, 4123, 4129, 4137, 4143, 4148, 4155, 4160, 
    4169, 4180, 4189, 4200, 4211, 4224, 4235, 4248, 4254, 4260, 4267, 4274, 4281, 4286, 
    4292, 4298, 4305, 4312, 4319, 4325, 4330, 4335, 4343, 4350, 4356, 4362, 4370, 4377, 
    4383, 4391, 4397, 4405, 4411, 4419, 4427, 4434, 4440, 4446, 4454, 4461, 4467, 4474, 
    4479, 4486, 4491, 4498, 4504, 4510, 4518, 4524, 4529, 4536, 4541, 4553, 4565, 4577, 
    4589, 4601, 4613, 4624, 4635, 4646, 4657, 4668, 4678, 4689, 4700, 4711, 4722, 4733, 
    4743, 4755, 4767, 4779, 4791, 4803, 4815, 4822, 4829, 4840, 4851, 4862, 4873, 4884, 
    4894, 4905, 4916, 4927, 4938, 4949, 4959, 4965, 4971, 4978, 4985, 4995, 5005, 5015, 
    5025, 5035, 5044, 5051, 5058, 5065, 5072, 5078, 5090, 5102, 5113, 5125, 5137, 5149, 
    5161, 5173, 5185, 5191, 5203, 5215, 5227, 5239, 5251, 5263, 5270, 5277, 5287, 5297, 
    5307, 5317, 5327, 5337, 5347, 5356, 5362, 5368, 5374, 5385, 5396, 5407, 5418, 5424, 
    5430, 5436, 5442, 5448, 5454, 5460, 5467, 5474, 5484, 5494, 5504, 5514, 5524, 5533, 
    5544, 5555, 5566, 5577, 5588, 5599, 5610, 5620, 5627, 5634, 5645, 5656, 5667, 5678, 
    5689, 5699, 5710, 5721, 5732, 5743, 5754, 5764, 5775, 5786, 5797, 5808, 5819, 5830, 
    5841, 5851, 5858, 5865, 5876, 5887, 5898, 5909, 5920, 5930, 5941, 5952, 5963, 5974, 
    5985, 5995, 6006, 6017, 6028, 6039, 6050, 6061, 6072, 6082, 6093, 6104, 6115, 6126, 
    6137, 6148, 6159, 6169, 6179, 6189, 6199, 6209, 6219, 6228, 6239, 6250, 6261, 6272, 
    6283, 6294, 6305, 6315, 6325, 6335, 6345, 6355, 6365, 6374, 6380, 6387, 6394, 6402, 
    6410, 6416, 6423, 6430, 6436, 6442, 6450, 6458, 6465, 6472, 6480, 6488, 6496, 6505, 
    6514, 6523, 6532, 6542, 6552, 6562, 6572, 6580, 6589, 6598, 6607, 6616, 6626, 6636, 
    6646, 6656, 6662, 6668, 6676, 6684, 6692, 6700, 6707, 6714, 6724, 6734, 6744, 6754, 
    6763, 6772, 6780, 6788, 6794, 6800, 6808, 6816, 6823, 6831, 6839, 6847, 6854, 6860, 
    6866, 6873, 6880, 6886, 6892, 6899, 6906, 6913, 6920, 6927, 6934, 6944, 6954, 6963, 
    6973, 6982, 6994, 7006, 7018, 7030, 7042, 7053, 7065, 7077, 7089, 7101, 7113, 7124, 
    7136, 7148, 7160, 7172, 7184, 7195, 7207, 7219, 7231, 7243, 7255, 7266, 7277, 7296, 
    7318, 7329, 7348, 7370, 7380, 7398, 7419, 7430, 7447, 7472, 7500, 7519, 7541, 7552, 
    7569, 7594, 7622, 7641, 7663, 7673, 7689, 7713, 7740, 7758, 7779, 7789, 7803, 7813, 
    7827, 7836, 7849, 7863, 7877, 7890, 7903, 7918, 7933, 7948, 7962, 7977, 7991, 8006, 
    8021, 8035, 8050, 8065, 8079, 8102, 8125, 8147, 8169, 8193, 8217, 8241, 8264, 8288, 
    8311, 8335, 8359, 8382, 8406, 8430, 8453, 8479, 8505, 8530, 8555, 8582, 8609, 8636, 
    8662, 8689, 8715, 8742, 8769, 8795, 8822, 8849, 8875, 8891, 8911, 8927, 8947, 8962, 
    8981, 8989, 8998, 9015, 9035, 9044, 9061, 9081, 9097, 9116, 9124, 9133, 9150, 9170, 
    9179, 9196, 9216, 9232, 9251, 9259, 9268, 9283, 9300, 9320, 9329, 9344, 9361, 9381, 
    9397, 9416, 9423, 9431, 9447, 9466, 9474, 9490, 9509, 9524, 9542, 9550, 9564, 9586, 
    9611, 9627, 9646, 9654, 9668, 9690, 9715, 9731, 9750, 9758, 9772, 9794, 9819, 9835, 
    9854, 9861, 9874, 9895, 9919, 9934, 9952, 9963, 9980, 10005, 10033, 10052, 10074, 10087, 
    10108, 10132, 10143, 10160, 10185, 10213, 10232, 10254, 10267, 10288, 10312, 10322, 10338, 10362, 
    10389, 10407, 10428, 10440, 10460, 10483, 10493, 10509, 10529, 10543, 10553, 10569, 10589, 10603, 
    10612, 10627, 10646, 10659, 10673, 10687, 10700, 10713, 10728, 10743, 10758, 10772, 10787, 10801, 
    10816, 10831, 10845, 10860, 10875, 10889, 10912, 10935, 10957, 10979, 11003, 11027, 11051, 11074, 
    11098, 11121, 11145, 11169, 11192, 11216, 11240, 11263, 11289, 11315, 11340, 11365, 11392, 11419, 
    11446, 11472, 11499, 11525, 11552, 11579, 11605, 11632, 11659, 11685, 11695, 11711, 11731, 11745, 
    11755, 11771, 11791, 11805, 11819, 11833, 11846, 11861, 11876, 11891, 11906, 11921, 11936, 11951, 
    11966, 11989, 12012, 12034, 12058, 12082, 12106, 12130, 12154, 12178, 12202, 12226, 12252, 12278, 
    12303, 12330, 12357, 12384, 12411, 12438, 12465, 12492, 12519, 12527, 12543, 12562, 12570, 12586, 
    12605, 12612, 12627, 12645, 12653, 12667, 12689, 12714, 12730, 12749, 12757, 12771, 12793, 12818, 
    12834, 12853, 12860, 12873, 12894, 12918, 12933, 12951, 12959, 12973, 12995, 13020, 13036, 13055, 
    13063, 13077, 13099, 13124, 13140, 13159, 13166, 13179, 13200, 13224, 13239, 13257, 13268, 13285, 
    13306, 13321, 13334, 13351, 13362, 13379, 13400, 13415, 13428, 13445, 13455, 13471, 13491, 13505, 
    13517, 13533, 13543, 13559, 13579, 13593, 13603, 13619, 13639, 13653, 13662, 13677, 13696, 13709, 
    13719, 13735, 13755, 13769, 13779, 13795, 13815, 13829, 13837, 13851, 13869, 13881, 13889, 13903, 
    13921, 13933, 13940, 13953, 13970, 13981, 13989, 14007, 14019, 14036, 14057, 14065, 14083, 14095, 
    14112, 14133, 14140, 14157, 14168, 14184, 14204, 14215, 14232, 14253, 14268, 14281, 14298, 14309, 
    14326, 14347, 14362, 14375, 14392, 14402, 14418, 14438, 14452, 14464, 14480, 14490, 14506, 14526, 
    14540, 14550, 14566, 14586, 14600, 14609, 14624, 14643, 14656, 14666, 14682, 14702, 14716, 14726, 
    14742, 14762, 14776, 14784, 14798, 14816, 14828, 14836, 14850, 14868, 14880, 14887, 14900, 14917, 
    14928, 14936, 14954, 14966, 14983, 15004, 15012, 15030, 15042, 15059, 15080, 15087, 15104, 15115, 
    15131, 15151, 15163, 15171, 15183, 15191, 15203, 15211, 15223, 15229, 15235, 15242, 15249, 15260, 
    15271, 15282, 15293, 15304, 15314, 15325, 15336, 15347, 15358, 15369, 15379, 15386, 15393, 15404, 
    15415, 15426, 15437, 15448, 15458, 15469, 15480, 15491, 15502, 15513, 15523, 15529, 15543, 15557, 
    15571, 15585, 15597, 15609, 15621, 15633, 15645, 15657, 15663, 15670, 15677, 15686, 15695, 15707, 
    15719, 15731, 15743, 15753, 15763, 15773, 15783, 15793, 15802, 15808, 15822, 15836, 15850, 15864, 
    15876, 15888, 15900, 15912, 15924, 15936, 15942, 15949, 15956, 15965, 15974, 15986, 15998, 16010, 
    16022, 16032, 16042, 16052, 16062, 16072, 16081, 16087, 16095, 16103, 16115, 16127, 16139, 16151, 
    16163, 16175, 16186, 16197, 16207, 16215, 16223, 16230, 16236, 16243, 16251, 16259, 16269, 16279, 
    16289, 16299, 16309, 16319, 16329, 16339, 16349, 16358, 16363, 16374, 16385, 16390, 16401, 16412, 
    16418, 16425, 16439, 16453, 16467, 16481, 16493, 16505, 16517, 16529, 16541, 16553, 16559, 16566, 
    16573, 16580, 16587, 16596, 16605, 16617, 16629, 16641, 16653, 16663, 16673, 16683, 16693, 16703, 
    16712, 16718, 16724, 16734, 16744, 16754, 16764, 16770, 16776, 16785, 16792, 16801, 16810, 16819, 
    16828, 16836, 16844, 16851, 16858, 16865, 16872, 16879, 16886, 16892, 16898, 16904, 16915, 16926, 
    16937, 16948, 16954, 16967, 16980, 16993, 17006, 17019, 17031, 17044, 17057, 17070, 17083, 17096, 
    17108, 17121, 17134, 17147, 17160, 17173, 17185, 17198, 17211, 17224, 17237, 17250, 17262, 17269, 
    17278, 17287, 17295, 17302, 17311, 17320, 17328, 17337, 17346, 17354, 17361, 17370, 17379, 17387, 
    17396, 17405, 17413, 17424, 17435, 17446, 17457, 17468, 17478, 17490, 17502, 17514, 17526, 17538, 
    17550, 17562, 17573, 17585, 17597, 17609, 17621, 17633, 17645, 17657, 17668, 17683, 17698, 17711, 
    17724, 17739, 17754, 17767, 17780, 17795, 17810, 17825, 17840, 17853, 17866, 17879, 17892, 17907, 
    17922, 17935, 17948, 17962, 17976, 17989, 18002, 18015, 18027, 18040, 18053, 18065, 18076, 18087, 
    18098, 18109, 18120, 18130, 18146, 18162, 18178, 18194, 18208, 18222, 18236, 18250, 18263, 18276, 
    18289, 18302, 18315, 18328, 18341, 18353, 18366, 18379, 18392, 18405, 18418, 18431, 18444, 18456, 
    18470, 18484, 18497, 18511, 18525, 18538, 18552, 18566, 18579, 18592, 18605, 18618, 18631, 18644, 
    18657, 18670, 18682, 18695, 18708, 18721, 18734, 18747, 18760, 18773, 18785, 18797, 18809, 18821, 
    18833, 18845, 18857, 18869, 18880, 18893, 18906, 18919, 18932, 18945, 18958, 18971, 18983, 18995, 
    19007, 19019, 19031, 19043, 19055, 19067, 19078, 19091, 19104, 19116, 19129, 19142, 19154, 19167, 
    19180, 19192, 19204, 19216, 19228, 19240, 19252, 19264, 19276, 19287, 19299, 19311, 19323, 19335, 
    19347, 19359, 19371, 19382, 19395, 19408, 19420, 19428, 19437, 19446, 19454, 19463, 19472, 19481, 
    19490, 19500, 19509, 19519, 19528, 19538, 19548, 19557, 19567, 19577, 19586, 19599, 19612, 19625, 
    19638, 19651, 19663, 19676, 19689, 19702, 19715, 19728, 19740, 19752, 19764, 19776, 19788, 19800, 
    19812, 19824, 19835, 19847, 19859, 19871, 19883, 19895, 19907, 19919, 19930, 19942, 19954, 19965, 
    19977, 19989, 20001, 20013, 20025, 20037, 20049, 20060, 20072, 20084, 20096, 20108, 20120, 20132, 
    20144, 20155, 20164, 20174, 20184, 20193, 20203, 20213, 20225, 20237, 20249, 20261, 20273, 20285, 
    20297, 20308, 20320, 20332, 20344, 20356, 20368, 20380, 20392, 20403, 20416, 20429, 20441, 20451, 
    20461, 20470, 20479, 20488, 20496, 20508, 20520, 20532, 20544, 20556, 20568, 20579, 20590, 20601, 
    20612, 20623, 20634, 20645, 20655, 20666, 20677, 20688, 20699, 20710, 20721, 20732, 20742, 20753, 
    20764, 20775, 20786, 20797, 20808, 20819, 20829, 20840, 20851, 20861, 20872, 20883, 20894, 20905, 
    20916, 20927, 20938, 20948, 20959, 20970, 20981, 20992, 21003, 21014, 21025, 21035, 21042, 21049, 
    21056, 21063, 21073, 21083, 21093, 21103, 21113, 21123, 21133, 21142, 21149, 21156, 21163, 21170, 
    21181, 21192, 21203, 21214, 21225, 21236, 21247, 21257, 21268, 21279, 21290, 21301, 21312, 21323, 
    21334, 21344, 21354, 21364, 21374, 21384, 21394, 21404, 21414, 21423, 21433, 21447, 21457, 21471, 
    21480, 21493, 21507, 21521, 21534, 21547, 21562, 21577, 21592, 21606, 21621, 21635, 21650, 21665, 
    21679, 21694, 21709, 21723, 21746, 21769, 21791, 21813, 21837, 21861, 21885, 21908, 21932, 21955, 
    21979, 22003, 22026, 22050, 22074, 22097, 22123, 22149, 22174, 22199, 22226, 22253, 22280, 22306, 
    22333, 22359, 22386, 22413, 22439, 22466, 22493, 22519, 22535, 22555, 22571, 22591, 22606, 22625, 
    22633, 22642, 22659, 22679, 22688, 22705, 22725, 22741, 22760, 22768, 22777, 22794, 22814, 22823, 
    22840, 22860, 22876, 22895, 22903, 22912, 22927, 22950, 22976, 22993, 23013, 23022, 23037, 23060, 
    23086, 23103, 23123, 23139, 23158, 23165, 23173, 23189, 23208, 23216, 23232, 23251, 23266, 23284, 
    23292, 23306, 23328, 23353, 23369, 23388, 23396, 23410, 23432, 23457, 23473, 23492, 23500, 23514, 
    23536, 23561, 23577, 23596, 23603, 23616, 23637, 23661, 23676, 23694, 23704, 23720, 23740, 23754, 
    23764, 23780, 23800, 23814, 23823, 23838, 23857, 23870, 23884, 23898, 23911, 23924, 23939, 23954, 
    23969, 23983, 23998, 24012, 24027, 24042, 24056, 24071, 24086, 24100, 24123, 24146, 24168, 24190, 
    24214, 24238, 24262, 24285, 24309, 24332, 24356, 24380, 24403, 24427, 24451, 24474, 24500, 24526, 
    24551, 24576, 24603, 24630, 24657, 24683, 24710, 24736, 24763, 24790, 24816, 24843, 24870, 24896, 
    24906, 24922, 24942, 24956, 24966, 24982, 25002, 25016, 25030, 25044, 25057, 25072, 25087, 25102, 
    25117, 25132, 25147, 25162, 25177, 25200, 25223, 25245, 25269, 25293, 25317, 25341, 25365, 25389, 
    25413, 25437, 25463, 25489, 25514, 25541, 25568, 25595, 25622, 25649, 25676, 25703, 25730, 25738, 
    25754, 25773, 25781, 25797, 25816, 25823, 25838, 25856, 25864, 25878, 25900, 25925, 25941, 25960, 
    25968, 25982, 26004, 26029, 26045, 26064, 26071, 26084, 26105, 26129, 26144, 26162, 26170, 26184, 
    26206, 26231, 26247, 26266, 26274, 26288, 26310, 26335, 26351, 26370, 26377, 26390, 26411, 26435, 
    26450, 26468, 26478, 26494, 26514, 26528, 26538, 26554, 26574, 26588, 26597, 26612, 26631, 26644, 
    26654, 26670, 26690, 26704, 26714, 26730, 26750, 26764, 26772, 26786, 26804, 26816, 26824, 26838, 
    26856, 26868, 26875, 26888, 26905, 26916, 26924, 26942, 26954, 26971, 26992, 27000, 27018, 27030, 
    27047, 27068, 27075, 27092, 27103, 27119, 27139, 27149, 27165, 27185, 27199, 27209, 27225, 27245, 
    27259, 27268, 27283, 27302, 27315, 27325, 27341, 27361, 27375, 27385, 27401, 27421, 27435, 27443, 
    27457, 27475, 27487, 27495, 27509, 27527, 27539, 27546, 27559, 27576, 27587, 27595, 27613, 27625, 
    27642, 27663, 27671, 27689, 27701, 27718, 27739, 27746, 27763, 27774, 27790, 27810, 27822, 27830, 
    27842, 27850, 27862, 27870, 27882, 27888, 27894, 27900, 27912, 27924, 27935, 27947, 27959, 27971, 
    27983, 27995, 28007, 28013, 28025, 28037, 28049, 28061, 28073, 28085, 28092, 28099, 28109, 28119, 
    28129, 28139, 28149, 28159, 28169, 28178, 28184, 28190, 28196, 28202, 28214, 28220, 28232, 28238, 
    28250, 28256, 28262, 28274, 28280, 28292, 28298, 28310, 28317, 28324, 28332, 28340, 28348, 28356, 
    28363, 28370, 28377, 28384, 28392, 28400, 28408, 28416, 28423, 28430, 28438, 28446, 28453, 28461, 
    28469, 28476, 28486, 28496, 28506, 28516, 28526, 28535, 28542, 28549, 28556, 28563, 28570, 28577, 
    28585, 28593, 28600, 28608, 28616, 28623, 28631, 28639, 28646, 28654, 28662, 28669, 28673, 28677, 
    28683, 28692, 28705, 28714, 28727, 28736, 28749, 28758, 28771, 28780, 28793, 28802, 28815, 28824, 
    28837, 28846, 28859, 28865, 28873, 28881, 28889, 28898, 28907, 28916, 28924, 28934, 28942, 28950, 
    28956, 28964, 28972, 28980, 28988, 28996, 29000, 29006, 29012, 29020, 29028, 29036, 29044, 29050, 
    29056, 29063, 29071, 29077, 29086, 29095, 29104, 29112, 29120, 29128, 29136, 29144, 29152, 29158, 
    29164, 29170, 29178, 29186, 29194, 29200, 29205, 29226, 29252, 29267, 29282, 29295, 29307, 29321, 
    29335, 29347, 29358, 29372, 29386, 29398, 29409, 29422, 29435, 29446, 29456, 29464, 29476, 29484, 
    29496, 29508, 29516, 29528, 29539, 29549, 29558, 29568, 29580, 29588, 29600, 29611, 29620, 29628, 
    29637, 29646, 29655, 29663, 29675, 29686, 29696, 29705, 29715, 29727, 29735, 29744, 29757, 29769, 
    29780, 29790, 29801, 29814, 29823, 29832, 29845, 29857, 29868, 29878, 29889, 29902, 29911, 29918, 
    29929, 29939, 29948, 29956, 29965, 29978, 29989, 29996, 30007, 30020, 30028, 30036, 30044, 30052, 
    30058, 30065, 30072, 30080, 30086, 30092, 30103, 30112, 30123, 30137, 30148, 30159, 30168, 30179, 
    30188, 30197, 30207, 30226, 30239, 30254, 30261, 30270, 30288, 30300, 30307, 30315, 30323, 30337, 
    30351, 30357, 30364, 30371, 30379, 30388, 30396, 30408, 30417, 30425, 30431, 30440, 30447, 30454, 
    30461, 30467, 30475, 30483, 30491, 30499, 30507, 30515, 30523, 30531, 30541, 30550, 30558, 30567, 
    30575, 30582, 30591, 30599, 30606, 30613, 30622, 30630, 30637, 30645, 30653, 30660, 30667, 30676, 
    30684, 30691, 30697, 30705, 30713, 30721, 30730, 30738, 30747, 30755, 30763, 30769, 30778, 30787, 
    30795, 30803, 30811, 30820, 30828, 30835, 30843, 30851, 30859, 30866, 30873, 30879, 30885, 30895, 
    30904, 30912, 30920, 30930, 30939, 30945, 30954, 30963, 30971, 30980, 30988, 30998, 31008, 31017, 
    31027, 31037, 31047, 31056, 31065, 31074, 31083, 31091, 31100, 31109, 31119, 31127, 31136, 31144, 
    31153, 31161, 31170, 31178, 31187, 31196, 31205, 31213, 31222, 31231, 31240, 31249, 31257, 31266, 
    31274, 31286, 31294, 31306, 31313, 31322, 31329, 31338, 31346, 31361, 31376, 31389, 31401, 31415, 
    31429, 31441, 31452, 31466, 31480, 31492, 31503, 31516, 31529, 31540, 31550, 31558, 31570, 31578, 
    31590, 31598, 31610, 31621, 31635, 31645, 31654, 31662, 31674, 31685, 31694, 31702, 31711, 31720, 
    31729, 31737, 31749, 31760, 31774, 31784, 31793, 31801, 31808, 31819, 31829, 31842, 31851, 31859, 
    31866, 31875, 31884, 31893, 31901, 31911, 31919, 31927, 31935, 31945, 31953, 31960, 31969, 31976, 
    31982, 31991, 31997, 32006, 32014, 32022, 32030, 32038, 32046, 32054, 32063, 32071, 32078, 32085, 
    32092, 32102, 32111, 32119, 32127, 32137, 32146, 32154, 32162, 32170, 32180, 32189, 32197, 32205, 
    32215, 32224, 32232, 32241, 32248, 32257, 32264, 32273, 32281, 32289, 32299, 32307, 32314, 32323, 
    32330, 32336, 32342, 32350, 32355, 32364, 32371, 32378, 32386, 32395, 32402, 32410, 32418, 32436, 
    32452, 32457, 32462, 32469, 32476, 32479, 32484, 32490, 32494, 32500, 32509, 32515, 32524, 32530, 
    32537, 32545, 32549, 32558, 32566, 32581, 32592, 32597, 32603, 32609, 32614, 32619, 32625, 32633, 
    32640, 32646, 32651, 32656, 32683, 32704, 32724, 32731, 32742, 32749, 32756, 32763, 32770, 32777, 
    32784, 32790, 32798, 32809, 32821, 32827, 32835, 32845, 32857, 32864, 32871, 32878, 32885, 32900, 
    32907, 32914, 32920, 32925, 32930, 32935, 32940, 32948, 32953, 32962, 32968, 32973, 32980, 32987, 
    32992, 32997, 33002, 33010, 33015, 33026, 33033, 33040, 33047, 33054, 33060, 33066, 33074, 33081, 
    33088, 33095, 33103, 33108, 33114, 33120, 33130, 33142, 33152, 33164, 33172, 33178, 33183, 33189, 
    33195, 33200, 33205, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000BUNDLE\000ABS\000ADC"
    "ri\000ADCrr\000ADCrsi\000ADCrsr\000ADDSri\000ADDSrr\000ADDSrsi\000ADDSr"
    "sr\000ADDri\000ADDrr\000ADDrsi\000ADDrsr\000ADJCALLSTACKDOWN\000ADJCALL"
    "STACKUP\000ADR\000ANDri\000ANDrr\000ANDrsi\000ANDrsr\000ASRi\000ASRr\000"
    "ATOMADD6432\000ATOMAND6432\000ATOMCMPXCHG6432\000ATOMIC_CMP_SWAP_I16\000"
    "ATOMIC_CMP_SWAP_I32\000ATOMIC_CMP_SWAP_I8\000ATOMIC_LOAD_ADD_I16\000ATO"
    "MIC_LOAD_ADD_I32\000ATOMIC_LOAD_ADD_I8\000ATOMIC_LOAD_AND_I16\000ATOMIC"
    "_LOAD_AND_I32\000ATOMIC_LOAD_AND_I8\000ATOMIC_LOAD_MAX_I16\000ATOMIC_LO"
    "AD_MAX_I32\000ATOMIC_LOAD_MAX_I8\000ATOMIC_LOAD_MIN_I16\000ATOMIC_LOAD_"
    "MIN_I32\000ATOMIC_LOAD_MIN_I8\000ATOMIC_LOAD_NAND_I16\000ATOMIC_LOAD_NA"
    "ND_I32\000ATOMIC_LOAD_NAND_I8\000ATOMIC_LOAD_OR_I16\000ATOMIC_LOAD_OR_I"
    "32\000ATOMIC_LOAD_OR_I8\000ATOMIC_LOAD_SUB_I16\000ATOMIC_LOAD_SUB_I32\000"
    "ATOMIC_LOAD_SUB_I8\000ATOMIC_LOAD_UMAX_I16\000ATOMIC_LOAD_UMAX_I32\000A"
    "TOMIC_LOAD_UMAX_I8\000ATOMIC_LOAD_UMIN_I16\000ATOMIC_LOAD_UMIN_I32\000A"
    "TOMIC_LOAD_UMIN_I8\000ATOMIC_LOAD_XOR_I16\000ATOMIC_LOAD_XOR_I32\000ATO"
    "MIC_LOAD_XOR_I8\000ATOMIC_SWAP_I16\000ATOMIC_SWAP_I32\000ATOMIC_SWAP_I8"
    "\000ATOMNAND6432\000ATOMOR6432\000ATOMSUB6432\000ATOMSWAP6432\000ATOMXO"
    "R6432\000B\000BCCZi64\000BCCi64\000BFC\000BFI\000BICri\000BICrr\000BICr"
    "si\000BICrsr\000BKPT\000BL\000BLX\000BLX_pred\000BLXi\000BLXr9\000BLXr9"
    "_pred\000BL_pred\000BLr9\000BLr9_pred\000BMOVPCRX_CALL\000BMOVPCRXr9_CA"
    "LL\000BR_JTadd\000BR_JTm\000BR_JTr\000BX\000BXJ\000BX_CALL\000BX_RET\000"
    "BX_pred\000BXr9_CALL\000Bcc\000CDP\000CDP2\000CLREX\000CLZ\000CMNzri\000"
    "CMNzrr\000CMNzrsi\000CMNzrsr\000CMPri\000CMPrr\000CMPrsi\000CMPrsr\000C"
    "ONSTPOOL_ENTRY\000CPS1p\000CPS2p\000CPS3p\000DBG\000DMB\000DSB\000EORri"
    "\000EORrr\000EORrsi\000EORrsr\000FCONSTD\000FCONSTS\000FMSTAT\000ISB\000"
    "Int_eh_sjlj_dispatchsetup\000Int_eh_sjlj_dispatchsetup_nofp\000Int_eh_s"
    "jlj_longjmp\000Int_eh_sjlj_setjmp\000Int_eh_sjlj_setjmp_nofp\000LDC2L_O"
    "FFSET\000LDC2L_OPTION\000LDC2L_POST\000LDC2L_PRE\000LDC2_OFFSET\000LDC2"
    "_OPTION\000LDC2_POST\000LDC2_PRE\000LDCL_OFFSET\000LDCL_OPTION\000LDCL_"
    "POST\000LDCL_PRE\000LDC_OFFSET\000LDC_OPTION\000LDC_POST\000LDC_PRE\000"
    "LDMDA\000LDMDA_UPD\000LDMDB\000LDMDB_UPD\000LDMIA\000LDMIA_RET\000LDMIA"
    "_UPD\000LDMIB\000LDMIB_UPD\000LDRBT_POST_IMM\000LDRBT_POST_REG\000LDRB_"
    "POST_IMM\000LDRB_POST_REG\000LDRB_PRE_IMM\000LDRB_PRE_REG\000LDRBi12\000"
    "LDRBrs\000LDRD\000LDRD_POST\000LDRD_PRE\000LDREX\000LDREXB\000LDREXD\000"
    "LDREXH\000LDRH\000LDRHTi\000LDRHTr\000LDRH_POST\000LDRH_PRE\000LDRSB\000"
    "LDRSBTi\000LDRSBTr\000LDRSB_POST\000LDRSB_PRE\000LDRSH\000LDRSHTi\000LD"
    "RSHTr\000LDRSH_POST\000LDRSH_PRE\000LDRT_POST_IMM\000LDRT_POST_REG\000L"
    "DR_POST_IMM\000LDR_POST_REG\000LDR_PRE_IMM\000LDR_PRE_REG\000LDRcp\000L"
    "DRi12\000LDRrs\000LEApcrel\000LEApcrelJT\000LSLi\000LSLr\000LSRi\000LSR"
    "r\000MCR\000MCR2\000MCRR\000MCRR2\000MLA\000MLAv5\000MLS\000MOVCCi\000M"
    "OVCCi16\000MOVCCi32imm\000MOVCCr\000MOVCCsi\000MOVCCsr\000MOVPCLR\000MO"
    "VPCRX\000MOVTi16\000MOVTi16_ga_pcrel\000MOV_ga_dyn\000MOV_ga_pcrel\000M"
    "OV_ga_pcrel_ldr\000MOVi\000MOVi16\000MOVi16_ga_pcrel\000MOVi32imm\000MO"
    "Vr\000MOVr_TC\000MOVsi\000MOVsr\000MOVsra_flag\000MOVsrl_flag\000MRC\000"
    "MRC2\000MRRC\000MRRC2\000MRS\000MRSsys\000MSR\000MSRi\000MUL\000MULv5\000"
    "MVNCCi\000MVNi\000MVNr\000MVNsi\000MVNsr\000NOP\000ORRri\000ORRrr\000OR"
    "Rrsi\000ORRrsr\000PICADD\000PICLDR\000PICLDRB\000PICLDRH\000PICLDRSB\000"
    "PICLDRSH\000PICSTR\000PICSTRB\000PICSTRH\000PKHBT\000PKHTB\000PLDWi12\000"
    "PLDWrs\000PLDi12\000PLDrs\000PLIi12\000PLIrs\000QADD\000QADD16\000QADD8"
    "\000QASX\000QDADD\000QDSUB\000QSAX\000QSUB\000QSUB16\000QSUB8\000RBIT\000"
    "REV\000REV16\000REVSH\000RFEDA\000RFEDA_UPD\000RFEDB\000RFEDB_UPD\000RF"
    "EIA\000RFEIA_UPD\000RFEIB\000RFEIB_UPD\000RORi\000RORr\000RRX\000RRXi\000"
    "RSBSri\000RSBSrsi\000RSBSrsr\000RSBri\000RSBrr\000RSBrsi\000RSBrsr\000R"
    "SCri\000RSCrr\000RSCrsi\000RSCrsr\000SADD16\000SADD8\000SASX\000SBCri\000"
    "SBCrr\000SBCrsi\000SBCrsr\000SBFX\000SEL\000SETEND\000SEV\000SHADD16\000"
    "SHADD8\000SHASX\000SHSAX\000SHSUB16\000SHSUB8\000SMC\000SMLABB\000SMLAB"
    "T\000SMLAD\000SMLADX\000SMLAL\000SMLALBB\000SMLALBT\000SMLALD\000SMLALD"
    "X\000SMLALTB\000SMLALTT\000SMLALv5\000SMLATB\000SMLATT\000SMLAWB\000SML"
    "AWT\000SMLSD\000SMLSDX\000SMLSLD\000SMLSLDX\000SMMLA\000SMMLAR\000SMMLS"
    "\000SMMLSR\000SMMUL\000SMMULR\000SMUAD\000SMUADX\000SMULBB\000SMULBT\000"
    "SMULL\000SMULLv5\000SMULTB\000SMULTT\000SMULWB\000SMULWT\000SMUSD\000SM"
    "USDX\000SRSDA\000SRSDA_UPD\000SRSDB\000SRSDB_UPD\000SRSIA\000SRSIA_UPD\000"
    "SRSIB\000SRSIB_UPD\000SSAT\000SSAT16\000SSAX\000SSUB16\000SSUB8\000STC2"
    "L_OFFSET\000STC2L_OPTION\000STC2L_POST\000STC2L_PRE\000STC2_OFFSET\000S"
    "TC2_OPTION\000STC2_POST\000STC2_PRE\000STCL_OFFSET\000STCL_OPTION\000ST"
    "CL_POST\000STCL_PRE\000STC_OFFSET\000STC_OPTION\000STC_POST\000STC_PRE\000"
    "STMDA\000STMDA_UPD\000STMDB\000STMDB_UPD\000STMIA\000STMIA_UPD\000STMIB"
    "\000STMIB_UPD\000STRBT_POST_IMM\000STRBT_POST_REG\000STRB_POST_IMM\000S"
    "TRB_POST_REG\000STRB_PRE_IMM\000STRB_PRE_REG\000STRBi12\000STRBi_preidx"
    "\000STRBr_preidx\000STRBrs\000STRD\000STRD_POST\000STRD_PRE\000STREX\000"
    "STREXB\000STREXD\000STREXH\000STRH\000STRHTi\000STRHTr\000STRH_POST\000"
    "STRH_PRE\000STRH_preidx\000STRT_POST_IMM\000STRT_POST_REG\000STR_POST_I"
    "MM\000STR_POST_REG\000STR_PRE_IMM\000STR_PRE_REG\000STRi12\000STRi_prei"
    "dx\000STRr_preidx\000STRrs\000SUBSri\000SUBSrr\000SUBSrsi\000SUBSrsr\000"
    "SUBri\000SUBrr\000SUBrsi\000SUBrsr\000SVC\000SWP\000SWPB\000SXTAB\000SX"
    "TAB16\000SXTAH\000SXTB\000SXTB16\000SXTH\000TAILJMPd\000TAILJMPdND\000T"
    "AILJMPr\000TAILJMPrND\000TCRETURNdi\000TCRETURNdiND\000TCRETURNri\000TC"
    "RETURNriND\000TEQri\000TEQrr\000TEQrsi\000TEQrsr\000TPsoft\000TRAP\000T"
    "STri\000TSTrr\000TSTrsi\000TSTrsr\000UADD16\000UADD8\000UASX\000UBFX\000"
    "UHADD16\000UHADD8\000UHASX\000UHSAX\000UHSUB16\000UHSUB8\000UMAAL\000UM"
    "AALv5\000UMLAL\000UMLALv5\000UMULL\000UMULLv5\000UQADD16\000UQADD8\000U"
    "QASX\000UQSAX\000UQSUB16\000UQSUB8\000USAD8\000USADA8\000USAT\000USAT16"
    "\000USAX\000USUB16\000USUB8\000UXTAB\000UXTAB16\000UXTAH\000UXTB\000UXT"
    "B16\000UXTH\000VABALsv2i64\000VABALsv4i32\000VABALsv8i16\000VABALuv2i64"
    "\000VABALuv4i32\000VABALuv8i16\000VABAsv16i8\000VABAsv2i32\000VABAsv4i1"
    "6\000VABAsv4i32\000VABAsv8i16\000VABAsv8i8\000VABAuv16i8\000VABAuv2i32\000"
    "VABAuv4i16\000VABAuv4i32\000VABAuv8i16\000VABAuv8i8\000VABDLsv2i64\000V"
    "ABDLsv4i32\000VABDLsv8i16\000VABDLuv2i64\000VABDLuv4i32\000VABDLuv8i16\000"
    "VABDfd\000VABDfq\000VABDsv16i8\000VABDsv2i32\000VABDsv4i16\000VABDsv4i3"
    "2\000VABDsv8i16\000VABDsv8i8\000VABDuv16i8\000VABDuv2i32\000VABDuv4i16\000"
    "VABDuv4i32\000VABDuv8i16\000VABDuv8i8\000VABSD\000VABSS\000VABSfd\000VA"
    "BSfq\000VABSv16i8\000VABSv2i32\000VABSv4i16\000VABSv4i32\000VABSv8i16\000"
    "VABSv8i8\000VACGEd\000VACGEq\000VACGTd\000VACGTq\000VADDD\000VADDHNv2i3"
    "2\000VADDHNv4i16\000VADDHNv8i8\000VADDLsv2i64\000VADDLsv4i32\000VADDLsv"
    "8i16\000VADDLuv2i64\000VADDLuv4i32\000VADDLuv8i16\000VADDS\000VADDWsv2i"
    "64\000VADDWsv4i32\000VADDWsv8i16\000VADDWuv2i64\000VADDWuv4i32\000VADDW"
    "uv8i16\000VADDfd\000VADDfq\000VADDv16i8\000VADDv1i64\000VADDv2i32\000VA"
    "DDv2i64\000VADDv4i16\000VADDv4i32\000VADDv8i16\000VADDv8i8\000VANDd\000"
    "VANDq\000VBICd\000VBICiv2i32\000VBICiv4i16\000VBICiv4i32\000VBICiv8i16\000"
    "VBICq\000VBIFd\000VBIFq\000VBITd\000VBITq\000VBSLd\000VBSLq\000VCEQfd\000"
    "VCEQfq\000VCEQv16i8\000VCEQv2i32\000VCEQv4i16\000VCEQv4i32\000VCEQv8i16"
    "\000VCEQv8i8\000VCEQzv16i8\000VCEQzv2f32\000VCEQzv2i32\000VCEQzv4f32\000"
    "VCEQzv4i16\000VCEQzv4i32\000VCEQzv8i16\000VCEQzv8i8\000VCGEfd\000VCGEfq"
    "\000VCGEsv16i8\000VCGEsv2i32\000VCGEsv4i16\000VCGEsv4i32\000VCGEsv8i16\000"
    "VCGEsv8i8\000VCGEuv16i8\000VCGEuv2i32\000VCGEuv4i16\000VCGEuv4i32\000VC"
    "GEuv8i16\000VCGEuv8i8\000VCGEzv16i8\000VCGEzv2f32\000VCGEzv2i32\000VCGE"
    "zv4f32\000VCGEzv4i16\000VCGEzv4i32\000VCGEzv8i16\000VCGEzv8i8\000VCGTfd"
    "\000VCGTfq\000VCGTsv16i8\000VCGTsv2i32\000VCGTsv4i16\000VCGTsv4i32\000V"
    "CGTsv8i16\000VCGTsv8i8\000VCGTuv16i8\000VCGTuv2i32\000VCGTuv4i16\000VCG"
    "Tuv4i32\000VCGTuv8i16\000VCGTuv8i8\000VCGTzv16i8\000VCGTzv2f32\000VCGTz"
    "v2i32\000VCGTzv4f32\000VCGTzv4i16\000VCGTzv4i32\000VCGTzv8i16\000VCGTzv"
    "8i8\000VCLEzv16i8\000VCLEzv2f32\000VCLEzv2i32\000VCLEzv4f32\000VCLEzv4i"
    "16\000VCLEzv4i32\000VCLEzv8i16\000VCLEzv8i8\000VCLSv16i8\000VCLSv2i32\000"
    "VCLSv4i16\000VCLSv4i32\000VCLSv8i16\000VCLSv8i8\000VCLTzv16i8\000VCLTzv"
    "2f32\000VCLTzv2i32\000VCLTzv4f32\000VCLTzv4i16\000VCLTzv4i32\000VCLTzv8"
    "i16\000VCLTzv8i8\000VCLZv16i8\000VCLZv2i32\000VCLZv4i16\000VCLZv4i32\000"
    "VCLZv8i16\000VCLZv8i8\000VCMPD\000VCMPED\000VCMPES\000VCMPEZD\000VCMPEZ"
    "S\000VCMPS\000VCMPZD\000VCMPZS\000VCNTd\000VCNTq\000VCVTBHS\000VCVTBSH\000"
    "VCVTDS\000VCVTSD\000VCVTTHS\000VCVTTSH\000VCVTf2h\000VCVTf2sd\000VCVTf2"
    "sq\000VCVTf2ud\000VCVTf2uq\000VCVTf2xsd\000VCVTf2xsq\000VCVTf2xud\000VC"
    "VTf2xuq\000VCVTh2f\000VCVTs2fd\000VCVTs2fq\000VCVTu2fd\000VCVTu2fq\000V"
    "CVTxs2fd\000VCVTxs2fq\000VCVTxu2fd\000VCVTxu2fq\000VDIVD\000VDIVS\000VD"
    "UP16d\000VDUP16q\000VDUP32d\000VDUP32q\000VDUP8d\000VDUP8q\000VDUPLN16d"
    "\000VDUPLN16q\000VDUPLN32d\000VDUPLN32q\000VDUPLN8d\000VDUPLN8q\000VDUP"
    "fdf\000VDUPfqf\000VEORd\000VEORq\000VEXTd16\000VEXTd32\000VEXTd8\000VEX"
    "Tq16\000VEXTq32\000VEXTq64\000VEXTq8\000VFMAD\000VFMAS\000VFMAfd\000VFM"
    "Afq\000VFMSD\000VFMSS\000VFMSfd\000VFMSfq\000VFNMAD\000VFNMAS\000VFNMSD"
    "\000VFNMSS\000VGETLNi32\000VGETLNs16\000VGETLNs8\000VGETLNu16\000VGETLN"
    "u8\000VHADDsv16i8\000VHADDsv2i32\000VHADDsv4i16\000VHADDsv4i32\000VHADD"
    "sv8i16\000VHADDsv8i8\000VHADDuv16i8\000VHADDuv2i32\000VHADDuv4i16\000VH"
    "ADDuv4i32\000VHADDuv8i16\000VHADDuv8i8\000VHSUBsv16i8\000VHSUBsv2i32\000"
    "VHSUBsv4i16\000VHSUBsv4i32\000VHSUBsv8i16\000VHSUBsv8i8\000VHSUBuv16i8\000"
    "VHSUBuv2i32\000VHSUBuv4i16\000VHSUBuv4i32\000VHSUBuv8i16\000VHSUBuv8i8\000"
    "VLD1DUPd16\000VLD1DUPd16wb_fixed\000VLD1DUPd16wb_register\000VLD1DUPd32"
    "\000VLD1DUPd32wb_fixed\000VLD1DUPd32wb_register\000VLD1DUPd8\000VLD1DUP"
    "d8wb_fixed\000VLD1DUPd8wb_register\000VLD1DUPq16\000VLD1DUPq16Pseudo\000"
    "VLD1DUPq16PseudoWB_fixed\000VLD1DUPq16PseudoWB_register\000VLD1DUPq16wb"
    "_fixed\000VLD1DUPq16wb_register\000VLD1DUPq32\000VLD1DUPq32Pseudo\000VL"
    "D1DUPq32PseudoWB_fixed\000VLD1DUPq32PseudoWB_register\000VLD1DUPq32wb_f"
    "ixed\000VLD1DUPq32wb_register\000VLD1DUPq8\000VLD1DUPq8Pseudo\000VLD1DU"
    "Pq8PseudoWB_fixed\000VLD1DUPq8PseudoWB_register\000VLD1DUPq8wb_fixed\000"
    "VLD1DUPq8wb_register\000VLD1LNd16\000VLD1LNd16_UPD\000VLD1LNd32\000VLD1"
    "LNd32_UPD\000VLD1LNd8\000VLD1LNd8_UPD\000VLD1LNdAsm_16\000VLD1LNdAsm_32"
    "\000VLD1LNdAsm_8\000VLD1LNdAsm_F\000VLD1LNdAsm_F32\000VLD1LNdAsm_I16\000"
    "VLD1LNdAsm_I32\000VLD1LNdAsm_I8\000VLD1LNdAsm_P16\000VLD1LNdAsm_P8\000V"
    "LD1LNdAsm_S16\000VLD1LNdAsm_S32\000VLD1LNdAsm_S8\000VLD1LNdAsm_U16\000V"
    "LD1LNdAsm_U32\000VLD1LNdAsm_U8\000VLD1LNdWB_fixed_Asm_16\000VLD1LNdWB_f"
    "ixed_Asm_32\000VLD1LNdWB_fixed_Asm_8\000VLD1LNdWB_fixed_Asm_F\000VLD1LN"
    "dWB_fixed_Asm_F32\000VLD1LNdWB_fixed_Asm_I16\000VLD1LNdWB_fixed_Asm_I32"
    "\000VLD1LNdWB_fixed_Asm_I8\000VLD1LNdWB_fixed_Asm_P16\000VLD1LNdWB_fixe"
    "d_Asm_P8\000VLD1LNdWB_fixed_Asm_S16\000VLD1LNdWB_fixed_Asm_S32\000VLD1L"
    "NdWB_fixed_Asm_S8\000VLD1LNdWB_fixed_Asm_U16\000VLD1LNdWB_fixed_Asm_U32"
    "\000VLD1LNdWB_fixed_Asm_U8\000VLD1LNdWB_register_Asm_16\000VLD1LNdWB_re"
    "gister_Asm_32\000VLD1LNdWB_register_Asm_8\000VLD1LNdWB_register_Asm_F\000"
    "VLD1LNdWB_register_Asm_F32\000VLD1LNdWB_register_Asm_I16\000VLD1LNdWB_r"
    "egister_Asm_I32\000VLD1LNdWB_register_Asm_I8\000VLD1LNdWB_register_Asm_"
    "P16\000VLD1LNdWB_register_Asm_P8\000VLD1LNdWB_register_Asm_S16\000VLD1L"
    "NdWB_register_Asm_S32\000VLD1LNdWB_register_Asm_S8\000VLD1LNdWB_registe"
    "r_Asm_U16\000VLD1LNdWB_register_Asm_U32\000VLD1LNdWB_register_Asm_U8\000"
    "VLD1LNq16Pseudo\000VLD1LNq16Pseudo_UPD\000VLD1LNq32Pseudo\000VLD1LNq32P"
    "seudo_UPD\000VLD1LNq8Pseudo\000VLD1LNq8Pseudo_UPD\000VLD1d16\000VLD1d16"
    "Q\000VLD1d16Qwb_fixed\000VLD1d16Qwb_register\000VLD1d16T\000VLD1d16Twb_"
    "fixed\000VLD1d16Twb_register\000VLD1d16wb_fixed\000VLD1d16wb_register\000"
    "VLD1d32\000VLD1d32Q\000VLD1d32Qwb_fixed\000VLD1d32Qwb_register\000VLD1d"
    "32T\000VLD1d32Twb_fixed\000VLD1d32Twb_register\000VLD1d32wb_fixed\000VL"
    "D1d32wb_register\000VLD1d64\000VLD1d64Q\000VLD1d64QPseudo\000VLD1d64Qwb"
    "_fixed\000VLD1d64Qwb_register\000VLD1d64T\000VLD1d64TPseudo\000VLD1d64T"
    "wb_fixed\000VLD1d64Twb_register\000VLD1d64wb_fixed\000VLD1d64wb_registe"
    "r\000VLD1d8\000VLD1d8Q\000VLD1d8Qwb_fixed\000VLD1d8Qwb_register\000VLD1"
    "d8T\000VLD1d8Twb_fixed\000VLD1d8Twb_register\000VLD1d8wb_fixed\000VLD1d"
    "8wb_register\000VLD1q16\000VLD1q16Pseudo\000VLD1q16PseudoWB_fixed\000VL"
    "D1q16PseudoWB_register\000VLD1q16wb_fixed\000VLD1q16wb_register\000VLD1"
    "q32\000VLD1q32Pseudo\000VLD1q32PseudoWB_fixed\000VLD1q32PseudoWB_regist"
    "er\000VLD1q32wb_fixed\000VLD1q32wb_register\000VLD1q64\000VLD1q64Pseudo"
    "\000VLD1q64PseudoWB_fixed\000VLD1q64PseudoWB_register\000VLD1q64wb_fixe"
    "d\000VLD1q64wb_register\000VLD1q8\000VLD1q8Pseudo\000VLD1q8PseudoWB_fix"
    "ed\000VLD1q8PseudoWB_register\000VLD1q8wb_fixed\000VLD1q8wb_register\000"
    "VLD2DUPd16\000VLD2DUPd16Pseudo\000VLD2DUPd16PseudoWB_fixed\000VLD2DUPd1"
    "6PseudoWB_register\000VLD2DUPd16wb_fixed\000VLD2DUPd16wb_register\000VL"
    "D2DUPd16x2\000VLD2DUPd16x2wb_fixed\000VLD2DUPd16x2wb_register\000VLD2DU"
    "Pd32\000VLD2DUPd32Pseudo\000VLD2DUPd32PseudoWB_fixed\000VLD2DUPd32Pseud"
    "oWB_register\000VLD2DUPd32wb_fixed\000VLD2DUPd32wb_register\000VLD2DUPd"
    "32x2\000VLD2DUPd32x2wb_fixed\000VLD2DUPd32x2wb_register\000VLD2DUPd8\000"
    "VLD2DUPd8Pseudo\000VLD2DUPd8PseudoWB_fixed\000VLD2DUPd8PseudoWB_registe"
    "r\000VLD2DUPd8wb_fixed\000VLD2DUPd8wb_register\000VLD2DUPd8x2\000VLD2DU"
    "Pd8x2wb_fixed\000VLD2DUPd8x2wb_register\000VLD2LNd16\000VLD2LNd16Pseudo"
    "\000VLD2LNd16Pseudo_UPD\000VLD2LNd16_UPD\000VLD2LNd32\000VLD2LNd32Pseud"
    "o\000VLD2LNd32Pseudo_UPD\000VLD2LNd32_UPD\000VLD2LNd8\000VLD2LNd8Pseudo"
    "\000VLD2LNd8Pseudo_UPD\000VLD2LNd8_UPD\000VLD2LNdAsm_16\000VLD2LNdAsm_3"
    "2\000VLD2LNdAsm_8\000VLD2LNdAsm_F\000VLD2LNdAsm_F32\000VLD2LNdAsm_I16\000"
    "VLD2LNdAsm_I32\000VLD2LNdAsm_I8\000VLD2LNdAsm_P16\000VLD2LNdAsm_P8\000V"
    "LD2LNdAsm_S16\000VLD2LNdAsm_S32\000VLD2LNdAsm_S8\000VLD2LNdAsm_U16\000V"
    "LD2LNdAsm_U32\000VLD2LNdAsm_U8\000VLD2LNdWB_fixed_Asm_16\000VLD2LNdWB_f"
    "ixed_Asm_32\000VLD2LNdWB_fixed_Asm_8\000VLD2LNdWB_fixed_Asm_F\000VLD2LN"
    "dWB_fixed_Asm_F32\000VLD2LNdWB_fixed_Asm_I16\000VLD2LNdWB_fixed_Asm_I32"
    "\000VLD2LNdWB_fixed_Asm_I8\000VLD2LNdWB_fixed_Asm_P16\000VLD2LNdWB_fixe"
    "d_Asm_P8\000VLD2LNdWB_fixed_Asm_S16\000VLD2LNdWB_fixed_Asm_S32\000VLD2L"
    "NdWB_fixed_Asm_S8\000VLD2LNdWB_fixed_Asm_U16\000VLD2LNdWB_fixed_Asm_U32"
    "\000VLD2LNdWB_fixed_Asm_U8\000VLD2LNdWB_register_Asm_16\000VLD2LNdWB_re"
    "gister_Asm_32\000VLD2LNdWB_register_Asm_8\000VLD2LNdWB_register_Asm_F\000"
    "VLD2LNdWB_register_Asm_F32\000VLD2LNdWB_register_Asm_I16\000VLD2LNdWB_r"
    "egister_Asm_I32\000VLD2LNdWB_register_Asm_I8\000VLD2LNdWB_register_Asm_"
    "P16\000VLD2LNdWB_register_Asm_P8\000VLD2LNdWB_register_Asm_S16\000VLD2L"
    "NdWB_register_Asm_S32\000VLD2LNdWB_register_Asm_S8\000VLD2LNdWB_registe"
    "r_Asm_U16\000VLD2LNdWB_register_Asm_U32\000VLD2LNdWB_register_Asm_U8\000"
    "VLD2LNq16\000VLD2LNq16Pseudo\000VLD2LNq16Pseudo_UPD\000VLD2LNq16_UPD\000"
    "VLD2LNq32\000VLD2LNq32Pseudo\000VLD2LNq32Pseudo_UPD\000VLD2LNq32_UPD\000"
    "VLD2LNqAsm_16\000VLD2LNqAsm_32\000VLD2LNqAsm_F\000VLD2LNqAsm_F32\000VLD"
    "2LNqAsm_I16\000VLD2LNqAsm_I32\000VLD2LNqAsm_P16\000VLD2LNqAsm_S16\000VL"
    "D2LNqAsm_S32\000VLD2LNqAsm_U16\000VLD2LNqAsm_U32\000VLD2LNqWB_fixed_Asm"
    "_16\000VLD2LNqWB_fixed_Asm_32\000VLD2LNqWB_fixed_Asm_F\000VLD2LNqWB_fix"
    "ed_Asm_F32\000VLD2LNqWB_fixed_Asm_I16\000VLD2LNqWB_fixed_Asm_I32\000VLD"
    "2LNqWB_fixed_Asm_P16\000VLD2LNqWB_fixed_Asm_S16\000VLD2LNqWB_fixed_Asm_"
    "S32\000VLD2LNqWB_fixed_Asm_U16\000VLD2LNqWB_fixed_Asm_U32\000VLD2LNqWB_"
    "register_Asm_16\000VLD2LNqWB_register_Asm_32\000VLD2LNqWB_register_Asm_"
    "F\000VLD2LNqWB_register_Asm_F32\000VLD2LNqWB_register_Asm_I16\000VLD2LN"
    "qWB_register_Asm_I32\000VLD2LNqWB_register_Asm_P16\000VLD2LNqWB_registe"
    "r_Asm_S16\000VLD2LNqWB_register_Asm_S32\000VLD2LNqWB_register_Asm_U16\000"
    "VLD2LNqWB_register_Asm_U32\000VLD2b16\000VLD2b16wb_fixed\000VLD2b16wb_r"
    "egister\000VLD2b32\000VLD2b32wb_fixed\000VLD2b32wb_register\000VLD2b8\000"
    "VLD2b8wb_fixed\000VLD2b8wb_register\000VLD2d16\000VLD2d16Pseudo\000VLD2"
    "d16PseudoWB_fixed\000VLD2d16PseudoWB_register\000VLD2d16wb_fixed\000VLD"
    "2d16wb_register\000VLD2d32\000VLD2d32Pseudo\000VLD2d32PseudoWB_fixed\000"
    "VLD2d32PseudoWB_register\000VLD2d32wb_fixed\000VLD2d32wb_register\000VL"
    "D2d8\000VLD2d8Pseudo\000VLD2d8PseudoWB_fixed\000VLD2d8PseudoWB_register"
    "\000VLD2d8wb_fixed\000VLD2d8wb_register\000VLD2q16\000VLD2q16Pseudo\000"
    "VLD2q16PseudoWB_fixed\000VLD2q16PseudoWB_register\000VLD2q16wb_fixed\000"
    "VLD2q16wb_register\000VLD2q32\000VLD2q32Pseudo\000VLD2q32PseudoWB_fixed"
    "\000VLD2q32PseudoWB_register\000VLD2q32wb_fixed\000VLD2q32wb_register\000"
    "VLD2q8\000VLD2q8Pseudo\000VLD2q8PseudoWB_fixed\000VLD2q8PseudoWB_regist"
    "er\000VLD2q8wb_fixed\000VLD2q8wb_register\000VLD3DUPd16\000VLD3DUPd16Ps"
    "eudo\000VLD3DUPd16Pseudo_UPD\000VLD3DUPd16_UPD\000VLD3DUPd16x2\000VLD3D"
    "UPd16x2_UPD\000VLD3DUPd32\000VLD3DUPd32Pseudo\000VLD3DUPd32Pseudo_UPD\000"
    "VLD3DUPd32_UPD\000VLD3DUPd32x2\000VLD3DUPd32x2_UPD\000VLD3DUPd8\000VLD3"
    "DUPd8Pseudo\000VLD3DUPd8Pseudo_UPD\000VLD3DUPd8_UPD\000VLD3DUPd8x2\000V"
    "LD3DUPd8x2_UPD\000VLD3LNd16\000VLD3LNd16Pseudo\000VLD3LNd16Pseudo_UPD\000"
    "VLD3LNd16_UPD\000VLD3LNd32\000VLD3LNd32Pseudo\000VLD3LNd32Pseudo_UPD\000"
    "VLD3LNd32_UPD\000VLD3LNd8\000VLD3LNd8Pseudo\000VLD3LNd8Pseudo_UPD\000VL"
    "D3LNd8_UPD\000VLD3LNq16\000VLD3LNq16Pseudo\000VLD3LNq16Pseudo_UPD\000VL"
    "D3LNq16_UPD\000VLD3LNq32\000VLD3LNq32Pseudo\000VLD3LNq32Pseudo_UPD\000V"
    "LD3LNq32_UPD\000VLD3d16\000VLD3d16Pseudo\000VLD3d16Pseudo_UPD\000VLD3d1"
    "6_UPD\000VLD3d32\000VLD3d32Pseudo\000VLD3d32Pseudo_UPD\000VLD3d32_UPD\000"
    "VLD3d8\000VLD3d8Pseudo\000VLD3d8Pseudo_UPD\000VLD3d8_UPD\000VLD3q16\000"
    "VLD3q16Pseudo_UPD\000VLD3q16_UPD\000VLD3q16oddPseudo\000VLD3q16oddPseud"
    "o_UPD\000VLD3q32\000VLD3q32Pseudo_UPD\000VLD3q32_UPD\000VLD3q32oddPseud"
    "o\000VLD3q32oddPseudo_UPD\000VLD3q8\000VLD3q8Pseudo_UPD\000VLD3q8_UPD\000"
    "VLD3q8oddPseudo\000VLD3q8oddPseudo_UPD\000VLD4DUPd16\000VLD4DUPd16Pseud"
    "o\000VLD4DUPd16Pseudo_UPD\000VLD4DUPd16_UPD\000VLD4DUPd16x2\000VLD4DUPd"
    "16x2_UPD\000VLD4DUPd32\000VLD4DUPd32Pseudo\000VLD4DUPd32Pseudo_UPD\000V"
    "LD4DUPd32_UPD\000VLD4DUPd32x2\000VLD4DUPd32x2_UPD\000VLD4DUPd8\000VLD4D"
    "UPd8Pseudo\000VLD4DUPd8Pseudo_UPD\000VLD4DUPd8_UPD\000VLD4DUPd8x2\000VL"
    "D4DUPd8x2_UPD\000VLD4LNd16\000VLD4LNd16Pseudo\000VLD4LNd16Pseudo_UPD\000"
    "VLD4LNd16_UPD\000VLD4LNd32\000VLD4LNd32Pseudo\000VLD4LNd32Pseudo_UPD\000"
    "VLD4LNd32_UPD\000VLD4LNd8\000VLD4LNd8Pseudo\000VLD4LNd8Pseudo_UPD\000VL"
    "D4LNd8_UPD\000VLD4LNq16\000VLD4LNq16Pseudo\000VLD4LNq16Pseudo_UPD\000VL"
    "D4LNq16_UPD\000VLD4LNq32\000VLD4LNq32Pseudo\000VLD4LNq32Pseudo_UPD\000V"
    "LD4LNq32_UPD\000VLD4d16\000VLD4d16Pseudo\000VLD4d16Pseudo_UPD\000VLD4d1"
    "6_UPD\000VLD4d32\000VLD4d32Pseudo\000VLD4d32Pseudo_UPD\000VLD4d32_UPD\000"
    "VLD4d8\000VLD4d8Pseudo\000VLD4d8Pseudo_UPD\000VLD4d8_UPD\000VLD4q16\000"
    "VLD4q16Pseudo_UPD\000VLD4q16_UPD\000VLD4q16oddPseudo\000VLD4q16oddPseud"
    "o_UPD\000VLD4q32\000VLD4q32Pseudo_UPD\000VLD4q32_UPD\000VLD4q32oddPseud"
    "o\000VLD4q32oddPseudo_UPD\000VLD4q8\000VLD4q8Pseudo_UPD\000VLD4q8_UPD\000"
    "VLD4q8oddPseudo\000VLD4q8oddPseudo_UPD\000VLDMDDB_UPD\000VLDMDIA\000VLD"
    "MDIA_UPD\000VLDMQIA\000VLDMSDB_UPD\000VLDMSIA\000VLDMSIA_UPD\000VLDRD\000"
    "VLDRS\000VMAXfd\000VMAXfq\000VMAXsv16i8\000VMAXsv2i32\000VMAXsv4i16\000"
    "VMAXsv4i32\000VMAXsv8i16\000VMAXsv8i8\000VMAXuv16i8\000VMAXuv2i32\000VM"
    "AXuv4i16\000VMAXuv4i32\000VMAXuv8i16\000VMAXuv8i8\000VMINfd\000VMINfq\000"
    "VMINsv16i8\000VMINsv2i32\000VMINsv4i16\000VMINsv4i32\000VMINsv8i16\000V"
    "MINsv8i8\000VMINuv16i8\000VMINuv2i32\000VMINuv4i16\000VMINuv4i32\000VMI"
    "Nuv8i16\000VMINuv8i8\000VMLAD\000VMLALslsv2i32\000VMLALslsv4i16\000VMLA"
    "Lsluv2i32\000VMLALsluv4i16\000VMLALsv2i64\000VMLALsv4i32\000VMLALsv8i16"
    "\000VMLALuv2i64\000VMLALuv4i32\000VMLALuv8i16\000VMLAS\000VMLAfd\000VML"
    "Afq\000VMLAslfd\000VMLAslfq\000VMLAslv2i32\000VMLAslv4i16\000VMLAslv4i3"
    "2\000VMLAslv8i16\000VMLAv16i8\000VMLAv2i32\000VMLAv4i16\000VMLAv4i32\000"
    "VMLAv8i16\000VMLAv8i8\000VMLSD\000VMLSLslsv2i32\000VMLSLslsv4i16\000VML"
    "SLsluv2i32\000VMLSLsluv4i16\000VMLSLsv2i64\000VMLSLsv4i32\000VMLSLsv8i1"
    "6\000VMLSLuv2i64\000VMLSLuv4i32\000VMLSLuv8i16\000VMLSS\000VMLSfd\000VM"
    "LSfq\000VMLSslfd\000VMLSslfq\000VMLSslv2i32\000VMLSslv4i16\000VMLSslv4i"
    "32\000VMLSslv8i16\000VMLSv16i8\000VMLSv2i32\000VMLSv4i16\000VMLSv4i32\000"
    "VMLSv8i16\000VMLSv8i8\000VMOVD\000VMOVDRR\000VMOVDcc\000VMOVLsv2i64\000"
    "VMOVLsv4i32\000VMOVLsv8i16\000VMOVLuv2i64\000VMOVLuv4i32\000VMOVLuv8i16"
    "\000VMOVNv2i32\000VMOVNv4i16\000VMOVNv8i8\000VMOVRRD\000VMOVRRS\000VMOV"
    "RS\000VMOVS\000VMOVSR\000VMOVSRR\000VMOVScc\000VMOVv16i8\000VMOVv1i64\000"
    "VMOVv2f32\000VMOVv2i32\000VMOVv2i64\000VMOVv4f32\000VMOVv4i16\000VMOVv4"
    "i32\000VMOVv8i16\000VMOVv8i8\000VMRS\000VMRS_FPEXC\000VMRS_FPSID\000VMS"
    "R\000VMSR_FPEXC\000VMSR_FPSID\000VMULD\000VMULLp\000VMULLslsv2i32\000VM"
    "ULLslsv4i16\000VMULLsluv2i32\000VMULLsluv4i16\000VMULLsv2i64\000VMULLsv"
    "4i32\000VMULLsv8i16\000VMULLuv2i64\000VMULLuv4i32\000VMULLuv8i16\000VMU"
    "LS\000VMULfd\000VMULfq\000VMULpd\000VMULpq\000VMULslfd\000VMULslfq\000V"
    "MULslv2i32\000VMULslv4i16\000VMULslv4i32\000VMULslv8i16\000VMULv16i8\000"
    "VMULv2i32\000VMULv4i16\000VMULv4i32\000VMULv8i16\000VMULv8i8\000VMVNd\000"
    "VMVNq\000VMVNv2i32\000VMVNv4i16\000VMVNv4i32\000VMVNv8i16\000VNEGD\000V"
    "NEGS\000VNEGf32q\000VNEGfd\000VNEGs16d\000VNEGs16q\000VNEGs32d\000VNEGs"
    "32q\000VNEGs8d\000VNEGs8q\000VNMLAD\000VNMLAS\000VNMLSD\000VNMLSS\000VN"
    "MULD\000VNMULS\000VORNd\000VORNq\000VORRd\000VORRiv2i32\000VORRiv4i16\000"
    "VORRiv4i32\000VORRiv8i16\000VORRq\000VPADALsv16i8\000VPADALsv2i32\000VP"
    "ADALsv4i16\000VPADALsv4i32\000VPADALsv8i16\000VPADALsv8i8\000VPADALuv16"
    "i8\000VPADALuv2i32\000VPADALuv4i16\000VPADALuv4i32\000VPADALuv8i16\000V"
    "PADALuv8i8\000VPADDLsv16i8\000VPADDLsv2i32\000VPADDLsv4i16\000VPADDLsv4"
    "i32\000VPADDLsv8i16\000VPADDLsv8i8\000VPADDLuv16i8\000VPADDLuv2i32\000V"
    "PADDLuv4i16\000VPADDLuv4i32\000VPADDLuv8i16\000VPADDLuv8i8\000VPADDf\000"
    "VPADDi16\000VPADDi32\000VPADDi8\000VPMAXf\000VPMAXs16\000VPMAXs32\000VP"
    "MAXs8\000VPMAXu16\000VPMAXu32\000VPMAXu8\000VPMINf\000VPMINs16\000VPMIN"
    "s32\000VPMINs8\000VPMINu16\000VPMINu32\000VPMINu8\000VQABSv16i8\000VQAB"
    "Sv2i32\000VQABSv4i16\000VQABSv4i32\000VQABSv8i16\000VQABSv8i8\000VQADDs"
    "v16i8\000VQADDsv1i64\000VQADDsv2i32\000VQADDsv2i64\000VQADDsv4i16\000VQ"
    "ADDsv4i32\000VQADDsv8i16\000VQADDsv8i8\000VQADDuv16i8\000VQADDuv1i64\000"
    "VQADDuv2i32\000VQADDuv2i64\000VQADDuv4i16\000VQADDuv4i32\000VQADDuv8i16"
    "\000VQADDuv8i8\000VQDMLALslv2i32\000VQDMLALslv4i16\000VQDMLALv2i64\000V"
    "QDMLALv4i32\000VQDMLSLslv2i32\000VQDMLSLslv4i16\000VQDMLSLv2i64\000VQDM"
    "LSLv4i32\000VQDMULHslv2i32\000VQDMULHslv4i16\000VQDMULHslv4i32\000VQDMU"
    "LHslv8i16\000VQDMULHv2i32\000VQDMULHv4i16\000VQDMULHv4i32\000VQDMULHv8i"
    "16\000VQDMULLslv2i32\000VQDMULLslv4i16\000VQDMULLv2i64\000VQDMULLv4i32\000"
    "VQMOVNsuv2i32\000VQMOVNsuv4i16\000VQMOVNsuv8i8\000VQMOVNsv2i32\000VQMOV"
    "Nsv4i16\000VQMOVNsv8i8\000VQMOVNuv2i32\000VQMOVNuv4i16\000VQMOVNuv8i8\000"
    "VQNEGv16i8\000VQNEGv2i32\000VQNEGv4i16\000VQNEGv4i32\000VQNEGv8i16\000V"
    "QNEGv8i8\000VQRDMULHslv2i32\000VQRDMULHslv4i16\000VQRDMULHslv4i32\000VQ"
    "RDMULHslv8i16\000VQRDMULHv2i32\000VQRDMULHv4i16\000VQRDMULHv4i32\000VQR"
    "DMULHv8i16\000VQRSHLsv16i8\000VQRSHLsv1i64\000VQRSHLsv2i32\000VQRSHLsv2"
    "i64\000VQRSHLsv4i16\000VQRSHLsv4i32\000VQRSHLsv8i16\000VQRSHLsv8i8\000V"
    "QRSHLuv16i8\000VQRSHLuv1i64\000VQRSHLuv2i32\000VQRSHLuv2i64\000VQRSHLuv"
    "4i16\000VQRSHLuv4i32\000VQRSHLuv8i16\000VQRSHLuv8i8\000VQRSHRNsv2i32\000"
    "VQRSHRNsv4i16\000VQRSHRNsv8i8\000VQRSHRNuv2i32\000VQRSHRNuv4i16\000VQRS"
    "HRNuv8i8\000VQRSHRUNv2i32\000VQRSHRUNv4i16\000VQRSHRUNv8i8\000VQSHLsiv1"
    "6i8\000VQSHLsiv1i64\000VQSHLsiv2i32\000VQSHLsiv2i64\000VQSHLsiv4i16\000"
    "VQSHLsiv4i32\000VQSHLsiv8i16\000VQSHLsiv8i8\000VQSHLsuv16i8\000VQSHLsuv"
    "1i64\000VQSHLsuv2i32\000VQSHLsuv2i64\000VQSHLsuv4i16\000VQSHLsuv4i32\000"
    "VQSHLsuv8i16\000VQSHLsuv8i8\000VQSHLsv16i8\000VQSHLsv1i64\000VQSHLsv2i3"
    "2\000VQSHLsv2i64\000VQSHLsv4i16\000VQSHLsv4i32\000VQSHLsv8i16\000VQSHLs"
    "v8i8\000VQSHLuiv16i8\000VQSHLuiv1i64\000VQSHLuiv2i32\000VQSHLuiv2i64\000"
    "VQSHLuiv4i16\000VQSHLuiv4i32\000VQSHLuiv8i16\000VQSHLuiv8i8\000VQSHLuv1"
    "6i8\000VQSHLuv1i64\000VQSHLuv2i32\000VQSHLuv2i64\000VQSHLuv4i16\000VQSH"
    "Luv4i32\000VQSHLuv8i16\000VQSHLuv8i8\000VQSHRNsv2i32\000VQSHRNsv4i16\000"
    "VQSHRNsv8i8\000VQSHRNuv2i32\000VQSHRNuv4i16\000VQSHRNuv8i8\000VQSHRUNv2"
    "i32\000VQSHRUNv4i16\000VQSHRUNv8i8\000VQSUBsv16i8\000VQSUBsv1i64\000VQS"
    "UBsv2i32\000VQSUBsv2i64\000VQSUBsv4i16\000VQSUBsv4i32\000VQSUBsv8i16\000"
    "VQSUBsv8i8\000VQSUBuv16i8\000VQSUBuv1i64\000VQSUBuv2i32\000VQSUBuv2i64\000"
    "VQSUBuv4i16\000VQSUBuv4i32\000VQSUBuv8i16\000VQSUBuv8i8\000VRADDHNv2i32"
    "\000VRADDHNv4i16\000VRADDHNv8i8\000VRECPEd\000VRECPEfd\000VRECPEfq\000V"
    "RECPEq\000VRECPSfd\000VRECPSfq\000VREV16d8\000VREV16q8\000VREV32d16\000"
    "VREV32d8\000VREV32q16\000VREV32q8\000VREV64d16\000VREV64d32\000VREV64d8"
    "\000VREV64q16\000VREV64q32\000VREV64q8\000VRHADDsv16i8\000VRHADDsv2i32\000"
    "VRHADDsv4i16\000VRHADDsv4i32\000VRHADDsv8i16\000VRHADDsv8i8\000VRHADDuv"
    "16i8\000VRHADDuv2i32\000VRHADDuv4i16\000VRHADDuv4i32\000VRHADDuv8i16\000"
    "VRHADDuv8i8\000VRSHLsv16i8\000VRSHLsv1i64\000VRSHLsv2i32\000VRSHLsv2i64"
    "\000VRSHLsv4i16\000VRSHLsv4i32\000VRSHLsv8i16\000VRSHLsv8i8\000VRSHLuv1"
    "6i8\000VRSHLuv1i64\000VRSHLuv2i32\000VRSHLuv2i64\000VRSHLuv4i16\000VRSH"
    "Luv4i32\000VRSHLuv8i16\000VRSHLuv8i8\000VRSHRNv2i32\000VRSHRNv4i16\000V"
    "RSHRNv8i8\000VRSHRsv16i8\000VRSHRsv1i64\000VRSHRsv2i32\000VRSHRsv2i64\000"
    "VRSHRsv4i16\000VRSHRsv4i32\000VRSHRsv8i16\000VRSHRsv8i8\000VRSHRuv16i8\000"
    "VRSHRuv1i64\000VRSHRuv2i32\000VRSHRuv2i64\000VRSHRuv4i16\000VRSHRuv4i32"
    "\000VRSHRuv8i16\000VRSHRuv8i8\000VRSQRTEd\000VRSQRTEfd\000VRSQRTEfq\000"
    "VRSQRTEq\000VRSQRTSfd\000VRSQRTSfq\000VRSRAsv16i8\000VRSRAsv1i64\000VRS"
    "RAsv2i32\000VRSRAsv2i64\000VRSRAsv4i16\000VRSRAsv4i32\000VRSRAsv8i16\000"
    "VRSRAsv8i8\000VRSRAuv16i8\000VRSRAuv1i64\000VRSRAuv2i32\000VRSRAuv2i64\000"
    "VRSRAuv4i16\000VRSRAuv4i32\000VRSRAuv8i16\000VRSRAuv8i8\000VRSUBHNv2i32"
    "\000VRSUBHNv4i16\000VRSUBHNv8i8\000VSETLNi16\000VSETLNi32\000VSETLNi8\000"
    "VSHLLi16\000VSHLLi32\000VSHLLi8\000VSHLLsv2i64\000VSHLLsv4i32\000VSHLLs"
    "v8i16\000VSHLLuv2i64\000VSHLLuv4i32\000VSHLLuv8i16\000VSHLiv16i8\000VSH"
    "Liv1i64\000VSHLiv2i32\000VSHLiv2i64\000VSHLiv4i16\000VSHLiv4i32\000VSHL"
    "iv8i16\000VSHLiv8i8\000VSHLsv16i8\000VSHLsv1i64\000VSHLsv2i32\000VSHLsv"
    "2i64\000VSHLsv4i16\000VSHLsv4i32\000VSHLsv8i16\000VSHLsv8i8\000VSHLuv16"
    "i8\000VSHLuv1i64\000VSHLuv2i32\000VSHLuv2i64\000VSHLuv4i16\000VSHLuv4i3"
    "2\000VSHLuv8i16\000VSHLuv8i8\000VSHRNv2i32\000VSHRNv4i16\000VSHRNv8i8\000"
    "VSHRsv16i8\000VSHRsv1i64\000VSHRsv2i32\000VSHRsv2i64\000VSHRsv4i16\000V"
    "SHRsv4i32\000VSHRsv8i16\000VSHRsv8i8\000VSHRuv16i8\000VSHRuv1i64\000VSH"
    "Ruv2i32\000VSHRuv2i64\000VSHRuv4i16\000VSHRuv4i32\000VSHRuv8i16\000VSHR"
    "uv8i8\000VSHTOD\000VSHTOS\000VSITOD\000VSITOS\000VSLIv16i8\000VSLIv1i64"
    "\000VSLIv2i32\000VSLIv2i64\000VSLIv4i16\000VSLIv4i32\000VSLIv8i16\000VS"
    "LIv8i8\000VSLTOD\000VSLTOS\000VSQRTD\000VSQRTS\000VSRAsv16i8\000VSRAsv1"
    "i64\000VSRAsv2i32\000VSRAsv2i64\000VSRAsv4i16\000VSRAsv4i32\000VSRAsv8i"
    "16\000VSRAsv8i8\000VSRAuv16i8\000VSRAuv1i64\000VSRAuv2i32\000VSRAuv2i64"
    "\000VSRAuv4i16\000VSRAuv4i32\000VSRAuv8i16\000VSRAuv8i8\000VSRIv16i8\000"
    "VSRIv1i64\000VSRIv2i32\000VSRIv2i64\000VSRIv4i16\000VSRIv4i32\000VSRIv8"
    "i16\000VSRIv8i8\000VST1LNd16\000VST1LNd16_UPD\000VST1LNd32\000VST1LNd32"
    "_UPD\000VST1LNd8\000VST1LNd8_UPD\000VST1LNdAsm_16\000VST1LNdAsm_32\000V"
    "ST1LNdAsm_8\000VST1LNdAsm_F\000VST1LNdAsm_F32\000VST1LNdAsm_I16\000VST1"
    "LNdAsm_I32\000VST1LNdAsm_I8\000VST1LNdAsm_P16\000VST1LNdAsm_P8\000VST1L"
    "NdAsm_S16\000VST1LNdAsm_S32\000VST1LNdAsm_S8\000VST1LNdAsm_U16\000VST1L"
    "NdAsm_U32\000VST1LNdAsm_U8\000VST1LNdWB_fixed_Asm_16\000VST1LNdWB_fixed"
    "_Asm_32\000VST1LNdWB_fixed_Asm_8\000VST1LNdWB_fixed_Asm_F\000VST1LNdWB_"
    "fixed_Asm_F32\000VST1LNdWB_fixed_Asm_I16\000VST1LNdWB_fixed_Asm_I32\000"
    "VST1LNdWB_fixed_Asm_I8\000VST1LNdWB_fixed_Asm_P16\000VST1LNdWB_fixed_As"
    "m_P8\000VST1LNdWB_fixed_Asm_S16\000VST1LNdWB_fixed_Asm_S32\000VST1LNdWB"
    "_fixed_Asm_S8\000VST1LNdWB_fixed_Asm_U16\000VST1LNdWB_fixed_Asm_U32\000"
    "VST1LNdWB_fixed_Asm_U8\000VST1LNdWB_register_Asm_16\000VST1LNdWB_regist"
    "er_Asm_32\000VST1LNdWB_register_Asm_8\000VST1LNdWB_register_Asm_F\000VS"
    "T1LNdWB_register_Asm_F32\000VST1LNdWB_register_Asm_I16\000VST1LNdWB_reg"
    "ister_Asm_I32\000VST1LNdWB_register_Asm_I8\000VST1LNdWB_register_Asm_P1"
    "6\000VST1LNdWB_register_Asm_P8\000VST1LNdWB_register_Asm_S16\000VST1LNd"
    "WB_register_Asm_S32\000VST1LNdWB_register_Asm_S8\000VST1LNdWB_register_"
    "Asm_U16\000VST1LNdWB_register_Asm_U32\000VST1LNdWB_register_Asm_U8\000V"
    "ST1LNq16Pseudo\000VST1LNq16Pseudo_UPD\000VST1LNq32Pseudo\000VST1LNq32Ps"
    "eudo_UPD\000VST1LNq8Pseudo\000VST1LNq8Pseudo_UPD\000VST1d16\000VST1d16Q"
    "\000VST1d16Qwb_fixed\000VST1d16Qwb_register\000VST1d16T\000VST1d16Twb_f"
    "ixed\000VST1d16Twb_register\000VST1d16wb_fixed\000VST1d16wb_register\000"
    "VST1d32\000VST1d32Q\000VST1d32Qwb_fixed\000VST1d32Qwb_register\000VST1d"
    "32T\000VST1d32Twb_fixed\000VST1d32Twb_register\000VST1d32wb_fixed\000VS"
    "T1d32wb_register\000VST1d64\000VST1d64Q\000VST1d64QPseudo\000VST1d64QPs"
    "eudoWB_fixed\000VST1d64QPseudoWB_register\000VST1d64Qwb_fixed\000VST1d6"
    "4Qwb_register\000VST1d64T\000VST1d64TPseudo\000VST1d64TPseudoWB_fixed\000"
    "VST1d64TPseudoWB_register\000VST1d64Twb_fixed\000VST1d64Twb_register\000"
    "VST1d64wb_fixed\000VST1d64wb_register\000VST1d8\000VST1d8Q\000VST1d8Qwb"
    "_fixed\000VST1d8Qwb_register\000VST1d8T\000VST1d8Twb_fixed\000VST1d8Twb"
    "_register\000VST1d8wb_fixed\000VST1d8wb_register\000VST1q16\000VST1q16P"
    "seudo\000VST1q16PseudoWB_fixed\000VST1q16PseudoWB_register\000VST1q16wb"
    "_fixed\000VST1q16wb_register\000VST1q32\000VST1q32Pseudo\000VST1q32Pseu"
    "doWB_fixed\000VST1q32PseudoWB_register\000VST1q32wb_fixed\000VST1q32wb_"
    "register\000VST1q64\000VST1q64Pseudo\000VST1q64PseudoWB_fixed\000VST1q6"
    "4PseudoWB_register\000VST1q64wb_fixed\000VST1q64wb_register\000VST1q8\000"
    "VST1q8Pseudo\000VST1q8PseudoWB_fixed\000VST1q8PseudoWB_register\000VST1"
    "q8wb_fixed\000VST1q8wb_register\000VST2LNd16\000VST2LNd16Pseudo\000VST2"
    "LNd16Pseudo_UPD\000VST2LNd16_UPD\000VST2LNd32\000VST2LNd32Pseudo\000VST"
    "2LNd32Pseudo_UPD\000VST2LNd32_UPD\000VST2LNd8\000VST2LNd8Pseudo\000VST2"
    "LNd8Pseudo_UPD\000VST2LNd8_UPD\000VST2LNdAsm_16\000VST2LNdAsm_32\000VST"
    "2LNdAsm_8\000VST2LNdAsm_F\000VST2LNdAsm_F32\000VST2LNdAsm_I16\000VST2LN"
    "dAsm_I32\000VST2LNdAsm_I8\000VST2LNdAsm_P16\000VST2LNdAsm_P8\000VST2LNd"
    "Asm_S16\000VST2LNdAsm_S32\000VST2LNdAsm_S8\000VST2LNdAsm_U16\000VST2LNd"
    "Asm_U32\000VST2LNdAsm_U8\000VST2LNdWB_fixed_Asm_16\000VST2LNdWB_fixed_A"
    "sm_32\000VST2LNdWB_fixed_Asm_8\000VST2LNdWB_fixed_Asm_F\000VST2LNdWB_fi"
    "xed_Asm_F32\000VST2LNdWB_fixed_Asm_I16\000VST2LNdWB_fixed_Asm_I32\000VS"
    "T2LNdWB_fixed_Asm_I8\000VST2LNdWB_fixed_Asm_P16\000VST2LNdWB_fixed_Asm_"
    "P8\000VST2LNdWB_fixed_Asm_S16\000VST2LNdWB_fixed_Asm_S32\000VST2LNdWB_f"
    "ixed_Asm_S8\000VST2LNdWB_fixed_Asm_U16\000VST2LNdWB_fixed_Asm_U32\000VS"
    "T2LNdWB_fixed_Asm_U8\000VST2LNdWB_register_Asm_16\000VST2LNdWB_register"
    "_Asm_32\000VST2LNdWB_register_Asm_8\000VST2LNdWB_register_Asm_F\000VST2"
    "LNdWB_register_Asm_F32\000VST2LNdWB_register_Asm_I16\000VST2LNdWB_regis"
    "ter_Asm_I32\000VST2LNdWB_register_Asm_I8\000VST2LNdWB_register_Asm_P16\000"
    "VST2LNdWB_register_Asm_P8\000VST2LNdWB_register_Asm_S16\000VST2LNdWB_re"
    "gister_Asm_S32\000VST2LNdWB_register_Asm_S8\000VST2LNdWB_register_Asm_U"
    "16\000VST2LNdWB_register_Asm_U32\000VST2LNdWB_register_Asm_U8\000VST2LN"
    "q16\000VST2LNq16Pseudo\000VST2LNq16Pseudo_UPD\000VST2LNq16_UPD\000VST2L"
    "Nq32\000VST2LNq32Pseudo\000VST2LNq32Pseudo_UPD\000VST2LNq32_UPD\000VST2"
    "LNqAsm_16\000VST2LNqAsm_32\000VST2LNqAsm_F\000VST2LNqAsm_F32\000VST2LNq"
    "Asm_I16\000VST2LNqAsm_I32\000VST2LNqAsm_P16\000VST2LNqAsm_S16\000VST2LN"
    "qAsm_S32\000VST2LNqAsm_U16\000VST2LNqAsm_U32\000VST2LNqWB_fixed_Asm_16\000"
    "VST2LNqWB_fixed_Asm_32\000VST2LNqWB_fixed_Asm_F\000VST2LNqWB_fixed_Asm_"
    "F32\000VST2LNqWB_fixed_Asm_I16\000VST2LNqWB_fixed_Asm_I32\000VST2LNqWB_"
    "fixed_Asm_P16\000VST2LNqWB_fixed_Asm_S16\000VST2LNqWB_fixed_Asm_S32\000"
    "VST2LNqWB_fixed_Asm_U16\000VST2LNqWB_fixed_Asm_U32\000VST2LNqWB_registe"
    "r_Asm_16\000VST2LNqWB_register_Asm_32\000VST2LNqWB_register_Asm_F\000VS"
    "T2LNqWB_register_Asm_F32\000VST2LNqWB_register_Asm_I16\000VST2LNqWB_reg"
    "ister_Asm_I32\000VST2LNqWB_register_Asm_P16\000VST2LNqWB_register_Asm_S"
    "16\000VST2LNqWB_register_Asm_S32\000VST2LNqWB_register_Asm_U16\000VST2L"
    "NqWB_register_Asm_U32\000VST2b16\000VST2b16wb_fixed\000VST2b16wb_regist"
    "er\000VST2b32\000VST2b32wb_fixed\000VST2b32wb_register\000VST2b8\000VST"
    "2b8wb_fixed\000VST2b8wb_register\000VST2d16\000VST2d16Pseudo\000VST2d16"
    "PseudoWB_fixed\000VST2d16PseudoWB_register\000VST2d16wb_fixed\000VST2d1"
    "6wb_register\000VST2d32\000VST2d32Pseudo\000VST2d32PseudoWB_fixed\000VS"
    "T2d32PseudoWB_register\000VST2d32wb_fixed\000VST2d32wb_register\000VST2"
    "d8\000VST2d8Pseudo\000VST2d8PseudoWB_fixed\000VST2d8PseudoWB_register\000"
    "VST2d8wb_fixed\000VST2d8wb_register\000VST2q16\000VST2q16Pseudo\000VST2"
    "q16PseudoWB_fixed\000VST2q16PseudoWB_register\000VST2q16wb_fixed\000VST"
    "2q16wb_register\000VST2q32\000VST2q32Pseudo\000VST2q32PseudoWB_fixed\000"
    "VST2q32PseudoWB_register\000VST2q32wb_fixed\000VST2q32wb_register\000VS"
    "T2q8\000VST2q8Pseudo\000VST2q8PseudoWB_fixed\000VST2q8PseudoWB_register"
    "\000VST2q8wb_fixed\000VST2q8wb_register\000VST3LNd16\000VST3LNd16Pseudo"
    "\000VST3LNd16Pseudo_UPD\000VST3LNd16_UPD\000VST3LNd32\000VST3LNd32Pseud"
    "o\000VST3LNd32Pseudo_UPD\000VST3LNd32_UPD\000VST3LNd8\000VST3LNd8Pseudo"
    "\000VST3LNd8Pseudo_UPD\000VST3LNd8_UPD\000VST3LNq16\000VST3LNq16Pseudo\000"
    "VST3LNq16Pseudo_UPD\000VST3LNq16_UPD\000VST3LNq32\000VST3LNq32Pseudo\000"
    "VST3LNq32Pseudo_UPD\000VST3LNq32_UPD\000VST3d16\000VST3d16Pseudo\000VST"
    "3d16Pseudo_UPD\000VST3d16_UPD\000VST3d32\000VST3d32Pseudo\000VST3d32Pse"
    "udo_UPD\000VST3d32_UPD\000VST3d8\000VST3d8Pseudo\000VST3d8Pseudo_UPD\000"
    "VST3d8_UPD\000VST3q16\000VST3q16Pseudo_UPD\000VST3q16_UPD\000VST3q16odd"
    "Pseudo\000VST3q16oddPseudo_UPD\000VST3q32\000VST3q32Pseudo_UPD\000VST3q"
    "32_UPD\000VST3q32oddPseudo\000VST3q32oddPseudo_UPD\000VST3q8\000VST3q8P"
    "seudo_UPD\000VST3q8_UPD\000VST3q8oddPseudo\000VST3q8oddPseudo_UPD\000VS"
    "T4LNd16\000VST4LNd16Pseudo\000VST4LNd16Pseudo_UPD\000VST4LNd16_UPD\000V"
    "ST4LNd32\000VST4LNd32Pseudo\000VST4LNd32Pseudo_UPD\000VST4LNd32_UPD\000"
    "VST4LNd8\000VST4LNd8Pseudo\000VST4LNd8Pseudo_UPD\000VST4LNd8_UPD\000VST"
    "4LNq16\000VST4LNq16Pseudo\000VST4LNq16Pseudo_UPD\000VST4LNq16_UPD\000VS"
    "T4LNq32\000VST4LNq32Pseudo\000VST4LNq32Pseudo_UPD\000VST4LNq32_UPD\000V"
    "ST4d16\000VST4d16Pseudo\000VST4d16Pseudo_UPD\000VST4d16_UPD\000VST4d32\000"
    "VST4d32Pseudo\000VST4d32Pseudo_UPD\000VST4d32_UPD\000VST4d8\000VST4d8Ps"
    "eudo\000VST4d8Pseudo_UPD\000VST4d8_UPD\000VST4q16\000VST4q16Pseudo_UPD\000"
    "VST4q16_UPD\000VST4q16oddPseudo\000VST4q16oddPseudo_UPD\000VST4q32\000V"
    "ST4q32Pseudo_UPD\000VST4q32_UPD\000VST4q32oddPseudo\000VST4q32oddPseudo"
    "_UPD\000VST4q8\000VST4q8Pseudo_UPD\000VST4q8_UPD\000VST4q8oddPseudo\000"
    "VST4q8oddPseudo_UPD\000VSTMDDB_UPD\000VSTMDIA\000VSTMDIA_UPD\000VSTMQIA"
    "\000VSTMSDB_UPD\000VSTMSIA\000VSTMSIA_UPD\000VSTRD\000VSTRS\000VSUBD\000"
    "VSUBHNv2i32\000VSUBHNv4i16\000VSUBHNv8i8\000VSUBLsv2i64\000VSUBLsv4i32\000"
    "VSUBLsv8i16\000VSUBLuv2i64\000VSUBLuv4i32\000VSUBLuv8i16\000VSUBS\000VS"
    "UBWsv2i64\000VSUBWsv4i32\000VSUBWsv8i16\000VSUBWuv2i64\000VSUBWuv4i32\000"
    "VSUBWuv8i16\000VSUBfd\000VSUBfq\000VSUBv16i8\000VSUBv1i64\000VSUBv2i32\000"
    "VSUBv2i64\000VSUBv4i16\000VSUBv4i32\000VSUBv8i16\000VSUBv8i8\000VSWPd\000"
    "VSWPq\000VTBL1\000VTBL2\000VTBL2Pseudo\000VTBL3\000VTBL3Pseudo\000VTBL4"
    "\000VTBL4Pseudo\000VTBX1\000VTBX2\000VTBX2Pseudo\000VTBX3\000VTBX3Pseud"
    "o\000VTBX4\000VTBX4Pseudo\000VTOSHD\000VTOSHS\000VTOSIRD\000VTOSIRS\000"
    "VTOSIZD\000VTOSIZS\000VTOSLD\000VTOSLS\000VTOUHD\000VTOUHS\000VTOUIRD\000"
    "VTOUIRS\000VTOUIZD\000VTOUIZS\000VTOULD\000VTOULS\000VTRNd16\000VTRNd32"
    "\000VTRNd8\000VTRNq16\000VTRNq32\000VTRNq8\000VTSTv16i8\000VTSTv2i32\000"
    "VTSTv4i16\000VTSTv4i32\000VTSTv8i16\000VTSTv8i8\000VUHTOD\000VUHTOS\000"
    "VUITOD\000VUITOS\000VULTOD\000VULTOS\000VUZPd16\000VUZPd32\000VUZPd8\000"
    "VUZPq16\000VUZPq32\000VUZPq8\000VZIPd16\000VZIPd32\000VZIPd8\000VZIPq16"
    "\000VZIPq32\000VZIPq8\000WFE\000WFI\000YIELD\000sysLDMDA\000sysLDMDA_UP"
    "D\000sysLDMDB\000sysLDMDB_UPD\000sysLDMIA\000sysLDMIA_UPD\000sysLDMIB\000"
    "sysLDMIB_UPD\000sysSTMDA\000sysSTMDA_UPD\000sysSTMDB\000sysSTMDB_UPD\000"
    "sysSTMIA\000sysSTMIA_UPD\000sysSTMIB\000sysSTMIB_UPD\000t2ABS\000t2ADCr"
    "i\000t2ADCrr\000t2ADCrs\000t2ADDSri\000t2ADDSrr\000t2ADDSrs\000t2ADDri\000"
    "t2ADDri12\000t2ADDrr\000t2ADDrs\000t2ADR\000t2ANDri\000t2ANDrr\000t2AND"
    "rs\000t2ASRri\000t2ASRrr\000t2B\000t2BFC\000t2BFI\000t2BICri\000t2BICrr"
    "\000t2BICrs\000t2BR_JT\000t2BXJ\000t2Bcc\000t2CDP2\000t2CLREX\000t2CLZ\000"
    "t2CMNzri\000t2CMNzrr\000t2CMNzrs\000t2CMPri\000t2CMPrr\000t2CMPrs\000t2"
    "CPS1p\000t2CPS2p\000t2CPS3p\000t2DBG\000t2DMB\000t2DSB\000t2EORri\000t2"
    "EORrr\000t2EORrs\000t2ISB\000t2IT\000t2Int_eh_sjlj_setjmp\000t2Int_eh_s"
    "jlj_setjmp_nofp\000t2LDC2L_OFFSET\000t2LDC2L_OPTION\000t2LDC2L_POST\000"
    "t2LDC2L_PRE\000t2LDC2_OFFSET\000t2LDC2_OPTION\000t2LDC2_POST\000t2LDC2_"
    "PRE\000t2LDCL_OFFSET\000t2LDCL_OPTION\000t2LDCL_POST\000t2LDCL_PRE\000t"
    "2LDC_OFFSET\000t2LDC_OPTION\000t2LDC_POST\000t2LDC_PRE\000t2LDMDB\000t2"
    "LDMDB_UPD\000t2LDMIA\000t2LDMIA_RET\000t2LDMIA_UPD\000t2LDRBT\000t2LDRB"
    "_POST\000t2LDRB_PRE\000t2LDRBi12\000t2LDRBi8\000t2LDRBpci\000t2LDRBpcre"
    "l\000t2LDRBs\000t2LDRD_POST\000t2LDRD_PRE\000t2LDRDi8\000t2LDREX\000t2L"
    "DREXB\000t2LDREXD\000t2LDREXH\000t2LDRHT\000t2LDRH_POST\000t2LDRH_PRE\000"
    "t2LDRHi12\000t2LDRHi8\000t2LDRHpci\000t2LDRHpcrel\000t2LDRHs\000t2LDRSB"
    "T\000t2LDRSB_POST\000t2LDRSB_PRE\000t2LDRSBi12\000t2LDRSBi8\000t2LDRSBp"
    "ci\000t2LDRSBpcrel\000t2LDRSBs\000t2LDRSHT\000t2LDRSH_POST\000t2LDRSH_P"
    "RE\000t2LDRSHi12\000t2LDRSHi8\000t2LDRSHpci\000t2LDRSHpcrel\000t2LDRSHs"
    "\000t2LDRT\000t2LDR_POST\000t2LDR_PRE\000t2LDRi12\000t2LDRi8\000t2LDRpc"
    "i\000t2LDRpci_pic\000t2LDRpcrel\000t2LDRs\000t2LEApcrel\000t2LEApcrelJT"
    "\000t2LSLri\000t2LSLrr\000t2LSRri\000t2LSRrr\000t2MCR\000t2MCR2\000t2MC"
    "RR\000t2MCRR2\000t2MLA\000t2MLS\000t2MOVCCasr\000t2MOVCCi\000t2MOVCCi16"
    "\000t2MOVCCi32imm\000t2MOVCClsl\000t2MOVCClsr\000t2MOVCCr\000t2MOVCCror"
    "\000t2MOVSsi\000t2MOVSsr\000t2MOVTi16\000t2MOVTi16_ga_pcrel\000t2MOV_ga"
    "_dyn\000t2MOV_ga_pcrel\000t2MOVi\000t2MOVi16\000t2MOVi16_ga_pcrel\000t2"
    "MOVi32imm\000t2MOVr\000t2MOVsi\000t2MOVsr\000t2MOVsra_flag\000t2MOVsrl_"
    "flag\000t2MRC\000t2MRC2\000t2MRRC\000t2MRRC2\000t2MRS_AR\000t2MRS_M\000"
    "t2MRSsys_AR\000t2MSR_AR\000t2MSR_M\000t2MUL\000t2MVNCCi\000t2MVNi\000t2"
    "MVNr\000t2MVNs\000t2NOP\000t2ORNri\000t2ORNrr\000t2ORNrs\000t2ORRri\000"
    "t2ORRrr\000t2ORRrs\000t2PKHBT\000t2PKHTB\000t2PLDWi12\000t2PLDWi8\000t2"
    "PLDWs\000t2PLDi12\000t2PLDi8\000t2PLDs\000t2PLIi12\000t2PLIi8\000t2PLIs"
    "\000t2QADD\000t2QADD16\000t2QADD8\000t2QASX\000t2QDADD\000t2QDSUB\000t2"
    "QSAX\000t2QSUB\000t2QSUB16\000t2QSUB8\000t2RBIT\000t2REV\000t2REV16\000"
    "t2REVSH\000t2RFEDB\000t2RFEDBW\000t2RFEIA\000t2RFEIAW\000t2RORri\000t2R"
    "ORrr\000t2RRX\000t2RSBSri\000t2RSBSrs\000t2RSBri\000t2RSBrr\000t2RSBrs\000"
    "t2SADD16\000t2SADD8\000t2SASX\000t2SBCri\000t2SBCrr\000t2SBCrs\000t2SBF"
    "X\000t2SDIV\000t2SEL\000t2SEV\000t2SHADD16\000t2SHADD8\000t2SHASX\000t2"
    "SHSAX\000t2SHSUB16\000t2SHSUB8\000t2SMC\000t2SMLABB\000t2SMLABT\000t2SM"
    "LAD\000t2SMLADX\000t2SMLAL\000t2SMLALBB\000t2SMLALBT\000t2SMLALD\000t2S"
    "MLALDX\000t2SMLALTB\000t2SMLALTT\000t2SMLATB\000t2SMLATT\000t2SMLAWB\000"
    "t2SMLAWT\000t2SMLSD\000t2SMLSDX\000t2SMLSLD\000t2SMLSLDX\000t2SMMLA\000"
    "t2SMMLAR\000t2SMMLS\000t2SMMLSR\000t2SMMUL\000t2SMMULR\000t2SMUAD\000t2"
    "SMUADX\000t2SMULBB\000t2SMULBT\000t2SMULL\000t2SMULTB\000t2SMULTT\000t2"
    "SMULWB\000t2SMULWT\000t2SMUSD\000t2SMUSDX\000t2SRSDB\000t2SRSDB_UPD\000"
    "t2SRSIA\000t2SRSIA_UPD\000t2SSAT\000t2SSAT16\000t2SSAX\000t2SSUB16\000t"
    "2SSUB8\000t2STC2L_OFFSET\000t2STC2L_OPTION\000t2STC2L_POST\000t2STC2L_P"
    "RE\000t2STC2_OFFSET\000t2STC2_OPTION\000t2STC2_POST\000t2STC2_PRE\000t2"
    "STCL_OFFSET\000t2STCL_OPTION\000t2STCL_POST\000t2STCL_PRE\000t2STC_OFFS"
    "ET\000t2STC_OPTION\000t2STC_POST\000t2STC_PRE\000t2STMDB\000t2STMDB_UPD"
    "\000t2STMIA\000t2STMIA_UPD\000t2STRBT\000t2STRB_POST\000t2STRB_PRE\000t"
    "2STRB_preidx\000t2STRBi12\000t2STRBi8\000t2STRBs\000t2STRD_POST\000t2ST"
    "RD_PRE\000t2STRDi8\000t2STREX\000t2STREXB\000t2STREXD\000t2STREXH\000t2"
    "STRHT\000t2STRH_POST\000t2STRH_PRE\000t2STRH_preidx\000t2STRHi12\000t2S"
    "TRHi8\000t2STRHs\000t2STRT\000t2STR_POST\000t2STR_PRE\000t2STR_preidx\000"
    "t2STRi12\000t2STRi8\000t2STRs\000t2SUBSri\000t2SUBSrr\000t2SUBSrs\000t2"
    "SUBri\000t2SUBri12\000t2SUBrr\000t2SUBrs\000t2SXTAB\000t2SXTAB16\000t2S"
    "XTAH\000t2SXTB\000t2SXTB16\000t2SXTH\000t2TBB\000t2TBB_JT\000t2TBH\000t"
    "2TBH_JT\000t2TEQri\000t2TEQrr\000t2TEQrs\000t2TSTri\000t2TSTrr\000t2TST"
    "rs\000t2UADD16\000t2UADD8\000t2UASX\000t2UBFX\000t2UDIV\000t2UHADD16\000"
    "t2UHADD8\000t2UHASX\000t2UHSAX\000t2UHSUB16\000t2UHSUB8\000t2UMAAL\000t"
    "2UMLAL\000t2UMULL\000t2UQADD16\000t2UQADD8\000t2UQASX\000t2UQSAX\000t2U"
    "QSUB16\000t2UQSUB8\000t2USAD8\000t2USADA8\000t2USAT\000t2USAT16\000t2US"
    "AX\000t2USUB16\000t2USUB8\000t2UXTAB\000t2UXTAB16\000t2UXTAH\000t2UXTB\000"
    "t2UXTB16\000t2UXTH\000t2WFE\000t2WFI\000t2YIELD\000tADC\000tADDhirr\000"
    "tADDi3\000tADDi8\000tADDrSP\000tADDrSPi\000tADDrr\000tADDspi\000tADDspr"
    "\000tADJCALLSTACKDOWN\000tADJCALLSTACKUP\000tADR\000tAND\000tASRri\000t"
    "ASRrr\000tB\000tBIC\000tBKPT\000tBL\000tBLXi\000tBLXi_r9\000tBLXr\000tB"
    "LXr_r9\000tBLr9\000tBRIND\000tBR_JTr\000tBX\000tBX_CALL\000tBX_RET\000t"
    "BX_RET_vararg\000tBXr9_CALL\000tBcc\000tBfar\000tCBNZ\000tCBZ\000tCDP\000"
    "tCMNz\000tCMPhir\000tCMPi8\000tCMPr\000tCPS\000tEOR\000tInt_eh_sjlj_dis"
    "patchsetup\000tInt_eh_sjlj_longjmp\000tInt_eh_sjlj_setjmp\000tLDMIA\000"
    "tLDMIA_UPD\000tLDRBi\000tLDRBr\000tLDRHi\000tLDRHr\000tLDRSB\000tLDRSH\000"
    "tLDRi\000tLDRpci\000tLDRpciASM\000tLDRpci_pic\000tLDRr\000tLDRspi\000tL"
    "EApcrel\000tLEApcrelJT\000tLSLri\000tLSLrr\000tLSRri\000tLSRrr\000tMOVC"
    "Cr_pseudo\000tMOVSr\000tMOVi8\000tMOVr\000tMUL\000tMVN\000tNOP\000tORR\000"
    "tPICADD\000tPOP\000tPOP_RET\000tPUSH\000tREV\000tREV16\000tREVSH\000tRO"
    "R\000tRSB\000tSBC\000tSETEND\000tSEV\000tSTMIA_UPD\000tSTRBi\000tSTRBr\000"
    "tSTRHi\000tSTRHr\000tSTRi\000tSTRr\000tSTRspi\000tSUBi3\000tSUBi8\000tS"
    "UBrr\000tSUBspi\000tSVC\000tSXTB\000tSXTH\000tTAILJMPd\000tTAILJMPdND\000"
    "tTAILJMPr\000tTAILJMPrND\000tTPsoft\000tTRAP\000tTST\000tUXTB\000tUXTH\000"
    "tWFE\000tWFI\000tYIELD\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_SPR,
    RC_DPR,
    RC_SPR_8,
    RC_GPR,
    RC_DPR_VFP2,
    RC_QPR,
    RC_GPRnopc,
    RC_rGPR,
    RC_tGPR,
    RC_hGPR,
    RC_DPR_8,
    RC_QPR_VFP2,
    RC_QQPR,
    RC_GPRnopc_and_hGPR,
    RC_tcGPR,
    RC_hGPR_and_rGPR,
    RC_tGPR_and_tcGPR,
    RC_QPR_8,
    RC_QQPR_with_ssub_0,
    RC_QQQQPR,
    RC_hGPR_and_tcGPR,
    RC_QQPR_with_dsub_0_in_DPR_8,
    RC_QQQQPR_with_ssub_0,
    RC_GPRsp,
    RC_CCR,
    RC_QQQQPR_with_dsub_0_in_DPR_8
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_SPR:
    switch (Reg) {
    default: break;
    case ARM::S0:
    case ARM::S1:
    case ARM::S2:
    case ARM::S3:
    case ARM::S4:
    case ARM::S5:
    case ARM::S6:
    case ARM::S7:
    case ARM::S8:
    case ARM::S9:
    case ARM::S10:
    case ARM::S11:
    case ARM::S12:
    case ARM::S13:
    case ARM::S14:
    case ARM::S15:
    case ARM::S16:
    case ARM::S17:
    case ARM::S18:
    case ARM::S19:
    case ARM::S20:
    case ARM::S21:
    case ARM::S22:
    case ARM::S23:
    case ARM::S24:
    case ARM::S25:
    case ARM::S26:
    case ARM::S27:
    case ARM::S28:
    case ARM::S29:
    case ARM::S30:
    case ARM::S31:
      return true;
    }
    break;
  case RC_DPR:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
    case ARM::D8:
    case ARM::D9:
    case ARM::D10:
    case ARM::D11:
    case ARM::D12:
    case ARM::D13:
    case ARM::D14:
    case ARM::D15:
    case ARM::D16:
    case ARM::D17:
    case ARM::D18:
    case ARM::D19:
    case ARM::D20:
    case ARM::D21:
    case ARM::D22:
    case ARM::D23:
    case ARM::D24:
    case ARM::D25:
    case ARM::D26:
    case ARM::D27:
    case ARM::D28:
    case ARM::D29:
    case ARM::D30:
    case ARM::D31:
      return true;
    }
    break;
  case RC_SPR_8:
    switch (Reg) {
    default: break;
    case ARM::S0:
    case ARM::S1:
    case ARM::S2:
    case ARM::S3:
    case ARM::S4:
    case ARM::S5:
    case ARM::S6:
    case ARM::S7:
    case ARM::S8:
    case ARM::S9:
    case ARM::S10:
    case ARM::S11:
    case ARM::S12:
    case ARM::S13:
    case ARM::S14:
    case ARM::S15:
      return true;
    }
    break;
  case RC_GPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
    case ARM::PC:
      return true;
    }
    break;
  case RC_DPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
    case ARM::D8:
    case ARM::D9:
    case ARM::D10:
    case ARM::D11:
    case ARM::D12:
    case ARM::D13:
    case ARM::D14:
    case ARM::D15:
      return true;
    }
    break;
  case RC_QPR:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
    case ARM::Q4:
    case ARM::Q5:
    case ARM::Q6:
    case ARM::Q7:
    case ARM::Q8:
    case ARM::Q9:
    case ARM::Q10:
    case ARM::Q11:
    case ARM::Q12:
    case ARM::Q13:
    case ARM::Q14:
    case ARM::Q15:
      return true;
    }
    break;
  case RC_GPRnopc:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
      return true;
    }
    break;
  case RC_rGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::LR:
      return true;
    }
    break;
  case RC_tGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
      return true;
    }
    break;
  case RC_hGPR:
    switch (Reg) {
    default: break;
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
    case ARM::PC:
      return true;
    }
    break;
  case RC_DPR_8:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
      return true;
    }
    break;
  case RC_QPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
    case ARM::Q4:
    case ARM::Q5:
    case ARM::Q6:
    case ARM::Q7:
      return true;
    }
    break;
  case RC_QQPR:
    switch (Reg) {
    default: break;
    case ARM::Q0_Q1:
    case ARM::Q2_Q3:
    case ARM::Q4_Q5:
    case ARM::Q6_Q7:
    case ARM::Q8_Q9:
    case ARM::Q10_Q11:
    case ARM::Q12_Q13:
    case ARM::Q14_Q15:
      return true;
    }
    break;
  case RC_GPRnopc_and_hGPR:
    switch (Reg) {
    default: break;
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
      return true;
    }
    break;
  case RC_tcGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R9:
    case ARM::R12:
      return true;
    }
    break;
  case RC_hGPR_and_rGPR:
    switch (Reg) {
    default: break;
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::LR:
      return true;
    }
    break;
  case RC_tGPR_and_tcGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
      return true;
    }
    break;
  case RC_QPR_8:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
      return true;
    }
    break;
  case RC_QQPR_with_ssub_0:
    switch (Reg) {
    default: break;
    case ARM::Q0_Q1:
    case ARM::Q2_Q3:
    case ARM::Q4_Q5:
    case ARM::Q6_Q7:
      return true;
    }
    break;
  case RC_QQQQPR:
    switch (Reg) {
    default: break;
    case ARM::Q0_Q1_Q2_Q3:
    case ARM::Q4_Q5_Q6_Q7:
    case ARM::Q8_Q9_Q10_Q11:
    case ARM::Q12_Q13_Q14_Q15:
      return true;
    }
    break;
  case RC_hGPR_and_tcGPR:
    switch (Reg) {
    default: break;
    case ARM::R9:
    case ARM::R12:
      return true;
    }
    break;
  case RC_QQPR_with_dsub_0_in_DPR_8:
    switch (Reg) {
    default: break;
    case ARM::Q0_Q1:
    case ARM::Q2_Q3:
      return true;
    }
    break;
  case RC_QQQQPR_with_ssub_0:
    switch (Reg) {
    default: break;
    case ARM::Q0_Q1_Q2_Q3:
    case ARM::Q4_Q5_Q6_Q7:
      return true;
    }
    break;
  case RC_GPRsp:
    if (Reg == ARM::SP)
      return true;
    break;
  case RC_CCR:
    if (Reg == ARM::CPSR)
      return true;
    break;
  case RC_QQQQPR_with_dsub_0_in_DPR_8:
    if (Reg == ARM::Q0_Q1_Q2_Q3)
      return true;
    break;
  }

  return false;
}

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  assert(false && "Operand not in map!");
  return 0;
}

bool ARMInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case ARM::DMB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM::DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case ARM::t2DMB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (t2DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM::t2DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (t2DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM::t2ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (t2ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case ARM::tMOVr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == ARM::R8 &&
        MI->getOperand(1).getReg() == ARM::R8 &&
        MI->getOperand(2).getImm() == 14 &&
        MI->getOperand(3).getImm() == 0) {
      // (tMOVr R8, R8, 14, 0)
      AsmString = "nop";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
