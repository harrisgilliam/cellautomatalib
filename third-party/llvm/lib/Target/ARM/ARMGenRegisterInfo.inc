//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register Enum Values
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass ARMMCRegisterClasses[];

namespace ARM {
enum {
  NoRegister,
  APSR = 1,
  CPSR = 2,
  D0 = 3,
  D1 = 4,
  D2 = 5,
  D3 = 6,
  D4 = 7,
  D5 = 8,
  D6 = 9,
  D7 = 10,
  D8 = 11,
  D9 = 12,
  D10 = 13,
  D11 = 14,
  D12 = 15,
  D13 = 16,
  D14 = 17,
  D15 = 18,
  D16 = 19,
  D17 = 20,
  D18 = 21,
  D19 = 22,
  D20 = 23,
  D21 = 24,
  D22 = 25,
  D23 = 26,
  D24 = 27,
  D25 = 28,
  D26 = 29,
  D27 = 30,
  D28 = 31,
  D29 = 32,
  D30 = 33,
  D31 = 34,
  FPEXC = 35,
  FPSCR = 36,
  FPSID = 37,
  ITSTATE = 38,
  LR = 39,
  PC = 40,
  Q0 = 41,
  Q1 = 42,
  Q2 = 43,
  Q3 = 44,
  Q4 = 45,
  Q5 = 46,
  Q6 = 47,
  Q7 = 48,
  Q8 = 49,
  Q9 = 50,
  Q10 = 51,
  Q11 = 52,
  Q12 = 53,
  Q13 = 54,
  Q14 = 55,
  Q15 = 56,
  R0 = 57,
  R1 = 58,
  R2 = 59,
  R3 = 60,
  R4 = 61,
  R5 = 62,
  R6 = 63,
  R7 = 64,
  R8 = 65,
  R9 = 66,
  R10 = 67,
  R11 = 68,
  R12 = 69,
  S0 = 70,
  S1 = 71,
  S2 = 72,
  S3 = 73,
  S4 = 74,
  S5 = 75,
  S6 = 76,
  S7 = 77,
  S8 = 78,
  S9 = 79,
  S10 = 80,
  S11 = 81,
  S12 = 82,
  S13 = 83,
  S14 = 84,
  S15 = 85,
  S16 = 86,
  S17 = 87,
  S18 = 88,
  S19 = 89,
  S20 = 90,
  S21 = 91,
  S22 = 92,
  S23 = 93,
  S24 = 94,
  S25 = 95,
  S26 = 96,
  S27 = 97,
  S28 = 98,
  S29 = 99,
  S30 = 100,
  S31 = 101,
  SP = 102,
  SPSR = 103,
  Q0_Q1 = 104,
  Q2_Q3 = 105,
  Q4_Q5 = 106,
  Q6_Q7 = 107,
  Q8_Q9 = 108,
  Q10_Q11 = 109,
  Q12_Q13 = 110,
  Q14_Q15 = 111,
  Q0_Q1_Q2_Q3 = 112,
  Q4_Q5_Q6_Q7 = 113,
  Q8_Q9_Q10_Q11 = 114,
  Q12_Q13_Q14_Q15 = 115,
  NUM_TARGET_REGS 	// 116
};
}

// Register classes
namespace ARM {
enum {
  SPRRegClassID = 0,
  DPRRegClassID = 1,
  SPR_8RegClassID = 2,
  GPRRegClassID = 3,
  DPR_VFP2RegClassID = 4,
  QPRRegClassID = 5,
  GPRnopcRegClassID = 6,
  rGPRRegClassID = 7,
  tGPRRegClassID = 8,
  hGPRRegClassID = 9,
  DPR_8RegClassID = 10,
  QPR_VFP2RegClassID = 11,
  QQPRRegClassID = 12,
  GPRnopc_and_hGPRRegClassID = 13,
  tcGPRRegClassID = 14,
  hGPR_and_rGPRRegClassID = 15,
  tGPR_and_tcGPRRegClassID = 16,
  QPR_8RegClassID = 17,
  QQPR_with_ssub_0RegClassID = 18,
  QQQQPRRegClassID = 19,
  hGPR_and_tcGPRRegClassID = 20,
  QQPR_with_dsub_0_in_DPR_8RegClassID = 21,
  QQQQPR_with_ssub_0RegClassID = 22,
  GPRspRegClassID = 23,
  CCRRegClassID = 24,
  QQQQPR_with_dsub_0_in_DPR_8RegClassID = 25
  };
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// MC Register Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {


namespace {
  const unsigned APSR_Overlaps[] = { ARM::APSR, 0 };
  const unsigned CPSR_Overlaps[] = { ARM::CPSR, 0 };
  const unsigned D0_Overlaps[] = { ARM::D0, ARM::Q0, ARM::S0, ARM::S1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D1_Overlaps[] = { ARM::D1, ARM::Q0, ARM::S2, ARM::S3, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D2_Overlaps[] = { ARM::D2, ARM::Q1, ARM::S4, ARM::S5, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D3_Overlaps[] = { ARM::D3, ARM::Q1, ARM::S6, ARM::S7, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D4_Overlaps[] = { ARM::D4, ARM::Q2, ARM::S8, ARM::S9, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D5_Overlaps[] = { ARM::D5, ARM::Q2, ARM::S10, ARM::S11, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D6_Overlaps[] = { ARM::D6, ARM::Q3, ARM::S12, ARM::S13, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D7_Overlaps[] = { ARM::D7, ARM::Q3, ARM::S14, ARM::S15, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D8_Overlaps[] = { ARM::D8, ARM::Q4, ARM::S16, ARM::S17, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D9_Overlaps[] = { ARM::D9, ARM::Q4, ARM::S18, ARM::S19, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D10_Overlaps[] = { ARM::D10, ARM::Q5, ARM::S20, ARM::S21, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D11_Overlaps[] = { ARM::D11, ARM::Q5, ARM::S22, ARM::S23, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D12_Overlaps[] = { ARM::D12, ARM::Q6, ARM::S24, ARM::S25, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D13_Overlaps[] = { ARM::D13, ARM::Q6, ARM::S26, ARM::S27, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D14_Overlaps[] = { ARM::D14, ARM::Q7, ARM::S28, ARM::S29, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D15_Overlaps[] = { ARM::D15, ARM::Q7, ARM::S30, ARM::S31, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D16_Overlaps[] = { ARM::D16, ARM::Q8, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D17_Overlaps[] = { ARM::D17, ARM::Q8, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D18_Overlaps[] = { ARM::D18, ARM::Q9, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D19_Overlaps[] = { ARM::D19, ARM::Q9, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D20_Overlaps[] = { ARM::D20, ARM::Q10, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D21_Overlaps[] = { ARM::D21, ARM::Q10, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D22_Overlaps[] = { ARM::D22, ARM::Q11, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D23_Overlaps[] = { ARM::D23, ARM::Q11, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D24_Overlaps[] = { ARM::D24, ARM::Q12, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D25_Overlaps[] = { ARM::D25, ARM::Q12, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D26_Overlaps[] = { ARM::D26, ARM::Q13, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D27_Overlaps[] = { ARM::D27, ARM::Q13, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D28_Overlaps[] = { ARM::D28, ARM::Q14, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D29_Overlaps[] = { ARM::D29, ARM::Q14, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D30_Overlaps[] = { ARM::D30, ARM::Q15, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D31_Overlaps[] = { ARM::D31, ARM::Q15, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned FPEXC_Overlaps[] = { ARM::FPEXC, 0 };
  const unsigned FPSCR_Overlaps[] = { ARM::FPSCR, 0 };
  const unsigned FPSID_Overlaps[] = { ARM::FPSID, 0 };
  const unsigned ITSTATE_Overlaps[] = { ARM::ITSTATE, 0 };
  const unsigned LR_Overlaps[] = { ARM::LR, 0 };
  const unsigned PC_Overlaps[] = { ARM::PC, 0 };
  const unsigned Q0_Overlaps[] = { ARM::Q0, ARM::D0, ARM::D1, ARM::S0, ARM::S1, ARM::S2, ARM::S3, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q1_Overlaps[] = { ARM::Q1, ARM::D2, ARM::D3, ARM::S4, ARM::S5, ARM::S6, ARM::S7, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q2_Overlaps[] = { ARM::Q2, ARM::D4, ARM::D5, ARM::S8, ARM::S9, ARM::S10, ARM::S11, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q3_Overlaps[] = { ARM::Q3, ARM::D6, ARM::D7, ARM::S12, ARM::S13, ARM::S14, ARM::S15, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q4_Overlaps[] = { ARM::Q4, ARM::D8, ARM::D9, ARM::S16, ARM::S17, ARM::S18, ARM::S19, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q5_Overlaps[] = { ARM::Q5, ARM::D10, ARM::D11, ARM::S20, ARM::S21, ARM::S22, ARM::S23, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q6_Overlaps[] = { ARM::Q6, ARM::D12, ARM::D13, ARM::S24, ARM::S25, ARM::S26, ARM::S27, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q7_Overlaps[] = { ARM::Q7, ARM::D14, ARM::D15, ARM::S28, ARM::S29, ARM::S30, ARM::S31, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q8_Overlaps[] = { ARM::Q8, ARM::D16, ARM::D17, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q9_Overlaps[] = { ARM::Q9, ARM::D18, ARM::D19, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q10_Overlaps[] = { ARM::Q10, ARM::D20, ARM::D21, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q11_Overlaps[] = { ARM::Q11, ARM::D22, ARM::D23, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q12_Overlaps[] = { ARM::Q12, ARM::D24, ARM::D25, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q13_Overlaps[] = { ARM::Q13, ARM::D26, ARM::D27, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q14_Overlaps[] = { ARM::Q14, ARM::D28, ARM::D29, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q15_Overlaps[] = { ARM::Q15, ARM::D30, ARM::D31, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned R0_Overlaps[] = { ARM::R0, 0 };
  const unsigned R1_Overlaps[] = { ARM::R1, 0 };
  const unsigned R2_Overlaps[] = { ARM::R2, 0 };
  const unsigned R3_Overlaps[] = { ARM::R3, 0 };
  const unsigned R4_Overlaps[] = { ARM::R4, 0 };
  const unsigned R5_Overlaps[] = { ARM::R5, 0 };
  const unsigned R6_Overlaps[] = { ARM::R6, 0 };
  const unsigned R7_Overlaps[] = { ARM::R7, 0 };
  const unsigned R8_Overlaps[] = { ARM::R8, 0 };
  const unsigned R9_Overlaps[] = { ARM::R9, 0 };
  const unsigned R10_Overlaps[] = { ARM::R10, 0 };
  const unsigned R11_Overlaps[] = { ARM::R11, 0 };
  const unsigned R12_Overlaps[] = { ARM::R12, 0 };
  const unsigned S0_Overlaps[] = { ARM::S0, ARM::D0, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S1_Overlaps[] = { ARM::S1, ARM::D0, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S2_Overlaps[] = { ARM::S2, ARM::D1, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S3_Overlaps[] = { ARM::S3, ARM::D1, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S4_Overlaps[] = { ARM::S4, ARM::D2, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S5_Overlaps[] = { ARM::S5, ARM::D2, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S6_Overlaps[] = { ARM::S6, ARM::D3, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S7_Overlaps[] = { ARM::S7, ARM::D3, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S8_Overlaps[] = { ARM::S8, ARM::D4, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S9_Overlaps[] = { ARM::S9, ARM::D4, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S10_Overlaps[] = { ARM::S10, ARM::D5, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S11_Overlaps[] = { ARM::S11, ARM::D5, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S12_Overlaps[] = { ARM::S12, ARM::D6, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S13_Overlaps[] = { ARM::S13, ARM::D6, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S14_Overlaps[] = { ARM::S14, ARM::D7, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S15_Overlaps[] = { ARM::S15, ARM::D7, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S16_Overlaps[] = { ARM::S16, ARM::D8, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S17_Overlaps[] = { ARM::S17, ARM::D8, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S18_Overlaps[] = { ARM::S18, ARM::D9, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S19_Overlaps[] = { ARM::S19, ARM::D9, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S20_Overlaps[] = { ARM::S20, ARM::D10, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S21_Overlaps[] = { ARM::S21, ARM::D10, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S22_Overlaps[] = { ARM::S22, ARM::D11, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S23_Overlaps[] = { ARM::S23, ARM::D11, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S24_Overlaps[] = { ARM::S24, ARM::D12, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S25_Overlaps[] = { ARM::S25, ARM::D12, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S26_Overlaps[] = { ARM::S26, ARM::D13, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S27_Overlaps[] = { ARM::S27, ARM::D13, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S28_Overlaps[] = { ARM::S28, ARM::D14, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S29_Overlaps[] = { ARM::S29, ARM::D14, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S30_Overlaps[] = { ARM::S30, ARM::D15, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S31_Overlaps[] = { ARM::S31, ARM::D15, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned SP_Overlaps[] = { ARM::SP, 0 };
  const unsigned SPSR_Overlaps[] = { ARM::SPSR, 0 };
  const unsigned Q0_Q1_Overlaps[] = { ARM::Q0_Q1, ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::Q0, ARM::Q1, ARM::S0, ARM::S1, ARM::S2, ARM::S3, ARM::S4, ARM::S5, ARM::S6, ARM::S7, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q2_Q3_Overlaps[] = { ARM::Q2_Q3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::Q2, ARM::Q3, ARM::S8, ARM::S9, ARM::S10, ARM::S11, ARM::S12, ARM::S13, ARM::S14, ARM::S15, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q4_Q5_Overlaps[] = { ARM::Q4_Q5, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::Q4, ARM::Q5, ARM::S16, ARM::S17, ARM::S18, ARM::S19, ARM::S20, ARM::S21, ARM::S22, ARM::S23, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q6_Q7_Overlaps[] = { ARM::Q6_Q7, ARM::D12, ARM::D13, ARM::D14, ARM::D15, ARM::Q6, ARM::Q7, ARM::S24, ARM::S25, ARM::S26, ARM::S27, ARM::S28, ARM::S29, ARM::S30, ARM::S31, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q8_Q9_Overlaps[] = { ARM::Q8_Q9, ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::Q8, ARM::Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q10_Q11_Overlaps[] = { ARM::Q10_Q11, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::Q10, ARM::Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q12_Q13_Overlaps[] = { ARM::Q12_Q13, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::Q12, ARM::Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q14_Q15_Overlaps[] = { ARM::Q14_Q15, ARM::D28, ARM::D29, ARM::D30, ARM::D31, ARM::Q14, ARM::Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q0_Q1_Q2_Q3_Overlaps[] = { ARM::Q0_Q1_Q2_Q3, ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::S0, ARM::S1, ARM::S2, ARM::S3, ARM::S4, ARM::S5, ARM::S6, ARM::S7, ARM::S8, ARM::S9, ARM::S10, ARM::S11, ARM::S12, ARM::S13, ARM::S14, ARM::S15, ARM::Q0_Q1, ARM::Q2_Q3, 0 };
  const unsigned Q4_Q5_Q6_Q7_Overlaps[] = { ARM::Q4_Q5_Q6_Q7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::S16, ARM::S17, ARM::S18, ARM::S19, ARM::S20, ARM::S21, ARM::S22, ARM::S23, ARM::S24, ARM::S25, ARM::S26, ARM::S27, ARM::S28, ARM::S29, ARM::S30, ARM::S31, ARM::Q4_Q5, ARM::Q6_Q7, 0 };
  const unsigned Q8_Q9_Q10_Q11_Overlaps[] = { ARM::Q8_Q9_Q10_Q11, ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q8_Q9, ARM::Q10_Q11, 0 };
  const unsigned Q12_Q13_Q14_Q15_Overlaps[] = { ARM::Q12_Q13_Q14_Q15, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::D28, ARM::D29, ARM::D30, ARM::D31, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, ARM::Q12_Q13, ARM::Q14_Q15, 0 };
  const unsigned Empty_SubRegsSet[] = { 0 };
  const unsigned D0_SubRegsSet[] = { ARM::S0, ARM::S1, 0 };
  const unsigned D1_SubRegsSet[] = { ARM::S2, ARM::S3, 0 };
  const unsigned D2_SubRegsSet[] = { ARM::S4, ARM::S5, 0 };
  const unsigned D3_SubRegsSet[] = { ARM::S6, ARM::S7, 0 };
  const unsigned D4_SubRegsSet[] = { ARM::S8, ARM::S9, 0 };
  const unsigned D5_SubRegsSet[] = { ARM::S10, ARM::S11, 0 };
  const unsigned D6_SubRegsSet[] = { ARM::S12, ARM::S13, 0 };
  const unsigned D7_SubRegsSet[] = { ARM::S14, ARM::S15, 0 };
  const unsigned D8_SubRegsSet[] = { ARM::S16, ARM::S17, 0 };
  const unsigned D9_SubRegsSet[] = { ARM::S18, ARM::S19, 0 };
  const unsigned D10_SubRegsSet[] = { ARM::S20, ARM::S21, 0 };
  const unsigned D11_SubRegsSet[] = { ARM::S22, ARM::S23, 0 };
  const unsigned D12_SubRegsSet[] = { ARM::S24, ARM::S25, 0 };
  const unsigned D13_SubRegsSet[] = { ARM::S26, ARM::S27, 0 };
  const unsigned D14_SubRegsSet[] = { ARM::S28, ARM::S29, 0 };
  const unsigned D15_SubRegsSet[] = { ARM::S30, ARM::S31, 0 };
  const unsigned Q0_SubRegsSet[] = { ARM::D0, ARM::S0, ARM::S1, ARM::D1, ARM::S2, ARM::S3, 0 };
  const unsigned Q1_SubRegsSet[] = { ARM::D2, ARM::S4, ARM::S5, ARM::D3, ARM::S6, ARM::S7, 0 };
  const unsigned Q2_SubRegsSet[] = { ARM::D4, ARM::S8, ARM::S9, ARM::D5, ARM::S10, ARM::S11, 0 };
  const unsigned Q3_SubRegsSet[] = { ARM::D6, ARM::S12, ARM::S13, ARM::D7, ARM::S14, ARM::S15, 0 };
  const unsigned Q4_SubRegsSet[] = { ARM::D8, ARM::S16, ARM::S17, ARM::D9, ARM::S18, ARM::S19, 0 };
  const unsigned Q5_SubRegsSet[] = { ARM::D10, ARM::S20, ARM::S21, ARM::D11, ARM::S22, ARM::S23, 0 };
  const unsigned Q6_SubRegsSet[] = { ARM::D12, ARM::S24, ARM::S25, ARM::D13, ARM::S26, ARM::S27, 0 };
  const unsigned Q7_SubRegsSet[] = { ARM::D14, ARM::S28, ARM::S29, ARM::D15, ARM::S30, ARM::S31, 0 };
  const unsigned Q8_SubRegsSet[] = { ARM::D16, ARM::D17, 0 };
  const unsigned Q9_SubRegsSet[] = { ARM::D18, ARM::D19, 0 };
  const unsigned Q10_SubRegsSet[] = { ARM::D20, ARM::D21, 0 };
  const unsigned Q11_SubRegsSet[] = { ARM::D22, ARM::D23, 0 };
  const unsigned Q12_SubRegsSet[] = { ARM::D24, ARM::D25, 0 };
  const unsigned Q13_SubRegsSet[] = { ARM::D26, ARM::D27, 0 };
  const unsigned Q14_SubRegsSet[] = { ARM::D28, ARM::D29, 0 };
  const unsigned Q15_SubRegsSet[] = { ARM::D30, ARM::D31, 0 };
  const unsigned Q0_Q1_SubRegsSet[] = { ARM::Q0, ARM::D0, ARM::S0, ARM::S1, ARM::D1, ARM::S2, ARM::S3, ARM::Q1, ARM::D2, ARM::S4, ARM::S5, ARM::D3, ARM::S6, ARM::S7, 0 };
  const unsigned Q2_Q3_SubRegsSet[] = { ARM::Q2, ARM::D4, ARM::S8, ARM::S9, ARM::D5, ARM::S10, ARM::S11, ARM::Q3, ARM::D6, ARM::S12, ARM::S13, ARM::D7, ARM::S14, ARM::S15, 0 };
  const unsigned Q4_Q5_SubRegsSet[] = { ARM::Q4, ARM::D8, ARM::S16, ARM::S17, ARM::D9, ARM::S18, ARM::S19, ARM::Q5, ARM::D10, ARM::S20, ARM::S21, ARM::D11, ARM::S22, ARM::S23, 0 };
  const unsigned Q6_Q7_SubRegsSet[] = { ARM::Q6, ARM::D12, ARM::S24, ARM::S25, ARM::D13, ARM::S26, ARM::S27, ARM::Q7, ARM::D14, ARM::S28, ARM::S29, ARM::D15, ARM::S30, ARM::S31, 0 };
  const unsigned Q8_Q9_SubRegsSet[] = { ARM::Q8, ARM::D16, ARM::D17, ARM::Q9, ARM::D18, ARM::D19, 0 };
  const unsigned Q10_Q11_SubRegsSet[] = { ARM::Q10, ARM::D20, ARM::D21, ARM::Q11, ARM::D22, ARM::D23, 0 };
  const unsigned Q12_Q13_SubRegsSet[] = { ARM::Q12, ARM::D24, ARM::D25, ARM::Q13, ARM::D26, ARM::D27, 0 };
  const unsigned Q14_Q15_SubRegsSet[] = { ARM::Q14, ARM::D28, ARM::D29, ARM::Q15, ARM::D30, ARM::D31, 0 };
  const unsigned Q0_Q1_Q2_Q3_SubRegsSet[] = { ARM::Q0_Q1, ARM::Q0, ARM::D0, ARM::S0, ARM::S1, ARM::D1, ARM::S2, ARM::S3, ARM::Q1, ARM::D2, ARM::S4, ARM::S5, ARM::D3, ARM::S6, ARM::S7, ARM::Q2_Q3, ARM::Q2, ARM::D4, ARM::S8, ARM::S9, ARM::D5, ARM::S10, ARM::S11, ARM::Q3, ARM::D6, ARM::S12, ARM::S13, ARM::D7, ARM::S14, ARM::S15, 0 };
  const unsigned Q4_Q5_Q6_Q7_SubRegsSet[] = { ARM::Q4_Q5, ARM::Q4, ARM::D8, ARM::S16, ARM::S17, ARM::D9, ARM::S18, ARM::S19, ARM::Q5, ARM::D10, ARM::S20, ARM::S21, ARM::D11, ARM::S22, ARM::S23, ARM::Q6_Q7, ARM::Q6, ARM::D12, ARM::S24, ARM::S25, ARM::D13, ARM::S26, ARM::S27, ARM::Q7, ARM::D14, ARM::S28, ARM::S29, ARM::D15, ARM::S30, ARM::S31, 0 };
  const unsigned Q8_Q9_Q10_Q11_SubRegsSet[] = { ARM::Q8_Q9, ARM::Q8, ARM::D16, ARM::D17, ARM::Q9, ARM::D18, ARM::D19, ARM::Q10_Q11, ARM::Q10, ARM::D20, ARM::D21, ARM::Q11, ARM::D22, ARM::D23, 0 };
  const unsigned Q12_Q13_Q14_Q15_SubRegsSet[] = { ARM::Q12_Q13, ARM::Q12, ARM::D24, ARM::D25, ARM::Q13, ARM::D26, ARM::D27, ARM::Q14_Q15, ARM::Q14, ARM::D28, ARM::D29, ARM::Q15, ARM::D30, ARM::D31, 0 };
  const unsigned Empty_SuperRegsSet[] = { 0 };
  const unsigned D0_SuperRegsSet[] = { ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D1_SuperRegsSet[] = { ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D2_SuperRegsSet[] = { ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D3_SuperRegsSet[] = { ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D4_SuperRegsSet[] = { ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D5_SuperRegsSet[] = { ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D6_SuperRegsSet[] = { ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D7_SuperRegsSet[] = { ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned D8_SuperRegsSet[] = { ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D9_SuperRegsSet[] = { ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D10_SuperRegsSet[] = { ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D11_SuperRegsSet[] = { ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D12_SuperRegsSet[] = { ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D13_SuperRegsSet[] = { ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D14_SuperRegsSet[] = { ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D15_SuperRegsSet[] = { ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned D16_SuperRegsSet[] = { ARM::Q8, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D17_SuperRegsSet[] = { ARM::Q8, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D18_SuperRegsSet[] = { ARM::Q9, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D19_SuperRegsSet[] = { ARM::Q9, ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D20_SuperRegsSet[] = { ARM::Q10, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D21_SuperRegsSet[] = { ARM::Q10, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D22_SuperRegsSet[] = { ARM::Q11, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D23_SuperRegsSet[] = { ARM::Q11, ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned D24_SuperRegsSet[] = { ARM::Q12, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D25_SuperRegsSet[] = { ARM::Q12, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D26_SuperRegsSet[] = { ARM::Q13, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D27_SuperRegsSet[] = { ARM::Q13, ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D28_SuperRegsSet[] = { ARM::Q14, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D29_SuperRegsSet[] = { ARM::Q14, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D30_SuperRegsSet[] = { ARM::Q15, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned D31_SuperRegsSet[] = { ARM::Q15, ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q0_SuperRegsSet[] = { ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q1_SuperRegsSet[] = { ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q2_SuperRegsSet[] = { ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q3_SuperRegsSet[] = { ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q4_SuperRegsSet[] = { ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q5_SuperRegsSet[] = { ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q6_SuperRegsSet[] = { ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q7_SuperRegsSet[] = { ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q8_SuperRegsSet[] = { ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q9_SuperRegsSet[] = { ARM::Q8_Q9, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q10_SuperRegsSet[] = { ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q11_SuperRegsSet[] = { ARM::Q10_Q11, ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q12_SuperRegsSet[] = { ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q13_SuperRegsSet[] = { ARM::Q12_Q13, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q14_SuperRegsSet[] = { ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q15_SuperRegsSet[] = { ARM::Q14_Q15, ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned S0_SuperRegsSet[] = { ARM::D0, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S1_SuperRegsSet[] = { ARM::D0, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S2_SuperRegsSet[] = { ARM::D1, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S3_SuperRegsSet[] = { ARM::D1, ARM::Q0, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S4_SuperRegsSet[] = { ARM::D2, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S5_SuperRegsSet[] = { ARM::D2, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S6_SuperRegsSet[] = { ARM::D3, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S7_SuperRegsSet[] = { ARM::D3, ARM::Q1, ARM::Q0_Q1, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S8_SuperRegsSet[] = { ARM::D4, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S9_SuperRegsSet[] = { ARM::D4, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S10_SuperRegsSet[] = { ARM::D5, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S11_SuperRegsSet[] = { ARM::D5, ARM::Q2, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S12_SuperRegsSet[] = { ARM::D6, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S13_SuperRegsSet[] = { ARM::D6, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S14_SuperRegsSet[] = { ARM::D7, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S15_SuperRegsSet[] = { ARM::D7, ARM::Q3, ARM::Q2_Q3, ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned S16_SuperRegsSet[] = { ARM::D8, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S17_SuperRegsSet[] = { ARM::D8, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S18_SuperRegsSet[] = { ARM::D9, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S19_SuperRegsSet[] = { ARM::D9, ARM::Q4, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S20_SuperRegsSet[] = { ARM::D10, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S21_SuperRegsSet[] = { ARM::D10, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S22_SuperRegsSet[] = { ARM::D11, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S23_SuperRegsSet[] = { ARM::D11, ARM::Q5, ARM::Q4_Q5, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S24_SuperRegsSet[] = { ARM::D12, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S25_SuperRegsSet[] = { ARM::D12, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S26_SuperRegsSet[] = { ARM::D13, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S27_SuperRegsSet[] = { ARM::D13, ARM::Q6, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S28_SuperRegsSet[] = { ARM::D14, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S29_SuperRegsSet[] = { ARM::D14, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S30_SuperRegsSet[] = { ARM::D15, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned S31_SuperRegsSet[] = { ARM::D15, ARM::Q7, ARM::Q6_Q7, ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q0_Q1_SuperRegsSet[] = { ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q2_Q3_SuperRegsSet[] = { ARM::Q0_Q1_Q2_Q3, 0 };
  const unsigned Q4_Q5_SuperRegsSet[] = { ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q6_Q7_SuperRegsSet[] = { ARM::Q4_Q5_Q6_Q7, 0 };
  const unsigned Q8_Q9_SuperRegsSet[] = { ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q10_Q11_SuperRegsSet[] = { ARM::Q8_Q9_Q10_Q11, 0 };
  const unsigned Q12_Q13_SuperRegsSet[] = { ARM::Q12_Q13_Q14_Q15, 0 };
  const unsigned Q14_Q15_SuperRegsSet[] = { ARM::Q12_Q13_Q14_Q15, 0 };
}

extern const MCRegisterDesc ARMRegDesc[] = { // Descriptors
  { "NOREG",	0,	0,	0 },
  { "APSR",	APSR_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "CPSR",	CPSR_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "D0",	D0_Overlaps,	D0_SubRegsSet,	D0_SuperRegsSet },
  { "D1",	D1_Overlaps,	D1_SubRegsSet,	D1_SuperRegsSet },
  { "D2",	D2_Overlaps,	D2_SubRegsSet,	D2_SuperRegsSet },
  { "D3",	D3_Overlaps,	D3_SubRegsSet,	D3_SuperRegsSet },
  { "D4",	D4_Overlaps,	D4_SubRegsSet,	D4_SuperRegsSet },
  { "D5",	D5_Overlaps,	D5_SubRegsSet,	D5_SuperRegsSet },
  { "D6",	D6_Overlaps,	D6_SubRegsSet,	D6_SuperRegsSet },
  { "D7",	D7_Overlaps,	D7_SubRegsSet,	D7_SuperRegsSet },
  { "D8",	D8_Overlaps,	D8_SubRegsSet,	D8_SuperRegsSet },
  { "D9",	D9_Overlaps,	D9_SubRegsSet,	D9_SuperRegsSet },
  { "D10",	D10_Overlaps,	D10_SubRegsSet,	D10_SuperRegsSet },
  { "D11",	D11_Overlaps,	D11_SubRegsSet,	D11_SuperRegsSet },
  { "D12",	D12_Overlaps,	D12_SubRegsSet,	D12_SuperRegsSet },
  { "D13",	D13_Overlaps,	D13_SubRegsSet,	D13_SuperRegsSet },
  { "D14",	D14_Overlaps,	D14_SubRegsSet,	D14_SuperRegsSet },
  { "D15",	D15_Overlaps,	D15_SubRegsSet,	D15_SuperRegsSet },
  { "D16",	D16_Overlaps,	Empty_SubRegsSet,	D16_SuperRegsSet },
  { "D17",	D17_Overlaps,	Empty_SubRegsSet,	D17_SuperRegsSet },
  { "D18",	D18_Overlaps,	Empty_SubRegsSet,	D18_SuperRegsSet },
  { "D19",	D19_Overlaps,	Empty_SubRegsSet,	D19_SuperRegsSet },
  { "D20",	D20_Overlaps,	Empty_SubRegsSet,	D20_SuperRegsSet },
  { "D21",	D21_Overlaps,	Empty_SubRegsSet,	D21_SuperRegsSet },
  { "D22",	D22_Overlaps,	Empty_SubRegsSet,	D22_SuperRegsSet },
  { "D23",	D23_Overlaps,	Empty_SubRegsSet,	D23_SuperRegsSet },
  { "D24",	D24_Overlaps,	Empty_SubRegsSet,	D24_SuperRegsSet },
  { "D25",	D25_Overlaps,	Empty_SubRegsSet,	D25_SuperRegsSet },
  { "D26",	D26_Overlaps,	Empty_SubRegsSet,	D26_SuperRegsSet },
  { "D27",	D27_Overlaps,	Empty_SubRegsSet,	D27_SuperRegsSet },
  { "D28",	D28_Overlaps,	Empty_SubRegsSet,	D28_SuperRegsSet },
  { "D29",	D29_Overlaps,	Empty_SubRegsSet,	D29_SuperRegsSet },
  { "D30",	D30_Overlaps,	Empty_SubRegsSet,	D30_SuperRegsSet },
  { "D31",	D31_Overlaps,	Empty_SubRegsSet,	D31_SuperRegsSet },
  { "FPEXC",	FPEXC_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "FPSCR",	FPSCR_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "FPSID",	FPSID_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "ITSTATE",	ITSTATE_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "LR",	LR_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "PC",	PC_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "Q0",	Q0_Overlaps,	Q0_SubRegsSet,	Q0_SuperRegsSet },
  { "Q1",	Q1_Overlaps,	Q1_SubRegsSet,	Q1_SuperRegsSet },
  { "Q2",	Q2_Overlaps,	Q2_SubRegsSet,	Q2_SuperRegsSet },
  { "Q3",	Q3_Overlaps,	Q3_SubRegsSet,	Q3_SuperRegsSet },
  { "Q4",	Q4_Overlaps,	Q4_SubRegsSet,	Q4_SuperRegsSet },
  { "Q5",	Q5_Overlaps,	Q5_SubRegsSet,	Q5_SuperRegsSet },
  { "Q6",	Q6_Overlaps,	Q6_SubRegsSet,	Q6_SuperRegsSet },
  { "Q7",	Q7_Overlaps,	Q7_SubRegsSet,	Q7_SuperRegsSet },
  { "Q8",	Q8_Overlaps,	Q8_SubRegsSet,	Q8_SuperRegsSet },
  { "Q9",	Q9_Overlaps,	Q9_SubRegsSet,	Q9_SuperRegsSet },
  { "Q10",	Q10_Overlaps,	Q10_SubRegsSet,	Q10_SuperRegsSet },
  { "Q11",	Q11_Overlaps,	Q11_SubRegsSet,	Q11_SuperRegsSet },
  { "Q12",	Q12_Overlaps,	Q12_SubRegsSet,	Q12_SuperRegsSet },
  { "Q13",	Q13_Overlaps,	Q13_SubRegsSet,	Q13_SuperRegsSet },
  { "Q14",	Q14_Overlaps,	Q14_SubRegsSet,	Q14_SuperRegsSet },
  { "Q15",	Q15_Overlaps,	Q15_SubRegsSet,	Q15_SuperRegsSet },
  { "R0",	R0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R1",	R1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R2",	R2_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R3",	R3_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R4",	R4_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R5",	R5_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R6",	R6_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R7",	R7_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R8",	R8_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R9",	R9_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R10",	R10_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R11",	R11_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R12",	R12_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "S0",	S0_Overlaps,	Empty_SubRegsSet,	S0_SuperRegsSet },
  { "S1",	S1_Overlaps,	Empty_SubRegsSet,	S1_SuperRegsSet },
  { "S2",	S2_Overlaps,	Empty_SubRegsSet,	S2_SuperRegsSet },
  { "S3",	S3_Overlaps,	Empty_SubRegsSet,	S3_SuperRegsSet },
  { "S4",	S4_Overlaps,	Empty_SubRegsSet,	S4_SuperRegsSet },
  { "S5",	S5_Overlaps,	Empty_SubRegsSet,	S5_SuperRegsSet },
  { "S6",	S6_Overlaps,	Empty_SubRegsSet,	S6_SuperRegsSet },
  { "S7",	S7_Overlaps,	Empty_SubRegsSet,	S7_SuperRegsSet },
  { "S8",	S8_Overlaps,	Empty_SubRegsSet,	S8_SuperRegsSet },
  { "S9",	S9_Overlaps,	Empty_SubRegsSet,	S9_SuperRegsSet },
  { "S10",	S10_Overlaps,	Empty_SubRegsSet,	S10_SuperRegsSet },
  { "S11",	S11_Overlaps,	Empty_SubRegsSet,	S11_SuperRegsSet },
  { "S12",	S12_Overlaps,	Empty_SubRegsSet,	S12_SuperRegsSet },
  { "S13",	S13_Overlaps,	Empty_SubRegsSet,	S13_SuperRegsSet },
  { "S14",	S14_Overlaps,	Empty_SubRegsSet,	S14_SuperRegsSet },
  { "S15",	S15_Overlaps,	Empty_SubRegsSet,	S15_SuperRegsSet },
  { "S16",	S16_Overlaps,	Empty_SubRegsSet,	S16_SuperRegsSet },
  { "S17",	S17_Overlaps,	Empty_SubRegsSet,	S17_SuperRegsSet },
  { "S18",	S18_Overlaps,	Empty_SubRegsSet,	S18_SuperRegsSet },
  { "S19",	S19_Overlaps,	Empty_SubRegsSet,	S19_SuperRegsSet },
  { "S20",	S20_Overlaps,	Empty_SubRegsSet,	S20_SuperRegsSet },
  { "S21",	S21_Overlaps,	Empty_SubRegsSet,	S21_SuperRegsSet },
  { "S22",	S22_Overlaps,	Empty_SubRegsSet,	S22_SuperRegsSet },
  { "S23",	S23_Overlaps,	Empty_SubRegsSet,	S23_SuperRegsSet },
  { "S24",	S24_Overlaps,	Empty_SubRegsSet,	S24_SuperRegsSet },
  { "S25",	S25_Overlaps,	Empty_SubRegsSet,	S25_SuperRegsSet },
  { "S26",	S26_Overlaps,	Empty_SubRegsSet,	S26_SuperRegsSet },
  { "S27",	S27_Overlaps,	Empty_SubRegsSet,	S27_SuperRegsSet },
  { "S28",	S28_Overlaps,	Empty_SubRegsSet,	S28_SuperRegsSet },
  { "S29",	S29_Overlaps,	Empty_SubRegsSet,	S29_SuperRegsSet },
  { "S30",	S30_Overlaps,	Empty_SubRegsSet,	S30_SuperRegsSet },
  { "S31",	S31_Overlaps,	Empty_SubRegsSet,	S31_SuperRegsSet },
  { "SP",	SP_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "SPSR",	SPSR_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "Q0_Q1",	Q0_Q1_Overlaps,	Q0_Q1_SubRegsSet,	Q0_Q1_SuperRegsSet },
  { "Q2_Q3",	Q2_Q3_Overlaps,	Q2_Q3_SubRegsSet,	Q2_Q3_SuperRegsSet },
  { "Q4_Q5",	Q4_Q5_Overlaps,	Q4_Q5_SubRegsSet,	Q4_Q5_SuperRegsSet },
  { "Q6_Q7",	Q6_Q7_Overlaps,	Q6_Q7_SubRegsSet,	Q6_Q7_SuperRegsSet },
  { "Q8_Q9",	Q8_Q9_Overlaps,	Q8_Q9_SubRegsSet,	Q8_Q9_SuperRegsSet },
  { "Q10_Q11",	Q10_Q11_Overlaps,	Q10_Q11_SubRegsSet,	Q10_Q11_SuperRegsSet },
  { "Q12_Q13",	Q12_Q13_Overlaps,	Q12_Q13_SubRegsSet,	Q12_Q13_SuperRegsSet },
  { "Q14_Q15",	Q14_Q15_Overlaps,	Q14_Q15_SubRegsSet,	Q14_Q15_SuperRegsSet },
  { "Q0_Q1_Q2_Q3",	Q0_Q1_Q2_Q3_Overlaps,	Q0_Q1_Q2_Q3_SubRegsSet,	Empty_SuperRegsSet },
  { "Q4_Q5_Q6_Q7",	Q4_Q5_Q6_Q7_Overlaps,	Q4_Q5_Q6_Q7_SubRegsSet,	Empty_SuperRegsSet },
  { "Q8_Q9_Q10_Q11",	Q8_Q9_Q10_Q11_Overlaps,	Q8_Q9_Q10_Q11_SubRegsSet,	Empty_SuperRegsSet },
  { "Q12_Q13_Q14_Q15",	Q12_Q13_Q14_Q15_Overlaps,	Q12_Q13_Q14_Q15_SubRegsSet,	Empty_SuperRegsSet },
};

namespace {     // Register classes...
  // SPR Register Class...
  static const unsigned SPR[] = {
    ARM::S0, ARM::S1, ARM::S2, ARM::S3, ARM::S4, ARM::S5, ARM::S6, ARM::S7, ARM::S8, ARM::S9, ARM::S10, ARM::S11, ARM::S12, ARM::S13, ARM::S14, ARM::S15, ARM::S16, ARM::S17, ARM::S18, ARM::S19, ARM::S20, ARM::S21, ARM::S22, ARM::S23, ARM::S24, ARM::S25, ARM::S26, ARM::S27, ARM::S28, ARM::S29, ARM::S30, ARM::S31, 
  };

  // SPR Bit set.
  static const unsigned char SPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // DPR Register Class...
  static const unsigned DPR[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15, ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::D28, ARM::D29, ARM::D30, ARM::D31, 
  };

  // DPR Bit set.
  static const unsigned char DPRBits[] = {
    0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // SPR_8 Register Class...
  static const unsigned SPR_8[] = {
    ARM::S0, ARM::S1, ARM::S2, ARM::S3, ARM::S4, ARM::S5, ARM::S6, ARM::S7, ARM::S8, ARM::S9, ARM::S10, ARM::S11, ARM::S12, ARM::S13, ARM::S14, ARM::S15, 
  };

  // SPR_8 Bit set.
  static const unsigned char SPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3f, 
  };

  // GPR Register Class...
  static const unsigned GPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, ARM::PC, 
  };

  // GPR Bit set.
  static const unsigned char GPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0x40, 
  };

  // DPR_VFP2 Register Class...
  static const unsigned DPR_VFP2[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15, 
  };

  // DPR_VFP2 Bit set.
  static const unsigned char DPR_VFP2Bits[] = {
    0xf8, 0xff, 0x07, 
  };

  // QPR Register Class...
  static const unsigned QPR[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, 
  };

  // QPR Bit set.
  static const unsigned char QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 
  };

  // GPRnopc Register Class...
  static const unsigned GPRnopc[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, 
  };

  // GPRnopc Bit set.
  static const unsigned char GPRnopcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0x40, 
  };

  // rGPR Register Class...
  static const unsigned rGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::LR, 
  };

  // rGPR Bit set.
  static const unsigned char rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xfe, 0x3f, 
  };

  // tGPR Register Class...
  static const unsigned tGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, 
  };

  // tGPR Bit set.
  static const unsigned char tGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 
  };

  // hGPR Register Class...
  static const unsigned hGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, ARM::PC, 
  };

  // hGPR Bit set.
  static const unsigned char hGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x40, 
  };

  // DPR_8 Register Class...
  static const unsigned DPR_8[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, 
  };

  // DPR_8 Bit set.
  static const unsigned char DPR_8Bits[] = {
    0xf8, 0x07, 
  };

  // QPR_VFP2 Register Class...
  static const unsigned QPR_VFP2[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, 
  };

  // QPR_VFP2 Bit set.
  static const unsigned char QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 
  };

  // QQPR Register Class...
  static const unsigned QQPR[] = {
    ARM::Q0_Q1, ARM::Q2_Q3, ARM::Q4_Q5, ARM::Q6_Q7, ARM::Q8_Q9, ARM::Q10_Q11, ARM::Q12_Q13, ARM::Q14_Q15, 
  };

  // QQPR Bit set.
  static const unsigned char QQPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  };

  // GPRnopc_and_hGPR Register Class...
  static const unsigned GPRnopc_and_hGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, 
  };

  // GPRnopc_and_hGPR Bit set.
  static const unsigned char GPRnopc_and_hGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x40, 
  };

  // tcGPR Register Class...
  static const unsigned tcGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R9, ARM::R12, 
  };

  // tcGPR Bit set.
  static const unsigned char tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x24, 
  };

  // hGPR_and_rGPR Register Class...
  static const unsigned hGPR_and_rGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::LR, 
  };

  // hGPR_and_rGPR Bit set.
  static const unsigned char hGPR_and_rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x3e, 
  };

  // tGPR_and_tcGPR Register Class...
  static const unsigned tGPR_and_tcGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, 
  };

  // tGPR_and_tcGPR Bit set.
  static const unsigned char tGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  };

  // QPR_8 Register Class...
  static const unsigned QPR_8[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, 
  };

  // QPR_8 Bit set.
  static const unsigned char QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  };

  // QQPR_with_ssub_0 Register Class...
  static const unsigned QQPR_with_ssub_0[] = {
    ARM::Q0_Q1, ARM::Q2_Q3, ARM::Q4_Q5, ARM::Q6_Q7, 
  };

  // QQPR_with_ssub_0 Bit set.
  static const unsigned char QQPR_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  };

  // QQQQPR Register Class...
  static const unsigned QQQQPR[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q4_Q5_Q6_Q7, ARM::Q8_Q9_Q10_Q11, ARM::Q12_Q13_Q14_Q15, 
  };

  // QQQQPR Bit set.
  static const unsigned char QQQQPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  };

  // hGPR_and_tcGPR Register Class...
  static const unsigned hGPR_and_tcGPR[] = {
    ARM::R9, ARM::R12, 
  };

  // hGPR_and_tcGPR Bit set.
  static const unsigned char hGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 
  };

  // QQPR_with_dsub_0_in_DPR_8 Register Class...
  static const unsigned QQPR_with_dsub_0_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::Q2_Q3, 
  };

  // QQPR_with_dsub_0_in_DPR_8 Bit set.
  static const unsigned char QQPR_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  };

  // QQQQPR_with_ssub_0 Register Class...
  static const unsigned QQQQPR_with_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q4_Q5_Q6_Q7, 
  };

  // QQQQPR_with_ssub_0 Bit set.
  static const unsigned char QQQQPR_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  };

  // GPRsp Register Class...
  static const unsigned GPRsp[] = {
    ARM::SP, 
  };

  // GPRsp Bit set.
  static const unsigned char GPRspBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // CCR Register Class...
  static const unsigned CCR[] = {
    ARM::CPSR, 
  };

  // CCR Bit set.
  static const unsigned char CCRBits[] = {
    0x04, 
  };

  // QQQQPR_with_dsub_0_in_DPR_8 Register Class...
  static const unsigned QQQQPR_with_dsub_0_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, 
  };

  // QQQQPR_with_dsub_0_in_DPR_8 Bit set.
  static const unsigned char QQQQPR_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

}

extern const MCRegisterClass ARMMCRegisterClasses[] = {
  MCRegisterClass(ARM::SPRRegClassID, "SPR", 4, 4, 1, 1, SPR, SPR + 32, SPRBits, sizeof(SPRBits)),
  MCRegisterClass(ARM::DPRRegClassID, "DPR", 8, 8, 1, 1, DPR, DPR + 32, DPRBits, sizeof(DPRBits)),
  MCRegisterClass(ARM::SPR_8RegClassID, "SPR_8", 4, 4, 1, 1, SPR_8, SPR_8 + 16, SPR_8Bits, sizeof(SPR_8Bits)),
  MCRegisterClass(ARM::GPRRegClassID, "GPR", 4, 4, 1, 1, GPR, GPR + 16, GPRBits, sizeof(GPRBits)),
  MCRegisterClass(ARM::DPR_VFP2RegClassID, "DPR_VFP2", 8, 8, 1, 1, DPR_VFP2, DPR_VFP2 + 16, DPR_VFP2Bits, sizeof(DPR_VFP2Bits)),
  MCRegisterClass(ARM::QPRRegClassID, "QPR", 16, 16, 1, 1, QPR, QPR + 16, QPRBits, sizeof(QPRBits)),
  MCRegisterClass(ARM::GPRnopcRegClassID, "GPRnopc", 4, 4, 1, 1, GPRnopc, GPRnopc + 15, GPRnopcBits, sizeof(GPRnopcBits)),
  MCRegisterClass(ARM::rGPRRegClassID, "rGPR", 4, 4, 1, 1, rGPR, rGPR + 14, rGPRBits, sizeof(rGPRBits)),
  MCRegisterClass(ARM::tGPRRegClassID, "tGPR", 4, 4, 1, 1, tGPR, tGPR + 8, tGPRBits, sizeof(tGPRBits)),
  MCRegisterClass(ARM::hGPRRegClassID, "hGPR", 4, 4, 1, 1, hGPR, hGPR + 8, hGPRBits, sizeof(hGPRBits)),
  MCRegisterClass(ARM::DPR_8RegClassID, "DPR_8", 8, 8, 1, 1, DPR_8, DPR_8 + 8, DPR_8Bits, sizeof(DPR_8Bits)),
  MCRegisterClass(ARM::QPR_VFP2RegClassID, "QPR_VFP2", 16, 16, 1, 1, QPR_VFP2, QPR_VFP2 + 8, QPR_VFP2Bits, sizeof(QPR_VFP2Bits)),
  MCRegisterClass(ARM::QQPRRegClassID, "QQPR", 32, 32, 1, 1, QQPR, QQPR + 8, QQPRBits, sizeof(QQPRBits)),
  MCRegisterClass(ARM::GPRnopc_and_hGPRRegClassID, "GPRnopc_and_hGPR", 4, 4, 1, 1, GPRnopc_and_hGPR, GPRnopc_and_hGPR + 7, GPRnopc_and_hGPRBits, sizeof(GPRnopc_and_hGPRBits)),
  MCRegisterClass(ARM::tcGPRRegClassID, "tcGPR", 4, 4, 1, 1, tcGPR, tcGPR + 6, tcGPRBits, sizeof(tcGPRBits)),
  MCRegisterClass(ARM::hGPR_and_rGPRRegClassID, "hGPR_and_rGPR", 4, 4, 1, 1, hGPR_and_rGPR, hGPR_and_rGPR + 6, hGPR_and_rGPRBits, sizeof(hGPR_and_rGPRBits)),
  MCRegisterClass(ARM::tGPR_and_tcGPRRegClassID, "tGPR_and_tcGPR", 4, 4, 1, 1, tGPR_and_tcGPR, tGPR_and_tcGPR + 4, tGPR_and_tcGPRBits, sizeof(tGPR_and_tcGPRBits)),
  MCRegisterClass(ARM::QPR_8RegClassID, "QPR_8", 16, 16, 1, 1, QPR_8, QPR_8 + 4, QPR_8Bits, sizeof(QPR_8Bits)),
  MCRegisterClass(ARM::QQPR_with_ssub_0RegClassID, "QQPR_with_ssub_0", 32, 32, 1, 1, QQPR_with_ssub_0, QQPR_with_ssub_0 + 4, QQPR_with_ssub_0Bits, sizeof(QQPR_with_ssub_0Bits)),
  MCRegisterClass(ARM::QQQQPRRegClassID, "QQQQPR", 64, 32, 1, 1, QQQQPR, QQQQPR + 4, QQQQPRBits, sizeof(QQQQPRBits)),
  MCRegisterClass(ARM::hGPR_and_tcGPRRegClassID, "hGPR_and_tcGPR", 4, 4, 1, 1, hGPR_and_tcGPR, hGPR_and_tcGPR + 2, hGPR_and_tcGPRBits, sizeof(hGPR_and_tcGPRBits)),
  MCRegisterClass(ARM::QQPR_with_dsub_0_in_DPR_8RegClassID, "QQPR_with_dsub_0_in_DPR_8", 32, 32, 1, 1, QQPR_with_dsub_0_in_DPR_8, QQPR_with_dsub_0_in_DPR_8 + 2, QQPR_with_dsub_0_in_DPR_8Bits, sizeof(QQPR_with_dsub_0_in_DPR_8Bits)),
  MCRegisterClass(ARM::QQQQPR_with_ssub_0RegClassID, "QQQQPR_with_ssub_0", 64, 32, 1, 1, QQQQPR_with_ssub_0, QQQQPR_with_ssub_0 + 2, QQQQPR_with_ssub_0Bits, sizeof(QQQQPR_with_ssub_0Bits)),
  MCRegisterClass(ARM::GPRspRegClassID, "GPRsp", 4, 4, 1, 1, GPRsp, GPRsp + 1, GPRspBits, sizeof(GPRspBits)),
  MCRegisterClass(ARM::CCRRegClassID, "CCR", 4, 4, -1, 0, CCR, CCR + 1, CCRBits, sizeof(CCRBits)),
  MCRegisterClass(ARM::QQQQPR_with_dsub_0_in_DPR_8RegClassID, "QQQQPR_with_dsub_0_in_DPR_8", 64, 32, 1, 1, QQQQPR_with_dsub_0_in_DPR_8, QQQQPR_with_dsub_0_in_DPR_8 + 1, QQQQPR_with_dsub_0_in_DPR_8Bits, sizeof(QQQQPR_with_dsub_0_in_DPR_8Bits)),
};

static inline void InitARMMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0) {
  RI->InitMCRegisterInfo(ARMRegDesc, 116, RA, ARMMCRegisterClasses, 26);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(256, ARM::D0, false );
    RI->mapDwarfRegToLLVMReg(257, ARM::D1, false );
    RI->mapDwarfRegToLLVMReg(258, ARM::D2, false );
    RI->mapDwarfRegToLLVMReg(259, ARM::D3, false );
    RI->mapDwarfRegToLLVMReg(260, ARM::D4, false );
    RI->mapDwarfRegToLLVMReg(261, ARM::D5, false );
    RI->mapDwarfRegToLLVMReg(262, ARM::D6, false );
    RI->mapDwarfRegToLLVMReg(263, ARM::D7, false );
    RI->mapDwarfRegToLLVMReg(264, ARM::D8, false );
    RI->mapDwarfRegToLLVMReg(265, ARM::D9, false );
    RI->mapDwarfRegToLLVMReg(266, ARM::D10, false );
    RI->mapDwarfRegToLLVMReg(267, ARM::D11, false );
    RI->mapDwarfRegToLLVMReg(268, ARM::D12, false );
    RI->mapDwarfRegToLLVMReg(269, ARM::D13, false );
    RI->mapDwarfRegToLLVMReg(270, ARM::D14, false );
    RI->mapDwarfRegToLLVMReg(271, ARM::D15, false );
    RI->mapDwarfRegToLLVMReg(272, ARM::D16, false );
    RI->mapDwarfRegToLLVMReg(273, ARM::D17, false );
    RI->mapDwarfRegToLLVMReg(274, ARM::D18, false );
    RI->mapDwarfRegToLLVMReg(275, ARM::D19, false );
    RI->mapDwarfRegToLLVMReg(276, ARM::D20, false );
    RI->mapDwarfRegToLLVMReg(277, ARM::D21, false );
    RI->mapDwarfRegToLLVMReg(278, ARM::D22, false );
    RI->mapDwarfRegToLLVMReg(279, ARM::D23, false );
    RI->mapDwarfRegToLLVMReg(280, ARM::D24, false );
    RI->mapDwarfRegToLLVMReg(281, ARM::D25, false );
    RI->mapDwarfRegToLLVMReg(282, ARM::D26, false );
    RI->mapDwarfRegToLLVMReg(283, ARM::D27, false );
    RI->mapDwarfRegToLLVMReg(284, ARM::D28, false );
    RI->mapDwarfRegToLLVMReg(285, ARM::D29, false );
    RI->mapDwarfRegToLLVMReg(286, ARM::D30, false );
    RI->mapDwarfRegToLLVMReg(287, ARM::D31, false );
    RI->mapDwarfRegToLLVMReg(14, ARM::LR, false );
    RI->mapDwarfRegToLLVMReg(15, ARM::PC, false );
    RI->mapDwarfRegToLLVMReg(0, ARM::R0, false );
    RI->mapDwarfRegToLLVMReg(1, ARM::R1, false );
    RI->mapDwarfRegToLLVMReg(2, ARM::R2, false );
    RI->mapDwarfRegToLLVMReg(3, ARM::R3, false );
    RI->mapDwarfRegToLLVMReg(4, ARM::R4, false );
    RI->mapDwarfRegToLLVMReg(5, ARM::R5, false );
    RI->mapDwarfRegToLLVMReg(6, ARM::R6, false );
    RI->mapDwarfRegToLLVMReg(7, ARM::R7, false );
    RI->mapDwarfRegToLLVMReg(8, ARM::R8, false );
    RI->mapDwarfRegToLLVMReg(9, ARM::R9, false );
    RI->mapDwarfRegToLLVMReg(10, ARM::R10, false );
    RI->mapDwarfRegToLLVMReg(11, ARM::R11, false );
    RI->mapDwarfRegToLLVMReg(12, ARM::R12, false );
    RI->mapDwarfRegToLLVMReg(13, ARM::SP, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(256, ARM::D0, true );
    RI->mapDwarfRegToLLVMReg(257, ARM::D1, true );
    RI->mapDwarfRegToLLVMReg(258, ARM::D2, true );
    RI->mapDwarfRegToLLVMReg(259, ARM::D3, true );
    RI->mapDwarfRegToLLVMReg(260, ARM::D4, true );
    RI->mapDwarfRegToLLVMReg(261, ARM::D5, true );
    RI->mapDwarfRegToLLVMReg(262, ARM::D6, true );
    RI->mapDwarfRegToLLVMReg(263, ARM::D7, true );
    RI->mapDwarfRegToLLVMReg(264, ARM::D8, true );
    RI->mapDwarfRegToLLVMReg(265, ARM::D9, true );
    RI->mapDwarfRegToLLVMReg(266, ARM::D10, true );
    RI->mapDwarfRegToLLVMReg(267, ARM::D11, true );
    RI->mapDwarfRegToLLVMReg(268, ARM::D12, true );
    RI->mapDwarfRegToLLVMReg(269, ARM::D13, true );
    RI->mapDwarfRegToLLVMReg(270, ARM::D14, true );
    RI->mapDwarfRegToLLVMReg(271, ARM::D15, true );
    RI->mapDwarfRegToLLVMReg(272, ARM::D16, true );
    RI->mapDwarfRegToLLVMReg(273, ARM::D17, true );
    RI->mapDwarfRegToLLVMReg(274, ARM::D18, true );
    RI->mapDwarfRegToLLVMReg(275, ARM::D19, true );
    RI->mapDwarfRegToLLVMReg(276, ARM::D20, true );
    RI->mapDwarfRegToLLVMReg(277, ARM::D21, true );
    RI->mapDwarfRegToLLVMReg(278, ARM::D22, true );
    RI->mapDwarfRegToLLVMReg(279, ARM::D23, true );
    RI->mapDwarfRegToLLVMReg(280, ARM::D24, true );
    RI->mapDwarfRegToLLVMReg(281, ARM::D25, true );
    RI->mapDwarfRegToLLVMReg(282, ARM::D26, true );
    RI->mapDwarfRegToLLVMReg(283, ARM::D27, true );
    RI->mapDwarfRegToLLVMReg(284, ARM::D28, true );
    RI->mapDwarfRegToLLVMReg(285, ARM::D29, true );
    RI->mapDwarfRegToLLVMReg(286, ARM::D30, true );
    RI->mapDwarfRegToLLVMReg(287, ARM::D31, true );
    RI->mapDwarfRegToLLVMReg(14, ARM::LR, true );
    RI->mapDwarfRegToLLVMReg(15, ARM::PC, true );
    RI->mapDwarfRegToLLVMReg(0, ARM::R0, true );
    RI->mapDwarfRegToLLVMReg(1, ARM::R1, true );
    RI->mapDwarfRegToLLVMReg(2, ARM::R2, true );
    RI->mapDwarfRegToLLVMReg(3, ARM::R3, true );
    RI->mapDwarfRegToLLVMReg(4, ARM::R4, true );
    RI->mapDwarfRegToLLVMReg(5, ARM::R5, true );
    RI->mapDwarfRegToLLVMReg(6, ARM::R6, true );
    RI->mapDwarfRegToLLVMReg(7, ARM::R7, true );
    RI->mapDwarfRegToLLVMReg(8, ARM::R8, true );
    RI->mapDwarfRegToLLVMReg(9, ARM::R9, true );
    RI->mapDwarfRegToLLVMReg(10, ARM::R10, true );
    RI->mapDwarfRegToLLVMReg(11, ARM::R11, true );
    RI->mapDwarfRegToLLVMReg(12, ARM::R12, true );
    RI->mapDwarfRegToLLVMReg(13, ARM::SP, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(ARM::APSR, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::CPSR, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::D0, 256, false );
    RI->mapLLVMRegToDwarfReg(ARM::D1, 257, false );
    RI->mapLLVMRegToDwarfReg(ARM::D2, 258, false );
    RI->mapLLVMRegToDwarfReg(ARM::D3, 259, false );
    RI->mapLLVMRegToDwarfReg(ARM::D4, 260, false );
    RI->mapLLVMRegToDwarfReg(ARM::D5, 261, false );
    RI->mapLLVMRegToDwarfReg(ARM::D6, 262, false );
    RI->mapLLVMRegToDwarfReg(ARM::D7, 263, false );
    RI->mapLLVMRegToDwarfReg(ARM::D8, 264, false );
    RI->mapLLVMRegToDwarfReg(ARM::D9, 265, false );
    RI->mapLLVMRegToDwarfReg(ARM::D10, 266, false );
    RI->mapLLVMRegToDwarfReg(ARM::D11, 267, false );
    RI->mapLLVMRegToDwarfReg(ARM::D12, 268, false );
    RI->mapLLVMRegToDwarfReg(ARM::D13, 269, false );
    RI->mapLLVMRegToDwarfReg(ARM::D14, 270, false );
    RI->mapLLVMRegToDwarfReg(ARM::D15, 271, false );
    RI->mapLLVMRegToDwarfReg(ARM::D16, 272, false );
    RI->mapLLVMRegToDwarfReg(ARM::D17, 273, false );
    RI->mapLLVMRegToDwarfReg(ARM::D18, 274, false );
    RI->mapLLVMRegToDwarfReg(ARM::D19, 275, false );
    RI->mapLLVMRegToDwarfReg(ARM::D20, 276, false );
    RI->mapLLVMRegToDwarfReg(ARM::D21, 277, false );
    RI->mapLLVMRegToDwarfReg(ARM::D22, 278, false );
    RI->mapLLVMRegToDwarfReg(ARM::D23, 279, false );
    RI->mapLLVMRegToDwarfReg(ARM::D24, 280, false );
    RI->mapLLVMRegToDwarfReg(ARM::D25, 281, false );
    RI->mapLLVMRegToDwarfReg(ARM::D26, 282, false );
    RI->mapLLVMRegToDwarfReg(ARM::D27, 283, false );
    RI->mapLLVMRegToDwarfReg(ARM::D28, 284, false );
    RI->mapLLVMRegToDwarfReg(ARM::D29, 285, false );
    RI->mapLLVMRegToDwarfReg(ARM::D30, 286, false );
    RI->mapLLVMRegToDwarfReg(ARM::D31, 287, false );
    RI->mapLLVMRegToDwarfReg(ARM::FPEXC, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::FPSCR, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::FPSID, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::ITSTATE, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::LR, 14, false );
    RI->mapLLVMRegToDwarfReg(ARM::PC, 15, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q0, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q0_Q1, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q0_Q1_Q2_Q3, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q1, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q2, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q2_Q3, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q3, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q4, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q4_Q5, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q4_Q5_Q6_Q7, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q5, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q6, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q6_Q7, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q7, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q8, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q8_Q9, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q8_Q9_Q10_Q11, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q9, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q10, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q10_Q11, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q11, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q12, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q12_Q13, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q12_Q13_Q14_Q15, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q13, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q14, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q14_Q15, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::Q15, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::R0, 0, false );
    RI->mapLLVMRegToDwarfReg(ARM::R1, 1, false );
    RI->mapLLVMRegToDwarfReg(ARM::R2, 2, false );
    RI->mapLLVMRegToDwarfReg(ARM::R3, 3, false );
    RI->mapLLVMRegToDwarfReg(ARM::R4, 4, false );
    RI->mapLLVMRegToDwarfReg(ARM::R5, 5, false );
    RI->mapLLVMRegToDwarfReg(ARM::R6, 6, false );
    RI->mapLLVMRegToDwarfReg(ARM::R7, 7, false );
    RI->mapLLVMRegToDwarfReg(ARM::R8, 8, false );
    RI->mapLLVMRegToDwarfReg(ARM::R9, 9, false );
    RI->mapLLVMRegToDwarfReg(ARM::R10, 10, false );
    RI->mapLLVMRegToDwarfReg(ARM::R11, 11, false );
    RI->mapLLVMRegToDwarfReg(ARM::R12, 12, false );
    RI->mapLLVMRegToDwarfReg(ARM::S0, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S1, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S2, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S3, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S4, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S5, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S6, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S7, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S8, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S9, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S10, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S11, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S12, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S13, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S14, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S15, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S16, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S17, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S18, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S19, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S20, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S21, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S22, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S23, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S24, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S25, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S26, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S27, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S28, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S29, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S30, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::S31, -1, false );
    RI->mapLLVMRegToDwarfReg(ARM::SP, 13, false );
    RI->mapLLVMRegToDwarfReg(ARM::SPSR, -1, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(ARM::APSR, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::CPSR, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::D0, 256, true );
    RI->mapLLVMRegToDwarfReg(ARM::D1, 257, true );
    RI->mapLLVMRegToDwarfReg(ARM::D2, 258, true );
    RI->mapLLVMRegToDwarfReg(ARM::D3, 259, true );
    RI->mapLLVMRegToDwarfReg(ARM::D4, 260, true );
    RI->mapLLVMRegToDwarfReg(ARM::D5, 261, true );
    RI->mapLLVMRegToDwarfReg(ARM::D6, 262, true );
    RI->mapLLVMRegToDwarfReg(ARM::D7, 263, true );
    RI->mapLLVMRegToDwarfReg(ARM::D8, 264, true );
    RI->mapLLVMRegToDwarfReg(ARM::D9, 265, true );
    RI->mapLLVMRegToDwarfReg(ARM::D10, 266, true );
    RI->mapLLVMRegToDwarfReg(ARM::D11, 267, true );
    RI->mapLLVMRegToDwarfReg(ARM::D12, 268, true );
    RI->mapLLVMRegToDwarfReg(ARM::D13, 269, true );
    RI->mapLLVMRegToDwarfReg(ARM::D14, 270, true );
    RI->mapLLVMRegToDwarfReg(ARM::D15, 271, true );
    RI->mapLLVMRegToDwarfReg(ARM::D16, 272, true );
    RI->mapLLVMRegToDwarfReg(ARM::D17, 273, true );
    RI->mapLLVMRegToDwarfReg(ARM::D18, 274, true );
    RI->mapLLVMRegToDwarfReg(ARM::D19, 275, true );
    RI->mapLLVMRegToDwarfReg(ARM::D20, 276, true );
    RI->mapLLVMRegToDwarfReg(ARM::D21, 277, true );
    RI->mapLLVMRegToDwarfReg(ARM::D22, 278, true );
    RI->mapLLVMRegToDwarfReg(ARM::D23, 279, true );
    RI->mapLLVMRegToDwarfReg(ARM::D24, 280, true );
    RI->mapLLVMRegToDwarfReg(ARM::D25, 281, true );
    RI->mapLLVMRegToDwarfReg(ARM::D26, 282, true );
    RI->mapLLVMRegToDwarfReg(ARM::D27, 283, true );
    RI->mapLLVMRegToDwarfReg(ARM::D28, 284, true );
    RI->mapLLVMRegToDwarfReg(ARM::D29, 285, true );
    RI->mapLLVMRegToDwarfReg(ARM::D30, 286, true );
    RI->mapLLVMRegToDwarfReg(ARM::D31, 287, true );
    RI->mapLLVMRegToDwarfReg(ARM::FPEXC, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::FPSCR, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::FPSID, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::ITSTATE, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::LR, 14, true );
    RI->mapLLVMRegToDwarfReg(ARM::PC, 15, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q0, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q0_Q1, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q0_Q1_Q2_Q3, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q1, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q2, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q2_Q3, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q3, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q4, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q4_Q5, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q4_Q5_Q6_Q7, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q5, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q6, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q6_Q7, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q7, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q8, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q8_Q9, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q8_Q9_Q10_Q11, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q9, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q10, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q10_Q11, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q11, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q12, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q12_Q13, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q12_Q13_Q14_Q15, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q13, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q14, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q14_Q15, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::Q15, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::R0, 0, true );
    RI->mapLLVMRegToDwarfReg(ARM::R1, 1, true );
    RI->mapLLVMRegToDwarfReg(ARM::R2, 2, true );
    RI->mapLLVMRegToDwarfReg(ARM::R3, 3, true );
    RI->mapLLVMRegToDwarfReg(ARM::R4, 4, true );
    RI->mapLLVMRegToDwarfReg(ARM::R5, 5, true );
    RI->mapLLVMRegToDwarfReg(ARM::R6, 6, true );
    RI->mapLLVMRegToDwarfReg(ARM::R7, 7, true );
    RI->mapLLVMRegToDwarfReg(ARM::R8, 8, true );
    RI->mapLLVMRegToDwarfReg(ARM::R9, 9, true );
    RI->mapLLVMRegToDwarfReg(ARM::R10, 10, true );
    RI->mapLLVMRegToDwarfReg(ARM::R11, 11, true );
    RI->mapLLVMRegToDwarfReg(ARM::R12, 12, true );
    RI->mapLLVMRegToDwarfReg(ARM::S0, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S1, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S2, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S3, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S4, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S5, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S6, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S7, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S8, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S9, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S10, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S11, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S12, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S13, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S14, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S15, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S16, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S17, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S18, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S19, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S20, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S21, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S22, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S23, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S24, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S25, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S26, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S27, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S28, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S29, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S30, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::S31, -1, true );
    RI->mapLLVMRegToDwarfReg(ARM::SP, 13, true );
    RI->mapLLVMRegToDwarfReg(ARM::SPSR, -1, true );
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Header Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"
#include <string>

namespace llvm {

struct ARMGenRegisterInfo : public TargetRegisterInfo {
  explicit ARMGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  unsigned getSubReg(unsigned RegNo, unsigned Index) const;
  unsigned getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const;
  unsigned composeSubRegIndices(unsigned, unsigned) const;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  const TargetRegisterClass *getMatchingSuperRegClass(const TargetRegisterClass*, const TargetRegisterClass*, unsigned) const;
};


// Subregister indices
namespace ARM {
enum {
  NoSubRegister,
  dsub_0,	// 1
  dsub_1,	// 2
  dsub_2,	// 3
  dsub_3,	// 4
  dsub_4,	// 5
  dsub_5,	// 6
  dsub_6,	// 7
  dsub_7,	// 8
  qqsub_0,	// 9
  qqsub_1,	// 10
  qsub_0,	// 11
  qsub_1,	// 12
  qsub_2,	// 13
  qsub_3,	// 14
  ssub_0,	// 15
  ssub_1,	// 16
  ssub_2,	// 17
  ssub_3,	// 18
  NUM_TARGET_NAMED_SUBREGS = 31
};
}
namespace ARM { // Register classes
  struct SPRClass : public TargetRegisterClass {
    SPRClass();
  };
  extern SPRClass	SPRRegClass;
  static TargetRegisterClass * const SPRRegisterClass = &SPRRegClass;
  struct DPRClass : public TargetRegisterClass {
    DPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern DPRClass	DPRRegClass;
  static TargetRegisterClass * const DPRRegisterClass = &DPRRegClass;
  struct SPR_8Class : public TargetRegisterClass {
    SPR_8Class();
  };
  extern SPR_8Class	SPR_8RegClass;
  static TargetRegisterClass * const SPR_8RegisterClass = &SPR_8RegClass;
  struct GPRClass : public TargetRegisterClass {
    GPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern GPRClass	GPRRegClass;
  static TargetRegisterClass * const GPRRegisterClass = &GPRRegClass;
  struct DPR_VFP2Class : public TargetRegisterClass {
    DPR_VFP2Class();
  };
  extern DPR_VFP2Class	DPR_VFP2RegClass;
  static TargetRegisterClass * const DPR_VFP2RegisterClass = &DPR_VFP2RegClass;
  struct QPRClass : public TargetRegisterClass {
    QPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern QPRClass	QPRRegClass;
  static TargetRegisterClass * const QPRRegisterClass = &QPRRegClass;
  struct GPRnopcClass : public TargetRegisterClass {
    GPRnopcClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern GPRnopcClass	GPRnopcRegClass;
  static TargetRegisterClass * const GPRnopcRegisterClass = &GPRnopcRegClass;
  struct rGPRClass : public TargetRegisterClass {
    rGPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern rGPRClass	rGPRRegClass;
  static TargetRegisterClass * const rGPRRegisterClass = &rGPRRegClass;
  struct tGPRClass : public TargetRegisterClass {
    tGPRClass();
  };
  extern tGPRClass	tGPRRegClass;
  static TargetRegisterClass * const tGPRRegisterClass = &tGPRRegClass;
  struct hGPRClass : public TargetRegisterClass {
    hGPRClass();
  };
  extern hGPRClass	hGPRRegClass;
  static TargetRegisterClass * const hGPRRegisterClass = &hGPRRegClass;
  struct DPR_8Class : public TargetRegisterClass {
    DPR_8Class();
  };
  extern DPR_8Class	DPR_8RegClass;
  static TargetRegisterClass * const DPR_8RegisterClass = &DPR_8RegClass;
  struct QPR_VFP2Class : public TargetRegisterClass {
    QPR_VFP2Class();
  };
  extern QPR_VFP2Class	QPR_VFP2RegClass;
  static TargetRegisterClass * const QPR_VFP2RegisterClass = &QPR_VFP2RegClass;
  struct QQPRClass : public TargetRegisterClass {
    QQPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern QQPRClass	QQPRRegClass;
  static TargetRegisterClass * const QQPRRegisterClass = &QQPRRegClass;
  struct GPRnopc_and_hGPRClass : public TargetRegisterClass {
    GPRnopc_and_hGPRClass();
  };
  extern GPRnopc_and_hGPRClass	GPRnopc_and_hGPRRegClass;
  static TargetRegisterClass * const GPRnopc_and_hGPRRegisterClass = &GPRnopc_and_hGPRRegClass;
  struct tcGPRClass : public TargetRegisterClass {
    tcGPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern tcGPRClass	tcGPRRegClass;
  static TargetRegisterClass * const tcGPRRegisterClass = &tcGPRRegClass;
  struct hGPR_and_rGPRClass : public TargetRegisterClass {
    hGPR_and_rGPRClass();
  };
  extern hGPR_and_rGPRClass	hGPR_and_rGPRRegClass;
  static TargetRegisterClass * const hGPR_and_rGPRRegisterClass = &hGPR_and_rGPRRegClass;
  struct tGPR_and_tcGPRClass : public TargetRegisterClass {
    tGPR_and_tcGPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern tGPR_and_tcGPRClass	tGPR_and_tcGPRRegClass;
  static TargetRegisterClass * const tGPR_and_tcGPRRegisterClass = &tGPR_and_tcGPRRegClass;
  struct QPR_8Class : public TargetRegisterClass {
    QPR_8Class();
  };
  extern QPR_8Class	QPR_8RegClass;
  static TargetRegisterClass * const QPR_8RegisterClass = &QPR_8RegClass;
  struct QQPR_with_ssub_0Class : public TargetRegisterClass {
    QQPR_with_ssub_0Class();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern QQPR_with_ssub_0Class	QQPR_with_ssub_0RegClass;
  static TargetRegisterClass * const QQPR_with_ssub_0RegisterClass = &QQPR_with_ssub_0RegClass;
  struct QQQQPRClass : public TargetRegisterClass {
    QQQQPRClass();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern QQQQPRClass	QQQQPRRegClass;
  static TargetRegisterClass * const QQQQPRRegisterClass = &QQQQPRRegClass;
  struct hGPR_and_tcGPRClass : public TargetRegisterClass {
    hGPR_and_tcGPRClass();
  };
  extern hGPR_and_tcGPRClass	hGPR_and_tcGPRRegClass;
  static TargetRegisterClass * const hGPR_and_tcGPRRegisterClass = &hGPR_and_tcGPRRegClass;
  struct QQPR_with_dsub_0_in_DPR_8Class : public TargetRegisterClass {
    QQPR_with_dsub_0_in_DPR_8Class();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern QQPR_with_dsub_0_in_DPR_8Class	QQPR_with_dsub_0_in_DPR_8RegClass;
  static TargetRegisterClass * const QQPR_with_dsub_0_in_DPR_8RegisterClass = &QQPR_with_dsub_0_in_DPR_8RegClass;
  struct QQQQPR_with_ssub_0Class : public TargetRegisterClass {
    QQQQPR_with_ssub_0Class();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern QQQQPR_with_ssub_0Class	QQQQPR_with_ssub_0RegClass;
  static TargetRegisterClass * const QQQQPR_with_ssub_0RegisterClass = &QQQQPR_with_ssub_0RegClass;
  struct GPRspClass : public TargetRegisterClass {
    GPRspClass();
  };
  extern GPRspClass	GPRspRegClass;
  static TargetRegisterClass * const GPRspRegisterClass = &GPRspRegClass;
  struct CCRClass : public TargetRegisterClass {
    CCRClass();
  };
  extern CCRClass	CCRRegClass;
  static TargetRegisterClass * const CCRRegisterClass = &CCRRegClass;
  struct QQQQPR_with_dsub_0_in_DPR_8Class : public TargetRegisterClass {
    QQQQPR_with_dsub_0_in_DPR_8Class();
    ArrayRef<unsigned> getRawAllocationOrder(const MachineFunction&) const;
  };
  extern QQQQPR_with_dsub_0_in_DPR_8Class	QQQQPR_with_dsub_0_in_DPR_8RegClass;
  static TargetRegisterClass * const QQQQPR_with_dsub_0_in_DPR_8RegisterClass = &QQQQPR_with_dsub_0_in_DPR_8RegClass;
} // end of namespace ARM

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register and Register Classes Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass ARMMCRegisterClasses[];
namespace {     // Register classes...
  // SPRVTs Register Class Value Types...
  static const EVT SPRVTs[] = {
    MVT::f32, MVT::Other
  };

  // DPRVTs Register Class Value Types...
  static const EVT DPRVTs[] = {
    MVT::f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::v1i64, MVT::v2f32, MVT::Other
  };

  // SPR_8VTs Register Class Value Types...
  static const EVT SPR_8VTs[] = {
    MVT::f32, MVT::Other
  };

  // GPRVTs Register Class Value Types...
  static const EVT GPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // DPR_VFP2VTs Register Class Value Types...
  static const EVT DPR_VFP2VTs[] = {
    MVT::f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::v1i64, MVT::v2f32, MVT::Other
  };

  // QPRVTs Register Class Value Types...
  static const EVT QPRVTs[] = {
    MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::Other
  };

  // GPRnopcVTs Register Class Value Types...
  static const EVT GPRnopcVTs[] = {
    MVT::i32, MVT::Other
  };

  // rGPRVTs Register Class Value Types...
  static const EVT rGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // tGPRVTs Register Class Value Types...
  static const EVT tGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // hGPRVTs Register Class Value Types...
  static const EVT hGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // DPR_8VTs Register Class Value Types...
  static const EVT DPR_8VTs[] = {
    MVT::f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::v1i64, MVT::v2f32, MVT::Other
  };

  // QPR_VFP2VTs Register Class Value Types...
  static const EVT QPR_VFP2VTs[] = {
    MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::Other
  };

  // QQPRVTs Register Class Value Types...
  static const EVT QQPRVTs[] = {
    MVT::v4i64, MVT::Other
  };

  // GPRnopc_and_hGPRVTs Register Class Value Types...
  static const EVT GPRnopc_and_hGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // tcGPRVTs Register Class Value Types...
  static const EVT tcGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // hGPR_and_rGPRVTs Register Class Value Types...
  static const EVT hGPR_and_rGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // tGPR_and_tcGPRVTs Register Class Value Types...
  static const EVT tGPR_and_tcGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // QPR_8VTs Register Class Value Types...
  static const EVT QPR_8VTs[] = {
    MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::Other
  };

  // QQPR_with_ssub_0VTs Register Class Value Types...
  static const EVT QQPR_with_ssub_0VTs[] = {
    MVT::v4i64, MVT::Other
  };

  // QQQQPRVTs Register Class Value Types...
  static const EVT QQQQPRVTs[] = {
    MVT::v8i64, MVT::Other
  };

  // hGPR_and_tcGPRVTs Register Class Value Types...
  static const EVT hGPR_and_tcGPRVTs[] = {
    MVT::i32, MVT::Other
  };

  // QQPR_with_dsub_0_in_DPR_8VTs Register Class Value Types...
  static const EVT QQPR_with_dsub_0_in_DPR_8VTs[] = {
    MVT::v4i64, MVT::Other
  };

  // QQQQPR_with_ssub_0VTs Register Class Value Types...
  static const EVT QQQQPR_with_ssub_0VTs[] = {
    MVT::v8i64, MVT::Other
  };

  // GPRspVTs Register Class Value Types...
  static const EVT GPRspVTs[] = {
    MVT::i32, MVT::Other
  };

  // CCRVTs Register Class Value Types...
  static const EVT CCRVTs[] = {
    MVT::i32, MVT::Other
  };

  // QQQQPR_with_dsub_0_in_DPR_8VTs Register Class Value Types...
  static const EVT QQQQPR_with_dsub_0_in_DPR_8VTs[] = {
    MVT::v8i64, MVT::Other
  };

}  // end anonymous namespace

namespace ARM {   // Register class instances
  SPRClass	SPRRegClass;
  DPRClass	DPRRegClass;
  SPR_8Class	SPR_8RegClass;
  GPRClass	GPRRegClass;
  DPR_VFP2Class	DPR_VFP2RegClass;
  QPRClass	QPRRegClass;
  GPRnopcClass	GPRnopcRegClass;
  rGPRClass	rGPRRegClass;
  tGPRClass	tGPRRegClass;
  hGPRClass	hGPRRegClass;
  DPR_8Class	DPR_8RegClass;
  QPR_VFP2Class	QPR_VFP2RegClass;
  QQPRClass	QQPRRegClass;
  GPRnopc_and_hGPRClass	GPRnopc_and_hGPRRegClass;
  tcGPRClass	tcGPRRegClass;
  hGPR_and_rGPRClass	hGPR_and_rGPRRegClass;
  tGPR_and_tcGPRClass	tGPR_and_tcGPRRegClass;
  QPR_8Class	QPR_8RegClass;
  QQPR_with_ssub_0Class	QQPR_with_ssub_0RegClass;
  QQQQPRClass	QQQQPRRegClass;
  hGPR_and_tcGPRClass	hGPR_and_tcGPRRegClass;
  QQPR_with_dsub_0_in_DPR_8Class	QQPR_with_dsub_0_in_DPR_8RegClass;
  QQQQPR_with_ssub_0Class	QQQQPR_with_ssub_0RegClass;
  GPRspClass	GPRspRegClass;
  CCRClass	CCRRegClass;
  QQQQPR_with_dsub_0_in_DPR_8Class	QQQQPR_with_dsub_0_in_DPR_8RegClass;

  static const TargetRegisterClass* const NullRegClasses[] = { NULL };

  // SPR Super-register Classes...
  static const TargetRegisterClass* const SPRSuperRegClasses[] = {
    &ARM::DPR_VFP2RegClass, &ARM::QPR_VFP2RegClass, NULL
  };

  // DPR Super-register Classes...
  static const TargetRegisterClass* const DPRSuperRegClasses[] = {
    &ARM::QPRRegClass, &ARM::QQPRRegClass, &ARM::QQQQPRRegClass, NULL
  };

  // SPR_8 Super-register Classes...
  static const TargetRegisterClass* const SPR_8SuperRegClasses[] = {
    &ARM::DPR_8RegClass, &ARM::QPR_8RegClass, NULL
  };

  // GPR Super-register Classes...
  static const TargetRegisterClass* const GPRSuperRegClasses[] = {
    NULL
  };

  // DPR_VFP2 Super-register Classes...
  static const TargetRegisterClass* const DPR_VFP2SuperRegClasses[] = {
    &ARM::QPR_VFP2RegClass, NULL
  };

  // QPR Super-register Classes...
  static const TargetRegisterClass* const QPRSuperRegClasses[] = {
    &ARM::QQPRRegClass, &ARM::QQQQPRRegClass, NULL
  };

  // GPRnopc Super-register Classes...
  static const TargetRegisterClass* const GPRnopcSuperRegClasses[] = {
    NULL
  };

  // rGPR Super-register Classes...
  static const TargetRegisterClass* const rGPRSuperRegClasses[] = {
    NULL
  };

  // tGPR Super-register Classes...
  static const TargetRegisterClass* const tGPRSuperRegClasses[] = {
    NULL
  };

  // hGPR Super-register Classes...
  static const TargetRegisterClass* const hGPRSuperRegClasses[] = {
    NULL
  };

  // DPR_8 Super-register Classes...
  static const TargetRegisterClass* const DPR_8SuperRegClasses[] = {
    &ARM::QPR_8RegClass, NULL
  };

  // QPR_VFP2 Super-register Classes...
  static const TargetRegisterClass* const QPR_VFP2SuperRegClasses[] = {
    NULL
  };

  // QQPR Super-register Classes...
  static const TargetRegisterClass* const QQPRSuperRegClasses[] = {
    NULL
  };

  // GPRnopc_and_hGPR Super-register Classes...
  static const TargetRegisterClass* const GPRnopc_and_hGPRSuperRegClasses[] = {
    NULL
  };

  // tcGPR Super-register Classes...
  static const TargetRegisterClass* const tcGPRSuperRegClasses[] = {
    NULL
  };

  // hGPR_and_rGPR Super-register Classes...
  static const TargetRegisterClass* const hGPR_and_rGPRSuperRegClasses[] = {
    NULL
  };

  // tGPR_and_tcGPR Super-register Classes...
  static const TargetRegisterClass* const tGPR_and_tcGPRSuperRegClasses[] = {
    NULL
  };

  // QPR_8 Super-register Classes...
  static const TargetRegisterClass* const QPR_8SuperRegClasses[] = {
    NULL
  };

  // QQPR_with_ssub_0 Super-register Classes...
  static const TargetRegisterClass* const QQPR_with_ssub_0SuperRegClasses[] = {
    NULL
  };

  // QQQQPR Super-register Classes...
  static const TargetRegisterClass* const QQQQPRSuperRegClasses[] = {
    NULL
  };

  // hGPR_and_tcGPR Super-register Classes...
  static const TargetRegisterClass* const hGPR_and_tcGPRSuperRegClasses[] = {
    NULL
  };

  // QQPR_with_dsub_0_in_DPR_8 Super-register Classes...
  static const TargetRegisterClass* const QQPR_with_dsub_0_in_DPR_8SuperRegClasses[] = {
    NULL
  };

  // QQQQPR_with_ssub_0 Super-register Classes...
  static const TargetRegisterClass* const QQQQPR_with_ssub_0SuperRegClasses[] = {
    NULL
  };

  // GPRsp Super-register Classes...
  static const TargetRegisterClass* const GPRspSuperRegClasses[] = {
    NULL
  };

  // CCR Super-register Classes...
  static const TargetRegisterClass* const CCRSuperRegClasses[] = {
    NULL
  };

  // QQQQPR_with_dsub_0_in_DPR_8 Super-register Classes...
  static const TargetRegisterClass* const QQQQPR_with_dsub_0_in_DPR_8SuperRegClasses[] = {
    NULL
  };

  static const unsigned SPRSubclassMask[] = { 0x00000005, };

  static const unsigned DPRSubclassMask[] = { 0x00000412, };

  static const unsigned SPR_8SubclassMask[] = { 0x00000004, };

  static const unsigned GPRSubclassMask[] = { 0x0091e3c8, };

  static const unsigned DPR_VFP2SubclassMask[] = { 0x00000410, };

  static const unsigned QPRSubclassMask[] = { 0x00020820, };

  static const unsigned GPRnopcSubclassMask[] = { 0x0091e1c0, };

  static const unsigned rGPRSubclassMask[] = { 0x0011c180, };

  static const unsigned tGPRSubclassMask[] = { 0x00010100, };

  static const unsigned hGPRSubclassMask[] = { 0x0090a200, };

  static const unsigned DPR_8SubclassMask[] = { 0x00000400, };

  static const unsigned QPR_VFP2SubclassMask[] = { 0x00020800, };

  static const unsigned QQPRSubclassMask[] = { 0x00241000, };

  static const unsigned GPRnopc_and_hGPRSubclassMask[] = { 0x0090a000, };

  static const unsigned tcGPRSubclassMask[] = { 0x00114000, };

  static const unsigned hGPR_and_rGPRSubclassMask[] = { 0x00108000, };

  static const unsigned tGPR_and_tcGPRSubclassMask[] = { 0x00010000, };

  static const unsigned QPR_8SubclassMask[] = { 0x00020000, };

  static const unsigned QQPR_with_ssub_0SubclassMask[] = { 0x00240000, };

  static const unsigned QQQQPRSubclassMask[] = { 0x02480000, };

  static const unsigned hGPR_and_tcGPRSubclassMask[] = { 0x00100000, };

  static const unsigned QQPR_with_dsub_0_in_DPR_8SubclassMask[] = { 0x00200000, };

  static const unsigned QQQQPR_with_ssub_0SubclassMask[] = { 0x02400000, };

  static const unsigned GPRspSubclassMask[] = { 0x00800000, };

  static const unsigned CCRSubclassMask[] = { 0x01000000, };

  static const unsigned QQQQPR_with_dsub_0_in_DPR_8SubclassMask[] = { 0x02000000, };

  static const TargetRegisterClass* const SPR_8Superclasses[] = {
    &ARM::SPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const DPR_VFP2Superclasses[] = {
    &ARM::DPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const GPRnopcSuperclasses[] = {
    &ARM::GPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const rGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    NULL
  };

  static const TargetRegisterClass* const tGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const hGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const DPR_8Superclasses[] = {
    &ARM::DPRRegClass,
    &ARM::DPR_VFP2RegClass,
    NULL
  };

  static const TargetRegisterClass* const QPR_VFP2Superclasses[] = {
    &ARM::QPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const GPRnopc_and_hGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::hGPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const tcGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const hGPR_and_rGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    &ARM::hGPRRegClass,
    &ARM::GPRnopc_and_hGPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const tGPR_and_tcGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    &ARM::tGPRRegClass,
    &ARM::tcGPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const QPR_8Superclasses[] = {
    &ARM::QPRRegClass,
    &ARM::QPR_VFP2RegClass,
    NULL
  };

  static const TargetRegisterClass* const QQPR_with_ssub_0Superclasses[] = {
    &ARM::QQPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const hGPR_and_tcGPRSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    &ARM::hGPRRegClass,
    &ARM::GPRnopc_and_hGPRRegClass,
    &ARM::tcGPRRegClass,
    &ARM::hGPR_and_rGPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const QQPR_with_dsub_0_in_DPR_8Superclasses[] = {
    &ARM::QQPRRegClass,
    &ARM::QQPR_with_ssub_0RegClass,
    NULL
  };

  static const TargetRegisterClass* const QQQQPR_with_ssub_0Superclasses[] = {
    &ARM::QQQQPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const GPRspSuperclasses[] = {
    &ARM::GPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::hGPRRegClass,
    &ARM::GPRnopc_and_hGPRRegClass,
    NULL
  };

  static const TargetRegisterClass* const QQQQPR_with_dsub_0_in_DPR_8Superclasses[] = {
    &ARM::QQQQPRRegClass,
    &ARM::QQQQPR_with_ssub_0RegClass,
    NULL
  };

SPRClass::SPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[SPRRegClassID], SPRVTs, SPRSubclassMask, NullRegClasses, SPRSuperRegClasses) {}
DPRClass::DPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[DPRRegClassID], DPRVTs, DPRSubclassMask, NullRegClasses, DPRSuperRegClasses) {}

static inline unsigned DPRAltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> DPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::D28, ARM::D29, ARM::D30, ARM::D31, ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
SPR_8Class::SPR_8Class()  : TargetRegisterClass(&ARMMCRegisterClasses[SPR_8RegClassID], SPR_8VTs, SPR_8SubclassMask, SPR_8Superclasses, SPR_8SuperRegClasses) {}
GPRClass::GPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[GPRRegClassID], GPRVTs, GPRSubclassMask, NullRegClasses, GPRSuperRegClasses) {}

static inline unsigned GPRAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

ArrayRef<unsigned> GPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::PC };
  static const unsigned AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::GPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}
DPR_VFP2Class::DPR_VFP2Class()  : TargetRegisterClass(&ARMMCRegisterClasses[DPR_VFP2RegClassID], DPR_VFP2VTs, DPR_VFP2SubclassMask, DPR_VFP2Superclasses, DPR_VFP2SuperRegClasses) {}
QPRClass::QPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[QPRRegClassID], QPRVTs, QPRSubclassMask, NullRegClasses, QPRSuperRegClasses) {}

static inline unsigned QPRAltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> QPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
GPRnopcClass::GPRnopcClass()  : TargetRegisterClass(&ARMMCRegisterClasses[GPRnopcRegClassID], GPRnopcVTs, GPRnopcSubclassMask, GPRnopcSuperclasses, GPRnopcSuperRegClasses) {}

static inline unsigned GPRnopcAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

ArrayRef<unsigned> GPRnopcClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP };
  static const unsigned AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::GPRnopcRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRnopcAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}
rGPRClass::rGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[rGPRRegClassID], rGPRVTs, rGPRSubclassMask, rGPRSuperclasses, rGPRSuperRegClasses) {}

static inline unsigned rGPRAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

ArrayRef<unsigned> rGPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12 };
  static const unsigned AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::rGPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = rGPRAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}
tGPRClass::tGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[tGPRRegClassID], tGPRVTs, tGPRSubclassMask, tGPRSuperclasses, tGPRSuperRegClasses) {}
hGPRClass::hGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[hGPRRegClassID], hGPRVTs, hGPRSubclassMask, hGPRSuperclasses, hGPRSuperRegClasses) {}
DPR_8Class::DPR_8Class()  : TargetRegisterClass(&ARMMCRegisterClasses[DPR_8RegClassID], DPR_8VTs, DPR_8SubclassMask, DPR_8Superclasses, DPR_8SuperRegClasses) {}
QPR_VFP2Class::QPR_VFP2Class()  : TargetRegisterClass(&ARMMCRegisterClasses[QPR_VFP2RegClassID], QPR_VFP2VTs, QPR_VFP2SubclassMask, QPR_VFP2Superclasses, QPR_VFP2SuperRegClasses) {}
QQPRClass::QQPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[QQPRRegClassID], QQPRVTs, QQPRSubclassMask, NullRegClasses, QQPRSuperRegClasses) {}

static inline unsigned QQPRAltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> QQPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::Q8_Q9, ARM::Q10_Q11, ARM::Q12_Q13, ARM::Q14_Q15, ARM::Q0_Q1, ARM::Q2_Q3, ARM::Q4_Q5, ARM::Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
GPRnopc_and_hGPRClass::GPRnopc_and_hGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[GPRnopc_and_hGPRRegClassID], GPRnopc_and_hGPRVTs, GPRnopc_and_hGPRSubclassMask, GPRnopc_and_hGPRSuperclasses, GPRnopc_and_hGPRSuperRegClasses) {}
tcGPRClass::tcGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[tcGPRRegClassID], tcGPRVTs, tcGPRSubclassMask, tcGPRSuperclasses, tcGPRSuperRegClasses) {}

static inline unsigned tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

ArrayRef<unsigned> tcGPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::tcGPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
hGPR_and_rGPRClass::hGPR_and_rGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[hGPR_and_rGPRRegClassID], hGPR_and_rGPRVTs, hGPR_and_rGPRSubclassMask, hGPR_and_rGPRSuperclasses, hGPR_and_rGPRSuperRegClasses) {}
tGPR_and_tcGPRClass::tGPR_and_tcGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[tGPR_and_tcGPRRegClassID], tGPR_and_tcGPRVTs, tGPR_and_tcGPRSubclassMask, tGPR_and_tcGPRSuperclasses, tGPR_and_tcGPRSuperRegClasses) {}

static inline unsigned tGPR_and_tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

ArrayRef<unsigned> tGPR_and_tcGPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::tGPR_and_tcGPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = tGPR_and_tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
QPR_8Class::QPR_8Class()  : TargetRegisterClass(&ARMMCRegisterClasses[QPR_8RegClassID], QPR_8VTs, QPR_8SubclassMask, QPR_8Superclasses, QPR_8SuperRegClasses) {}
QQPR_with_ssub_0Class::QQPR_with_ssub_0Class()  : TargetRegisterClass(&ARMMCRegisterClasses[QQPR_with_ssub_0RegClassID], QQPR_with_ssub_0VTs, QQPR_with_ssub_0SubclassMask, QQPR_with_ssub_0Superclasses, QQPR_with_ssub_0SuperRegClasses) {}

static inline unsigned QQPR_with_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> QQPR_with_ssub_0Class::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::Q0_Q1, ARM::Q2_Q3, ARM::Q4_Q5, ARM::Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQPR_with_ssub_0RegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQPR_with_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
QQQQPRClass::QQQQPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[QQQQPRRegClassID], QQQQPRVTs, QQQQPRSubclassMask, NullRegClasses, QQQQPRSuperRegClasses) {}

static inline unsigned QQQQPRAltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> QQQQPRClass::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::Q8_Q9_Q10_Q11, ARM::Q12_Q13_Q14_Q15, ARM::Q0_Q1_Q2_Q3, ARM::Q4_Q5_Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPRRegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
hGPR_and_tcGPRClass::hGPR_and_tcGPRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[hGPR_and_tcGPRRegClassID], hGPR_and_tcGPRVTs, hGPR_and_tcGPRSubclassMask, hGPR_and_tcGPRSuperclasses, hGPR_and_tcGPRSuperRegClasses) {}
QQPR_with_dsub_0_in_DPR_8Class::QQPR_with_dsub_0_in_DPR_8Class()  : TargetRegisterClass(&ARMMCRegisterClasses[QQPR_with_dsub_0_in_DPR_8RegClassID], QQPR_with_dsub_0_in_DPR_8VTs, QQPR_with_dsub_0_in_DPR_8SubclassMask, QQPR_with_dsub_0_in_DPR_8Superclasses, QQPR_with_dsub_0_in_DPR_8SuperRegClasses) {}

static inline unsigned QQPR_with_dsub_0_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> QQPR_with_dsub_0_in_DPR_8Class::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::Q0_Q1, ARM::Q2_Q3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQPR_with_dsub_0_in_DPR_8RegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQPR_with_dsub_0_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
QQQQPR_with_ssub_0Class::QQQQPR_with_ssub_0Class()  : TargetRegisterClass(&ARMMCRegisterClasses[QQQQPR_with_ssub_0RegClassID], QQQQPR_with_ssub_0VTs, QQQQPR_with_ssub_0SubclassMask, QQQQPR_with_ssub_0Superclasses, QQQQPR_with_ssub_0SuperRegClasses) {}

static inline unsigned QQQQPR_with_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> QQQQPR_with_ssub_0Class::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q4_Q5_Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_ssub_0RegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
GPRspClass::GPRspClass()  : TargetRegisterClass(&ARMMCRegisterClasses[GPRspRegClassID], GPRspVTs, GPRspSubclassMask, GPRspSuperclasses, GPRspSuperRegClasses) {}
CCRClass::CCRClass()  : TargetRegisterClass(&ARMMCRegisterClasses[CCRRegClassID], CCRVTs, CCRSubclassMask, NullRegClasses, CCRSuperRegClasses) {}
QQQQPR_with_dsub_0_in_DPR_8Class::QQQQPR_with_dsub_0_in_DPR_8Class()  : TargetRegisterClass(&ARMMCRegisterClasses[QQQQPR_with_dsub_0_in_DPR_8RegClassID], QQQQPR_with_dsub_0_in_DPR_8VTs, QQQQPR_with_dsub_0_in_DPR_8SubclassMask, QQQQPR_with_dsub_0_in_DPR_8Superclasses, QQQQPR_with_dsub_0_in_DPR_8SuperRegClasses) {}

static inline unsigned QQQQPR_with_dsub_0_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

ArrayRef<unsigned> QQQQPR_with_dsub_0_in_DPR_8Class::getRawAllocationOrder(const MachineFunction &MF) const {
  static const unsigned AltOrder1[] = { ARM::Q0_Q1_Q2_Q3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_0_in_DPR_8RegClassID];  static const ArrayRef<unsigned> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_0_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &ARM::SPRRegClass,
    &ARM::DPRRegClass,
    &ARM::SPR_8RegClass,
    &ARM::GPRRegClass,
    &ARM::DPR_VFP2RegClass,
    &ARM::QPRRegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    &ARM::tGPRRegClass,
    &ARM::hGPRRegClass,
    &ARM::DPR_8RegClass,
    &ARM::QPR_VFP2RegClass,
    &ARM::QQPRRegClass,
    &ARM::GPRnopc_and_hGPRRegClass,
    &ARM::tcGPRRegClass,
    &ARM::hGPR_and_rGPRRegClass,
    &ARM::tGPR_and_tcGPRRegClass,
    &ARM::QPR_8RegClass,
    &ARM::QQPR_with_ssub_0RegClass,
    &ARM::QQQQPRRegClass,
    &ARM::hGPR_and_tcGPRRegClass,
    &ARM::QQPR_with_dsub_0_in_DPR_8RegClass,
    &ARM::QQQQPR_with_ssub_0RegClass,
    &ARM::GPRspRegClass,
    &ARM::CCRRegClass,
    &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
  };
}

  static const TargetRegisterInfoDesc ARMRegInfoDesc[] = { // Extra Descriptors
    { 0, 0 },
    { 0, 0 },
    { 0, 0 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 0 },
    { 0, 0 },
    { 0, 0 },
    { 0, 0 },
    { 1, 1 },
    { 1, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 1, 1 },
    { 1, 1 },
    { 1, 1 },
    { 1, 1 },
    { 1, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 1, 1 },
    { 0, 0 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
  };

  static const char *const ARMSubRegIndexTable[] = { "dsub_0", "dsub_1", "dsub_2", "dsub_3", "dsub_4", "dsub_5", "dsub_6", "dsub_7", "qqsub_0", "qqsub_1", "qsub_0", "qsub_1", "qsub_2", "qsub_3", "ssub_0", "ssub_1", "ssub_2", "ssub_3", "qsub_1_then_ssub_0", "qsub_1_then_ssub_1", "qsub_1_then_ssub_2", "qsub_1_then_ssub_3", "qqsub_1_then_qsub_1_then_ssub_0", "qqsub_1_then_qsub_1_then_ssub_1", "qqsub_1_then_qsub_1_then_ssub_2", "qqsub_1_then_qsub_1_then_ssub_3", "qqsub_1_then_ssub_0", "qqsub_1_then_ssub_1", "qqsub_1_then_ssub_2", "qqsub_1_then_ssub_3" };

  enum {
    qsub_1_then_ssub_0 = 19,
    qsub_1_then_ssub_1 = 20,
    qsub_1_then_ssub_2 = 21,
    qsub_1_then_ssub_3 = 22,
    qqsub_1_then_qsub_1_then_ssub_0 = 23,
    qqsub_1_then_qsub_1_then_ssub_1 = 24,
    qqsub_1_then_qsub_1_then_ssub_2 = 25,
    qqsub_1_then_qsub_1_then_ssub_3 = 26,
    qqsub_1_then_ssub_0 = 27,
    qqsub_1_then_ssub_1 = 28,
    qqsub_1_then_ssub_2 = 29,
    qqsub_1_then_ssub_3 = 30
  };


unsigned ARMGenRegisterInfo::getSubReg(unsigned RegNo, unsigned Index) const {
  switch (RegNo) {
  default:
    return 0;
  case ARM::D0:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S0;
    case ARM::ssub_1: return ARM::S1;
    };
    break;
  case ARM::D1:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S2;
    case ARM::ssub_1: return ARM::S3;
    };
    break;
  case ARM::D2:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S4;
    case ARM::ssub_1: return ARM::S5;
    };
    break;
  case ARM::D3:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S6;
    case ARM::ssub_1: return ARM::S7;
    };
    break;
  case ARM::D4:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S8;
    case ARM::ssub_1: return ARM::S9;
    };
    break;
  case ARM::D5:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S10;
    case ARM::ssub_1: return ARM::S11;
    };
    break;
  case ARM::D6:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S12;
    case ARM::ssub_1: return ARM::S13;
    };
    break;
  case ARM::D7:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S14;
    case ARM::ssub_1: return ARM::S15;
    };
    break;
  case ARM::D8:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S16;
    case ARM::ssub_1: return ARM::S17;
    };
    break;
  case ARM::D9:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S18;
    case ARM::ssub_1: return ARM::S19;
    };
    break;
  case ARM::D10:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S20;
    case ARM::ssub_1: return ARM::S21;
    };
    break;
  case ARM::D11:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S22;
    case ARM::ssub_1: return ARM::S23;
    };
    break;
  case ARM::D12:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S24;
    case ARM::ssub_1: return ARM::S25;
    };
    break;
  case ARM::D13:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S26;
    case ARM::ssub_1: return ARM::S27;
    };
    break;
  case ARM::D14:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S28;
    case ARM::ssub_1: return ARM::S29;
    };
    break;
  case ARM::D15:
    switch (Index) {
    default: return 0;
    case ARM::ssub_0: return ARM::S30;
    case ARM::ssub_1: return ARM::S31;
    };
    break;
  case ARM::Q0:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D0;
    case ARM::dsub_1: return ARM::D1;
    case ARM::ssub_0: return ARM::S0;
    case ARM::ssub_1: return ARM::S1;
    case ARM::ssub_2: return ARM::S2;
    case ARM::ssub_3: return ARM::S3;
    };
    break;
  case ARM::Q1:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D2;
    case ARM::dsub_1: return ARM::D3;
    case ARM::ssub_0: return ARM::S4;
    case ARM::ssub_1: return ARM::S5;
    case ARM::ssub_2: return ARM::S6;
    case ARM::ssub_3: return ARM::S7;
    };
    break;
  case ARM::Q2:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D4;
    case ARM::dsub_1: return ARM::D5;
    case ARM::ssub_0: return ARM::S8;
    case ARM::ssub_1: return ARM::S9;
    case ARM::ssub_2: return ARM::S10;
    case ARM::ssub_3: return ARM::S11;
    };
    break;
  case ARM::Q3:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D6;
    case ARM::dsub_1: return ARM::D7;
    case ARM::ssub_0: return ARM::S12;
    case ARM::ssub_1: return ARM::S13;
    case ARM::ssub_2: return ARM::S14;
    case ARM::ssub_3: return ARM::S15;
    };
    break;
  case ARM::Q4:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D8;
    case ARM::dsub_1: return ARM::D9;
    case ARM::ssub_0: return ARM::S16;
    case ARM::ssub_1: return ARM::S17;
    case ARM::ssub_2: return ARM::S18;
    case ARM::ssub_3: return ARM::S19;
    };
    break;
  case ARM::Q5:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D10;
    case ARM::dsub_1: return ARM::D11;
    case ARM::ssub_0: return ARM::S20;
    case ARM::ssub_1: return ARM::S21;
    case ARM::ssub_2: return ARM::S22;
    case ARM::ssub_3: return ARM::S23;
    };
    break;
  case ARM::Q6:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D12;
    case ARM::dsub_1: return ARM::D13;
    case ARM::ssub_0: return ARM::S24;
    case ARM::ssub_1: return ARM::S25;
    case ARM::ssub_2: return ARM::S26;
    case ARM::ssub_3: return ARM::S27;
    };
    break;
  case ARM::Q7:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D14;
    case ARM::dsub_1: return ARM::D15;
    case ARM::ssub_0: return ARM::S28;
    case ARM::ssub_1: return ARM::S29;
    case ARM::ssub_2: return ARM::S30;
    case ARM::ssub_3: return ARM::S31;
    };
    break;
  case ARM::Q8:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D16;
    case ARM::dsub_1: return ARM::D17;
    };
    break;
  case ARM::Q9:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D18;
    case ARM::dsub_1: return ARM::D19;
    };
    break;
  case ARM::Q10:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D20;
    case ARM::dsub_1: return ARM::D21;
    };
    break;
  case ARM::Q11:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D22;
    case ARM::dsub_1: return ARM::D23;
    };
    break;
  case ARM::Q12:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D24;
    case ARM::dsub_1: return ARM::D25;
    };
    break;
  case ARM::Q13:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D26;
    case ARM::dsub_1: return ARM::D27;
    };
    break;
  case ARM::Q14:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D28;
    case ARM::dsub_1: return ARM::D29;
    };
    break;
  case ARM::Q15:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D30;
    case ARM::dsub_1: return ARM::D31;
    };
    break;
  case ARM::Q0_Q1:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D0;
    case ARM::dsub_1: return ARM::D1;
    case ARM::dsub_2: return ARM::D2;
    case ARM::dsub_3: return ARM::D3;
    case ARM::qsub_0: return ARM::Q0;
    case ARM::qsub_1: return ARM::Q1;
    case qsub_1_then_ssub_0: return ARM::S4;
    case qsub_1_then_ssub_1: return ARM::S5;
    case qsub_1_then_ssub_2: return ARM::S6;
    case qsub_1_then_ssub_3: return ARM::S7;
    case ARM::ssub_0: return ARM::S0;
    case ARM::ssub_1: return ARM::S1;
    case ARM::ssub_2: return ARM::S2;
    case ARM::ssub_3: return ARM::S3;
    };
    break;
  case ARM::Q2_Q3:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D4;
    case ARM::dsub_1: return ARM::D5;
    case ARM::dsub_2: return ARM::D6;
    case ARM::dsub_3: return ARM::D7;
    case ARM::qsub_0: return ARM::Q2;
    case ARM::qsub_1: return ARM::Q3;
    case qsub_1_then_ssub_0: return ARM::S12;
    case qsub_1_then_ssub_1: return ARM::S13;
    case qsub_1_then_ssub_2: return ARM::S14;
    case qsub_1_then_ssub_3: return ARM::S15;
    case ARM::ssub_0: return ARM::S8;
    case ARM::ssub_1: return ARM::S9;
    case ARM::ssub_2: return ARM::S10;
    case ARM::ssub_3: return ARM::S11;
    };
    break;
  case ARM::Q4_Q5:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D8;
    case ARM::dsub_1: return ARM::D9;
    case ARM::dsub_2: return ARM::D10;
    case ARM::dsub_3: return ARM::D11;
    case ARM::qsub_0: return ARM::Q4;
    case ARM::qsub_1: return ARM::Q5;
    case qsub_1_then_ssub_0: return ARM::S20;
    case qsub_1_then_ssub_1: return ARM::S21;
    case qsub_1_then_ssub_2: return ARM::S22;
    case qsub_1_then_ssub_3: return ARM::S23;
    case ARM::ssub_0: return ARM::S16;
    case ARM::ssub_1: return ARM::S17;
    case ARM::ssub_2: return ARM::S18;
    case ARM::ssub_3: return ARM::S19;
    };
    break;
  case ARM::Q6_Q7:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D12;
    case ARM::dsub_1: return ARM::D13;
    case ARM::dsub_2: return ARM::D14;
    case ARM::dsub_3: return ARM::D15;
    case ARM::qsub_0: return ARM::Q6;
    case ARM::qsub_1: return ARM::Q7;
    case qsub_1_then_ssub_0: return ARM::S28;
    case qsub_1_then_ssub_1: return ARM::S29;
    case qsub_1_then_ssub_2: return ARM::S30;
    case qsub_1_then_ssub_3: return ARM::S31;
    case ARM::ssub_0: return ARM::S24;
    case ARM::ssub_1: return ARM::S25;
    case ARM::ssub_2: return ARM::S26;
    case ARM::ssub_3: return ARM::S27;
    };
    break;
  case ARM::Q8_Q9:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D16;
    case ARM::dsub_1: return ARM::D17;
    case ARM::dsub_2: return ARM::D18;
    case ARM::dsub_3: return ARM::D19;
    case ARM::qsub_0: return ARM::Q8;
    case ARM::qsub_1: return ARM::Q9;
    };
    break;
  case ARM::Q10_Q11:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D20;
    case ARM::dsub_1: return ARM::D21;
    case ARM::dsub_2: return ARM::D22;
    case ARM::dsub_3: return ARM::D23;
    case ARM::qsub_0: return ARM::Q10;
    case ARM::qsub_1: return ARM::Q11;
    };
    break;
  case ARM::Q12_Q13:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D24;
    case ARM::dsub_1: return ARM::D25;
    case ARM::dsub_2: return ARM::D26;
    case ARM::dsub_3: return ARM::D27;
    case ARM::qsub_0: return ARM::Q12;
    case ARM::qsub_1: return ARM::Q13;
    };
    break;
  case ARM::Q14_Q15:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D28;
    case ARM::dsub_1: return ARM::D29;
    case ARM::dsub_2: return ARM::D30;
    case ARM::dsub_3: return ARM::D31;
    case ARM::qsub_0: return ARM::Q14;
    case ARM::qsub_1: return ARM::Q15;
    };
    break;
  case ARM::Q0_Q1_Q2_Q3:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D0;
    case ARM::dsub_1: return ARM::D1;
    case ARM::dsub_2: return ARM::D2;
    case ARM::dsub_3: return ARM::D3;
    case ARM::dsub_4: return ARM::D4;
    case ARM::dsub_5: return ARM::D5;
    case ARM::dsub_6: return ARM::D6;
    case ARM::dsub_7: return ARM::D7;
    case ARM::qqsub_0: return ARM::Q0_Q1;
    case ARM::qqsub_1: return ARM::Q2_Q3;
    case qqsub_1_then_qsub_1_then_ssub_0: return ARM::S12;
    case qqsub_1_then_qsub_1_then_ssub_1: return ARM::S13;
    case qqsub_1_then_qsub_1_then_ssub_2: return ARM::S14;
    case qqsub_1_then_qsub_1_then_ssub_3: return ARM::S15;
    case qqsub_1_then_ssub_0: return ARM::S8;
    case qqsub_1_then_ssub_1: return ARM::S9;
    case qqsub_1_then_ssub_2: return ARM::S10;
    case qqsub_1_then_ssub_3: return ARM::S11;
    case ARM::qsub_0: return ARM::Q0;
    case ARM::qsub_1: return ARM::Q1;
    case qsub_1_then_ssub_0: return ARM::S4;
    case qsub_1_then_ssub_1: return ARM::S5;
    case qsub_1_then_ssub_2: return ARM::S6;
    case qsub_1_then_ssub_3: return ARM::S7;
    case ARM::qsub_2: return ARM::Q2;
    case ARM::qsub_3: return ARM::Q3;
    case ARM::ssub_0: return ARM::S0;
    case ARM::ssub_1: return ARM::S1;
    case ARM::ssub_2: return ARM::S2;
    case ARM::ssub_3: return ARM::S3;
    };
    break;
  case ARM::Q4_Q5_Q6_Q7:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D8;
    case ARM::dsub_1: return ARM::D9;
    case ARM::dsub_2: return ARM::D10;
    case ARM::dsub_3: return ARM::D11;
    case ARM::dsub_4: return ARM::D12;
    case ARM::dsub_5: return ARM::D13;
    case ARM::dsub_6: return ARM::D14;
    case ARM::dsub_7: return ARM::D15;
    case ARM::qqsub_0: return ARM::Q4_Q5;
    case ARM::qqsub_1: return ARM::Q6_Q7;
    case qqsub_1_then_qsub_1_then_ssub_0: return ARM::S28;
    case qqsub_1_then_qsub_1_then_ssub_1: return ARM::S29;
    case qqsub_1_then_qsub_1_then_ssub_2: return ARM::S30;
    case qqsub_1_then_qsub_1_then_ssub_3: return ARM::S31;
    case qqsub_1_then_ssub_0: return ARM::S24;
    case qqsub_1_then_ssub_1: return ARM::S25;
    case qqsub_1_then_ssub_2: return ARM::S26;
    case qqsub_1_then_ssub_3: return ARM::S27;
    case ARM::qsub_0: return ARM::Q4;
    case ARM::qsub_1: return ARM::Q5;
    case qsub_1_then_ssub_0: return ARM::S20;
    case qsub_1_then_ssub_1: return ARM::S21;
    case qsub_1_then_ssub_2: return ARM::S22;
    case qsub_1_then_ssub_3: return ARM::S23;
    case ARM::qsub_2: return ARM::Q6;
    case ARM::qsub_3: return ARM::Q7;
    case ARM::ssub_0: return ARM::S16;
    case ARM::ssub_1: return ARM::S17;
    case ARM::ssub_2: return ARM::S18;
    case ARM::ssub_3: return ARM::S19;
    };
    break;
  case ARM::Q8_Q9_Q10_Q11:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D16;
    case ARM::dsub_1: return ARM::D17;
    case ARM::dsub_2: return ARM::D18;
    case ARM::dsub_3: return ARM::D19;
    case ARM::dsub_4: return ARM::D20;
    case ARM::dsub_5: return ARM::D21;
    case ARM::dsub_6: return ARM::D22;
    case ARM::dsub_7: return ARM::D23;
    case ARM::qqsub_0: return ARM::Q8_Q9;
    case ARM::qqsub_1: return ARM::Q10_Q11;
    case ARM::qsub_0: return ARM::Q8;
    case ARM::qsub_1: return ARM::Q9;
    case ARM::qsub_2: return ARM::Q10;
    case ARM::qsub_3: return ARM::Q11;
    };
    break;
  case ARM::Q12_Q13_Q14_Q15:
    switch (Index) {
    default: return 0;
    case ARM::dsub_0: return ARM::D24;
    case ARM::dsub_1: return ARM::D25;
    case ARM::dsub_2: return ARM::D26;
    case ARM::dsub_3: return ARM::D27;
    case ARM::dsub_4: return ARM::D28;
    case ARM::dsub_5: return ARM::D29;
    case ARM::dsub_6: return ARM::D30;
    case ARM::dsub_7: return ARM::D31;
    case ARM::qqsub_0: return ARM::Q12_Q13;
    case ARM::qqsub_1: return ARM::Q14_Q15;
    case ARM::qsub_0: return ARM::Q12;
    case ARM::qsub_1: return ARM::Q13;
    case ARM::qsub_2: return ARM::Q14;
    case ARM::qsub_3: return ARM::Q15;
    };
    break;
  };
  return 0;
}

unsigned ARMGenRegisterInfo::getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const {
  switch (RegNo) {
  default:
    return 0;
  case ARM::D0:
    if (SubRegNo == ARM::S0)  return ARM::ssub_0;
    if (SubRegNo == ARM::S1)  return ARM::ssub_1;
    return 0;
  case ARM::D1:
    if (SubRegNo == ARM::S2)  return ARM::ssub_0;
    if (SubRegNo == ARM::S3)  return ARM::ssub_1;
    return 0;
  case ARM::D2:
    if (SubRegNo == ARM::S4)  return ARM::ssub_0;
    if (SubRegNo == ARM::S5)  return ARM::ssub_1;
    return 0;
  case ARM::D3:
    if (SubRegNo == ARM::S6)  return ARM::ssub_0;
    if (SubRegNo == ARM::S7)  return ARM::ssub_1;
    return 0;
  case ARM::D4:
    if (SubRegNo == ARM::S8)  return ARM::ssub_0;
    if (SubRegNo == ARM::S9)  return ARM::ssub_1;
    return 0;
  case ARM::D5:
    if (SubRegNo == ARM::S10)  return ARM::ssub_0;
    if (SubRegNo == ARM::S11)  return ARM::ssub_1;
    return 0;
  case ARM::D6:
    if (SubRegNo == ARM::S12)  return ARM::ssub_0;
    if (SubRegNo == ARM::S13)  return ARM::ssub_1;
    return 0;
  case ARM::D7:
    if (SubRegNo == ARM::S14)  return ARM::ssub_0;
    if (SubRegNo == ARM::S15)  return ARM::ssub_1;
    return 0;
  case ARM::D8:
    if (SubRegNo == ARM::S16)  return ARM::ssub_0;
    if (SubRegNo == ARM::S17)  return ARM::ssub_1;
    return 0;
  case ARM::D9:
    if (SubRegNo == ARM::S18)  return ARM::ssub_0;
    if (SubRegNo == ARM::S19)  return ARM::ssub_1;
    return 0;
  case ARM::D10:
    if (SubRegNo == ARM::S20)  return ARM::ssub_0;
    if (SubRegNo == ARM::S21)  return ARM::ssub_1;
    return 0;
  case ARM::D11:
    if (SubRegNo == ARM::S22)  return ARM::ssub_0;
    if (SubRegNo == ARM::S23)  return ARM::ssub_1;
    return 0;
  case ARM::D12:
    if (SubRegNo == ARM::S24)  return ARM::ssub_0;
    if (SubRegNo == ARM::S25)  return ARM::ssub_1;
    return 0;
  case ARM::D13:
    if (SubRegNo == ARM::S26)  return ARM::ssub_0;
    if (SubRegNo == ARM::S27)  return ARM::ssub_1;
    return 0;
  case ARM::D14:
    if (SubRegNo == ARM::S28)  return ARM::ssub_0;
    if (SubRegNo == ARM::S29)  return ARM::ssub_1;
    return 0;
  case ARM::D15:
    if (SubRegNo == ARM::S30)  return ARM::ssub_0;
    if (SubRegNo == ARM::S31)  return ARM::ssub_1;
    return 0;
  case ARM::Q0:
    if (SubRegNo == ARM::D0)  return ARM::dsub_0;
    if (SubRegNo == ARM::D1)  return ARM::dsub_1;
    if (SubRegNo == ARM::S0)  return ARM::ssub_0;
    if (SubRegNo == ARM::S1)  return ARM::ssub_1;
    if (SubRegNo == ARM::S2)  return ARM::ssub_2;
    if (SubRegNo == ARM::S3)  return ARM::ssub_3;
    return 0;
  case ARM::Q1:
    if (SubRegNo == ARM::D2)  return ARM::dsub_0;
    if (SubRegNo == ARM::D3)  return ARM::dsub_1;
    if (SubRegNo == ARM::S4)  return ARM::ssub_0;
    if (SubRegNo == ARM::S5)  return ARM::ssub_1;
    if (SubRegNo == ARM::S6)  return ARM::ssub_2;
    if (SubRegNo == ARM::S7)  return ARM::ssub_3;
    return 0;
  case ARM::Q2:
    if (SubRegNo == ARM::D4)  return ARM::dsub_0;
    if (SubRegNo == ARM::D5)  return ARM::dsub_1;
    if (SubRegNo == ARM::S8)  return ARM::ssub_0;
    if (SubRegNo == ARM::S9)  return ARM::ssub_1;
    if (SubRegNo == ARM::S10)  return ARM::ssub_2;
    if (SubRegNo == ARM::S11)  return ARM::ssub_3;
    return 0;
  case ARM::Q3:
    if (SubRegNo == ARM::D6)  return ARM::dsub_0;
    if (SubRegNo == ARM::D7)  return ARM::dsub_1;
    if (SubRegNo == ARM::S12)  return ARM::ssub_0;
    if (SubRegNo == ARM::S13)  return ARM::ssub_1;
    if (SubRegNo == ARM::S14)  return ARM::ssub_2;
    if (SubRegNo == ARM::S15)  return ARM::ssub_3;
    return 0;
  case ARM::Q4:
    if (SubRegNo == ARM::D8)  return ARM::dsub_0;
    if (SubRegNo == ARM::D9)  return ARM::dsub_1;
    if (SubRegNo == ARM::S16)  return ARM::ssub_0;
    if (SubRegNo == ARM::S17)  return ARM::ssub_1;
    if (SubRegNo == ARM::S18)  return ARM::ssub_2;
    if (SubRegNo == ARM::S19)  return ARM::ssub_3;
    return 0;
  case ARM::Q5:
    if (SubRegNo == ARM::D10)  return ARM::dsub_0;
    if (SubRegNo == ARM::D11)  return ARM::dsub_1;
    if (SubRegNo == ARM::S20)  return ARM::ssub_0;
    if (SubRegNo == ARM::S21)  return ARM::ssub_1;
    if (SubRegNo == ARM::S22)  return ARM::ssub_2;
    if (SubRegNo == ARM::S23)  return ARM::ssub_3;
    return 0;
  case ARM::Q6:
    if (SubRegNo == ARM::D12)  return ARM::dsub_0;
    if (SubRegNo == ARM::D13)  return ARM::dsub_1;
    if (SubRegNo == ARM::S24)  return ARM::ssub_0;
    if (SubRegNo == ARM::S25)  return ARM::ssub_1;
    if (SubRegNo == ARM::S26)  return ARM::ssub_2;
    if (SubRegNo == ARM::S27)  return ARM::ssub_3;
    return 0;
  case ARM::Q7:
    if (SubRegNo == ARM::D14)  return ARM::dsub_0;
    if (SubRegNo == ARM::D15)  return ARM::dsub_1;
    if (SubRegNo == ARM::S28)  return ARM::ssub_0;
    if (SubRegNo == ARM::S29)  return ARM::ssub_1;
    if (SubRegNo == ARM::S30)  return ARM::ssub_2;
    if (SubRegNo == ARM::S31)  return ARM::ssub_3;
    return 0;
  case ARM::Q8:
    if (SubRegNo == ARM::D16)  return ARM::dsub_0;
    if (SubRegNo == ARM::D17)  return ARM::dsub_1;
    return 0;
  case ARM::Q9:
    if (SubRegNo == ARM::D18)  return ARM::dsub_0;
    if (SubRegNo == ARM::D19)  return ARM::dsub_1;
    return 0;
  case ARM::Q10:
    if (SubRegNo == ARM::D20)  return ARM::dsub_0;
    if (SubRegNo == ARM::D21)  return ARM::dsub_1;
    return 0;
  case ARM::Q11:
    if (SubRegNo == ARM::D22)  return ARM::dsub_0;
    if (SubRegNo == ARM::D23)  return ARM::dsub_1;
    return 0;
  case ARM::Q12:
    if (SubRegNo == ARM::D24)  return ARM::dsub_0;
    if (SubRegNo == ARM::D25)  return ARM::dsub_1;
    return 0;
  case ARM::Q13:
    if (SubRegNo == ARM::D26)  return ARM::dsub_0;
    if (SubRegNo == ARM::D27)  return ARM::dsub_1;
    return 0;
  case ARM::Q14:
    if (SubRegNo == ARM::D28)  return ARM::dsub_0;
    if (SubRegNo == ARM::D29)  return ARM::dsub_1;
    return 0;
  case ARM::Q15:
    if (SubRegNo == ARM::D30)  return ARM::dsub_0;
    if (SubRegNo == ARM::D31)  return ARM::dsub_1;
    return 0;
  case ARM::Q0_Q1:
    if (SubRegNo == ARM::D0)  return ARM::dsub_0;
    if (SubRegNo == ARM::D1)  return ARM::dsub_1;
    if (SubRegNo == ARM::D2)  return ARM::dsub_2;
    if (SubRegNo == ARM::D3)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q0)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q1)  return ARM::qsub_1;
    if (SubRegNo == ARM::S4)  return qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S5)  return qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S6)  return qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S7)  return qsub_1_then_ssub_3;
    if (SubRegNo == ARM::S0)  return ARM::ssub_0;
    if (SubRegNo == ARM::S1)  return ARM::ssub_1;
    if (SubRegNo == ARM::S2)  return ARM::ssub_2;
    if (SubRegNo == ARM::S3)  return ARM::ssub_3;
    return 0;
  case ARM::Q2_Q3:
    if (SubRegNo == ARM::D4)  return ARM::dsub_0;
    if (SubRegNo == ARM::D5)  return ARM::dsub_1;
    if (SubRegNo == ARM::D6)  return ARM::dsub_2;
    if (SubRegNo == ARM::D7)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q2)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q3)  return ARM::qsub_1;
    if (SubRegNo == ARM::S12)  return qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S13)  return qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S14)  return qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S15)  return qsub_1_then_ssub_3;
    if (SubRegNo == ARM::S8)  return ARM::ssub_0;
    if (SubRegNo == ARM::S9)  return ARM::ssub_1;
    if (SubRegNo == ARM::S10)  return ARM::ssub_2;
    if (SubRegNo == ARM::S11)  return ARM::ssub_3;
    return 0;
  case ARM::Q4_Q5:
    if (SubRegNo == ARM::D8)  return ARM::dsub_0;
    if (SubRegNo == ARM::D9)  return ARM::dsub_1;
    if (SubRegNo == ARM::D10)  return ARM::dsub_2;
    if (SubRegNo == ARM::D11)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q4)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q5)  return ARM::qsub_1;
    if (SubRegNo == ARM::S20)  return qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S21)  return qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S22)  return qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S23)  return qsub_1_then_ssub_3;
    if (SubRegNo == ARM::S16)  return ARM::ssub_0;
    if (SubRegNo == ARM::S17)  return ARM::ssub_1;
    if (SubRegNo == ARM::S18)  return ARM::ssub_2;
    if (SubRegNo == ARM::S19)  return ARM::ssub_3;
    return 0;
  case ARM::Q6_Q7:
    if (SubRegNo == ARM::D12)  return ARM::dsub_0;
    if (SubRegNo == ARM::D13)  return ARM::dsub_1;
    if (SubRegNo == ARM::D14)  return ARM::dsub_2;
    if (SubRegNo == ARM::D15)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q6)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q7)  return ARM::qsub_1;
    if (SubRegNo == ARM::S28)  return qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S29)  return qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S30)  return qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S31)  return qsub_1_then_ssub_3;
    if (SubRegNo == ARM::S24)  return ARM::ssub_0;
    if (SubRegNo == ARM::S25)  return ARM::ssub_1;
    if (SubRegNo == ARM::S26)  return ARM::ssub_2;
    if (SubRegNo == ARM::S27)  return ARM::ssub_3;
    return 0;
  case ARM::Q8_Q9:
    if (SubRegNo == ARM::D16)  return ARM::dsub_0;
    if (SubRegNo == ARM::D17)  return ARM::dsub_1;
    if (SubRegNo == ARM::D18)  return ARM::dsub_2;
    if (SubRegNo == ARM::D19)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q8)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q9)  return ARM::qsub_1;
    return 0;
  case ARM::Q10_Q11:
    if (SubRegNo == ARM::D20)  return ARM::dsub_0;
    if (SubRegNo == ARM::D21)  return ARM::dsub_1;
    if (SubRegNo == ARM::D22)  return ARM::dsub_2;
    if (SubRegNo == ARM::D23)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q10)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q11)  return ARM::qsub_1;
    return 0;
  case ARM::Q12_Q13:
    if (SubRegNo == ARM::D24)  return ARM::dsub_0;
    if (SubRegNo == ARM::D25)  return ARM::dsub_1;
    if (SubRegNo == ARM::D26)  return ARM::dsub_2;
    if (SubRegNo == ARM::D27)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q12)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q13)  return ARM::qsub_1;
    return 0;
  case ARM::Q14_Q15:
    if (SubRegNo == ARM::D28)  return ARM::dsub_0;
    if (SubRegNo == ARM::D29)  return ARM::dsub_1;
    if (SubRegNo == ARM::D30)  return ARM::dsub_2;
    if (SubRegNo == ARM::D31)  return ARM::dsub_3;
    if (SubRegNo == ARM::Q14)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q15)  return ARM::qsub_1;
    return 0;
  case ARM::Q0_Q1_Q2_Q3:
    if (SubRegNo == ARM::D0)  return ARM::dsub_0;
    if (SubRegNo == ARM::D1)  return ARM::dsub_1;
    if (SubRegNo == ARM::D2)  return ARM::dsub_2;
    if (SubRegNo == ARM::D3)  return ARM::dsub_3;
    if (SubRegNo == ARM::D4)  return ARM::dsub_4;
    if (SubRegNo == ARM::D5)  return ARM::dsub_5;
    if (SubRegNo == ARM::D6)  return ARM::dsub_6;
    if (SubRegNo == ARM::D7)  return ARM::dsub_7;
    if (SubRegNo == ARM::Q0_Q1)  return ARM::qqsub_0;
    if (SubRegNo == ARM::Q2_Q3)  return ARM::qqsub_1;
    if (SubRegNo == ARM::S12)  return qqsub_1_then_qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S13)  return qqsub_1_then_qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S14)  return qqsub_1_then_qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S15)  return qqsub_1_then_qsub_1_then_ssub_3;
    if (SubRegNo == ARM::S8)  return qqsub_1_then_ssub_0;
    if (SubRegNo == ARM::S9)  return qqsub_1_then_ssub_1;
    if (SubRegNo == ARM::S10)  return qqsub_1_then_ssub_2;
    if (SubRegNo == ARM::S11)  return qqsub_1_then_ssub_3;
    if (SubRegNo == ARM::Q0)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q1)  return ARM::qsub_1;
    if (SubRegNo == ARM::S4)  return qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S5)  return qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S6)  return qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S7)  return qsub_1_then_ssub_3;
    if (SubRegNo == ARM::Q2)  return ARM::qsub_2;
    if (SubRegNo == ARM::Q3)  return ARM::qsub_3;
    if (SubRegNo == ARM::S0)  return ARM::ssub_0;
    if (SubRegNo == ARM::S1)  return ARM::ssub_1;
    if (SubRegNo == ARM::S2)  return ARM::ssub_2;
    if (SubRegNo == ARM::S3)  return ARM::ssub_3;
    return 0;
  case ARM::Q4_Q5_Q6_Q7:
    if (SubRegNo == ARM::D8)  return ARM::dsub_0;
    if (SubRegNo == ARM::D9)  return ARM::dsub_1;
    if (SubRegNo == ARM::D10)  return ARM::dsub_2;
    if (SubRegNo == ARM::D11)  return ARM::dsub_3;
    if (SubRegNo == ARM::D12)  return ARM::dsub_4;
    if (SubRegNo == ARM::D13)  return ARM::dsub_5;
    if (SubRegNo == ARM::D14)  return ARM::dsub_6;
    if (SubRegNo == ARM::D15)  return ARM::dsub_7;
    if (SubRegNo == ARM::Q4_Q5)  return ARM::qqsub_0;
    if (SubRegNo == ARM::Q6_Q7)  return ARM::qqsub_1;
    if (SubRegNo == ARM::S28)  return qqsub_1_then_qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S29)  return qqsub_1_then_qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S30)  return qqsub_1_then_qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S31)  return qqsub_1_then_qsub_1_then_ssub_3;
    if (SubRegNo == ARM::S24)  return qqsub_1_then_ssub_0;
    if (SubRegNo == ARM::S25)  return qqsub_1_then_ssub_1;
    if (SubRegNo == ARM::S26)  return qqsub_1_then_ssub_2;
    if (SubRegNo == ARM::S27)  return qqsub_1_then_ssub_3;
    if (SubRegNo == ARM::Q4)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q5)  return ARM::qsub_1;
    if (SubRegNo == ARM::S20)  return qsub_1_then_ssub_0;
    if (SubRegNo == ARM::S21)  return qsub_1_then_ssub_1;
    if (SubRegNo == ARM::S22)  return qsub_1_then_ssub_2;
    if (SubRegNo == ARM::S23)  return qsub_1_then_ssub_3;
    if (SubRegNo == ARM::Q6)  return ARM::qsub_2;
    if (SubRegNo == ARM::Q7)  return ARM::qsub_3;
    if (SubRegNo == ARM::S16)  return ARM::ssub_0;
    if (SubRegNo == ARM::S17)  return ARM::ssub_1;
    if (SubRegNo == ARM::S18)  return ARM::ssub_2;
    if (SubRegNo == ARM::S19)  return ARM::ssub_3;
    return 0;
  case ARM::Q8_Q9_Q10_Q11:
    if (SubRegNo == ARM::D16)  return ARM::dsub_0;
    if (SubRegNo == ARM::D17)  return ARM::dsub_1;
    if (SubRegNo == ARM::D18)  return ARM::dsub_2;
    if (SubRegNo == ARM::D19)  return ARM::dsub_3;
    if (SubRegNo == ARM::D20)  return ARM::dsub_4;
    if (SubRegNo == ARM::D21)  return ARM::dsub_5;
    if (SubRegNo == ARM::D22)  return ARM::dsub_6;
    if (SubRegNo == ARM::D23)  return ARM::dsub_7;
    if (SubRegNo == ARM::Q8_Q9)  return ARM::qqsub_0;
    if (SubRegNo == ARM::Q10_Q11)  return ARM::qqsub_1;
    if (SubRegNo == ARM::Q8)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q9)  return ARM::qsub_1;
    if (SubRegNo == ARM::Q10)  return ARM::qsub_2;
    if (SubRegNo == ARM::Q11)  return ARM::qsub_3;
    return 0;
  case ARM::Q12_Q13_Q14_Q15:
    if (SubRegNo == ARM::D24)  return ARM::dsub_0;
    if (SubRegNo == ARM::D25)  return ARM::dsub_1;
    if (SubRegNo == ARM::D26)  return ARM::dsub_2;
    if (SubRegNo == ARM::D27)  return ARM::dsub_3;
    if (SubRegNo == ARM::D28)  return ARM::dsub_4;
    if (SubRegNo == ARM::D29)  return ARM::dsub_5;
    if (SubRegNo == ARM::D30)  return ARM::dsub_6;
    if (SubRegNo == ARM::D31)  return ARM::dsub_7;
    if (SubRegNo == ARM::Q12_Q13)  return ARM::qqsub_0;
    if (SubRegNo == ARM::Q14_Q15)  return ARM::qqsub_1;
    if (SubRegNo == ARM::Q12)  return ARM::qsub_0;
    if (SubRegNo == ARM::Q13)  return ARM::qsub_1;
    if (SubRegNo == ARM::Q14)  return ARM::qsub_2;
    if (SubRegNo == ARM::Q15)  return ARM::qsub_3;
    return 0;
  };
  return 0;
}

unsigned ARMGenRegisterInfo::composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
  switch (IdxA) {
  default:
    return IdxB;
  case ARM::dsub_1: switch(IdxB) {
    default: return IdxB;
    case ARM::ssub_0: return ARM::ssub_2;
    case ARM::ssub_1: return ARM::ssub_3;
    }
  case ARM::dsub_2: switch(IdxB) {
    default: return IdxB;
    case ARM::ssub_0: return qsub_1_then_ssub_0;
    case ARM::ssub_1: return qsub_1_then_ssub_1;
    }
  case ARM::dsub_3: switch(IdxB) {
    default: return IdxB;
    case ARM::ssub_0: return qsub_1_then_ssub_2;
    case ARM::ssub_1: return qsub_1_then_ssub_3;
    }
  case ARM::dsub_4: switch(IdxB) {
    default: return IdxB;
    case ARM::ssub_0: return qqsub_1_then_ssub_0;
    case ARM::ssub_1: return qqsub_1_then_ssub_1;
    }
  case ARM::dsub_5: switch(IdxB) {
    default: return IdxB;
    case ARM::ssub_0: return qqsub_1_then_ssub_2;
    case ARM::ssub_1: return qqsub_1_then_ssub_3;
    }
  case ARM::dsub_6: switch(IdxB) {
    default: return IdxB;
    case ARM::ssub_0: return qqsub_1_then_qsub_1_then_ssub_0;
    case ARM::ssub_1: return qqsub_1_then_qsub_1_then_ssub_1;
    }
  case ARM::dsub_7: switch(IdxB) {
    default: return IdxB;
    case ARM::ssub_0: return qqsub_1_then_qsub_1_then_ssub_2;
    case ARM::ssub_1: return qqsub_1_then_qsub_1_then_ssub_3;
    }
  case ARM::qqsub_1: switch(IdxB) {
    default: return IdxB;
    case ARM::dsub_0: return ARM::dsub_4;
    case ARM::dsub_1: return ARM::dsub_5;
    case ARM::dsub_2: return ARM::dsub_6;
    case ARM::dsub_3: return ARM::dsub_7;
    case ARM::qsub_0: return ARM::qsub_2;
    case ARM::qsub_1: return ARM::qsub_3;
    case ARM::ssub_0: return qqsub_1_then_ssub_0;
    case ARM::ssub_1: return qqsub_1_then_ssub_1;
    case ARM::ssub_2: return qqsub_1_then_ssub_2;
    case ARM::ssub_3: return qqsub_1_then_ssub_3;
    case qsub_1_then_ssub_0: return qqsub_1_then_qsub_1_then_ssub_0;
    case qsub_1_then_ssub_1: return qqsub_1_then_qsub_1_then_ssub_1;
    case qsub_1_then_ssub_2: return qqsub_1_then_qsub_1_then_ssub_2;
    case qsub_1_then_ssub_3: return qqsub_1_then_qsub_1_then_ssub_3;
    }
  case ARM::qsub_1: switch(IdxB) {
    default: return IdxB;
    case ARM::dsub_0: return ARM::dsub_2;
    case ARM::dsub_1: return ARM::dsub_3;
    case ARM::ssub_0: return qsub_1_then_ssub_0;
    case ARM::ssub_1: return qsub_1_then_ssub_1;
    case ARM::ssub_2: return qsub_1_then_ssub_2;
    case ARM::ssub_3: return qsub_1_then_ssub_3;
    }
  case ARM::qsub_2: switch(IdxB) {
    default: return IdxB;
    case ARM::dsub_0: return ARM::dsub_4;
    case ARM::dsub_1: return ARM::dsub_5;
    case ARM::ssub_0: return qqsub_1_then_ssub_0;
    case ARM::ssub_1: return qqsub_1_then_ssub_1;
    case ARM::ssub_2: return qqsub_1_then_ssub_2;
    case ARM::ssub_3: return qqsub_1_then_ssub_3;
    }
  case ARM::qsub_3: switch(IdxB) {
    default: return IdxB;
    case ARM::dsub_0: return ARM::dsub_6;
    case ARM::dsub_1: return ARM::dsub_7;
    case ARM::ssub_0: return qqsub_1_then_qsub_1_then_ssub_0;
    case ARM::ssub_1: return qqsub_1_then_qsub_1_then_ssub_1;
    case ARM::ssub_2: return qqsub_1_then_qsub_1_then_ssub_2;
    case ARM::ssub_3: return qqsub_1_then_qsub_1_then_ssub_3;
    }
  }
}

const TargetRegisterClass *ARMGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[26][30] = {
    {	// SPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// DPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      5,	// ssub_0 -> DPR_VFP2
      5,	// ssub_1 -> DPR_VFP2
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// SPR_8
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// GPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// DPR_VFP2
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      5,	// ssub_0 -> DPR_VFP2
      5,	// ssub_1 -> DPR_VFP2
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QPR
      6,	// dsub_0 -> QPR
      6,	// dsub_1 -> QPR
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      12,	// ssub_0 -> QPR_VFP2
      12,	// ssub_1 -> QPR_VFP2
      12,	// ssub_2 -> QPR_VFP2
      12,	// ssub_3 -> QPR_VFP2
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// GPRnopc
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// tGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// DPR_8
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      11,	// ssub_0 -> DPR_8
      11,	// ssub_1 -> DPR_8
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QPR_VFP2
      12,	// dsub_0 -> QPR_VFP2
      12,	// dsub_1 -> QPR_VFP2
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      12,	// ssub_0 -> QPR_VFP2
      12,	// ssub_1 -> QPR_VFP2
      12,	// ssub_2 -> QPR_VFP2
      12,	// ssub_3 -> QPR_VFP2
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QQPR
      13,	// dsub_0 -> QQPR
      13,	// dsub_1 -> QQPR
      13,	// dsub_2 -> QQPR
      13,	// dsub_3 -> QQPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      13,	// qsub_0 -> QQPR
      13,	// qsub_1 -> QQPR
      0,	// qsub_2
      0,	// qsub_3
      19,	// ssub_0 -> QQPR_with_ssub_0
      19,	// ssub_1 -> QQPR_with_ssub_0
      19,	// ssub_2 -> QQPR_with_ssub_0
      19,	// ssub_3 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_0 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_1 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_2 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_3 -> QQPR_with_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// GPRnopc_and_hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// hGPR_and_rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// tGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QPR_8
      18,	// dsub_0 -> QPR_8
      18,	// dsub_1 -> QPR_8
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      18,	// ssub_0 -> QPR_8
      18,	// ssub_1 -> QPR_8
      18,	// ssub_2 -> QPR_8
      18,	// ssub_3 -> QPR_8
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QQPR_with_ssub_0
      19,	// dsub_0 -> QQPR_with_ssub_0
      19,	// dsub_1 -> QQPR_with_ssub_0
      19,	// dsub_2 -> QQPR_with_ssub_0
      19,	// dsub_3 -> QQPR_with_ssub_0
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      19,	// qsub_0 -> QQPR_with_ssub_0
      19,	// qsub_1 -> QQPR_with_ssub_0
      0,	// qsub_2
      0,	// qsub_3
      19,	// ssub_0 -> QQPR_with_ssub_0
      19,	// ssub_1 -> QQPR_with_ssub_0
      19,	// ssub_2 -> QQPR_with_ssub_0
      19,	// ssub_3 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_0 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_1 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_2 -> QQPR_with_ssub_0
      19,	// qsub_1_then_ssub_3 -> QQPR_with_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QQQQPR
      20,	// dsub_0 -> QQQQPR
      20,	// dsub_1 -> QQQQPR
      20,	// dsub_2 -> QQQQPR
      20,	// dsub_3 -> QQQQPR
      20,	// dsub_4 -> QQQQPR
      20,	// dsub_5 -> QQQQPR
      20,	// dsub_6 -> QQQQPR
      20,	// dsub_7 -> QQQQPR
      20,	// qqsub_0 -> QQQQPR
      20,	// qqsub_1 -> QQQQPR
      20,	// qsub_0 -> QQQQPR
      20,	// qsub_1 -> QQQQPR
      20,	// qsub_2 -> QQQQPR
      20,	// qsub_3 -> QQQQPR
      23,	// ssub_0 -> QQQQPR_with_ssub_0
      23,	// ssub_1 -> QQQQPR_with_ssub_0
      23,	// ssub_2 -> QQQQPR_with_ssub_0
      23,	// ssub_3 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_0 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_1 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_2 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_3 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_0 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_1 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_2 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_3 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_0 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_1 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_2 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_3 -> QQQQPR_with_ssub_0
    },
    {	// hGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QQPR_with_dsub_0_in_DPR_8
      22,	// dsub_0 -> QQPR_with_dsub_0_in_DPR_8
      22,	// dsub_1 -> QQPR_with_dsub_0_in_DPR_8
      22,	// dsub_2 -> QQPR_with_dsub_0_in_DPR_8
      22,	// dsub_3 -> QQPR_with_dsub_0_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      22,	// qsub_0 -> QQPR_with_dsub_0_in_DPR_8
      22,	// qsub_1 -> QQPR_with_dsub_0_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      22,	// ssub_0 -> QQPR_with_dsub_0_in_DPR_8
      22,	// ssub_1 -> QQPR_with_dsub_0_in_DPR_8
      22,	// ssub_2 -> QQPR_with_dsub_0_in_DPR_8
      22,	// ssub_3 -> QQPR_with_dsub_0_in_DPR_8
      22,	// qsub_1_then_ssub_0 -> QQPR_with_dsub_0_in_DPR_8
      22,	// qsub_1_then_ssub_1 -> QQPR_with_dsub_0_in_DPR_8
      22,	// qsub_1_then_ssub_2 -> QQPR_with_dsub_0_in_DPR_8
      22,	// qsub_1_then_ssub_3 -> QQPR_with_dsub_0_in_DPR_8
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QQQQPR_with_ssub_0
      23,	// dsub_0 -> QQQQPR_with_ssub_0
      23,	// dsub_1 -> QQQQPR_with_ssub_0
      23,	// dsub_2 -> QQQQPR_with_ssub_0
      23,	// dsub_3 -> QQQQPR_with_ssub_0
      23,	// dsub_4 -> QQQQPR_with_ssub_0
      23,	// dsub_5 -> QQQQPR_with_ssub_0
      23,	// dsub_6 -> QQQQPR_with_ssub_0
      23,	// dsub_7 -> QQQQPR_with_ssub_0
      23,	// qqsub_0 -> QQQQPR_with_ssub_0
      23,	// qqsub_1 -> QQQQPR_with_ssub_0
      23,	// qsub_0 -> QQQQPR_with_ssub_0
      23,	// qsub_1 -> QQQQPR_with_ssub_0
      23,	// qsub_2 -> QQQQPR_with_ssub_0
      23,	// qsub_3 -> QQQQPR_with_ssub_0
      23,	// ssub_0 -> QQQQPR_with_ssub_0
      23,	// ssub_1 -> QQQQPR_with_ssub_0
      23,	// ssub_2 -> QQQQPR_with_ssub_0
      23,	// ssub_3 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_0 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_1 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_2 -> QQQQPR_with_ssub_0
      23,	// qsub_1_then_ssub_3 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_0 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_1 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_2 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_qsub_1_then_ssub_3 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_0 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_1 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_2 -> QQQQPR_with_ssub_0
      23,	// qqsub_1_then_ssub_3 -> QQQQPR_with_ssub_0
    },
    {	// GPRsp
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// CCR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// qsub_1_then_ssub_0
      0,	// qsub_1_then_ssub_1
      0,	// qsub_1_then_ssub_2
      0,	// qsub_1_then_ssub_3
      0,	// qqsub_1_then_qsub_1_then_ssub_0
      0,	// qqsub_1_then_qsub_1_then_ssub_1
      0,	// qqsub_1_then_qsub_1_then_ssub_2
      0,	// qqsub_1_then_qsub_1_then_ssub_3
      0,	// qqsub_1_then_ssub_0
      0,	// qqsub_1_then_ssub_1
      0,	// qqsub_1_then_ssub_2
      0,	// qqsub_1_then_ssub_3
    },
    {	// QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// ssub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// ssub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_1_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_1_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_1_then_ssub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qsub_1_then_ssub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_qsub_1_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_qsub_1_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_qsub_1_then_ssub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_qsub_1_then_ssub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_ssub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      26,	// qqsub_1_then_ssub_3 -> QQQQPR_with_dsub_0_in_DPR_8
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 30 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

const TargetRegisterClass *ARMGenRegisterInfo::getMatchingSuperRegClass(const TargetRegisterClass *A, const TargetRegisterClass *B, unsigned Idx) const {
  static const unsigned Table[26][30][1] = {
    {	// SPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x02660c10, },	// ssub_0
      { 0x02660c10, },	// ssub_1
      { 0x02660800, },	// ssub_2
      { 0x02660800, },	// ssub_3
      { 0x02640000, },	// qsub_1_then_ssub_0
      { 0x02640000, },	// qsub_1_then_ssub_1
      { 0x02640000, },	// qsub_1_then_ssub_2
      { 0x02640000, },	// qsub_1_then_ssub_3
      { 0x02400000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x02400000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x02400000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x02400000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x02400000, },	// qqsub_1_then_ssub_0
      { 0x02400000, },	// qqsub_1_then_ssub_1
      { 0x02400000, },	// qqsub_1_then_ssub_2
      { 0x02400000, },	// qqsub_1_then_ssub_3
    },
    {	// DPR
      { 0x026e1820, },	// dsub_0
      { 0x026e1820, },	// dsub_1
      { 0x026c1000, },	// dsub_2
      { 0x026c1000, },	// dsub_3
      { 0x02480000, },	// dsub_4
      { 0x02480000, },	// dsub_5
      { 0x02480000, },	// dsub_6
      { 0x02480000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// SPR_8
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x02220400, },	// ssub_0
      { 0x02220400, },	// ssub_1
      { 0x02220000, },	// ssub_2
      { 0x02220000, },	// ssub_3
      { 0x02200000, },	// qsub_1_then_ssub_0
      { 0x02200000, },	// qsub_1_then_ssub_1
      { 0x02200000, },	// qsub_1_then_ssub_2
      { 0x02200000, },	// qsub_1_then_ssub_3
      { 0x02000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x02000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x02000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x02000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x02000000, },	// qqsub_1_then_ssub_0
      { 0x02000000, },	// qqsub_1_then_ssub_1
      { 0x02000000, },	// qqsub_1_then_ssub_2
      { 0x02000000, },	// qqsub_1_then_ssub_3
    },
    {	// GPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// DPR_VFP2
      { 0x02660800, },	// dsub_0
      { 0x02660800, },	// dsub_1
      { 0x02640000, },	// dsub_2
      { 0x02640000, },	// dsub_3
      { 0x02400000, },	// dsub_4
      { 0x02400000, },	// dsub_5
      { 0x02400000, },	// dsub_6
      { 0x02400000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x026c1000, },	// qsub_0
      { 0x026c1000, },	// qsub_1
      { 0x02480000, },	// qsub_2
      { 0x02480000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// GPRnopc
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// rGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// tGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// hGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// DPR_8
      { 0x02220000, },	// dsub_0
      { 0x02220000, },	// dsub_1
      { 0x02200000, },	// dsub_2
      { 0x02200000, },	// dsub_3
      { 0x02000000, },	// dsub_4
      { 0x02000000, },	// dsub_5
      { 0x02000000, },	// dsub_6
      { 0x02000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QPR_VFP2
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x02640000, },	// qsub_0
      { 0x02640000, },	// qsub_1
      { 0x02400000, },	// qsub_2
      { 0x02400000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QQPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x02480000, },	// qqsub_0
      { 0x02480000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// GPRnopc_and_hGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// tcGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// hGPR_and_rGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// tGPR_and_tcGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QPR_8
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x02200000, },	// qsub_0
      { 0x02200000, },	// qsub_1
      { 0x02000000, },	// qsub_2
      { 0x02000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QQPR_with_ssub_0
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x02400000, },	// qqsub_0
      { 0x02400000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QQQQPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// hGPR_and_tcGPR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QQPR_with_dsub_0_in_DPR_8
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x02000000, },	// qqsub_0
      { 0x02000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QQQQPR_with_ssub_0
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// GPRsp
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// CCR
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
    {	// QQQQPR_with_dsub_0_in_DPR_8
      { 0x00000000, },	// dsub_0
      { 0x00000000, },	// dsub_1
      { 0x00000000, },	// dsub_2
      { 0x00000000, },	// dsub_3
      { 0x00000000, },	// dsub_4
      { 0x00000000, },	// dsub_5
      { 0x00000000, },	// dsub_6
      { 0x00000000, },	// dsub_7
      { 0x00000000, },	// qqsub_0
      { 0x00000000, },	// qqsub_1
      { 0x00000000, },	// qsub_0
      { 0x00000000, },	// qsub_1
      { 0x00000000, },	// qsub_2
      { 0x00000000, },	// qsub_3
      { 0x00000000, },	// ssub_0
      { 0x00000000, },	// ssub_1
      { 0x00000000, },	// ssub_2
      { 0x00000000, },	// ssub_3
      { 0x00000000, },	// qsub_1_then_ssub_0
      { 0x00000000, },	// qsub_1_then_ssub_1
      { 0x00000000, },	// qsub_1_then_ssub_2
      { 0x00000000, },	// qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_qsub_1_then_ssub_3
      { 0x00000000, },	// qqsub_1_then_ssub_0
      { 0x00000000, },	// qqsub_1_then_ssub_1
      { 0x00000000, },	// qqsub_1_then_ssub_2
      { 0x00000000, },	// qqsub_1_then_ssub_3
    },
  };
  assert(A && B && "Missing regclass");
  --Idx;
  assert(Idx < 30 && "Bad subreg");
  const unsigned *TV = Table[B->getID()][Idx];
  const unsigned *SC = A->getSubClassMask();
  for (unsigned i = 0; i != 1; ++i)
    if (unsigned Common = TV[i] & SC[i])
      return getRegClass(32*i + CountTrailingZeros_32(Common));
  return 0;
}

extern const MCRegisterDesc ARMRegDesc[];
ARMGenRegisterInfo::ARMGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour)
  : TargetRegisterInfo(ARMRegInfoDesc, RegisterClasses, RegisterClasses+26,
                 ARMSubRegIndexTable) {
  InitMCRegisterInfo(ARMRegDesc, 116, RA, ARMMCRegisterClasses, 26);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(256, ARM::D0, false );
    mapDwarfRegToLLVMReg(257, ARM::D1, false );
    mapDwarfRegToLLVMReg(258, ARM::D2, false );
    mapDwarfRegToLLVMReg(259, ARM::D3, false );
    mapDwarfRegToLLVMReg(260, ARM::D4, false );
    mapDwarfRegToLLVMReg(261, ARM::D5, false );
    mapDwarfRegToLLVMReg(262, ARM::D6, false );
    mapDwarfRegToLLVMReg(263, ARM::D7, false );
    mapDwarfRegToLLVMReg(264, ARM::D8, false );
    mapDwarfRegToLLVMReg(265, ARM::D9, false );
    mapDwarfRegToLLVMReg(266, ARM::D10, false );
    mapDwarfRegToLLVMReg(267, ARM::D11, false );
    mapDwarfRegToLLVMReg(268, ARM::D12, false );
    mapDwarfRegToLLVMReg(269, ARM::D13, false );
    mapDwarfRegToLLVMReg(270, ARM::D14, false );
    mapDwarfRegToLLVMReg(271, ARM::D15, false );
    mapDwarfRegToLLVMReg(272, ARM::D16, false );
    mapDwarfRegToLLVMReg(273, ARM::D17, false );
    mapDwarfRegToLLVMReg(274, ARM::D18, false );
    mapDwarfRegToLLVMReg(275, ARM::D19, false );
    mapDwarfRegToLLVMReg(276, ARM::D20, false );
    mapDwarfRegToLLVMReg(277, ARM::D21, false );
    mapDwarfRegToLLVMReg(278, ARM::D22, false );
    mapDwarfRegToLLVMReg(279, ARM::D23, false );
    mapDwarfRegToLLVMReg(280, ARM::D24, false );
    mapDwarfRegToLLVMReg(281, ARM::D25, false );
    mapDwarfRegToLLVMReg(282, ARM::D26, false );
    mapDwarfRegToLLVMReg(283, ARM::D27, false );
    mapDwarfRegToLLVMReg(284, ARM::D28, false );
    mapDwarfRegToLLVMReg(285, ARM::D29, false );
    mapDwarfRegToLLVMReg(286, ARM::D30, false );
    mapDwarfRegToLLVMReg(287, ARM::D31, false );
    mapDwarfRegToLLVMReg(14, ARM::LR, false );
    mapDwarfRegToLLVMReg(15, ARM::PC, false );
    mapDwarfRegToLLVMReg(0, ARM::R0, false );
    mapDwarfRegToLLVMReg(1, ARM::R1, false );
    mapDwarfRegToLLVMReg(2, ARM::R2, false );
    mapDwarfRegToLLVMReg(3, ARM::R3, false );
    mapDwarfRegToLLVMReg(4, ARM::R4, false );
    mapDwarfRegToLLVMReg(5, ARM::R5, false );
    mapDwarfRegToLLVMReg(6, ARM::R6, false );
    mapDwarfRegToLLVMReg(7, ARM::R7, false );
    mapDwarfRegToLLVMReg(8, ARM::R8, false );
    mapDwarfRegToLLVMReg(9, ARM::R9, false );
    mapDwarfRegToLLVMReg(10, ARM::R10, false );
    mapDwarfRegToLLVMReg(11, ARM::R11, false );
    mapDwarfRegToLLVMReg(12, ARM::R12, false );
    mapDwarfRegToLLVMReg(13, ARM::SP, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(256, ARM::D0, true );
    mapDwarfRegToLLVMReg(257, ARM::D1, true );
    mapDwarfRegToLLVMReg(258, ARM::D2, true );
    mapDwarfRegToLLVMReg(259, ARM::D3, true );
    mapDwarfRegToLLVMReg(260, ARM::D4, true );
    mapDwarfRegToLLVMReg(261, ARM::D5, true );
    mapDwarfRegToLLVMReg(262, ARM::D6, true );
    mapDwarfRegToLLVMReg(263, ARM::D7, true );
    mapDwarfRegToLLVMReg(264, ARM::D8, true );
    mapDwarfRegToLLVMReg(265, ARM::D9, true );
    mapDwarfRegToLLVMReg(266, ARM::D10, true );
    mapDwarfRegToLLVMReg(267, ARM::D11, true );
    mapDwarfRegToLLVMReg(268, ARM::D12, true );
    mapDwarfRegToLLVMReg(269, ARM::D13, true );
    mapDwarfRegToLLVMReg(270, ARM::D14, true );
    mapDwarfRegToLLVMReg(271, ARM::D15, true );
    mapDwarfRegToLLVMReg(272, ARM::D16, true );
    mapDwarfRegToLLVMReg(273, ARM::D17, true );
    mapDwarfRegToLLVMReg(274, ARM::D18, true );
    mapDwarfRegToLLVMReg(275, ARM::D19, true );
    mapDwarfRegToLLVMReg(276, ARM::D20, true );
    mapDwarfRegToLLVMReg(277, ARM::D21, true );
    mapDwarfRegToLLVMReg(278, ARM::D22, true );
    mapDwarfRegToLLVMReg(279, ARM::D23, true );
    mapDwarfRegToLLVMReg(280, ARM::D24, true );
    mapDwarfRegToLLVMReg(281, ARM::D25, true );
    mapDwarfRegToLLVMReg(282, ARM::D26, true );
    mapDwarfRegToLLVMReg(283, ARM::D27, true );
    mapDwarfRegToLLVMReg(284, ARM::D28, true );
    mapDwarfRegToLLVMReg(285, ARM::D29, true );
    mapDwarfRegToLLVMReg(286, ARM::D30, true );
    mapDwarfRegToLLVMReg(287, ARM::D31, true );
    mapDwarfRegToLLVMReg(14, ARM::LR, true );
    mapDwarfRegToLLVMReg(15, ARM::PC, true );
    mapDwarfRegToLLVMReg(0, ARM::R0, true );
    mapDwarfRegToLLVMReg(1, ARM::R1, true );
    mapDwarfRegToLLVMReg(2, ARM::R2, true );
    mapDwarfRegToLLVMReg(3, ARM::R3, true );
    mapDwarfRegToLLVMReg(4, ARM::R4, true );
    mapDwarfRegToLLVMReg(5, ARM::R5, true );
    mapDwarfRegToLLVMReg(6, ARM::R6, true );
    mapDwarfRegToLLVMReg(7, ARM::R7, true );
    mapDwarfRegToLLVMReg(8, ARM::R8, true );
    mapDwarfRegToLLVMReg(9, ARM::R9, true );
    mapDwarfRegToLLVMReg(10, ARM::R10, true );
    mapDwarfRegToLLVMReg(11, ARM::R11, true );
    mapDwarfRegToLLVMReg(12, ARM::R12, true );
    mapDwarfRegToLLVMReg(13, ARM::SP, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(ARM::APSR, -1, false );
    mapLLVMRegToDwarfReg(ARM::CPSR, -1, false );
    mapLLVMRegToDwarfReg(ARM::D0, 256, false );
    mapLLVMRegToDwarfReg(ARM::D1, 257, false );
    mapLLVMRegToDwarfReg(ARM::D2, 258, false );
    mapLLVMRegToDwarfReg(ARM::D3, 259, false );
    mapLLVMRegToDwarfReg(ARM::D4, 260, false );
    mapLLVMRegToDwarfReg(ARM::D5, 261, false );
    mapLLVMRegToDwarfReg(ARM::D6, 262, false );
    mapLLVMRegToDwarfReg(ARM::D7, 263, false );
    mapLLVMRegToDwarfReg(ARM::D8, 264, false );
    mapLLVMRegToDwarfReg(ARM::D9, 265, false );
    mapLLVMRegToDwarfReg(ARM::D10, 266, false );
    mapLLVMRegToDwarfReg(ARM::D11, 267, false );
    mapLLVMRegToDwarfReg(ARM::D12, 268, false );
    mapLLVMRegToDwarfReg(ARM::D13, 269, false );
    mapLLVMRegToDwarfReg(ARM::D14, 270, false );
    mapLLVMRegToDwarfReg(ARM::D15, 271, false );
    mapLLVMRegToDwarfReg(ARM::D16, 272, false );
    mapLLVMRegToDwarfReg(ARM::D17, 273, false );
    mapLLVMRegToDwarfReg(ARM::D18, 274, false );
    mapLLVMRegToDwarfReg(ARM::D19, 275, false );
    mapLLVMRegToDwarfReg(ARM::D20, 276, false );
    mapLLVMRegToDwarfReg(ARM::D21, 277, false );
    mapLLVMRegToDwarfReg(ARM::D22, 278, false );
    mapLLVMRegToDwarfReg(ARM::D23, 279, false );
    mapLLVMRegToDwarfReg(ARM::D24, 280, false );
    mapLLVMRegToDwarfReg(ARM::D25, 281, false );
    mapLLVMRegToDwarfReg(ARM::D26, 282, false );
    mapLLVMRegToDwarfReg(ARM::D27, 283, false );
    mapLLVMRegToDwarfReg(ARM::D28, 284, false );
    mapLLVMRegToDwarfReg(ARM::D29, 285, false );
    mapLLVMRegToDwarfReg(ARM::D30, 286, false );
    mapLLVMRegToDwarfReg(ARM::D31, 287, false );
    mapLLVMRegToDwarfReg(ARM::FPEXC, -1, false );
    mapLLVMRegToDwarfReg(ARM::FPSCR, -1, false );
    mapLLVMRegToDwarfReg(ARM::FPSID, -1, false );
    mapLLVMRegToDwarfReg(ARM::ITSTATE, -1, false );
    mapLLVMRegToDwarfReg(ARM::LR, 14, false );
    mapLLVMRegToDwarfReg(ARM::PC, 15, false );
    mapLLVMRegToDwarfReg(ARM::Q0, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q0_Q1, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q0_Q1_Q2_Q3, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q1, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q2, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q2_Q3, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q3, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q4, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q4_Q5, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q4_Q5_Q6_Q7, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q5, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q6, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q6_Q7, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q7, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q8, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q8_Q9, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q8_Q9_Q10_Q11, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q9, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q10, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q10_Q11, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q11, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q12, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q12_Q13, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q12_Q13_Q14_Q15, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q13, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q14, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q14_Q15, -1, false );
    mapLLVMRegToDwarfReg(ARM::Q15, -1, false );
    mapLLVMRegToDwarfReg(ARM::R0, 0, false );
    mapLLVMRegToDwarfReg(ARM::R1, 1, false );
    mapLLVMRegToDwarfReg(ARM::R2, 2, false );
    mapLLVMRegToDwarfReg(ARM::R3, 3, false );
    mapLLVMRegToDwarfReg(ARM::R4, 4, false );
    mapLLVMRegToDwarfReg(ARM::R5, 5, false );
    mapLLVMRegToDwarfReg(ARM::R6, 6, false );
    mapLLVMRegToDwarfReg(ARM::R7, 7, false );
    mapLLVMRegToDwarfReg(ARM::R8, 8, false );
    mapLLVMRegToDwarfReg(ARM::R9, 9, false );
    mapLLVMRegToDwarfReg(ARM::R10, 10, false );
    mapLLVMRegToDwarfReg(ARM::R11, 11, false );
    mapLLVMRegToDwarfReg(ARM::R12, 12, false );
    mapLLVMRegToDwarfReg(ARM::S0, -1, false );
    mapLLVMRegToDwarfReg(ARM::S1, -1, false );
    mapLLVMRegToDwarfReg(ARM::S2, -1, false );
    mapLLVMRegToDwarfReg(ARM::S3, -1, false );
    mapLLVMRegToDwarfReg(ARM::S4, -1, false );
    mapLLVMRegToDwarfReg(ARM::S5, -1, false );
    mapLLVMRegToDwarfReg(ARM::S6, -1, false );
    mapLLVMRegToDwarfReg(ARM::S7, -1, false );
    mapLLVMRegToDwarfReg(ARM::S8, -1, false );
    mapLLVMRegToDwarfReg(ARM::S9, -1, false );
    mapLLVMRegToDwarfReg(ARM::S10, -1, false );
    mapLLVMRegToDwarfReg(ARM::S11, -1, false );
    mapLLVMRegToDwarfReg(ARM::S12, -1, false );
    mapLLVMRegToDwarfReg(ARM::S13, -1, false );
    mapLLVMRegToDwarfReg(ARM::S14, -1, false );
    mapLLVMRegToDwarfReg(ARM::S15, -1, false );
    mapLLVMRegToDwarfReg(ARM::S16, -1, false );
    mapLLVMRegToDwarfReg(ARM::S17, -1, false );
    mapLLVMRegToDwarfReg(ARM::S18, -1, false );
    mapLLVMRegToDwarfReg(ARM::S19, -1, false );
    mapLLVMRegToDwarfReg(ARM::S20, -1, false );
    mapLLVMRegToDwarfReg(ARM::S21, -1, false );
    mapLLVMRegToDwarfReg(ARM::S22, -1, false );
    mapLLVMRegToDwarfReg(ARM::S23, -1, false );
    mapLLVMRegToDwarfReg(ARM::S24, -1, false );
    mapLLVMRegToDwarfReg(ARM::S25, -1, false );
    mapLLVMRegToDwarfReg(ARM::S26, -1, false );
    mapLLVMRegToDwarfReg(ARM::S27, -1, false );
    mapLLVMRegToDwarfReg(ARM::S28, -1, false );
    mapLLVMRegToDwarfReg(ARM::S29, -1, false );
    mapLLVMRegToDwarfReg(ARM::S30, -1, false );
    mapLLVMRegToDwarfReg(ARM::S31, -1, false );
    mapLLVMRegToDwarfReg(ARM::SP, 13, false );
    mapLLVMRegToDwarfReg(ARM::SPSR, -1, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(ARM::APSR, -1, true );
    mapLLVMRegToDwarfReg(ARM::CPSR, -1, true );
    mapLLVMRegToDwarfReg(ARM::D0, 256, true );
    mapLLVMRegToDwarfReg(ARM::D1, 257, true );
    mapLLVMRegToDwarfReg(ARM::D2, 258, true );
    mapLLVMRegToDwarfReg(ARM::D3, 259, true );
    mapLLVMRegToDwarfReg(ARM::D4, 260, true );
    mapLLVMRegToDwarfReg(ARM::D5, 261, true );
    mapLLVMRegToDwarfReg(ARM::D6, 262, true );
    mapLLVMRegToDwarfReg(ARM::D7, 263, true );
    mapLLVMRegToDwarfReg(ARM::D8, 264, true );
    mapLLVMRegToDwarfReg(ARM::D9, 265, true );
    mapLLVMRegToDwarfReg(ARM::D10, 266, true );
    mapLLVMRegToDwarfReg(ARM::D11, 267, true );
    mapLLVMRegToDwarfReg(ARM::D12, 268, true );
    mapLLVMRegToDwarfReg(ARM::D13, 269, true );
    mapLLVMRegToDwarfReg(ARM::D14, 270, true );
    mapLLVMRegToDwarfReg(ARM::D15, 271, true );
    mapLLVMRegToDwarfReg(ARM::D16, 272, true );
    mapLLVMRegToDwarfReg(ARM::D17, 273, true );
    mapLLVMRegToDwarfReg(ARM::D18, 274, true );
    mapLLVMRegToDwarfReg(ARM::D19, 275, true );
    mapLLVMRegToDwarfReg(ARM::D20, 276, true );
    mapLLVMRegToDwarfReg(ARM::D21, 277, true );
    mapLLVMRegToDwarfReg(ARM::D22, 278, true );
    mapLLVMRegToDwarfReg(ARM::D23, 279, true );
    mapLLVMRegToDwarfReg(ARM::D24, 280, true );
    mapLLVMRegToDwarfReg(ARM::D25, 281, true );
    mapLLVMRegToDwarfReg(ARM::D26, 282, true );
    mapLLVMRegToDwarfReg(ARM::D27, 283, true );
    mapLLVMRegToDwarfReg(ARM::D28, 284, true );
    mapLLVMRegToDwarfReg(ARM::D29, 285, true );
    mapLLVMRegToDwarfReg(ARM::D30, 286, true );
    mapLLVMRegToDwarfReg(ARM::D31, 287, true );
    mapLLVMRegToDwarfReg(ARM::FPEXC, -1, true );
    mapLLVMRegToDwarfReg(ARM::FPSCR, -1, true );
    mapLLVMRegToDwarfReg(ARM::FPSID, -1, true );
    mapLLVMRegToDwarfReg(ARM::ITSTATE, -1, true );
    mapLLVMRegToDwarfReg(ARM::LR, 14, true );
    mapLLVMRegToDwarfReg(ARM::PC, 15, true );
    mapLLVMRegToDwarfReg(ARM::Q0, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q0_Q1, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q0_Q1_Q2_Q3, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q1, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q2, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q2_Q3, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q3, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q4, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q4_Q5, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q4_Q5_Q6_Q7, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q5, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q6, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q6_Q7, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q7, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q8, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q8_Q9, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q8_Q9_Q10_Q11, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q9, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q10, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q10_Q11, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q11, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q12, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q12_Q13, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q12_Q13_Q14_Q15, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q13, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q14, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q14_Q15, -1, true );
    mapLLVMRegToDwarfReg(ARM::Q15, -1, true );
    mapLLVMRegToDwarfReg(ARM::R0, 0, true );
    mapLLVMRegToDwarfReg(ARM::R1, 1, true );
    mapLLVMRegToDwarfReg(ARM::R2, 2, true );
    mapLLVMRegToDwarfReg(ARM::R3, 3, true );
    mapLLVMRegToDwarfReg(ARM::R4, 4, true );
    mapLLVMRegToDwarfReg(ARM::R5, 5, true );
    mapLLVMRegToDwarfReg(ARM::R6, 6, true );
    mapLLVMRegToDwarfReg(ARM::R7, 7, true );
    mapLLVMRegToDwarfReg(ARM::R8, 8, true );
    mapLLVMRegToDwarfReg(ARM::R9, 9, true );
    mapLLVMRegToDwarfReg(ARM::R10, 10, true );
    mapLLVMRegToDwarfReg(ARM::R11, 11, true );
    mapLLVMRegToDwarfReg(ARM::R12, 12, true );
    mapLLVMRegToDwarfReg(ARM::S0, -1, true );
    mapLLVMRegToDwarfReg(ARM::S1, -1, true );
    mapLLVMRegToDwarfReg(ARM::S2, -1, true );
    mapLLVMRegToDwarfReg(ARM::S3, -1, true );
    mapLLVMRegToDwarfReg(ARM::S4, -1, true );
    mapLLVMRegToDwarfReg(ARM::S5, -1, true );
    mapLLVMRegToDwarfReg(ARM::S6, -1, true );
    mapLLVMRegToDwarfReg(ARM::S7, -1, true );
    mapLLVMRegToDwarfReg(ARM::S8, -1, true );
    mapLLVMRegToDwarfReg(ARM::S9, -1, true );
    mapLLVMRegToDwarfReg(ARM::S10, -1, true );
    mapLLVMRegToDwarfReg(ARM::S11, -1, true );
    mapLLVMRegToDwarfReg(ARM::S12, -1, true );
    mapLLVMRegToDwarfReg(ARM::S13, -1, true );
    mapLLVMRegToDwarfReg(ARM::S14, -1, true );
    mapLLVMRegToDwarfReg(ARM::S15, -1, true );
    mapLLVMRegToDwarfReg(ARM::S16, -1, true );
    mapLLVMRegToDwarfReg(ARM::S17, -1, true );
    mapLLVMRegToDwarfReg(ARM::S18, -1, true );
    mapLLVMRegToDwarfReg(ARM::S19, -1, true );
    mapLLVMRegToDwarfReg(ARM::S20, -1, true );
    mapLLVMRegToDwarfReg(ARM::S21, -1, true );
    mapLLVMRegToDwarfReg(ARM::S22, -1, true );
    mapLLVMRegToDwarfReg(ARM::S23, -1, true );
    mapLLVMRegToDwarfReg(ARM::S24, -1, true );
    mapLLVMRegToDwarfReg(ARM::S25, -1, true );
    mapLLVMRegToDwarfReg(ARM::S26, -1, true );
    mapLLVMRegToDwarfReg(ARM::S27, -1, true );
    mapLLVMRegToDwarfReg(ARM::S28, -1, true );
    mapLLVMRegToDwarfReg(ARM::S29, -1, true );
    mapLLVMRegToDwarfReg(ARM::S30, -1, true );
    mapLLVMRegToDwarfReg(ARM::S31, -1, true );
    mapLLVMRegToDwarfReg(ARM::SP, 13, true );
    mapLLVMRegToDwarfReg(ARM::SPSR, -1, true );
    break;
  }
}

static const unsigned CSR_AAPCS_SaveList[] = { ARM::LR, ARM::R11, ARM::R10, ARM::R9, ARM::R8, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, 0 };
static const uint32_t CSR_AAPCS_RegMask[] = { 0x0007f800, 0xe001e080, 0xffc0001f, 0x00020c3f, };
static const unsigned CSR_iOS_SaveList[] = { ARM::LR, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::R11, ARM::R10, ARM::R8, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, 0 };
static const uint32_t CSR_iOS_RegMask[] = { 0x0007f800, 0xe001e080, 0xffc0001b, 0x00020c3f, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

