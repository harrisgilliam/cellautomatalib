/*===- TableGen'erated file ---------------------------------------*- C -*-===*
 *
 * ARM Disassembler
 *
 * Automatically generated file, do not edit!
 *
 *===----------------------------------------------------------------------===*/
#include "llvm/MC/MCInst.h"
#include "llvm/Support/DataTypes.h"
#include <assert.h>

namespace llvm {


static uint32_t fieldFromInstruction32(uint32_t insn, unsigned startBit, unsigned numBits)
{
  assert(startBit + numBits <= 32 && "Instruction field out of bounds!");

  uint32_t fieldMask;

  if (numBits == 32)
    fieldMask = (uint32_t)-1;
  else
    fieldMask = ((1 << numBits) - 1) << startBit;

  return (insn & fieldMask) >> startBit;
}

static MCDisassembler::DecodeStatus decodeARMInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{27-25} ...
  switch (fieldFromInstruction32(insn, 25, 3)) {
  case 0:
    // Check Inst{21} ...
    switch (fieldFromInstruction32(insn, 21, 1)) {
    case 0:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{23-22} ...
          switch (fieldFromInstruction32(insn, 22, 2)) {
          case 0:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(32);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // ANDrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(33);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // ANDrsi
              }
            break;
          case 1:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(449);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SUBrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(450);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SUBrsi
              }
            break;
          case 2:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(25);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // ADDrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(26);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // ADDrsi
              }
            break;
          case 3:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(322);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SBCrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(323);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SBCrsi
              }
            break;
          }
          break;
        case 1:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{23-22} ...
            switch (fieldFromInstruction32(insn, 22, 2)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(34);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // ANDrsr
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(451);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SUBrsr
              }
            case 2:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(27);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // ADDrsr
              }
            case 3:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(324);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SBCrsr
              }
            }
            break;
          case 1:
            // Check Inst{6-5} ...
            switch (fieldFromInstruction32(insn, 5, 2)) {
            case 0:
              // Check Inst{23-22} ...
              switch (fieldFromInstruction32(insn, 22, 2)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 12, 4) == 0) {
                  MI.setOpcode(252);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 20, 1);
                  if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // MUL
                }
                break;
              case 1:
                // Check Inst{20-20} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 20, 1) == 0) {
                  MI.setOpcode(489);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // UMAAL
                }
                break;
              case 2:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                  MI.setOpcode(493);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 20, 1);
                  if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // UMULL
                }
              case 3:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                  MI.setOpcode(366);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 20, 1);
                  if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMULL
                }
              }
              break;
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(431);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // STRH_POST
                }
              case 1:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(187);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDRH_POST
                }
              }
              break;
            case 2:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(178);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDRD_POST
                }
              case 1:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(192);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDRSB_POST
                }
              }
              break;
            case 3:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(422);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // STRD_POST
                }
              case 1:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(197);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDRSH_POST
                }
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{4-0} ...
              switch (fieldFromInstruction32(insn, 0, 5)) {
              case 0:
                // Check Inst{17-10} ...
                switch (fieldFromInstruction32(insn, 10, 8)) {
                case 0:
                  // Check Inst{31-28}  && Inst{9-9} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 9, 1) == 0) {
                    MI.setOpcode(126);
                    if (!Check(S, DecodeCPSInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // CPS2p
                  }
                  break;
                case 64:
                  // Check Inst{31-28}  && Inst{19-18}  && Inst{8-6} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 18, 2) == 0 && fieldFromInstruction32(insn, 6, 3) == 0) {
                    MI.setOpcode(327);
                    tmp = fieldFromInstruction32(insn, 9, 1);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // SETEND
                  }
                  break;
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{4} ...
              switch (fieldFromInstruction32(insn, 4, 1)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction32(insn, 6, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 16, 4) == 15) {
                    MI.setOpcode(248);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // MRS
                  }
                  break;
                case 2:
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                    MI.setOpcode(336);
                    if (!Check(S, DecodeSMLAInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMLABB
                  }
                case 3:
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                    MI.setOpcode(337);
                    if (!Check(S, DecodeSMLAInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMLABT
                  }
                }
                break;
              case 1:
                // Check Inst{11-6} ...
                switch (fieldFromInstruction32(insn, 6, 6)) {
                case 1:
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(281);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // QADD
                  }
                case 2:
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(453);
                    if (!Check(S, DecodeSwap(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SWP
                  }
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{17-9} ...
              switch (fieldFromInstruction32(insn, 9, 9)) {
              case 256:
                // Check Inst{31-28} ...
                switch (fieldFromInstruction32(insn, 28, 4)) {
                case 15:
                  // Check Inst{19-18}  && Inst{8-6} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 18, 2) == 0 && fieldFromInstruction32(insn, 6, 3) == 0) {
                    MI.setOpcode(125);
                    if (!Check(S, DecodeCPSInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // CPS1p
                  }
                  else
                    if (!(Bits & ARM::ModeThumb)) {
                      MI.setOpcode(127);
                      if (!Check(S, DecodeCPSInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // CPS3p
                    }
                  break;
                }
                break;
              }
              break;
              break;
              break;
            case 1:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction32(insn, 6, 2)) {
              case 2:
                // Check Inst{4-4} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps) &&
                    fieldFromInstruction32(insn, 4, 1) == 0) {
                  MI.setOpcode(348);
                  if (!Check(S, DecodeSMLAInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLATB
                }
                break;
              case 3:
                // Check Inst{4-4} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps) &&
                    fieldFromInstruction32(insn, 4, 1) == 0) {
                  MI.setOpcode(349);
                  if (!Check(S, DecodeSMLAInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLATT
                }
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction32(insn, 4, 1)) {
            case 0:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction32(insn, 12, 4)) {
              case 0:
                // Check Inst{11-5} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 5, 7) == 0) {
                  MI.setOpcode(476);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // TSTrr
                }
                else
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(477);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                    if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // TSTrsi
                  }
                break;
              }
              break;
            case 1:
              // Check Inst{15-12}  && Inst{7-7} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 12, 4) == 0 && fieldFromInstruction32(insn, 7, 1) == 0) {
                MI.setOpcode(478);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // TSTrsr
              }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{7-5} ...
              switch (fieldFromInstruction32(insn, 5, 3)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(249);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // MRSsys
                }
                break;
              case 4:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(341);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLALBB
                }
              case 5:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(345);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLALTB
                }
              case 6:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(342);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLALBT
                }
              case 7:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(346);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLALTT
                }
              }
              break;
            case 1:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction32(insn, 12, 4)) {
              case 0:
                // Check Inst{11-5} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 5, 7) == 0) {
                  MI.setOpcode(121);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // CMPrr
                }
                else
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(122);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                    if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // CMPrsi
                  }
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8}  && Inst{6-5} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 0 && fieldFromInstruction32(insn, 5, 2) == 2) {
                  MI.setOpcode(285);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // QDADD
                }
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 12, 4) == 0) {
                  MI.setOpcode(123);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                  if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // CMPrsr
                }
                break;
              }
              break;
            case 1:
              // Check Inst{20-20}  && Inst{11-8}  && Inst{6-5} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 8, 4) == 0 && fieldFromInstruction32(insn, 5, 2) == 0) {
                MI.setOpcode(454);
                if (!Check(S, DecodeSwap(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SWPB
              }
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(261);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // ORRrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(262);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // ORRrsi
              }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(263);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // ORRrsr
              }
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8}  && Inst{6-5} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0) {
                  MI.setOpcode(424);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // STREX
                }
                break;
              case 1:
                // Check Inst{11-8}  && Inst{6-5}  && Inst{3-0} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 15) {
                  MI.setOpcode(180);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDREX
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(87);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // BICrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(88);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // BICrsi
              }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(89);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // BICrsr
              }
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8}  && Inst{6-5} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0) {
                  MI.setOpcode(425);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // STREXB
                }
                break;
              case 1:
                // Check Inst{11-8}  && Inst{6-5}  && Inst{3-0} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 15) {
                  MI.setOpcode(181);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDREXB
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(428);
              if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STRH
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(184);
              if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRH
            }
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
              MI.setOpcode(177);
              if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRD
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(189);
              if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRSB
            }
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
              MI.setOpcode(421);
              if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STRD
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(194);
              if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRSH
            }
          }
          break;
        }
        break;
        break;
      }
      break;
    case 1:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{24-23} ...
        switch (fieldFromInstruction32(insn, 23, 2)) {
        case 0:
          // Check Inst{22} ...
          switch (fieldFromInstruction32(insn, 22, 1)) {
          case 0:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(132);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // EORrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(133);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // EORrsi
              }
            break;
          case 1:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(311);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // RSBrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(312);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // RSBrsi
              }
            break;
          }
          break;
        case 1:
          // Check Inst{22} ...
          switch (fieldFromInstruction32(insn, 22, 1)) {
          case 0:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(17);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // ADCrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(18);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // ADCrsi
              }
            break;
          case 1:
            // Check Inst{11-5} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(315);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // RSCrr
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(316);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // RSCrsi
              }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{7-5} ...
            switch (fieldFromInstruction32(insn, 5, 3)) {
            case 0:
              // Check Inst{15-8} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 8, 8) == 240) {
                MI.setOpcode(250);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeMSRMask(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // MSR
              }
              break;
            case 1:
              // Check Inst{22-22}  && Inst{19-8} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 8, 12) == 4095) {
                MI.setOpcode(106);
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // BXJ
              }
              break;
            case 4:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(350);
                  if (!Check(S, DecodeSMLAInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLAWB
                }
              case 1:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(364);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMULBB
                }
              }
              break;
            case 5:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(370);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMULWB
                }
              case 1:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(368);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMULTB
                }
              }
              break;
            case 6:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(351);
                  if (!Check(S, DecodeSMLAInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLAWT
                }
              case 1:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(365);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMULBT
                }
              }
              break;
            case 7:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(371);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMULWT
                }
              case 1:
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV5TEOps)) {
                  MI.setOpcode(369);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMULTT
                }
              }
              break;
            }
            break;
          case 1:
            // Check Inst{22} ...
            switch (fieldFromInstruction32(insn, 22, 1)) {
            case 0:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction32(insn, 12, 4)) {
              case 0:
                // Check Inst{11-5} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 5, 7) == 0) {
                  MI.setOpcode(470);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // TEQrr
                }
                else
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(471);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                    if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // TEQrsi
                  }
                break;
              }
              break;
            case 1:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction32(insn, 12, 4)) {
              case 0:
                // Check Inst{11-5} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 5, 7) == 0) {
                  MI.setOpcode(117);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // CMNzrr
                }
                else
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(118);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                    if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // CMNzrsi
                  }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{22} ...
          switch (fieldFromInstruction32(insn, 22, 1)) {
          case 0:
            // Check Inst{20-5}  && Inst{3-0} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 5, 16) == 1920 && fieldFromInstruction32(insn, 0, 4) == 14) {
              MI.setOpcode(227);
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MOVPCLR
            }
            else
              // Check Inst{11-5} ...
              switch (fieldFromInstruction32(insn, 5, 7)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 16, 4) == 0) {
                  MI.setOpcode(238);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 20, 1);
                  if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // MOVr
                }
                else
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(239);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodetcGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodetcGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 20, 1);
                    if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // MOVr_TC
                  }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{19-16} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(240);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // MOVsi
              }
              break;
            break;
          case 1:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              // Check Inst{11-5} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 5, 7) == 0) {
                MI.setOpcode(256);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // MVNr
              }
              else
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(257);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                  if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 20, 1);
                  if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // MVNsi
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{24-22} ...
          switch (fieldFromInstruction32(insn, 22, 3)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(134);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // EORrsr
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(313);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // RSBrsr
            }
          case 2:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(19);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // ADCrsr
            }
          case 3:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(317);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // RSCrsr
            }
          case 4:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{6-5} ...
              switch (fieldFromInstruction32(insn, 5, 2)) {
              case 0:
                // Check Inst{19-8} ...
                switch (fieldFromInstruction32(insn, 8, 12)) {
                case 4095:
                  // Check Inst{3-0} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV4TOps) &&
                      fieldFromInstruction32(insn, 0, 4) == 14) {
                    MI.setOpcode(108);
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // BX_RET
                  }
                  else
                    // Check Inst{31-28} for singleton decoding...
                    if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV4TOps) &&
                        fieldFromInstruction32(insn, 28, 4) == 14) {
                      MI.setOpcode(105);
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // BX
                    }
                    else
                      if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV4TOps)) {
                        MI.setOpcode(109);
                        tmp = fieldFromInstruction32(insn, 0, 4);
                        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        tmp = fieldFromInstruction32(insn, 28, 4);
                        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        return S; // BX_pred
                      }
                  break;
                }
                break;
              case 1:
                // Check Inst{19-8} ...
                switch (fieldFromInstruction32(insn, 8, 12)) {
                case 4095:
                  // Check Inst{31-28} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 28, 4) == 14) {
                    MI.setOpcode(92);
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // BLX
                  }
                  else
                    if (!(Bits & ARM::ModeThumb)) {
                      MI.setOpcode(93);
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // BLX_pred
                    }
                  break;
                }
                break;
              case 2:
                // Check Inst{11-8} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 0) {
                  MI.setOpcode(288);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // QSUB
                }
                break;
              case 3:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(90);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 12) << 4);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // BKPT
                }
              }
              break;
            case 1:
              // Check Inst{15-12} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 12, 4) == 0) {
                MI.setOpcode(472);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // TEQrsr
              }
              break;
            }
            break;
          case 5:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{6-5} ...
              switch (fieldFromInstruction32(insn, 5, 2)) {
              case 0:
                // Check Inst{19-16}  && Inst{11-8} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 16, 4) == 15 && fieldFromInstruction32(insn, 8, 4) == 15) {
                  MI.setOpcode(115);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // CLZ
                }
                break;
              case 2:
                // Check Inst{11-8} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 0) {
                  MI.setOpcode(286);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // QDSUB
                }
                break;
              case 3:
                // Check Inst{19-8} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 12) == 0) {
                  MI.setOpcode(335);
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMC
                }
                break;
              }
              break;
            case 1:
              // Check Inst{15-12} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 12, 4) == 0) {
                MI.setOpcode(119);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // CMNzrsr
              }
              break;
            }
            break;
          case 6:
            // Check Inst{19-16} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 16, 4) == 0) {
              MI.setOpcode(241);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MOVsr
            }
            break;
          case 7:
            // Check Inst{19-16} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 16, 4) == 0) {
              MI.setOpcode(258);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!Check(S, DecodeSORegRegOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MVNsr
            }
            break;
          }
          break;
        case 1:
          // Check Inst{6-5} ...
          switch (fieldFromInstruction32(insn, 5, 2)) {
          case 0:
            // Check Inst{24-22} ...
            switch (fieldFromInstruction32(insn, 22, 3)) {
            case 0:
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                MI.setOpcode(218);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // MLA
              }
            case 1:
              // Check Inst{20-20} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                  fieldFromInstruction32(insn, 20, 1) == 0) {
                MI.setOpcode(220);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // MLS
              }
              break;
            case 2:
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                MI.setOpcode(491);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UMLAL
              }
            case 3:
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                MI.setOpcode(340);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SMLAL
              }
            case 6:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15) {
                  MI.setOpcode(426);
                  if (!Check(S, DecodeDoubleRegStore(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // STREXD
                }
                break;
              case 1:
                // Check Inst{11-8}  && Inst{3-0} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
                  MI.setOpcode(182);
                  if (!Check(S, DecodeDoubleRegLoad(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDREXD
                }
                break;
              }
              break;
            case 7:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15) {
                  MI.setOpcode(427);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // STREXH
                }
                break;
              case 1:
                // Check Inst{11-8}  && Inst{3-0} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
                  MI.setOpcode(183);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDREXH
                }
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  // Check Inst{11-8} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 8, 4) == 0) {
                    MI.setOpcode(430);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                    if (!Check(S, DecodePostIdxReg(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // STRHTr
                  }
                  break;
                case 1:
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(429);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // STRHTi
                  }
                }
                break;
              case 1:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(432);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // STRH_PRE
                }
              }
              break;
            case 1:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  // Check Inst{11-8} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 8, 4) == 0) {
                    MI.setOpcode(186);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                    if (!Check(S, DecodePostIdxReg(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // LDRHTr
                  }
                  break;
                case 1:
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(185);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // LDRHTi
                  }
                }
                break;
              case 1:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(188);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDRH_PRE
                }
              }
              break;
            }
            break;
          case 2:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{24-24} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 24, 1) == 1) {
                MI.setOpcode(179);
                if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // LDRD_PRE
              }
              break;
            case 1:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  // Check Inst{11-8} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 8, 4) == 0) {
                    MI.setOpcode(191);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                    if (!Check(S, DecodePostIdxReg(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // LDRSBTr
                  }
                  break;
                case 1:
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(190);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // LDRSBTi
                  }
                }
                break;
              case 1:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(193);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDRSB_PRE
                }
              }
              break;
            }
            break;
          case 3:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{24-24} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) &&
                  fieldFromInstruction32(insn, 24, 1) == 1) {
                MI.setOpcode(423);
                if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // STRD_PRE
              }
              break;
            case 1:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  // Check Inst{11-8} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) &&
                      fieldFromInstruction32(insn, 8, 4) == 0) {
                    MI.setOpcode(196);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                    if (!Check(S, DecodePostIdxReg(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // LDRSHTr
                  }
                  break;
                case 1:
                  if (!(Bits & ARM::ModeThumb)) {
                    MI.setOpcode(195);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                    tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // LDRSHTi
                  }
                }
                break;
              case 1:
                if (!(Bits & ARM::ModeThumb)) {
                  MI.setOpcode(198);
                  if (!Check(S, DecodeAddrMode3Instruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // LDRSH_PRE
                }
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{21} ...
    switch (fieldFromInstruction32(insn, 21, 1)) {
    case 0:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(31);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // ANDri
          }
        case 1:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(448);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // SUBri
          }
        case 2:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(24);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // ADDri
          }
        case 3:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(321);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // SBCri
          }
        default:
          break; // fallthrough
        }
        // Check Inst{20-16} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 16, 5) == 15) {
          MI.setOpcode(30);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 2) << 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // ADR
        }
        break;
        break;
      case 1:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops)) {
              MI.setOpcode(235);
              if (!Check(S, DecodeArmMOVTWInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MOVi16
            }
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 12, 4) == 0) {
              MI.setOpcode(475);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // TSTri
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops)) {
              MI.setOpcode(229);
              if (!Check(S, DecodeArmMOVTWInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MOVTi16
            }
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 12, 4) == 0) {
              MI.setOpcode(120);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // CMPri
            }
            break;
          }
          break;
        case 2:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(260);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // ORRri
          }
        case 3:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(86);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // BICri
          }
        }
        break;
      }
      break;
    case 1:
      // Check Inst{24-23} ...
      switch (fieldFromInstruction32(insn, 23, 2)) {
      case 0:
        // Check Inst{22} ...
        switch (fieldFromInstruction32(insn, 22, 1)) {
        case 0:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(131);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // EORri
          }
        case 1:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(310);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // RSBri
          }
        }
        break;
      case 1:
        // Check Inst{22} ...
        switch (fieldFromInstruction32(insn, 22, 1)) {
        case 0:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(16);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // ADCri
          }
        case 1:
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(314);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // RSCri
          }
        }
        break;
      case 2:
        // Check Inst{15-12} ...
        switch (fieldFromInstruction32(insn, 12, 4)) {
        case 0:
          // Check Inst{22} ...
          switch (fieldFromInstruction32(insn, 22, 1)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 20, 1) == 1) {
              MI.setOpcode(469);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // TEQri
            }
            break;
          case 1:
            // Check Inst{20-20} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 20, 1) == 1) {
              MI.setOpcode(116);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // CMNzri
            }
            break;
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{11-0} ...
            switch (fieldFromInstruction32(insn, 0, 12)) {
            case 0:
              // Check Inst{22-22}  && Inst{19-16} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                  fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(259);
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // NOP
              }
              break;
            case 1:
              // Check Inst{22-22}  && Inst{19-16} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                  fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(2281);
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // YIELD
              }
              break;
            case 2:
              // Check Inst{22-22}  && Inst{19-16} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                  fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(2279);
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // WFE
              }
              break;
            case 3:
              // Check Inst{22-22}  && Inst{19-16} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                  fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(2280);
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // WFI
              }
              break;
            case 4:
              // Check Inst{22-22}  && Inst{19-16} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                  fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(328);
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SEV
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{22-22}  && Inst{19-16}  && Inst{11-4} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV7Ops) &&
                fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0 && fieldFromInstruction32(insn, 4, 8) == 15) {
              MI.setOpcode(128);
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // DBG
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(251);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeMSRMask(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 12);
                if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // MSRi
              }
            break;
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{22} ...
          switch (fieldFromInstruction32(insn, 22, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(234);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MOVi
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(255);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!Check(S, DecodeSOImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MVNi
            }
          }
          break;
        case 15:
          // Check Inst{15-4} ...
          switch (fieldFromInstruction32(insn, 4, 12)) {
          case 2292:
            // Check Inst{31-28}  && Inst{22-22}  && Inst{20-20} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureDB) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1) {
              MI.setOpcode(2338);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeMemBarrierOption(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2DSB
            }
            break;
          case 2293:
            // Check Inst{31-28}  && Inst{22-22}  && Inst{20-20} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureDB) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1) {
              MI.setOpcode(2337);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeMemBarrierOption(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2DMB
            }
            break;
          case 2294:
            // Check Inst{31-28}  && Inst{22-22}  && Inst{20-20} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDB) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1) {
              MI.setOpcode(2342);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeMemBarrierOption(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ISB
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{22-20} ...
    switch (fieldFromInstruction32(insn, 20, 3)) {
    case 0:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(436);
          if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STR_POST_IMM
        }
      case 1:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(440);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
          if (!Check(S, DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STRi12
        }
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(201);
          if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDR_POST_IMM
        }
      case 1:
        // Check Inst{31-28}  && Inst{15-12} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV7Ops) && (Bits & ARM::FeatureMP) &&
            fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
          MI.setOpcode(275);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
          if (!Check(S, DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // PLDWi12
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(206);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!Check(S, DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDRi12
          }
        break;
      }
      break;
    case 2:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(434);
          if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STRT_POST_IMM
        }
      case 1:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(438);
          if (!Check(S, DecodeSTRPreImm(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STR_PRE_IMM
        }
      }
      break;
    case 3:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(199);
          if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDRT_POST_IMM
        }
      case 1:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(203);
          if (!Check(S, DecodeLDRPreImm(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDR_PRE_IMM
        }
      }
      break;
    case 4:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(413);
          if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STRB_POST_IMM
        }
      case 1:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(417);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
          if (!Check(S, DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STRBi12
        }
      }
      break;
    case 5:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{31-28}  && Inst{15-12} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV7Ops) &&
            fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
          MI.setOpcode(279);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
          if (!Check(S, DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // PLIi12
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(171);
            if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDRB_POST_IMM
          }
        break;
      case 1:
        // Check Inst{31-28}  && Inst{15-12} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
          MI.setOpcode(277);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
          if (!Check(S, DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // PLDi12
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(175);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!Check(S, DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDRBi12
          }
        break;
      }
      break;
    case 6:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(411);
          if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STRBT_POST_IMM
        }
      case 1:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(415);
          if (!Check(S, DecodeSTRPreImm(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STRB_PRE_IMM
        }
      }
      break;
    case 7:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(169);
          if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDRBT_POST_IMM
        }
      case 1:
        // Check Inst{31-28}  && Inst{23-23}  && Inst{19-0} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV7Ops) &&
            fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 0, 20) == 1044511) {
          MI.setOpcode(114);
          return S; // CLREX
        }
        else
          // Check Inst{19-4} ...
          switch (fieldFromInstruction32(insn, 4, 16)) {
          case 65284:
            // Check Inst{31-28}  && Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::FeatureDB) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(130);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeMemBarrierOption(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // DSB
            }
            break;
          case 65285:
            // Check Inst{31-28}  && Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::FeatureDB) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(129);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeMemBarrierOption(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // DMB
            }
            break;
          case 65286:
            // Check Inst{31-28}  && Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::FeatureDB) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(138);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeMemBarrierOption(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // ISB
            }
            break;
          default:
            break; // fallthrough
          }
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(173);
            if (!Check(S, DecodeLDRPreImm(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDRB_PRE_IMM
          }
        break;
      }
      break;
    }
    break;
  case 3:
    // Check Inst{22-21} ...
    switch (fieldFromInstruction32(insn, 21, 2)) {
    case 0:
      // Check Inst{20} ...
      switch (fieldFromInstruction32(insn, 20, 1)) {
      case 0:
        // Check Inst{24} ...
        switch (fieldFromInstruction32(insn, 24, 1)) {
        case 0:
          // Check Inst{23-23}  && Inst{11-4} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
              fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 8) == 251) {
            MI.setOpcode(326);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // SEL
          }
          else
            // Check Inst{9-4} ...
            switch (fieldFromInstruction32(insn, 4, 6)) {
            case 7:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(459);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SXTB16
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(456);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 10, 2);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SXTAB16
                  }
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{6-4} ...
            switch (fieldFromInstruction32(insn, 4, 3)) {
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 23, 1) == 1) {
                MI.setOpcode(273);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 7, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // PKHBT
              }
              break;
            case 5:
              // Check Inst{23-23} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 23, 1) == 1) {
                MI.setOpcode(274);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 7, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // PKHTB
              }
              break;
            default:
              break; // fallthrough
            }
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(437);
              if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STR_POST_REG
            }
            break;
          break;
        case 1:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(443);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!Check(S, DecodeSORegMemOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STRrs
            }
          case 1:
            // Check Inst{7-5} ...
            switch (fieldFromInstruction32(insn, 5, 3)) {
            case 0:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(362);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMUAD
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(338);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMLAD
                  }
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(501);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // USAD8
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(502);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // USADA8
                  }
                break;
              }
              break;
            case 1:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(363);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMUADX
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(339);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMLADX
                  }
                break;
              }
              break;
            case 2:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(372);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMUSD
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(352);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMLSD
                  }
                break;
              }
              break;
            case 3:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(373);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMUSDX
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(353);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMLSDX
                  }
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{24} ...
        switch (fieldFromInstruction32(insn, 24, 1)) {
        case 0:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction32(insn, 4, 8)) {
          case 241:
            // Check Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(318);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SADD16
            }
            break;
          case 243:
            // Check Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(320);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SASX
            }
            break;
          case 245:
            // Check Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(384);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SSAX
            }
            break;
          case 247:
            // Check Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(385);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SSUB16
            }
            break;
          case 249:
            // Check Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(319);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SADD8
            }
            break;
          case 255:
            // Check Inst{23-23} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(386);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SSUB8
            }
            break;
          default:
            break; // fallthrough
          }
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(202);
            if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDR_POST_REG
          }
          break;
        case 1:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{31-28}  && Inst{15-12} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV7Ops) && (Bits & ARM::FeatureMP) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(276);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!Check(S, DecodeSORegMemOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // PLDWrs
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(207);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
                tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
                if (!Check(S, DecodeSORegMemOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // LDRrs
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{24} ...
          switch (fieldFromInstruction32(insn, 24, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(435);
              if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STRT_POST_REG
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(439);
              if (!Check(S, DecodeSTRPreReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STR_PRE_REG
            }
          }
          break;
        case 1:
          // Check Inst{24} ...
          switch (fieldFromInstruction32(insn, 24, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(200);
              if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRT_POST_REG
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(204);
              if (!Check(S, DecodeLDRPreReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDR_PRE_REG
            }
          }
          break;
        }
        break;
      case 1:
        // Check Inst{24-23} ...
        switch (fieldFromInstruction32(insn, 23, 2)) {
        case 0:
          // Check Inst{11-5} ...
          switch (fieldFromInstruction32(insn, 5, 7)) {
          case 120:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(282);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // QADD16
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(329);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SHADD16
              }
            }
            break;
          case 121:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(284);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // QASX
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(331);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SHASX
              }
            }
            break;
          case 122:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(287);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // QSAX
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(332);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SHSAX
              }
            }
            break;
          case 123:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(289);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // QSUB16
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(333);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SHSUB16
              }
            }
            break;
          case 124:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(283);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // QADD8
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(330);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SHADD8
              }
            }
            break;
          case 127:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(290);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // QSUB8
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(334);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SHSUB8
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(382);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 6, 1) << 5);
              tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // SSAT
            }
          case 1:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(458);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SXTB
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(455);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 10, 2);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SXTAB
                  }
                break;
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(460);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SXTH
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(457);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 10, 2);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SXTAH
                  }
                break;
              }
              break;
            case 12:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-10} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 10, 2) == 3) {
                  MI.setOpcode(383);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SSAT16
                }
                break;
              case 1:
                // Check Inst{19-16}  && Inst{11-10} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 16, 4) == 15 && fieldFromInstruction32(insn, 10, 2) == 3) {
                  MI.setOpcode(292);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // REV
                }
                break;
              }
              break;
            case 14:
              // Check Inst{20-16}  && Inst{11-10} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 16, 5) == 31 && fieldFromInstruction32(insn, 10, 2) == 3) {
                MI.setOpcode(293);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // REV16
              }
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{6-5} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
              fieldFromInstruction32(insn, 5, 2) == 2) {
            MI.setOpcode(325);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 7, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // SBFX
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{9-4} ...
          switch (fieldFromInstruction32(insn, 4, 6)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 1:
              // Check Inst{19-16} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(512);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 10, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UXTB16
              }
              else
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                  MI.setOpcode(509);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // UXTAB16
                }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(414);
            if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STRB_POST_REG
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction32(insn, 23, 1)) {
          case 0:
            // Check Inst{11-4} ...
            switch (fieldFromInstruction32(insn, 4, 8)) {
            case 241:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(479);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UADD16
              }
            case 243:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(481);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UASX
              }
            case 245:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(505);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // USAX
              }
            case 247:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(506);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // USUB16
              }
            case 249:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(480);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UADD8
              }
            case 255:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(507);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // USUB8
              }
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{31-28}  && Inst{15-12}  && Inst{4-4} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV7Ops) &&
              fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(280);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!Check(S, DecodeSORegMemOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // PLIrs
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(172);
              if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRB_POST_REG
            }
          break;
          break;
        }
        break;
      case 1:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(420);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!Check(S, DecodeSORegMemOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STRBrs
            }
          case 1:
            // Check Inst{31-28}  && Inst{15-12} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(278);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!Check(S, DecodeSORegMemOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // PLDrs
            }
            else
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(176);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
                tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
                if (!Check(S, DecodeSORegMemOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // LDRBrs
              }
            break;
          }
          break;
        case 1:
          // Check Inst{6-5} ...
          switch (fieldFromInstruction32(insn, 5, 2)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{7-7} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 7, 1) == 0) {
                  MI.setOpcode(343);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // SMLALD
                }
                break;
              case 1:
                // Check Inst{7} ...
                switch (fieldFromInstruction32(insn, 7, 1)) {
                case 0:
                  // Check Inst{15-12} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                      fieldFromInstruction32(insn, 12, 4) == 15) {
                    MI.setOpcode(360);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMMUL
                  }
                  else
                    if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                      MI.setOpcode(356);
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 8, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // SMMLA
                    }
                  break;
                }
                break;
              }
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                  fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(84);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 5) << 5);
                if (!Check(S, DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // BFC
              }
              else
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops)) {
                  MI.setOpcode(85);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 5) << 5);
                  if (!Check(S, DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // BFI
                }
              break;
            }
            break;
          case 1:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23}  && Inst{7-7} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 7, 1) == 0) {
                MI.setOpcode(344);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SMLALDX
              }
              break;
            case 1:
              // Check Inst{7} ...
              switch (fieldFromInstruction32(insn, 7, 1)) {
              case 0:
                // Check Inst{23} ...
                switch (fieldFromInstruction32(insn, 23, 1)) {
                case 0:
                  // Check Inst{15-12} for singleton decoding...
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                      fieldFromInstruction32(insn, 12, 4) == 15) {
                    MI.setOpcode(361);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // SMMULR
                  }
                  else
                    if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                      MI.setOpcode(357);
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 8, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // SMMLAR
                    }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 2:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              // Check Inst{23-23}  && Inst{20-20} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 0) {
                MI.setOpcode(354);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SMLSLD
              }
              break;
            case 1:
              // Check Inst{23-23}  && Inst{20-20} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1) {
                MI.setOpcode(358);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SMMLS
              }
              break;
            }
            break;
          case 3:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              // Check Inst{23-23}  && Inst{20-20} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 0) {
                MI.setOpcode(355);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SMLSLDX
              }
              break;
            case 1:
              // Check Inst{23-23}  && Inst{20-20} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1) {
                MI.setOpcode(359);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // SMMLSR
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{24} ...
          switch (fieldFromInstruction32(insn, 24, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(412);
              if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STRBT_POST_REG
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(416);
              if (!Check(S, DecodeSTRPreReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STRB_PRE_REG
            }
          }
          break;
        case 1:
          // Check Inst{24} ...
          switch (fieldFromInstruction32(insn, 24, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(170);
              if (!Check(S, DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRBT_POST_REG
            }
          case 1:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(174);
              if (!Check(S, DecodeLDRPreReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDRB_PRE_REG
            }
          }
          break;
        }
        break;
      case 1:
        // Check Inst{24-23} ...
        switch (fieldFromInstruction32(insn, 23, 2)) {
        case 0:
          // Check Inst{11-5} ...
          switch (fieldFromInstruction32(insn, 5, 7)) {
          case 120:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(495);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UQADD16
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(483);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UHADD16
              }
            }
            break;
          case 121:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(497);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UQASX
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(485);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UHASX
              }
            }
            break;
          case 122:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(498);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UQSAX
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(486);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UHSAX
              }
            }
            break;
          case 123:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(499);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UQSUB16
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(487);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UHSUB16
              }
            }
            break;
          case 124:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(496);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UQADD8
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(484);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UHADD8
              }
            }
            break;
          case 127:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(500);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UQSUB8
              }
            case 1:
              if (!(Bits & ARM::ModeThumb)) {
                MI.setOpcode(488);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // UHSUB8
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(503);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 6, 1) << 5);
              tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // USAT
            }
          case 1:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(511);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // UXTB
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(508);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 10, 2);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // UXTAB
                  }
                break;
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                    fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(513);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // UXTH
                }
                else
                  if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                    MI.setOpcode(510);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 10, 2);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // UXTAH
                  }
                break;
              }
              break;
            case 12:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-10} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) &&
                    fieldFromInstruction32(insn, 10, 2) == 3) {
                  MI.setOpcode(504);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // USAT16
                }
                break;
              case 1:
                // Check Inst{19-16}  && Inst{11-10} for singleton decoding...
                if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops) &&
                    fieldFromInstruction32(insn, 16, 4) == 15 && fieldFromInstruction32(insn, 10, 2) == 3) {
                  MI.setOpcode(291);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // RBIT
                }
                break;
              }
              break;
            case 14:
              // Check Inst{20-16}  && Inst{11-10} for singleton decoding...
              if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
                  fieldFromInstruction32(insn, 16, 5) == 31 && fieldFromInstruction32(insn, 10, 2) == 3) {
                MI.setOpcode(294);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // REVSH
              }
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{6-5} ...
          switch (fieldFromInstruction32(insn, 5, 2)) {
          case 2:
            if (!(Bits & ARM::ModeThumb) && (Bits & ARM::HasV6T2Ops)) {
              MI.setOpcode(482);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 7, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 16, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // UBFX
            }
          case 3:
            // Check Inst{31-28}  && Inst{20-7}  && Inst{3-0} for singleton decoding...
            if (!(Bits & ARM::ModeThumb) &&
                fieldFromInstruction32(insn, 28, 4) == 14 && fieldFromInstruction32(insn, 7, 14) == 16317 && fieldFromInstruction32(insn, 0, 4) == 14) {
              MI.setOpcode(474);
              return S; // TRAP
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 4:
    // Check Inst{24-20} ...
    switch (fieldFromInstruction32(insn, 20, 5)) {
    case 0:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(403);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMDA
      }
    case 1:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(295);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEDA
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(160);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMDA
        }
      break;
    case 2:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(404);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMDA_UPD
      }
    case 3:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(296);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEDA_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(161);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMDA_UPD
        }
      break;
    case 4:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(374);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSDA
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2290);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMDA
        }
      break;
    case 5:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2282);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMDA
      }
    case 6:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(375);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSDA_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2291);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMDA_UPD
        }
      break;
    case 7:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2283);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMDA_UPD
      }
    case 8:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(407);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMIA
      }
    case 9:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(299);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEIA
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(164);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMIA
        }
      break;
    case 10:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(408);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMIA_UPD
      }
    case 11:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(300);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEIA_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(166);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMIA_UPD
        }
      break;
    case 12:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(378);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSIA
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2294);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMIA
        }
      break;
    case 13:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2286);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMIA
      }
    case 14:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(379);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSIA_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2295);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMIA_UPD
        }
      break;
    case 15:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2287);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMIA_UPD
      }
    case 16:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(405);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMDB
      }
    case 17:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(297);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEDB
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(162);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMDB
        }
      break;
    case 18:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(406);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMDB_UPD
      }
    case 19:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(298);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEDB_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(163);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMDB_UPD
        }
      break;
    case 20:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(376);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSDB
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2292);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMDB
        }
      break;
    case 21:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2284);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMDB
      }
    case 22:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(377);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSDB_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2293);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMDB_UPD
        }
      break;
    case 23:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2285);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMDB_UPD
      }
    case 24:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(409);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMIB
      }
    case 25:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(301);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEIB
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(167);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMIB
        }
      break;
    case 26:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(410);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // STMIB_UPD
      }
    case 27:
      // Check Inst{31-28}  && Inst{15-0} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
        MI.setOpcode(302);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // RFEIB_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(168);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDMIB_UPD
        }
      break;
    case 28:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(380);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSIB
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2296);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMIB
        }
      break;
    case 29:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2288);
        tmp = fieldFromInstruction32(insn, 16, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 0, 16);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMIB
      }
    case 30:
      // Check Inst{31-28}  && Inst{19-5} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
        MI.setOpcode(381);
        tmp = fieldFromInstruction32(insn, 0, 5);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // SRSIB_UPD
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(2297);
          if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // sysSTMIB_UPD
        }
      break;
    case 31:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(2289);
        if (!Check(S, DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // sysLDMIB_UPD
      }
    }
    break;
  case 5:
    // Check Inst{24} ...
    switch (fieldFromInstruction32(insn, 24, 1)) {
    case 0:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(111);
        if (!Check(S, DecodeBranchImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // Bcc
      }
    case 1:
      // Check Inst{31-28} for singleton decoding...
      if (!(Bits & ARM::ModeThumb) &&
          fieldFromInstruction32(insn, 28, 4) == 14) {
        MI.setOpcode(91);
        if (!Check(S, DecodeBranchImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // BL
      }
      else
        if (!(Bits & ARM::ModeThumb)) {
          MI.setOpcode(97);
          if (!Check(S, DecodeBranchImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // BL_pred
        }
      break;
    default:
      break; // fallthrough
    }
    // Check Inst{31-28} for singleton decoding...
    if (!(Bits & ARM::ModeThumb) &&
        fieldFromInstruction32(insn, 28, 4) == 15) {
      MI.setOpcode(94);
      tmp = 0;
      tmp |= (fieldFromInstruction32(insn, 0, 24) << 1);
      tmp |= (fieldFromInstruction32(insn, 24, 1) << 0);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // BLXi
    }
    break;
    break;
  case 6:
    // Check Inst{22-20} ...
    switch (fieldFromInstruction32(insn, 20, 3)) {
    case 0:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 1:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(392);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STC2_OPTION
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(400);
              if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STC_OPTION
            }
          break;
        }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(391);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STC2_OFFSET
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(399);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STC_OFFSET
          }
        break;
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 1:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(149);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDC2_OPTION
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(157);
              if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDC_OPTION
            }
          break;
        }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(148);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDC2_OFFSET
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(156);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDC_OFFSET
          }
        break;
      }
      break;
    case 2:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(393);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STC2_POST
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(401);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STC_POST
          }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(394);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STC2_PRE
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(402);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STC_PRE
          }
        break;
      }
      break;
    case 3:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(150);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDC2_POST
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(158);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDC_POST
          }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(151);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDC2_PRE
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(159);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDC_PRE
          }
        break;
      }
      break;
    case 4:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(217);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // MCRR2
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(216);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 4, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MCRR
            }
          break;
        case 1:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(388);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STC2L_OPTION
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(396);
              if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // STCL_OPTION
            }
          break;
        }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(387);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STC2L_OFFSET
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(395);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STCL_OFFSET
          }
        break;
      }
      break;
    case 5:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(247);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // MRRC2
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(246);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 4, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MRRC
            }
          break;
        case 1:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(145);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDC2L_OPTION
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(153);
              if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // LDCL_OPTION
            }
          break;
        }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(144);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDC2L_OFFSET
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(152);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDCL_OFFSET
          }
        break;
      }
      break;
    case 6:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(389);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STC2L_POST
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(397);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STCL_POST
          }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(390);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // STC2L_PRE
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(398);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // STCL_PRE
          }
        break;
      }
      break;
    case 7:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(146);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDC2L_POST
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(154);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDCL_POST
          }
        break;
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(147);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // LDC2L_PRE
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(155);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // LDCL_PRE
          }
        break;
      }
      break;
    }
    break;
  case 7:
    // Check Inst{24} ...
    switch (fieldFromInstruction32(insn, 24, 1)) {
    case 0:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{31-28} for singleton decoding...
        if (!(Bits & ARM::ModeThumb) &&
            fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(113);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // CDP2
        }
        else
          if (!(Bits & ARM::ModeThumb)) {
            MI.setOpcode(112);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // CDP
          }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(215);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // MCR2
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(214);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 21, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MCR
            }
          break;
        case 1:
          // Check Inst{31-28} for singleton decoding...
          if (!(Bits & ARM::ModeThumb) &&
              fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(245);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // MRC2
          }
          else
            if (!(Bits & ARM::ModeThumb)) {
              MI.setOpcode(244);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 21, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 16, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // MRC
            }
          break;
        }
        break;
      }
      break;
    case 1:
      if (!(Bits & ARM::ModeThumb)) {
        MI.setOpcode(452);
        tmp = fieldFromInstruction32(insn, 0, 24);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // SVC
      }
    }
    break;
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeNEONDataInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{4} ...
  switch (fieldFromInstruction32(insn, 4, 1)) {
  case 0:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(776);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(771);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(572);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDLsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(782);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(777);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(575);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDLuv8i16
          }
          break;
        }
        break;
      case 1:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1653);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1648);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(579);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDWsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1659);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1654);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(582);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDWuv8i16
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(788);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(783);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(2196);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBLsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(794);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(789);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(2199);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBLuv8i16
          }
          break;
        }
        break;
      case 3:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(652);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(647);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(2203);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBWsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(658);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(653);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(2206);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBWuv8i16
          }
          break;
        }
        break;
      case 4:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1747);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1740);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(569);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDHNv8i8
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1755);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1748);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1629);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VRADDHNv8i8
          }
          break;
        }
        break;
      case 5:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1667);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1660);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(516);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABALsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1675);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1668);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(519);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABALuv8i16
          }
          break;
        }
        break;
      case 6:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1263);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1258);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(2193);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBHNv8i8
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1269);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1264);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1719);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VRSUBHNv8i8
          }
          break;
        }
        break;
      case 7:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(545);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDsv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(540);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(534);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABDLsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(551);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDuv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(546);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(537);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABDLuv8i16
          }
          break;
        }
        break;
      case 8:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(592);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(585);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1291);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMLALsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2216);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv8i8
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2209);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1294);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMLALuv8i16
          }
          break;
        }
        break;
      case 9:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1309);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLAv8i8
            }
          case 486:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1335);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSv8i8
            }
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1304);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLAv16i8
            }
          case 486:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1330);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSv16i8
            }
          }
          break;
        }
        break;
      case 10:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1461);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VPMAXs8
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1317);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMLSLsv8i16
          }
          break;
        case 486:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1464);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VPMAXu8
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1320);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMLSLuv8i16
          }
          break;
        }
        break;
      case 12:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1379);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMULLsv8i16
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1382);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMULLuv8i16
          }
          break;
        }
        break;
      case 13:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(583);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDfd
            }
          case 486:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1454);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VPADDf
            }
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 23, 9) == 484) {
            MI.setOpcode(584);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDfq
          }
          break;
        }
        break;
      case 14:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(607);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCEQfd
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(608);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCEQfq
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1372);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMULLp
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(623);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGEfd
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(624);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGEfq
            }
          }
          break;
        }
        break;
      case 15:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1256);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXfd
            }
          case 486:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1458);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VPMAXf
            }
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 23, 9) == 484) {
            MI.setOpcode(1257);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMAXfq
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(773);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(775);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(571);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDLsv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1301);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLAslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(779);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(781);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(574);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDLuv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1303);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLAslv8i16
            }
          }
          break;
        }
        break;
      case 1:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1650);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1652);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(578);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDWsv4i32
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1656);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1658);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(581);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDWuv4i32
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(785);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(787);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2195);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBLsv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1286);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLALslsv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(791);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(793);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2198);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBLuv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1288);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLALsluv4i16
            }
          }
          break;
        }
        break;
      case 3:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(649);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(651);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2202);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBWsv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1495);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMLALslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(655);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(657);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(2205);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBWuv4i32
          }
          break;
        }
        break;
      case 4:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1744);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1746);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(568);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDHNv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1327);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1752);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1754);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1628);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRADDHNv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1329);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSslv8i16
            }
          }
          break;
        }
        break;
      case 5:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1664);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1666);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(515);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABALsv4i32
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1672);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1674);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(518);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABALuv4i32
          }
          break;
        }
        break;
      case 6:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1260);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1262);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2192);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBHNv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1312);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSLslsv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1266);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1268);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1718);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSUBHNv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1314);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSLsluv4i16
            }
          }
          break;
        }
        break;
      case 7:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(542);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDsv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(544);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(533);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDLsv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1499);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMLSLslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(548);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDuv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(550);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(536);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABDLuv4i32
          }
          break;
        }
        break;
      case 8:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(589);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(591);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1290);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLALsv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1391);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2213);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2215);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1293);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLALuv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1393);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULslv8i16
            }
          }
          break;
        }
        break;
      case 9:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1306);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLAv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1308);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLAv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1497);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VQDMLALv4i32
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1332);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1334);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSv8i16
            }
          }
          break;
        }
        break;
      case 10:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1459);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VPMAXs16
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1316);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSLsv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1374);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULLslsv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1462);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VPMAXu16
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1319);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSLuv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1376);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULLsluv4i16
            }
          }
          break;
        }
        break;
      case 11:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1507);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMULHv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1509);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMULHv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1501);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMLSLv4i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1511);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMULLslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1534);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQRDMULHv4i16
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1536);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQRDMULHv8i16
            }
          }
          break;
        }
        break;
      case 12:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1378);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULLsv4i32
            }
          case 487:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1381);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULLuv4i32
            }
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1503);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMULHslv4i16
            }
          case 487:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1505);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMULHslv8i16
            }
          }
          break;
        }
        break;
      case 13:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 23, 9) == 485) {
            MI.setOpcode(1513);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VQDMULLv4i32
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1530);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQRDMULHslv4i16
            }
          case 487:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1532);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!Check(S, DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQRDMULHslv8i16
            }
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(772);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(774);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(570);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDLsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1300);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLAslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(778);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(780);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHADDuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(573);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDLuv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1302);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLAslv4i32
            }
          }
          break;
        }
        break;
      case 1:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1649);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1651);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(577);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDWsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1298);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLAslfd
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1655);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1657);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRHADDuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(580);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDWuv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1299);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLAslfq
            }
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(784);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(786);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2194);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBLsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1285);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLALslsv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(790);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(792);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VHSUBuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2197);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBLuv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1287);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLALsluv2i32
            }
          }
          break;
        }
        break;
      case 3:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(648);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(650);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2201);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBWsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1494);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMLALslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(654);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(656);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCGTuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(2204);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBWuv2i64
          }
          break;
        }
        break;
      case 4:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1742);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1745);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(567);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDHNv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1326);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1750);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1753);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1627);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRADDHNv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1328);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSslv4i32
            }
          }
          break;
        }
        break;
      case 5:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1662);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1665);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(514);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABALsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1324);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSslfd
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1670);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1673);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(517);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABALuv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1325);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSslfq
            }
          }
          break;
        }
        break;
      case 6:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1259);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1261);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2191);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBHNv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1311);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSLslsv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1265);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1267);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMAXuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1717);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSUBHNv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1313);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMLSLsluv2i32
            }
          }
          break;
        }
        break;
      case 7:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(541);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDsv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(543);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(532);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDLsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1498);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMLSLslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(547);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDuv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(549);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(535);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABDLuv2i64
          }
          break;
        }
        break;
      case 8:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(587);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(590);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1289);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLALsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1390);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2211);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2214);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1292);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLALuv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1392);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULslv4i32
            }
          }
          break;
        }
        break;
      case 9:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1305);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLAv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1307);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLAv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1496);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMLALv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1388);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULslfd
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1331);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1333);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 1) {
            MI.setOpcode(1389);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 5, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // VMULslfq
          }
          break;
        }
        break;
      case 10:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1460);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VPMAXs32
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1315);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSLsv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1373);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULLslsv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1463);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VPMAXu32
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1318);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSLuv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1375);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VMULLsluv2i32
            }
          }
          break;
        }
        break;
      case 11:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1506);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMULHv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1508);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMULHv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1500);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMLSLv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1510);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMULLslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1533);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQRDMULHv2i32
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1535);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQRDMULHv4i32
            }
          }
          break;
        }
        break;
      case 12:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1377);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULLsv2i64
            }
          case 487:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1380);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULLuv2i64
            }
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1502);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMULHslv2i32
            }
          case 487:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1504);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQDMULHslv4i32
            }
          }
          break;
        }
        break;
      case 13:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2207);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBfd
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2208);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBfq
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1512);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VQDMULLv2i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1529);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQRDMULHslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(538);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDfd
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(539);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VABDfq
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 6, 1) == 1) {
            MI.setOpcode(1531);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 5, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // VQRDMULHslv4i32
          }
          break;
        }
        break;
      case 14:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 23, 9) == 486) {
            MI.setOpcode(645);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCGTfd
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 23, 9) == 486) {
            MI.setOpcode(646);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCGTfq
          }
          break;
        }
        break;
      case 15:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1270);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMINfd
            }
          case 486:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1465);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VPMINf
            }
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 23, 9) == 484) {
            MI.setOpcode(1271);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMINfq
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 484:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 4:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1741);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv1i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1743);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLsv2i64
            }
          }
          break;
        case 5:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1661);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv1i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1663);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLsv2i64
            }
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(586);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv1i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(588);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VADDv2i64
            }
          }
          break;
        }
        break;
      case 485:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{9-8} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 8, 2) == 0) {
            MI.setOpcode(748);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 10, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // VEXTd32
          }
          else
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 8, 1) == 0) {
              MI.setOpcode(747);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 9, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VEXTd16
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(749);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 8, 4);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VEXTd8
              }
          break;
        case 1:
          // Check Inst{10-8} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 8, 3) == 0) {
            MI.setOpcode(752);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 11, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // VEXTq64
          }
          else
            // Check Inst{9-8} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 8, 2) == 0) {
              MI.setOpcode(751);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 10, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VEXTq32
            }
            else
              // Check Inst{8-8} for singleton decoding...
              if ((Bits & ARM::FeatureNEON) &&
                  fieldFromInstruction32(insn, 8, 1) == 0) {
                MI.setOpcode(750);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 9, 3);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VEXTq16
              }
              else
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(753);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // VEXTq8
                }
          break;
        }
        break;
      case 486:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 4:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1749);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv1i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1751);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLuv2i64
            }
          }
          break;
        case 5:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1669);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv1i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1671);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSHLuv2i64
            }
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2210);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv1i64
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2212);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSUBv2i64
            }
          }
          break;
        }
        break;
      case 487:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 0:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1644);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV64d8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1647);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV64q8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1639);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV32d8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1641);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV32q8
              }
            }
            break;
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(666);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(659);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv16i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(644);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv8i8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(637);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv16i8
              }
            }
            break;
          case 2:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2217);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSWPd
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2218);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSWPq
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2251);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTRNd8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2254);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTRNq8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1642);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV64d16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1645);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV64q16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1638);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV32d16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1640);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV32q16
              }
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(663);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(665);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv8i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(641);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv4i16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(643);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2249);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTRNd16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2252);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTRNq16
              }
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1643);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV64d32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1646);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV64q32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(661);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(664);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv4i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(639);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv2i32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(642);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv4i32
              }
            }
            break;
          case 10:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2250);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTRNd32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2253);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTRNq32
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1636);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV16d8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1637);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VREV16q8
              }
            }
            break;
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(622);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(615);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv16i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(674);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv8i8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(667);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv16i8
              }
            }
            break;
          case 2:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2269);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VUZPd8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2272);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VUZPq8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2275);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VZIPd8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2278);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VZIPq8
              }
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(619);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(621);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv8i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(671);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv4i16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(673);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2267);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VUZPd16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2270);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VUZPq16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2273);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VZIPd16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2276);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VZIPq16
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(617);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(620);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv4i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(669);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv2i32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(672);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv4i32
              }
            }
            break;
          case 10:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2268);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VUZPd32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2271);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VUZPq32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2274);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VZIPd32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2277);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VZIPq32
              }
            }
            break;
          }
          break;
        case 2:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1447);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLsv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1442);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLsv16i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1453);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLuv8i8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1448);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(688);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(681);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv16i8
              }
            }
            break;
          case 2:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1347);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMOVNv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1516);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNsuv8i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1519);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNsv8i8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1522);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNuv8i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1444);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLsv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1446);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLsv8i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1450);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLuv4i16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1452);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLuv8i16
              }
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(685);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(687);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1346);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMOVNv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1515);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNsuv4i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1518);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNsv4i16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1521);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNuv4i16
              }
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1443);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLsv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1445);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLsv4i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1449);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLuv2i32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1451);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADDLuv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(683);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(686);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv4i32
              }
            }
            break;
          case 10:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1345);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMOVNv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1514);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNsuv2i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1517);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNsv2i32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1520);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQMOVNuv2i32
              }
            }
            break;
          }
          break;
        case 3:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(561);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(556);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSv16i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1414);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGs8d
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1415);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGs8q
              }
            }
            break;
          case 2:
            // Check Inst{7-6} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(1725);
              if (!Check(S, DecodeVSHLMaxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLLi8
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(558);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(560);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSv8i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1410);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGs16d
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1411);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGs16q
              }
            }
            break;
          case 6:
            // Check Inst{7-6} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(1723);
              if (!Check(S, DecodeVSHLMaxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLLi16
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(557);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(559);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSv4i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1412);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGs32d
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1413);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGs32q
              }
            }
            break;
          case 10:
            // Check Inst{7-6} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(1724);
              if (!Check(S, DecodeVSHLMaxInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSHLLi32
            }
            break;
          }
          break;
        case 4:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(680);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLSv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(675);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLSv16i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(694);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLZv8i8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(689);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLZv16i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(677);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLSv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(679);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLSv8i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(691);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLZv4i16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(693);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLZv8i16
              }
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(676);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLSv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(678);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLSv4i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(690);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLZv2i32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(692);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLZv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(660);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv2f32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(662);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGTzv4f32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(638);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv2f32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(640);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEzv4f32
              }
            }
            break;
          case 11:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1630);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRECPEd
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1633);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRECPEq
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1695);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSQRTEd
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1698);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSQRTEq
              }
            }
            break;
          }
          break;
        case 5:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(703);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCNTd
              }
            case 9:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(616);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv2f32
              }
            case 11:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1631);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRECPEfd
              }
            }
            break;
          case 1:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(704);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCNTq
              }
            case 9:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(618);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQzv4f32
              }
            case 11:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1632);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRECPEfq
              }
            }
            break;
          case 2:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1400);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMVNd
              }
            case 9:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(668);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv2f32
              }
            case 11:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1696);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSQRTEfd
              }
            }
            break;
          case 3:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1401);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMVNq
              }
            case 9:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(670);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLEzv4f32
              }
            case 11:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1697);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSQRTEfq
              }
            }
            break;
          }
          break;
        case 6:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1435);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALsv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1430);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALsv16i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1441);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALuv8i8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1436);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALuv16i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1432);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALsv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1434);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALsv8i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1438);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALuv4i16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1440);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALuv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) && (Bits & ARM::FeatureFP16) &&
                fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(711);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCVTf2h
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1431);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALsv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1433);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALsv4i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1437);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALuv2i32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1439);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPADALuv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(682);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv2f32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(684);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCLTzv4f32
              }
            }
            break;
          case 11:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(721);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTs2fd
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(722);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTs2fq
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(723);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTu2fd
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(724);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTu2fq
              }
            }
            break;
          }
          break;
        case 7:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1477);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQABSv8i8
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1472);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQABSv16i8
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1528);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQNEGv8i8
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1523);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQNEGv16i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1474);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQABSv4i16
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1476);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQABSv8i16
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1525);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQNEGv4i16
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1527);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQNEGv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) && (Bits & ARM::FeatureFP16) &&
                fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(720);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VCVTh2f
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1473);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQABSv2i32
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1475);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQABSv4i32
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1524);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQNEGv2i32
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1526);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQNEGv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(554);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSfd
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(555);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABSfq
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1409);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGfd
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1408);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNEGf32q
              }
            }
            break;
          case 11:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(712);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTf2sd
              }
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(713);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTf2sq
              }
            case 2:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(714);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTf2ud
              }
            case 3:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(715);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCVTf2uq
              }
            }
            break;
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2219);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBL1
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2226);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBX1
            }
          }
          break;
        case 9:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2220);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBL2
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2227);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBX2
            }
          }
          break;
        case 10:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2222);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBL3
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2229);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBX3
            }
          }
          break;
        case 11:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2224);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBL4
            }
          case 1:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2231);
              if (!Check(S, DecodeTBLInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VTBX4
            }
          }
          break;
        case 12:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{16} ...
            switch (fieldFromInstruction32(insn, 16, 1)) {
            case 0:
              // Check Inst{17} ...
              switch (fieldFromInstruction32(insn, 17, 1)) {
              case 0:
                // Check Inst{18-18} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 18, 1) == 1) {
                  MI.setOpcode(739);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 19, 1);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // VDUPLN32d
                }
                break;
              case 1:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(737);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 18, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // VDUPLN16d
                }
              }
              break;
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(741);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 17, 3);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VDUPLN8d
              }
            }
            break;
          case 1:
            // Check Inst{16} ...
            switch (fieldFromInstruction32(insn, 16, 1)) {
            case 0:
              // Check Inst{17} ...
              switch (fieldFromInstruction32(insn, 17, 1)) {
              case 0:
                // Check Inst{18-18} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 18, 1) == 1) {
                  MI.setOpcode(740);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 19, 1);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // VDUPLN32q
                }
                break;
              case 1:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(738);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 18, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // VDUPLN16q
                }
              }
              break;
            case 1:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(742);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 17, 3);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VDUPLN8q
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1485);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1493);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1482);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1490);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1480);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1488);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1479);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1487);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv1i64
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(593);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VANDd
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(745);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VEORd
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(595);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBICd
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(605);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBSLd
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1424);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VORRd
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(603);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBITd
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1422);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VORNd
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(601);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBIFd
              }
            }
            break;
          }
          break;
        case 2:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1618);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1626);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1615);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1623);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1613);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1621);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1612);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1620);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv1i64
              }
            }
            break;
          }
          break;
        case 3:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(630);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEsv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(636);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(627);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEsv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(633);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(626);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEsv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(632);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEuv2i32
              }
            }
            break;
          }
          break;
        case 4:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1585);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1601);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1582);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1598);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1580);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1596);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1579);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1595);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv1i64
              }
            }
            break;
          }
          break;
        case 5:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1544);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1552);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1541);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1549);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1539);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1547);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1538);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1546);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv1i64
              }
            }
            break;
          }
          break;
        case 6:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1277);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINsv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1283);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1274);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINsv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1280);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1273);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINsv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1279);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINuv2i32
              }
            }
            break;
          }
          break;
        case 7:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(525);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAsv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(531);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(522);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAsv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(528);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(521);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAsv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(527);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAuv2i32
              }
            }
            break;
          }
          break;
        case 8:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2260);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTSTv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(614);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2257);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTSTv4i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(611);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2256);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTSTv2i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(610);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQv2i32
              }
            }
            break;
          }
          break;
        case 9:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1399);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMULv8i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1386);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMULpd
              }
            }
            break;
          case 1:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1396);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULv4i16
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1395);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULv2i32
            }
            break;
          }
          break;
        case 10:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1468);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPMINs8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1471);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPMINu8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1466);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPMINs16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1469);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPMINu16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1467);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPMINs32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1470);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VPMINu32
              }
            }
            break;
          }
          break;
        case 11:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1457);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VPADDi8
            }
            break;
          case 1:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1455);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VPADDi16
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1456);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VPADDi32
            }
            break;
          }
          break;
        case 12:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEONVFP4) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(756);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMAfd
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEONVFP4) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(760);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMSfd
            }
            break;
          }
          break;
        case 13:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1296);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMLAfd
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1384);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMULfd
              }
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1322);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSfd
            }
            break;
          }
          break;
        case 14:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(562);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VACGEd
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(564);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VACGTd
            }
            break;
          }
          break;
        case 15:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1634);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRECPSfd
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1699);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSQRTSfd
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-25} ...
          switch (fieldFromInstruction32(insn, 25, 7)) {
          case 121:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction32(insn, 8, 4)) {
            case 0:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1766);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1774);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1763);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRsv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1771);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1761);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSHRsv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1769);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSHRuv2i32
                  }
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1798);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1806);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1795);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAsv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1803);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1793);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRAsv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1801);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRAuv2i32
                  }
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1686);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1694);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1683);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRsv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1691);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1681);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSHRsv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1689);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSHRuv2i32
                  }
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1708);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1716);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1705);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAsv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1713);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1703);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSRAsv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1711);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSRAuv2i32
                  }
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24}  && Inst{19-19} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1814);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRIv8i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1811);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRIv4i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1809);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VSRIv2i32
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1739);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSHLiv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1786);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSLIv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1736);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSHLiv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1783);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSLIv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1734);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VSHLiv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1781);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VSLIv2i32
                  }
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24}  && Inst{19-19} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1577);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLsuv8i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1574);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLsuv4i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1572);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // VQSHLsuv2i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1569);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLsiv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1593);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLuiv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1566);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLsiv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1590);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLuiv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1564);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLsiv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1588);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLuiv2i32
                  }
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1758);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRNv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1610);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQSHRUNv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1757);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRNv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1609);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQSHRUNv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1756);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSHRNv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1608);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VQSHRUNv2i32
                  }
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1604);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQSHRNsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1607);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQSHRNuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1603);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQSHRNsv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1606);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQSHRNuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1602);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VQSHRNsv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1605);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VQSHRNuv2i32
                  }
                }
                break;
              }
              break;
            case 10:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19} ...
                    switch (fieldFromInstruction32(insn, 19, 1)) {
                    case 1:
                      // Check Inst{18-16} for singleton decoding...
                      if ((Bits & ARM::FeatureNEON) &&
                          fieldFromInstruction32(insn, 16, 3) == 0) {
                        MI.setOpcode(1341);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        return S; // VMOVLsv8i16
                      }
                      else
                        if ((Bits & ARM::FeatureNEON)) {
                          MI.setOpcode(1728);
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                          if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                          tmp = fieldFromInstruction32(insn, 16, 3);
                          MI.addOperand(MCOperand::CreateImm(tmp));
                          return S; // VSHLLsv8i16
                        }
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{19} ...
                    switch (fieldFromInstruction32(insn, 19, 1)) {
                    case 1:
                      // Check Inst{18-16} for singleton decoding...
                      if ((Bits & ARM::FeatureNEON) &&
                          fieldFromInstruction32(insn, 16, 3) == 0) {
                        MI.setOpcode(1344);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        return S; // VMOVLuv8i16
                      }
                      else
                        if ((Bits & ARM::FeatureNEON)) {
                          MI.setOpcode(1731);
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                          if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                          tmp = fieldFromInstruction32(insn, 16, 3);
                          MI.addOperand(MCOperand::CreateImm(tmp));
                          return S; // VSHLLuv8i16
                        }
                      break;
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-16} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 16, 4) == 0) {
                      MI.setOpcode(1340);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VMOVLsv4i32
                    }
                    else
                      if ((Bits & ARM::FeatureNEON)) {
                        MI.setOpcode(1727);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        tmp = fieldFromInstruction32(insn, 16, 4);
                        MI.addOperand(MCOperand::CreateImm(tmp));
                        return S; // VSHLLsv4i32
                      }
                    break;
                  case 1:
                    // Check Inst{19-16} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 16, 4) == 0) {
                      MI.setOpcode(1343);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VMOVLuv4i32
                    }
                    else
                      if ((Bits & ARM::FeatureNEON)) {
                        MI.setOpcode(1730);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                        tmp = fieldFromInstruction32(insn, 16, 4);
                        MI.addOperand(MCOperand::CreateImm(tmp));
                        return S; // VSHLLuv4i32
                      }
                    break;
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  // Check Inst{20-16} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 16, 5) == 0) {
                    MI.setOpcode(1339);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VMOVLsv2i64
                  }
                  else
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1726);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 5);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSHLLsv2i64
                    }
                  break;
                case 1:
                  // Check Inst{20-16} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 16, 5) == 0) {
                    MI.setOpcode(1342);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VMOVLuv2i64
                  }
                  else
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1729);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 5);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSHLLuv2i64
                    }
                  break;
                }
                break;
              }
              break;
            case 14:
              // Check Inst{5} ...
              switch (fieldFromInstruction32(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1364);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMOVv8i8
                }
                break;
              case 1:
                // Check Inst{21-19} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1356);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMOVv1i64
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(725);
                  if (!Check(S, DecodeVCVTD(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTxs2fd
                }
              case 1:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(727);
                  if (!Check(S, DecodeVCVTD(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTxu2fd
                }
              }
              break;
              break;
            case 15:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(716);
                  if (!Check(S, DecodeVCVTD(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTf2xsd
                }
              case 1:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(718);
                  if (!Check(S, DecodeVCVTD(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTf2xud
                }
              default:
                break; // fallthrough
              }
              // Check Inst{21-19}  && Inst{5-5} for singleton decoding...
              if ((Bits & ARM::FeatureNEON) &&
                  fieldFromInstruction32(insn, 19, 3) == 0 && fieldFromInstruction32(insn, 5, 1) == 0) {
                MI.setOpcode(1357);
                if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMOVv2f32
              }
              break;
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1361);
                    if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VMOVv4i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1425);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VORRiv2i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(1426);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VORRiv4i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1358);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMOVv2i32
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1403);
                    if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VMVNv4i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(596);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VBICiv2i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(597);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VBICiv4i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1402);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMVNv2i32
                }
                break;
              }
              break;
            }
            break;
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1760);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSHRsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1768);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSHRuv1i64
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1792);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSRAsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1800);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSRAuv1i64
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1680);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSHRsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1688);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSHRuv1i64
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1702);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSRAsv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1710);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSRAuv1i64
              }
            }
            break;
          case 4:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1808);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 6);
              if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSRIv1i64
            }
            break;
          case 5:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1733);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VSHLiv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1780);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VSLIv1i64
              }
            }
            break;
          case 6:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1571);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 6);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQSHLsuv1i64
            }
            break;
          case 7:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1563);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VQSHLsiv1i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1587);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VQSHLuiv1i64
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1478);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1486);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1484);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1492);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1483);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1491);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1481);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1489);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQADDuv2i64
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(594);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VANDq
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(746);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VEORq
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(600);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBICq
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(606);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBSLq
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1429);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VORRq
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(604);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBITq
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1423);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VORNq
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(602);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VBIFq
              }
            }
            break;
          }
          break;
        case 2:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1611);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1619);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1617);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1625);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1616);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1624);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1614);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1622);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSUBuv2i64
              }
            }
            break;
          }
          break;
        case 3:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(625);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEsv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(631);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(629);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEsv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(635);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(628);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEsv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(634);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCGEuv4i32
              }
            }
            break;
          }
          break;
        case 4:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1578);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1594);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1584);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1600);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1583);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1599);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1581);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1597);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQSHLuv2i64
              }
            }
            break;
          }
          break;
        case 5:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1537);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1545);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1543);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1551);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1542);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1550);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1540);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1548);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VQRSHLuv2i64
              }
            }
            break;
          }
          break;
        case 6:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1272);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINsv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1278);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1276);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINsv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1282);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1275);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINsv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1281);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMINuv4i32
              }
            }
            break;
          }
          break;
        case 7:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(520);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAsv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(526);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(524);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAsv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(530);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(523);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAsv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(529);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VABAuv4i32
              }
            }
            break;
          }
          break;
        case 8:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2255);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTSTv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(609);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2259);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTSTv8i16
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(613);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2258);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VTSTv4i32
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(612);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VCEQv4i32
              }
            }
            break;
          }
          break;
        case 9:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1394);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMULv16i8
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1387);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMULpq
              }
            }
            break;
          case 1:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1398);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULv8i16
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1397);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMULv4i32
            }
            break;
          }
          break;
        case 12:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEONVFP4) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(757);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMAfq
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEONVFP4) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(761);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMSfq
            }
            break;
          }
          break;
        case 13:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1297);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMLAfq
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1385);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMULfq
              }
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1323);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSfq
            }
            break;
          }
          break;
        case 14:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(563);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VACGEq
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(565);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VACGTq
            }
            break;
          }
          break;
        case 15:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1635);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRECPSfq
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1700);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VRSQRTSfq
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-25} ...
          switch (fieldFromInstruction32(insn, 25, 7)) {
          case 121:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction32(insn, 8, 4)) {
            case 0:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1759);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1767);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1765);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRsv8i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1773);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSHRuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1764);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSHRsv4i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1772);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSHRuv4i32
                  }
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1791);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1799);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1797);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAsv8i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1805);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VSRAuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1796);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRAsv4i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1804);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRAuv4i32
                  }
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1679);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1687);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1685);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRsv8i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1693);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1684);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSHRsv4i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1692);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSHRuv4i32
                  }
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1701);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1709);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1707);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAsv8i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1715);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSRAuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1706);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSRAsv4i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1714);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSRAuv4i32
                  }
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24}  && Inst{19-19} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1807);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRIv16i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1813);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VSRIv8i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1812);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VSRIv4i32
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1732);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSHLiv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1779);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSLIv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1738);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSHLiv8i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1785);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VSLIv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1737);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VSHLiv4i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1784);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VSLIv4i32
                  }
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24}  && Inst{19-19} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1570);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLsuv16i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1576);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLsuv8i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1575);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // VQSHLsuv4i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1562);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLsiv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1586);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLuiv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1568);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLsiv8i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1592);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return S; // VQSHLuiv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1567);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLsiv4i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1591);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return S; // VQSHLuiv4i32
                  }
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1678);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRNv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1561);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQRSHRUNv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1677);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VRSHRNv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1560);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQRSHRUNv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1676);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VRSHRNv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1559);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VQRSHRUNv2i32
                  }
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1555);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQRSHRNsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1558);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!Check(S, DecodeShiftRight8Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQRSHRNuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1554);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQRSHRNsv4i16
                    }
                  case 1:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1557);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!Check(S, DecodeShiftRight16Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VQRSHRNuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1553);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VQRSHRNsv2i32
                  }
                case 1:
                  if ((Bits & ARM::FeatureNEON)) {
                    MI.setOpcode(1556);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!Check(S, DecodeShiftRight32Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VQRSHRNuv2i32
                  }
                }
                break;
              }
              break;
            case 14:
              // Check Inst{5} ...
              switch (fieldFromInstruction32(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1355);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMOVv16i8
                }
                break;
              case 1:
                // Check Inst{21-19} for singleton decoding...
                if ((Bits & ARM::FeatureNEON) &&
                    fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1359);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMOVv2i64
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(726);
                  if (!Check(S, DecodeVCVTQ(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTxs2fq
                }
              case 1:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(728);
                  if (!Check(S, DecodeVCVTQ(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTxu2fq
                }
              }
              break;
              break;
            case 15:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(717);
                  if (!Check(S, DecodeVCVTQ(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTf2xsq
                }
              case 1:
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(719);
                  if (!Check(S, DecodeVCVTQ(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VCVTf2xuq
                }
              default:
                break; // fallthrough
              }
              // Check Inst{21-19}  && Inst{5-5} for singleton decoding...
              if ((Bits & ARM::FeatureNEON) &&
                  fieldFromInstruction32(insn, 19, 3) == 0 && fieldFromInstruction32(insn, 5, 1) == 0) {
                MI.setOpcode(1360);
                if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMOVv4f32
              }
              break;
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1363);
                    if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VMOVv8i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(1427);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VORRiv4i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(1428);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VORRiv8i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1362);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMOVv4i32
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if ((Bits & ARM::FeatureNEON) &&
                      fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1405);
                    if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VMVNv8i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    if ((Bits & ARM::FeatureNEON)) {
                      MI.setOpcode(598);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VBICiv4i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if ((Bits & ARM::FeatureNEON) &&
                        fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(599);
                      if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // VBICiv8i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1404);
                  if (!Check(S, DecodeNEONModImmInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VMVNv4i32
                }
                break;
              }
              break;
            }
            break;
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1762);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSHRsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1770);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSHRuv2i64
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1794);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSRAsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1802);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VSRAuv2i64
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1682);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSHRsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1690);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSHRuv2i64
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1704);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSRAsv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1712);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VRSRAuv2i64
              }
            }
            break;
          case 4:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1810);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 6);
              if (!Check(S, DecodeShiftRight64Imm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VSRIv2i64
            }
            break;
          case 5:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1735);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VSHLiv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1782);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VSLIv2i64
              }
            }
            break;
          case 6:
            // Check Inst{31-24} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1573);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 6);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // VQSHLsuv2i64
            }
            break;
          case 7:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1565);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VQSHLsiv2i64
              }
            case 243:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1589);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // VQSHLuiv2i64
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeNEONDupInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{27-22} ...
  switch (fieldFromInstruction32(insn, 22, 6)) {
  case 56:
    // Check Inst{5-0} ...
    switch (fieldFromInstruction32(insn, 0, 6)) {
    case 16:
      // Check Inst{20} ...
      switch (fieldFromInstruction32(insn, 20, 1)) {
      case 0:
        // Check Inst{11-8}  && Inst{6-6} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(1721);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 21, 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSETLNi32
        }
        break;
      case 1:
        // Check Inst{11-8}  && Inst{6-6} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(766);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 21, 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VGETLNi32
        }
        break;
      }
      break;
    case 48:
      // Check Inst{20} ...
      switch (fieldFromInstruction32(insn, 20, 1)) {
      case 0:
        // Check Inst{11-8} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11) {
          MI.setOpcode(1720);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 6, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 21, 1) << 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSETLNi16
        }
        break;
      case 1:
        // Check Inst{11-8} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11) {
          MI.setOpcode(767);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 6, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 21, 1) << 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VGETLNs16
        }
        break;
      }
      break;
    }
    break;
  case 57:
    // Check Inst{20} ...
    switch (fieldFromInstruction32(insn, 20, 1)) {
    case 0:
      // Check Inst{11-8}  && Inst{4-0} for singleton decoding...
      if ((Bits & ARM::FeatureNEON) &&
          fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 5) == 16) {
        MI.setOpcode(1722);
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction32(insn, 12, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 5, 2) << 0);
        tmp |= (fieldFromInstruction32(insn, 21, 1) << 2);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // VSETLNi8
      }
      break;
    case 1:
      // Check Inst{11-8}  && Inst{4-0} for singleton decoding...
      if ((Bits & ARM::FeatureNEON) &&
          fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 5) == 16) {
        MI.setOpcode(768);
        tmp = fieldFromInstruction32(insn, 12, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 5, 2) << 0);
        tmp |= (fieldFromInstruction32(insn, 21, 1) << 2);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // VGETLNs8
      }
      break;
    }
    break;
  case 58:
    // Check Inst{5-0} ...
    switch (fieldFromInstruction32(insn, 0, 6)) {
    case 16:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{11-8}  && Inst{6-6} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(733);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VDUP32d
        }
        break;
      case 2:
        // Check Inst{11-8}  && Inst{6-6} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(734);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VDUP32q
        }
        break;
      }
      break;
    case 48:
      // Check Inst{20} ...
      switch (fieldFromInstruction32(insn, 20, 1)) {
      case 0:
        // Check Inst{21} ...
        switch (fieldFromInstruction32(insn, 21, 1)) {
        case 0:
          // Check Inst{11-8}  && Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(731);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VDUP16d
          }
          break;
        case 1:
          // Check Inst{11-8}  && Inst{6-6} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(732);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VDUP16q
          }
          break;
        }
        break;
      case 1:
        // Check Inst{11-8} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11) {
          MI.setOpcode(769);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 6, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 21, 1) << 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VGETLNu16
        }
        break;
      }
      break;
    }
    break;
  case 59:
    // Check Inst{20} ...
    switch (fieldFromInstruction32(insn, 20, 1)) {
    case 0:
      // Check Inst{21} ...
      switch (fieldFromInstruction32(insn, 21, 1)) {
      case 0:
        // Check Inst{11-8}  && Inst{6-0} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 7) == 16) {
          MI.setOpcode(735);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VDUP8d
        }
        break;
      case 1:
        // Check Inst{11-8}  && Inst{6-0} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 7) == 16) {
          MI.setOpcode(736);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!Check(S, DecodeQPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VDUP8q
        }
        break;
      }
      break;
    case 1:
      // Check Inst{11-8}  && Inst{4-0} for singleton decoding...
      if ((Bits & ARM::FeatureNEON) &&
          fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 5) == 16) {
        MI.setOpcode(770);
        tmp = fieldFromInstruction32(insn, 12, 4);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 5, 2) << 0);
        tmp |= (fieldFromInstruction32(insn, 21, 1) << 2);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // VGETLNu8
      }
      break;
    }
    break;
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeNEONLoadStoreInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{11-8} ...
  switch (fieldFromInstruction32(insn, 8, 4)) {
  case 0:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2162);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4d8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2165);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4d8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2154);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4d16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2157);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4d16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2158);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4d32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2161);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1819);
            if (!Check(S, DecodeVST1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1LNd8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1820);
              if (!Check(S, DecodeVST1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1228);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4d8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1231);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4d8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1220);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4d16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1223);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4d16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1224);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4d32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1227);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(826);
            if (!Check(S, DecodeVLD1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1LNd8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(827);
              if (!Check(S, DecodeVLD1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2176);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4q8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2178);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4q8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2166);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4q16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2168);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4q16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2171);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4q32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2173);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4q32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(1949);
          if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VST2LNd8
        }
        else
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1952);
            if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST2LNd8_UPD
          }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1242);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4q8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1244);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4q8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1232);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4q16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1234);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4q16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1237);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4q32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1239);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4q32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(979);
          if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLD2LNd8
        }
        else
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(982);
            if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2LNd8_UPD
          }
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1910);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d8Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1909);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d8Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1911);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d8Qwb_register
          }
          break;
        case 1:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1877);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d16Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1876);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d16Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1878);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d16Qwb_register
          }
          break;
        case 2:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1886);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d32Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1885);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d32Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1887);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d32Qwb_register
          }
          break;
        case 3:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1898);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d64Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1894);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d64Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1899);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d64Qwb_register
          }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2095);
            if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST3LNd8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2098);
              if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(913);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d8Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(912);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d8Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(914);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1d8Qwb_register
          }
          break;
        case 1:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(884);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d16Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(883);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d16Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(885);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1d16Qwb_register
          }
          break;
        case 2:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(893);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d32Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(892);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d32Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(894);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1d32Qwb_register
          }
          break;
        case 3:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(903);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d64Qwb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(901);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d64Q
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(904);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1d64Qwb_register
          }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1143);
            if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3LNd8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1146);
              if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 3:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2085);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2q8wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2081);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2q8
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(2086);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST2q8wb_register
          }
          break;
        case 1:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2073);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2q16wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2069);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2q16
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(2074);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST2q16wb_register
          }
          break;
        case 2:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2079);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2q32wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2075);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2q32
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(2080);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST2q32wb_register
          }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(2142);
          if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VST4LNd8
        }
        else
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(2145);
            if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4LNd8_UPD
          }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1115);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2q8wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1111);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2q8
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1116);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2q8wb_register
          }
          break;
        case 1:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1103);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2q16wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1099);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2q16
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1104);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2q16wb_register
          }
          break;
        case 2:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1109);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2q32wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1105);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2q32
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1110);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2q32wb_register
          }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(1208);
          if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLD4LNd8
        }
        else
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1211);
            if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4LNd8_UPD
          }
        break;
      }
      break;
    }
    break;
  case 4:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-5} ...
        switch (fieldFromInstruction32(insn, 5, 3)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2115);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST3d8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2118);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3d8_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2107);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST3d16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2110);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3d16_UPD
            }
          break;
        case 4:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2111);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST3d32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2114);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{5} ...
        switch (fieldFromInstruction32(insn, 5, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1815);
            if (!Check(S, DecodeVST1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1LNd16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1816);
              if (!Check(S, DecodeVST1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1LNd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-5} ...
        switch (fieldFromInstruction32(insn, 5, 3)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1163);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3d8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1166);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3d8_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1155);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3d16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1158);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3d16_UPD
            }
          break;
        case 4:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1159);
            if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3d32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1162);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if ((Bits & ARM::FeatureNEON) &&
            fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(822);
          if (!Check(S, DecodeVLD1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLD1LNd16
        }
        else
          // Check Inst{5-5} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 5, 1) == 0) {
            MI.setOpcode(823);
            if (!Check(S, DecodeVLD1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1LNd16_UPD
          }
        break;
      }
      break;
    }
    break;
  case 5:
    // Check Inst{5} ...
    switch (fieldFromInstruction32(insn, 5, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2129);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3q8
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2131);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST3q8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2119);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3q16
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2121);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST3q16_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2124);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3q32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2126);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST3q32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1941);
            if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST2LNd16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1944);
              if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2LNd16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1177);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3q8
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1179);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD3q8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1167);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3q16
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1169);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD3q16_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1172);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3q32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1174);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD3q32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(971);
            if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2LNd16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(974);
              if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2LNd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2001);
            if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST2LNq16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2004);
              if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2LNq16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1031);
            if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2LNq16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1034);
              if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2LNq16_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 6:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1913);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d8Twb_fixed
            }
          case 15:
            // Check Inst{5-5} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 5, 1) == 0) {
              MI.setOpcode(1912);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d8T
            }
            break;
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1914);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d8Twb_register
          }
          break;
        case 1:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1880);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d16Twb_fixed
            }
          case 15:
            // Check Inst{5-5} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 5, 1) == 0) {
              MI.setOpcode(1879);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d16T
            }
            break;
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1881);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d16Twb_register
          }
          break;
        case 2:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1889);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d32Twb_fixed
            }
          case 15:
            // Check Inst{5-5} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 5, 1) == 0) {
              MI.setOpcode(1888);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d32T
            }
            break;
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1890);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d32Twb_register
          }
          break;
        case 3:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1904);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d64Twb_fixed
            }
          case 15:
            // Check Inst{5-5} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 5, 1) == 0) {
              MI.setOpcode(1900);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d64T
            }
            break;
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(1905);
            if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1d64Twb_register
          }
          break;
        }
        break;
      case 489:
        // Check Inst{5-4} ...
        switch (fieldFromInstruction32(insn, 4, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2087);
            if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST3LNd16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2090);
              if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3LNd16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2099);
            if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST3LNq16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2102);
              if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3LNq16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{5} ...
      switch (fieldFromInstruction32(insn, 5, 1)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(916);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d8Twb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(915);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d8T
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(917);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d8Twb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(887);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d16Twb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(886);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d16T
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(888);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d16Twb_register
            }
            break;
          case 2:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(896);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d32Twb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(895);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d32T
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(897);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d32Twb_register
            }
            break;
          case 3:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(907);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d64Twb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(905);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d64T
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(908);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d64Twb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1135);
              if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3LNd16
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1138);
                if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD3LNd16_UPD
              }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 489:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1147);
              if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3LNq16
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1150);
                if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD3LNq16_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 7:
    // Check Inst{5} ...
    switch (fieldFromInstruction32(insn, 5, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1915);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1908);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1916);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1882);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1875);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1883);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d16wb_register
            }
            break;
          case 2:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1891);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1884);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1892);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d32wb_register
            }
            break;
          case 3:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1906);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d64wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1893);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1d64
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1907);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1d64wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2134);
            if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4LNd16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2137);
              if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4LNd16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(918);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(911);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(919);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(889);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(882);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(890);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d16wb_register
            }
            break;
          case 2:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(898);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(891);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(899);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d32wb_register
            }
            break;
          case 3:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(909);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d64wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(900);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1d64
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(910);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1d64wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1200);
            if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4LNd16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1203);
              if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4LNd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2146);
            if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4LNq16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2149);
              if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4LNq16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1212);
            if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4LNq16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1215);
              if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4LNq16_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 8:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2067);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2d8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2063);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2d8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2068);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2d8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2061);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2d32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2057);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2d32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2062);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2d32wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1817);
            if (!Check(S, DecodeVST1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST1LNd32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1818);
              if (!Check(S, DecodeVST1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1LNd32_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1097);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2d8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1093);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2d8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1098);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2d8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1091);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2d32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1087);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2d32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1092);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2d32wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(824);
            if (!Check(S, DecodeVLD1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1LNd32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(825);
              if (!Check(S, DecodeVLD1LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1LNd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 488:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2055);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2d16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2051);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2d16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2056);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2d16wb_register
            }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 488:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1085);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2d16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1081);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2d16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1086);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2d16wb_register
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 9:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2049);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2b8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2048);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2b8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2050);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2b8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2046);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2b32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2045);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2b32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2047);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2b32wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1945);
              if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2LNd32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1948);
                if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1079);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2b8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1078);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2b8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1080);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2b8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1076);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2b32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1075);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2b32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1077);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2b32wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(975);
              if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2LNd32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(978);
                if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2043);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2b16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2042);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2b16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2044);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2b16wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2005);
              if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST2LNq32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2008);
                if (!Check(S, DecodeVST2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST2LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1073);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2b16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1072);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2b16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1074);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2b16wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1035);
              if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2LNq32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1038);
                if (!Check(S, DecodeVLD2LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD2LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 10:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1939);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1935);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1940);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1q8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1927);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1923);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1928);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1q32wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2091);
              if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3LNd32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2094);
                if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST3LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(942);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q8wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(938);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q8
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(943);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1q8wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(930);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q32wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(926);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q32
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(931);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1q32wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1139);
              if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3LNd32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1142);
                if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD3LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1921);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1917);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1922);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1q16wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1933);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q64wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1929);
                if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST1q64
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1934);
              if (!Check(S, DecodeVSTInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST1q64wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2103);
              if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST3LNq32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(2106);
                if (!Check(S, DecodeVST3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VST3LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(924);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q16wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(920);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q16
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(925);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1q16wb_register
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 13:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(936);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q64wb_fixed
              }
            case 15:
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(932);
                if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD1q64
              }
            default:
              break; // fallthrough
            }
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(937);
              if (!Check(S, DecodeVLDInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1q64wb_register
            }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1151);
              if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3LNq32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1154);
                if (!Check(S, DecodeVLD3LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD3LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 11:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2138);
            if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4LNd32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2141);
              if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4LNd32_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1204);
            if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4LNd32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1207);
              if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4LNd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(2150);
            if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VST4LNq32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(2153);
              if (!Check(S, DecodeVST4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VST4LNq32_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1216);
            if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD4LNq32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1219);
              if (!Check(S, DecodeVLD4LN(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4LNq32_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 12:
    // Check Inst{7-5} ...
    switch (fieldFromInstruction32(insn, 5, 3)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(802);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPd8wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(801);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPd8
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(803);
            if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1DUPd8wb_register
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(820);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPq8wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(816);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPq8
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(821);
            if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1DUPq8wb_register
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(796);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPd16wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(795);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPd16
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(797);
            if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1DUPd16wb_register
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(808);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPq16wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(804);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPq16
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(809);
            if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1DUPq16wb_register
          }
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(799);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPd32wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(798);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPd32
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(800);
            if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1DUPd32wb_register
          }
          break;
        }
        break;
      }
      break;
    case 5:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(814);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPq32wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(810);
              if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD1DUPq32
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(815);
            if (!Check(S, DecodeVLD1DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD1DUPq32wb_register
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 13:
    // Check Inst{7-5} ...
    switch (fieldFromInstruction32(insn, 5, 3)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(966);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd8wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(962);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd8
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(967);
            if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2DUPd8wb_register
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(969);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd8x2wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(968);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd8x2
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(970);
            if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2DUPd8x2wb_register
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(948);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd16wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(944);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd16
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(949);
            if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2DUPd16wb_register
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(951);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd16x2wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(950);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd16x2
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(952);
            if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2DUPd16x2wb_register
          }
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(957);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd32wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(953);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd32
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(958);
            if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2DUPd32wb_register
          }
          break;
        }
        break;
      }
      break;
    case 5:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} ...
          switch (fieldFromInstruction32(insn, 0, 4)) {
          case 13:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(960);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd32x2wb_fixed
            }
          case 15:
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(959);
              if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD2DUPd32x2
            }
          default:
            break; // fallthrough
          }
          if ((Bits & ARM::FeatureNEON)) {
            MI.setOpcode(961);
            if (!Check(S, DecodeVLD2DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD2DUPd32x2wb_register
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 14:
    // Check Inst{7-4} ...
    switch (fieldFromInstruction32(insn, 4, 4)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1129);
            if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3DUPd8
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1132);
              if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3DUPd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1133);
            if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3DUPd8x2
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1134);
              if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3DUPd8x2_UPD
            }
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1117);
            if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3DUPd16
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1120);
              if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3DUPd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 6:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1121);
            if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3DUPd16x2
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1122);
              if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3DUPd16x2_UPD
            }
          break;
        }
        break;
      }
      break;
    case 8:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1123);
            if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3DUPd32
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1126);
              if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3DUPd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 10:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if ((Bits & ARM::FeatureNEON) &&
              fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1127);
            if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLD3DUPd32x2
          }
          else
            if ((Bits & ARM::FeatureNEON)) {
              MI.setOpcode(1128);
              if (!Check(S, DecodeVLD3DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD3DUPd32x2_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 15:
    // Check Inst{5} ...
    switch (fieldFromInstruction32(insn, 5, 1)) {
    case 0:
      // Check Inst{7} ...
      switch (fieldFromInstruction32(insn, 7, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if ((Bits & ARM::FeatureNEON) &&
                  fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(1194);
                if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD4DUPd8
              }
              else
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1197);
                  if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VLD4DUPd8_UPD
                }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if ((Bits & ARM::FeatureNEON) &&
                  fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(1182);
                if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD4DUPd16
              }
              else
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1185);
                  if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VLD4DUPd16_UPD
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction32(insn, 20, 2)) {
        case 2:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 489:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1188);
              if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4DUPd32
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1191);
                if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD4DUPd32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{7} ...
      switch (fieldFromInstruction32(insn, 7, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if ((Bits & ARM::FeatureNEON) &&
                  fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(1198);
                if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD4DUPd8x2
              }
              else
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1199);
                  if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VLD4DUPd8x2_UPD
                }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if ((Bits & ARM::FeatureNEON) &&
                  fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(1186);
                if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD4DUPd16x2
              }
              else
                if ((Bits & ARM::FeatureNEON)) {
                  MI.setOpcode(1187);
                  if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // VLD4DUPd16x2_UPD
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction32(insn, 20, 2)) {
        case 2:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 489:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureNEON) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1192);
              if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VLD4DUPd32x2
            }
            else
              if ((Bits & ARM::FeatureNEON)) {
                MI.setOpcode(1193);
                if (!Check(S, DecodeVLD4DupInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VLD4DUPd32x2_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  }

  return MCDisassembler::Fail;
}


static uint16_t fieldFromInstruction16(uint16_t insn, unsigned startBit, unsigned numBits)
{
  assert(startBit + numBits <= 16 && "Instruction field out of bounds!");

  uint16_t fieldMask;

  if (numBits == 16)
    fieldMask = (uint16_t)-1;
  else
    fieldMask = ((1 << numBits) - 1) << startBit;

  return (insn & fieldMask) >> startBit;
}

static MCDisassembler::DecodeStatus decodeThumbInstruction16(MCInst &MI, uint16_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{15-12} ...
  switch (fieldFromInstruction16(insn, 12, 4)) {
  case 0:
    // Check Inst{11-6} for singleton decoding...
    if ((Bits & ARM::ModeThumb) &&
        fieldFromInstruction16(insn, 6, 6) == 0) {
      MI.setOpcode(2743);
      tmp = fieldFromInstruction16(insn, 0, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 3, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      return S; // tMOVSr
    }
    break;
  case 2:
    // Check Inst{11-11} for singleton decoding...
    if ((Bits & ARM::ModeThumb) &&
        fieldFromInstruction16(insn, 11, 1) == 1) {
      MI.setOpcode(2715);
      tmp = fieldFromInstruction16(insn, 8, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 0, 8);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // tCMPi8
    }
    break;
  case 4:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      // Check Inst{10-8} ...
      switch (fieldFromInstruction16(insn, 8, 3)) {
      case 2:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction16(insn, 6, 2)) {
        case 0:
          if ((Bits & ARM::ModeThumb)) {
            MI.setOpcode(2783);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tTST
          }
        case 2:
          if ((Bits & ARM::ModeThumb)) {
            MI.setOpcode(2716);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tCMPr
          }
        case 3:
          if ((Bits & ARM::ModeThumb)) {
            MI.setOpcode(2713);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tCMNz
          }
        }
        break;
      case 4:
        // Check Inst{6-3} for singleton decoding...
        if ((Bits & ARM::ModeThumb) &&
            fieldFromInstruction16(insn, 3, 4) == 13) {
          MI.setOpcode(2681);
          if (!Check(S, DecodeThumbAddSPReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tADDrSP
        }
        else
          // Check Inst{7-7}  && Inst{2-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) &&
              fieldFromInstruction16(insn, 7, 1) == 1 && fieldFromInstruction16(insn, 0, 3) == 5) {
            MI.setOpcode(2685);
            if (!Check(S, DecodeThumbAddSPReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tADDspr
          }
          else
            if ((Bits & ARM::ModeThumb)) {
              MI.setOpcode(2678);
              tmp = 0;
              tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
              tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
              tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction16(insn, 3, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // tADDhirr
            }
        break;
      case 5:
        if ((Bits & ARM::ModeThumb)) {
          MI.setOpcode(2714);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
          tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction16(insn, 3, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tCMPhir
        }
      case 6:
        if ((Bits & ARM::ModeThumb)) {
          MI.setOpcode(2745);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
          tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction16(insn, 3, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tMOVr
        }
      case 7:
        // Check Inst{7} ...
        switch (fieldFromInstruction16(insn, 7, 1)) {
        case 0:
          // Check Inst{2-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) &&
              fieldFromInstruction16(insn, 0, 3) == 0) {
            MI.setOpcode(2703);
            tmp = fieldFromInstruction16(insn, 3, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tBX
          }
          break;
        case 1:
          // Check Inst{2-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) &&
              fieldFromInstruction16(insn, 0, 3) == 0) {
            MI.setOpcode(2698);
            tmp = fieldFromInstruction16(insn, 3, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tBLXr
          }
          break;
        }
        break;
      }
      break;
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2732);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!Check(S, DecodeThumbAddrModePC(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRpciASM
      }
    }
    break;
  case 5:
    // Check Inst{11-9} ...
    switch (fieldFromInstruction16(insn, 9, 3)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2768);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTRr
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2766);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTRHr
      }
    case 2:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2764);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTRBr
      }
    case 3:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2728);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRSB
      }
    case 4:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2734);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRr
      }
    case 5:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2727);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRHr
      }
    case 6:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2725);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRBr
      }
    case 7:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2729);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!Check(S, DecodeThumbAddrModeRR(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRSH
      }
    }
    break;
  case 6:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2767);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!Check(S, DecodeThumbAddrModeIS(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTRi
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2730);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!Check(S, DecodeThumbAddrModeIS(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRi
      }
    }
    break;
  case 7:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2763);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!Check(S, DecodeThumbAddrModeIS(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTRBi
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2724);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!Check(S, DecodeThumbAddrModeIS(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRBi
      }
    }
    break;
  case 8:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2765);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!Check(S, DecodeThumbAddrModeIS(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTRHi
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2726);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!Check(S, DecodeThumbAddrModeIS(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRHi
      }
    }
    break;
  case 9:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2769);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!Check(S, DecodeThumbAddrModeSP(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTRspi
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2735);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!Check(S, DecodeThumbAddrModeSP(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDRspi
      }
    }
    break;
  case 10:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2688);
        if (!Check(S, DecodeThumbAddSpecialReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tADR
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2682);
        if (!Check(S, DecodeThumbAddSpecialReg(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tADDrSPi
      }
    }
    break;
  case 11:
    // Check Inst{11-10} ...
    switch (fieldFromInstruction16(insn, 10, 2)) {
    case 0:
      // Check Inst{8} ...
      switch (fieldFromInstruction16(insn, 8, 1)) {
      case 0:
        // Check Inst{7} ...
        switch (fieldFromInstruction16(insn, 7, 1)) {
        case 0:
          // Check Inst{9} ...
          switch (fieldFromInstruction16(insn, 9, 1)) {
          case 0:
            if ((Bits & ARM::ModeThumb)) {
              MI.setOpcode(2684);
              if (!Check(S, DecodeThumbAddSPImm(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // tADDspi
            }
          case 1:
            // Check Inst{6} ...
            switch (fieldFromInstruction16(insn, 6, 1)) {
            case 0:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                MI.setOpcode(2776);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // tSXTH
              }
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                MI.setOpcode(2775);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // tSXTB
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{9} ...
          switch (fieldFromInstruction16(insn, 9, 1)) {
          case 0:
            if ((Bits & ARM::ModeThumb)) {
              MI.setOpcode(2773);
              if (!Check(S, DecodeThumbAddSPImm(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // tSUBspi
            }
          case 1:
            // Check Inst{6} ...
            switch (fieldFromInstruction16(insn, 6, 1)) {
            case 0:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                MI.setOpcode(2785);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // tUXTH
              }
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops)) {
                MI.setOpcode(2784);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // tUXTB
              }
            }
            break;
          }
          break;
        }
        break;
      case 1:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2711);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 3, 5) << 0);
          tmp |= (fieldFromInstruction16(insn, 9, 1) << 5);
          if (!Check(S, DecodeThumbCmpBROperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tCBZ
        }
      }
      break;
    case 1:
      // Check Inst{9} ...
      switch (fieldFromInstruction16(insn, 9, 1)) {
      case 0:
        if ((Bits & ARM::ModeThumb)) {
          MI.setOpcode(2753);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction16(insn, 8, 1) << 14);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tPUSH
        }
      case 1:
        // Check Inst{8-5} ...
        switch (fieldFromInstruction16(insn, 5, 4)) {
        case 2:
          // Check Inst{4-4}  && Inst{2-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) &&
              fieldFromInstruction16(insn, 4, 1) == 1 && fieldFromInstruction16(insn, 0, 3) == 0) {
            MI.setOpcode(2760);
            tmp = fieldFromInstruction16(insn, 3, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // tSETEND
          }
          break;
        case 3:
          // Check Inst{3-3} for singleton decoding...
          if ((Bits & ARM::ModeThumb) &&
              fieldFromInstruction16(insn, 3, 1) == 0) {
            MI.setOpcode(2717);
            if (!Check(S, DecodeThumbCPS(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tCPS
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{8} ...
      switch (fieldFromInstruction16(insn, 8, 1)) {
      case 0:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction16(insn, 6, 2)) {
        case 0:
          // Check Inst{9-9} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
              fieldFromInstruction16(insn, 9, 1) == 1) {
            MI.setOpcode(2754);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tREV
          }
          break;
        case 1:
          // Check Inst{9-9} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
              fieldFromInstruction16(insn, 9, 1) == 1) {
            MI.setOpcode(2755);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tREV16
          }
          break;
        case 3:
          // Check Inst{9-9} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::HasV6Ops) &&
              fieldFromInstruction16(insn, 9, 1) == 1) {
            MI.setOpcode(2756);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // tREVSH
          }
          break;
        }
        break;
      case 1:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2710);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 3, 5) << 0);
          tmp |= (fieldFromInstruction16(insn, 9, 1) << 5);
          if (!Check(S, DecodeThumbCmpBROperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tCBNZ
        }
      }
      break;
    case 3:
      // Check Inst{9} ...
      switch (fieldFromInstruction16(insn, 9, 1)) {
      case 0:
        if ((Bits & ARM::ModeThumb)) {
          MI.setOpcode(2751);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction16(insn, 8, 1) << 15);
          if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tPOP
        }
      case 1:
        // Check Inst{8} ...
        switch (fieldFromInstruction16(insn, 8, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb)) {
            MI.setOpcode(2694);
            tmp = fieldFromInstruction16(insn, 0, 8);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // tBKPT
          }
        case 1:
          // Check Inst{7-0} ...
          switch (fieldFromInstruction16(insn, 0, 8)) {
          case 0:
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2748);
              return S; // tNOP
            }
          case 16:
            if ((Bits & ARM::ModeThumb)) {
              MI.setOpcode(2788);
              return S; // tYIELD
            }
          case 32:
            if ((Bits & ARM::ModeThumb)) {
              MI.setOpcode(2786);
              return S; // tWFE
            }
          case 48:
            if ((Bits & ARM::ModeThumb)) {
              MI.setOpcode(2787);
              return S; // tWFI
            }
          case 64:
            if ((Bits & ARM::ModeThumb)) {
              MI.setOpcode(2761);
              return S; // tSEV
            }
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 12:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2762);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSTMIA_UPD
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2722);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLDMIA
      }
    }
    break;
  case 13:
    // Check Inst{11-0} for singleton decoding...
    if ((Bits & ARM::ModeThumb) &&
        fieldFromInstruction16(insn, 0, 12) == 3838) {
      MI.setOpcode(2782);
      return S; // tTRAP
    }
    else
      // Check Inst{11-8} for singleton decoding...
      if ((Bits & ARM::ModeThumb) &&
          fieldFromInstruction16(insn, 8, 4) == 15) {
        MI.setOpcode(2774);
        tmp = fieldFromInstruction16(insn, 0, 8);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // tSVC
      }
      else
        if ((Bits & ARM::ModeThumb)) {
          MI.setOpcode(2708);
          tmp = fieldFromInstruction16(insn, 0, 8);
          if (!Check(S, DecodeThumbBCCTargetOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction16(insn, 8, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // tBcc
        }
    break;
  case 14:
    // Check Inst{11-11} for singleton decoding...
    if ((Bits & ARM::ModeThumb) &&
        fieldFromInstruction16(insn, 11, 1) == 0) {
      MI.setOpcode(2692);
      tmp = fieldFromInstruction16(insn, 0, 11);
      if (!Check(S, DecodeThumbBROperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      return S; // tB
    }
    break;
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeThumbInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{15-11} ...
  switch (fieldFromInstruction32(insn, 11, 5)) {
  case 29:
    // Check Inst{31-27}  && Inst{0-0} for singleton decoding...
    if ((Bits & ARM::ModeThumb) &&
        fieldFromInstruction32(insn, 27, 5) == 30 && fieldFromInstruction32(insn, 0, 1) == 0) {
      MI.setOpcode(2696);
      tmp = 0;
      tmp |= (fieldFromInstruction32(insn, 1, 10) << 1);
      tmp |= (fieldFromInstruction32(insn, 16, 10) << 11);
      if (!Check(S, DecodeThumbBLXOffset(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      return S; // tBLXi
    }
    break;
  case 31:
    // Check Inst{31-27} for singleton decoding...
    if ((Bits & ARM::ModeThumb) &&
        fieldFromInstruction32(insn, 27, 5) == 30) {
      MI.setOpcode(2695);
      tmp = 0;
      tmp |= (fieldFromInstruction32(insn, 0, 11) << 0);
      tmp |= (fieldFromInstruction32(insn, 16, 11) << 11);
      if (!Check(S, DecodeThumbBLTargetOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      return S; // tBL
    }
    break;
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeThumb2Instruction16(MCInst &MI, uint16_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{15-8} for singleton decoding...
  if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
      fieldFromInstruction16(insn, 8, 8) == 191) {
    MI.setOpcode(2343);
    if (!Check(S, DecodeIT(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
    return S; // t2IT
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeThumb2Instruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{31-27} ...
  switch (fieldFromInstruction32(insn, 27, 5)) {
  case 29:
    // Check Inst{26-24} ...
    switch (fieldFromInstruction32(insn, 24, 3)) {
    case 0:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{15} ...
        switch (fieldFromInstruction32(insn, 15, 1)) {
        case 0:
          // Check Inst{23-23}  && Inst{13-13} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 13, 1) == 0) {
            MI.setOpcode(2588);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 13) << 0);
            tmp |= (fieldFromInstruction32(insn, 14, 1) << 14);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STMIA
          }
          break;
        case 1:
          // Check Inst{23-23}  && Inst{19-16}  && Inst{14-5} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 13 && fieldFromInstruction32(insn, 5, 10) == 512) {
            MI.setOpcode(2561);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2SRSDB
          }
          break;
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{15-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2496);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RFEDB
          }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2364);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDMIA
          }
        }
        break;
      case 2:
        // Check Inst{15} ...
        switch (fieldFromInstruction32(insn, 15, 1)) {
        case 0:
          // Check Inst{23-23}  && Inst{13-13} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 13, 1) == 0) {
            MI.setOpcode(2589);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 13) << 0);
            tmp |= (fieldFromInstruction32(insn, 14, 1) << 14);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STMIA_UPD
          }
          break;
        case 1:
          // Check Inst{23-23}  && Inst{19-16}  && Inst{14-5} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 13 && fieldFromInstruction32(insn, 5, 10) == 512) {
            MI.setOpcode(2562);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2SRSDB_UPD
          }
          break;
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{15-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2497);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RFEDBW
          }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2366);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDMIA_UPD
          }
        }
        break;
      case 4:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2600);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 8);
            if (!Check(S, DecodeT2AddrModeImm0_1020s4(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STREX
          }
        case 1:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction32(insn, 4, 4)) {
          case 4:
            // Check Inst{11-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 4) == 15) {
              MI.setOpcode(2601);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STREXB
            }
            break;
          case 5:
            // Check Inst{11-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 4) == 15) {
              MI.setOpcode(2603);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STREXH
            }
            break;
          case 7:
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2602);
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STREXD
            }
          }
          break;
        }
        break;
      case 5:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2378);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 8);
            if (!Check(S, DecodeT2AddrModeImm0_1020s4(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDREX
          }
          break;
        case 1:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction32(insn, 4, 4)) {
          case 0:
            // Check Inst{15-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 8) == 240) {
              MI.setOpcode(2631);
              if (!Check(S, DecodeThumbTableBranch(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2TBB
            }
            break;
          case 1:
            // Check Inst{15-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 8) == 240) {
              MI.setOpcode(2633);
              if (!Check(S, DecodeThumbTableBranch(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2TBH
            }
            break;
          case 4:
            // Check Inst{11-8}  && Inst{3-0} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2379);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDREXB
            }
            break;
          case 5:
            // Check Inst{11-8}  && Inst{3-0} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2381);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDREXH
            }
            break;
          case 7:
            // Check Inst{3-0} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(2380);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDREXD
            }
            break;
          }
          break;
        }
        break;
      case 6:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2597);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeT2Imm8S4(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STRD_POST
        }
      case 7:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2375);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeAddrMode7Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeT2Imm8S4(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDRD_POST
        }
      }
      break;
    case 1:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{15} ...
        switch (fieldFromInstruction32(insn, 15, 1)) {
        case 0:
          // Check Inst{23-23}  && Inst{13-13} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 13, 1) == 0) {
            MI.setOpcode(2586);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 13) << 0);
            tmp |= (fieldFromInstruction32(insn, 14, 1) << 14);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STMDB
          }
          break;
        case 1:
          // Check Inst{23-23}  && Inst{19-16}  && Inst{14-5} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 16, 4) == 13 && fieldFromInstruction32(insn, 5, 10) == 512) {
            MI.setOpcode(2563);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2SRSIA
          }
          break;
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2362);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDMDB
          }
        case 1:
          // Check Inst{15-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2498);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RFEIA
          }
          break;
        }
        break;
      case 2:
        // Check Inst{15} ...
        switch (fieldFromInstruction32(insn, 15, 1)) {
        case 0:
          // Check Inst{23-23}  && Inst{13-13} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 13, 1) == 0) {
            MI.setOpcode(2587);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 13) << 0);
            tmp |= (fieldFromInstruction32(insn, 14, 1) << 14);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STMDB_UPD
          }
          break;
        case 1:
          // Check Inst{23-23}  && Inst{19-16}  && Inst{14-5} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 16, 4) == 13 && fieldFromInstruction32(insn, 5, 10) == 512) {
            MI.setOpcode(2564);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2SRSIA_UPD
          }
          break;
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2363);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!Check(S, DecodeRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDMDB_UPD
          }
        case 1:
          // Check Inst{15-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2499);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RFEIAW
          }
          break;
        }
        break;
      case 4:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2599);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeT2AddrModeImm8s4(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STRDi8
        }
      case 5:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2377);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeT2AddrModeImm8s4(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDRDi8
        }
      case 6:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2598);
          if (!Check(S, DecodeT2STRDPreInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STRD_PRE
        }
      case 7:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2376);
          if (!Check(S, DecodeT2LDRDPreInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDRD_PRE
        }
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction32(insn, 21, 3)) {
      case 0:
        // Check Inst{20-20}  && Inst{14-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(2639);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2TSTrr
        }
        else
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2640);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2TSTrs
          }
          else
            // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(2311);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ANDrr
            }
            else
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2312);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2ANDrs
              }
        break;
      case 1:
        // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2319);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2BICrr
        }
        else
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2320);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2BICrs
          }
        break;
      case 2:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction32(insn, 12, 3)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 16, 4) == 15) {
              MI.setOpcode(2445);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2MOVr
            }
            else
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2469);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2ORRrr
              }
            break;
          }
          break;
        case 3:
          // Check Inst{19-16}  && Inst{14-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 16, 4) == 15 && fieldFromInstruction32(insn, 12, 3) == 0) {
            MI.setOpcode(2502);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RRX
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{5-4} ...
        switch (fieldFromInstruction32(insn, 4, 2)) {
        case 0:
          // Check Inst{19-16} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2417);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LSLri
          }
          break;
        case 1:
          // Check Inst{19-16} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2419);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LSRri
          }
          break;
        case 2:
          // Check Inst{19-16} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2313);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2ASRri
          }
          break;
        case 3:
          // Check Inst{19-16} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2500);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RORri
          }
          break;
        default:
          break; // fallthrough
        }
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2470);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
          tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
          if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2ORRrs
        }
        break;
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction32(insn, 12, 3)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 16, 4) == 15) {
              MI.setOpcode(2462);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2MVNr
            }
            else
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2466);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2ORNrr
              }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2463);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
          tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
          if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2MVNs
        }
        else
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2467);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2ORNrs
          }
        break;
        break;
      case 4:
        // Check Inst{20-20}  && Inst{14-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(2636);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2TEQrr
        }
        else
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2637);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2TEQrs
          }
          else
            // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(2340);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2EORrr
            }
            else
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2341);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2EORrs
              }
        break;
      case 6:
        // Check Inst{5-4} ...
        switch (fieldFromInstruction32(insn, 4, 2)) {
        case 0:
          // Check Inst{20-20} for singleton decoding...
          if ((Bits & ARM::FeatureT2XtPk) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0) {
            MI.setOpcode(2471);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2PKHBT
          }
          break;
        case 2:
          // Check Inst{20-20} for singleton decoding...
          if ((Bits & ARM::FeatureT2XtPk) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0) {
            MI.setOpcode(2472);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2PKHTB
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction32(insn, 21, 3)) {
      case 0:
        // Check Inst{20-20}  && Inst{14-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(2328);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2CMNzrr
        }
        else
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2329);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2CMNzrs
          }
          else
            // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(2307);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ADDrr
            }
            else
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2308);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2ADDrs
              }
        break;
      case 2:
        // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2300);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2ADCrr
        }
        else
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2301);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2ADCrs
          }
        break;
      case 3:
        // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2512);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2SBCrr
        }
        else
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2513);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SBCrs
          }
        break;
      case 5:
        // Check Inst{20-20}  && Inst{14-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(2331);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2CMPrr
        }
        else
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2332);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2CMPrs
          }
          else
            // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(2623);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SUBrr
            }
            else
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2624);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2SUBrs
              }
        break;
      case 6:
        // Check Inst{14-12}  && Inst{7-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2506);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2RSBrr
        }
        else
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2507);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            if (!Check(S, DecodeSORegImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RSBrs
          }
        break;
      }
      break;
    case 4:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{23-23} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 23, 1) == 1) {
          MI.setOpcode(2583);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC_OPTION
        }
        break;
      case 1:
        // Check Inst{23-23} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 23, 1) == 1) {
          MI.setOpcode(2359);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC_OPTION
        }
        break;
      case 2:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2584);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC_POST
        }
      case 3:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2360);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC_POST
        }
      case 4:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2423);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MCRR
          }
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2579);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STCL_OPTION
          }
        }
        break;
      case 5:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2452);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MRRC
          }
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2355);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDCL_OPTION
          }
        }
        break;
      case 6:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2580);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STCL_POST
        }
      case 7:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2356);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDCL_POST
        }
      }
      break;
    case 5:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2582);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC_OFFSET
        }
      case 1:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2358);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC_OFFSET
        }
      case 2:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2585);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC_PRE
        }
      case 3:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2361);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC_PRE
        }
      case 4:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2578);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STCL_OFFSET
        }
      case 5:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2354);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDCL_OFFSET
        }
      case 6:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2581);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STCL_PRE
        }
      case 7:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2357);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDCL_PRE
        }
      }
      break;
    case 6:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2712);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // tCDP
        }
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2421);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MCR
          }
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2450);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MRC
          }
        }
        break;
      }
      break;
    }
    break;
  case 30:
    // Check Inst{15} ...
    switch (fieldFromInstruction32(insn, 15, 1)) {
    case 0:
      // Check Inst{25-24} ...
      switch (fieldFromInstruction32(insn, 24, 2)) {
      case 0:
        // Check Inst{23-21} ...
        switch (fieldFromInstruction32(insn, 21, 3)) {
        case 0:
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2638);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2TSTri
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2310);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ANDri
            }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2318);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2BICri
          }
        case 2:
          // Check Inst{19-16} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2441);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2MOVi
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2468);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ORRri
            }
          break;
        case 3:
          // Check Inst{19-16} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2461);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2MVNi
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2465);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ORNri
            }
          break;
        case 4:
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2635);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2TEQri
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2339);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2EORri
            }
          break;
        }
        break;
      case 1:
        // Check Inst{23-21} ...
        switch (fieldFromInstruction32(insn, 21, 3)) {
        case 0:
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2327);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2CMNzri
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2305);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ADDri
            }
          break;
        case 2:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2299);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2ADCri
          }
        case 3:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2511);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SBCri
          }
        case 5:
          // Check Inst{20-20}  && Inst{11-8} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2330);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2CMPri
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2621);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SUBri
            }
          break;
        case 6:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2505);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!Check(S, DecodeT2SOImm(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2RSBri
          }
        }
        break;
      case 2:
        // Check Inst{22} ...
        switch (fieldFromInstruction32(insn, 22, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{21} ...
            switch (fieldFromInstruction32(insn, 21, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(2306);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
                tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2ADDri12
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 23, 1) == 1) {
                MI.setOpcode(2622);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
                tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2SUBri12
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{19-16} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 16, 4) == 15) {
              MI.setOpcode(2309);
              if (!Check(S, DecodeT2Adr(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2ADR
            }
            break;
            break;
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction32(insn, 23, 1)) {
          case 0:
            // Check Inst{21-20} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 20, 2) == 0) {
              MI.setOpcode(2442);
              if (!Check(S, DecodeT2MOVTWInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2MOVi16
            }
            break;
          case 1:
            // Check Inst{21-20} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 20, 2) == 0) {
              MI.setOpcode(2437);
              if (!Check(S, DecodeT2MOVTWInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2MOVTi16
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{21-21}  && Inst{14-12}  && Inst{7-6}  && Inst{4-4} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                  fieldFromInstruction32(insn, 21, 1) == 1 && fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 0) {
                MI.setOpcode(2566);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2SSAT16
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2565);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 5);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                  tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                  tmp |= (fieldFromInstruction32(insn, 21, 1) << 5);
                  if (!Check(S, DecodeT2ShifterImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2SSAT
                }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2514);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // t2SBFX
            }
          case 2:
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{26} ...
              switch (fieldFromInstruction32(insn, 26, 1)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                    fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(2316);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 5) << 5);
                  tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                  tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                  if (!Check(S, DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2BFC
                }
                else
                  if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                    MI.setOpcode(2317);
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 5) << 5);
                    tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                    tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                    if (!Check(S, DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // t2BFI
                  }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{26-26}  && Inst{21-21}  && Inst{14-12}  && Inst{7-4} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 26, 1) == 0 && fieldFromInstruction32(insn, 21, 1) == 1 && fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(2664);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2USAT16
            }
            else
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2663);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                tmp |= (fieldFromInstruction32(insn, 21, 1) << 5);
                if (!Check(S, DecodeT2ShifterImmOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2USAT
              }
            break;
          }
          break;
        case 3:
          // Check Inst{21-20} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 20, 2) == 0) {
            MI.setOpcode(2644);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2UBFX
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{12} ...
      switch (fieldFromInstruction32(insn, 12, 1)) {
      case 0:
        // Check Inst{14} ...
        switch (fieldFromInstruction32(insn, 14, 1)) {
        case 0:
          // Check Inst{26-16} ...
          switch (fieldFromInstruction32(insn, 16, 11)) {
          case 943:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{4} ...
              switch (fieldFromInstruction32(insn, 4, 1)) {
              case 0:
                // Check Inst{3-0} ...
                switch (fieldFromInstruction32(insn, 0, 4)) {
                case 0:
                  // Check Inst{10-9}  && Inst{7-5} for singleton decoding...
                  if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                      fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                    MI.setOpcode(2464);
                    return S; // t2NOP
                  }
                  else
                    if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                      MI.setOpcode(2334);
                      if (!Check(S, DecodeT2CPSInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                      return S; // t2CPS2p
                    }
                  break;
                case 1:
                  // Check Inst{10-9}  && Inst{7-5} for singleton decoding...
                  if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                      fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                    MI.setOpcode(2676);
                    return S; // t2YIELD
                  }
                  break;
                case 2:
                  // Check Inst{10-9}  && Inst{7-5} for singleton decoding...
                  if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                      fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                    MI.setOpcode(2674);
                    return S; // t2WFE
                  }
                  break;
                case 3:
                  // Check Inst{10-9}  && Inst{7-5} for singleton decoding...
                  if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                      fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                    MI.setOpcode(2675);
                    return S; // t2WFI
                  }
                  break;
                case 4:
                  // Check Inst{10-9}  && Inst{7-5} for singleton decoding...
                  if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                      fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                    MI.setOpcode(2517);
                    return S; // t2SEV
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{13-13}  && Inst{11-9}  && Inst{7-5} for singleton decoding...
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                    fieldFromInstruction32(insn, 13, 1) == 0 && fieldFromInstruction32(insn, 9, 3) == 0 && fieldFromInstruction32(insn, 5, 3) == 7) {
                  MI.setOpcode(2336);
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // t2DBG
                }
                break;
              }
              break;
            case 1:
              // Check Inst{10-9}  && Inst{7-5} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                MI.setOpcode(2333);
                if (!Check(S, DecodeT2CPSInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2CPS1p
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2335);
                  if (!Check(S, DecodeT2CPSInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2CPS3p
                }
              break;
            }
            break;
          case 959:
            // Check Inst{13-13}  && Inst{11-0} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::HasV7Ops) &&
                fieldFromInstruction32(insn, 13, 1) == 0 && fieldFromInstruction32(insn, 0, 12) == 3887) {
              MI.setOpcode(2325);
              return S; // t2CLREX
            }
            break;
          case 1007:
            // Check Inst{13} ...
            switch (fieldFromInstruction32(insn, 13, 1)) {
            case 0:
              // Check Inst{7-0} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && !(Bits & ARM::FeatureMClass) &&
                  fieldFromInstruction32(insn, 0, 8) == 0) {
                MI.setOpcode(2454);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2MRS_AR
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureMClass)) {
                  MI.setOpcode(2455);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 8);
                  if (!Check(S, DecodeMSRMask(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2MRS_M
                }
              break;
            }
            break;
          case 1023:
            // Check Inst{13-13}  && Inst{7-0} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && !(Bits & ARM::FeatureMClass) &&
                fieldFromInstruction32(insn, 13, 1) == 0 && fieldFromInstruction32(insn, 0, 8) == 0) {
              MI.setOpcode(2456);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2MRSsys_AR
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{26-20} ...
          switch (fieldFromInstruction32(insn, 20, 7)) {
          case 56:
            // Check Inst{13-13} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureMClass) &&
                fieldFromInstruction32(insn, 13, 1) == 0) {
              MI.setOpcode(2458);
              tmp = fieldFromInstruction32(insn, 0, 8);
              if (!Check(S, DecodeMSRMask(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2MSR_M
            }
            break;
          case 60:
            // Check Inst{13-13}  && Inst{11-0} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 13, 1) == 0 && fieldFromInstruction32(insn, 0, 12) == 3840) {
              MI.setOpcode(2322);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2BXJ
            }
            break;
          case 127:
            // Check Inst{13-13} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 13, 1) == 0) {
              MI.setOpcode(2524);
              tmp = fieldFromInstruction32(insn, 16, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return S; // t2SMC
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{26-21}  && Inst{13-13}  && Inst{7-0} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && !(Bits & ARM::FeatureMClass) &&
              fieldFromInstruction32(insn, 21, 6) == 28 && fieldFromInstruction32(insn, 13, 1) == 0 && fieldFromInstruction32(insn, 0, 8) == 0) {
            MI.setOpcode(2457);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 8, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 20, 1) << 4);
            if (!Check(S, DecodeMSRMask(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2MSR_AR
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2323);
              if (!Check(S, DecodeThumb2BCCInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2Bcc
            }
          break;
          break;
          break;
        }
        break;
      case 1:
        // Check Inst{14-14} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 14, 1) == 0) {
          MI.setOpcode(2315);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 11) << 0);
          tmp |= (fieldFromInstruction32(insn, 11, 1) << 18);
          tmp |= (fieldFromInstruction32(insn, 13, 1) << 17);
          tmp |= (fieldFromInstruction32(insn, 16, 6) << 11);
          tmp |= (fieldFromInstruction32(insn, 26, 1) << 19);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // t2B
        }
        break;
      }
      break;
    }
    break;
  case 31:
    // Check Inst{26-24} ...
    switch (fieldFromInstruction32(insn, 24, 3)) {
    case 0:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2596);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 2);
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 6);
              if (!Check(S, DecodeT2AddrModeSOReg(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STRBs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2591);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STRB_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2590);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2STRBT
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2595);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2STRBi8
                }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2592);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2STRB_PRE
              }
            }
            break;
          }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2594);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STRBi12
          }
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(2478);
                if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2PLDs
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2374);
                  if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRBs
                }
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2368);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRB_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction32(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(2477);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2PLDi8
                }
                break;
              case 1:
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2367);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRBT
                }
              default:
                break; // fallthrough
              }
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2371);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRBi8
              }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2369);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRB_PRE
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2476);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2PLDi12
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2370);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRBi12
            }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2372);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // t2LDRBpci
        }
        break;
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2610);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 2);
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 6);
              if (!Check(S, DecodeT2AddrModeSOReg(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STRHs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2605);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STRH_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2604);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2STRHT
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2609);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2STRHi8
                }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2606);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2STRH_PRE
              }
            }
            break;
          }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2608);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STRHi12
          }
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::HasV7Ops) && (Bits & ARM::FeatureMP) &&
                  fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(2475);
                if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2PLDWs
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2389);
                  if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRHs
                }
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2383);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRH_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction32(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::HasV7Ops) && (Bits & ARM::FeatureMP) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(2474);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2PLDWi8
                }
                break;
              case 1:
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2382);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRHT
                }
              default:
                break; // fallthrough
              }
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2386);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRHi8
              }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2384);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRH_PRE
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::HasV7Ops) && (Bits & ARM::FeatureMP) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2473);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2PLDWi12
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2385);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRHi12
            }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2387);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // t2LDRHpci
        }
        break;
        break;
      case 4:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2617);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 2);
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 6);
              if (!Check(S, DecodeT2AddrModeSOReg(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STRs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2612);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2STR_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2611);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2STRT
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2616);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2STRi8
                }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2613);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2STR_PRE
              }
            }
            break;
          }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2615);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STRi12
          }
        }
        break;
      case 5:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2414);
              if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2407);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDR_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2406);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRT
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2410);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRi8
                }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2408);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDR_PRE
              }
            }
            break;
          }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2409);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDRi12
          }
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2411);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // t2LDRpci
        }
        break;
        break;
      }
      break;
    case 1:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::HasV7Ops) &&
                  fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(2481);
                if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2PLIs
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2397);
                  if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRSBs
                }
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2391);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRSB_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction32(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::HasV7Ops) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(2480);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2PLIi8
                }
                break;
              case 1:
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2390);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRSBT
                }
              default:
                break; // fallthrough
              }
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2394);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRSBi8
              }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2392);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRSB_PRE
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::HasV7Ops) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2479);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2PLIi12
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2393);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRSBi12
            }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2395);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // t2LDRSBpci
        }
        break;
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2405);
              if (!Check(S, DecodeT2LoadShift(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRSHs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2399);
              if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2LDRSH_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2398);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRSHT
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2402);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!Check(S, DecodeT2AddrModeImm8(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // t2LDRSHi8
                }
              break;
            case 1:
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                MI.setOpcode(2400);
                if (!Check(S, DecodeT2LdStPre(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
                return S; // t2LDRSH_PRE
              }
            }
            break;
          }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2401);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!Check(S, DecodeT2AddrModeImm12(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDRSHi12
          }
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2403);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // t2LDRSHpci
        }
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction32(insn, 21, 3)) {
      case 0:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12}  && Inst{6-4} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 3) == 0) {
            MI.setOpcode(2418);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LSLrr
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2630);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2SXTH
              }
              else
                if ((Bits & ARM::FeatureT2XtPk) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2627);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // t2SXTAH
                }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2673);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2UXTH
              }
              else
                if ((Bits & ARM::FeatureT2XtPk) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2670);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // t2UXTAH
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12}  && Inst{6-4} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 3) == 0) {
            MI.setOpcode(2420);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LSRrr
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureT2XtPk) &&
                  fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2629);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2SXTB16
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2626);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // t2SXTAB16
                }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if ((Bits & ARM::FeatureT2XtPk) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2672);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2UXTB16
              }
              else
                if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2669);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // t2UXTAB16
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12}  && Inst{6-4} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 3) == 0) {
            MI.setOpcode(2314);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2ASRrr
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2628);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2SXTB
              }
              else
                if ((Bits & ARM::FeatureT2XtPk) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2625);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // t2SXTAB
                }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                  fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2671);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return S; // t2UXTB
              }
              else
                if ((Bits & ARM::FeatureT2XtPk) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
                  MI.setOpcode(2668);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return S; // t2UXTAB
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{15-12}  && Inst{7-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2501);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!Check(S, DecodeCCOutOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2RORrr
        }
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2509);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2508);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SADD16
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2484);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2483);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QADD16
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2519);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SHADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2518);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SHADD16
            }
            break;
          }
          break;
        case 4:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2642);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2641);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UADD16
            }
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2656);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UQADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2655);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UQADD16
            }
            break;
          }
          break;
        case 6:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2647);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UHADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2646);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UHADD16
            }
            break;
          }
          break;
        case 8:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2482);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QADD
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2493);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2REV
            }
            break;
          }
          break;
        case 9:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2486);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QDADD
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2494);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2REV16
            }
            break;
          }
          break;
        case 10:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2489);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QSUB
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2492);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2RBIT
            }
            break;
          }
          break;
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2487);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QDSUB
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2495);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2REVSH
            }
            break;
          }
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2510);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SASX
          }
          break;
        case 1:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2485);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2QASX
          }
          break;
        case 2:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2520);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SHASX
          }
          break;
        case 4:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2643);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2UASX
          }
          break;
        case 5:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2657);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2UQASX
          }
          break;
        case 6:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2648);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2UHASX
          }
          break;
        case 8:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2516);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SEL
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2326);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2CLZ
            }
            break;
          }
          break;
        }
        break;
      case 6:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2569);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2568);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SSUB16
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2491);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2490);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2QSUB16
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2523);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SHSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2522);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SHSUB16
            }
            break;
          }
          break;
        case 4:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2667);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2USUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2666);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2USUB16
            }
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2660);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UQSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2659);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UQSUB16
            }
            break;
          }
          break;
        case 6:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2651);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UHSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
                fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2650);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2UHSUB16
            }
            break;
          }
          break;
        }
        break;
      case 7:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2567);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SSAX
          }
          break;
        case 1:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2488);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2QSAX
          }
          break;
        case 2:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2521);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SHSAX
          }
          break;
        case 4:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2665);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2USAX
          }
          break;
        case 5:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2658);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2UQSAX
          }
          break;
        case 6:
          // Check Inst{20-20}  && Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2649);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2UHSAX
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction32(insn, 20, 4)) {
      case 0:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2459);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2MUL
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
              MI.setOpcode(2425);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2MLA
            }
          break;
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2426);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2MLS
          }
        }
        break;
      case 1:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2552);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMULBB
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2525);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLABB
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2553);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMULBT
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2526);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLABT
            }
          break;
        case 2:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2555);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMULTB
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2536);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLATB
            }
          break;
        case 3:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2556);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMULTT
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2537);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLATT
            }
          break;
        }
        break;
      case 2:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2550);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMUAD
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2527);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLAD
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2551);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMUADX
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2528);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLADX
            }
          break;
        }
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2557);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMULWB
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2538);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLAWB
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2558);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMULWT
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2539);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLAWT
            }
          break;
        }
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2559);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMUSD
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2540);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLSD
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2560);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMUSDX
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2541);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMLSDX
            }
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2548);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMMUL
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2544);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMMLA
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2549);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMMULR
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2545);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2SMMLAR
            }
          break;
        }
        break;
      case 6:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2546);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMMLS
          }
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2547);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMMLSR
          }
        }
        break;
      case 7:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2) &&
              fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2661);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2USAD8
          }
          else
            if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
              MI.setOpcode(2662);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // t2USADA8
            }
          break;
        }
        break;
      case 8:
        // Check Inst{7-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2554);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2SMULL
        }
        break;
      case 9:
        // Check Inst{15-12}  && Inst{7-4} for singleton decoding...
        if ((Bits & ARM::FeatureHWDiv) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 4) == 15) {
          MI.setOpcode(2515);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2SDIV
        }
        break;
      case 10:
        // Check Inst{7-4} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2654);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2UMULL
        }
        break;
      case 11:
        // Check Inst{15-12}  && Inst{7-4} for singleton decoding...
        if ((Bits & ARM::FeatureHWDiv) && (Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 4) == 15) {
          MI.setOpcode(2645);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2UDIV
        }
        break;
      case 12:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2529);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLAL
          }
        case 8:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2530);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLALBB
          }
        case 9:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2531);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLALBT
          }
        case 10:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2534);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLALTB
          }
        case 11:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2535);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLALTT
          }
        case 12:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2532);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLALD
          }
        case 13:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2533);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLALDX
          }
        }
        break;
      case 13:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 12:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2542);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLSLD
          }
        case 13:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2543);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2SMLSLDX
          }
        }
        break;
      case 14:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2653);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2UMLAL
          }
        case 6:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) && (Bits & ARM::FeatureDSPThumb2)) {
            MI.setOpcode(2652);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!Check(S, DecoderGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2UMAAL
          }
        }
        break;
      }
      break;
    case 4:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{23-23} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 23, 1) == 1) {
          MI.setOpcode(2575);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC2_OPTION
        }
        break;
      case 1:
        // Check Inst{23-23} for singleton decoding...
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2) &&
            fieldFromInstruction32(insn, 23, 1) == 1) {
          MI.setOpcode(2351);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC2_OPTION
        }
        break;
      case 2:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2576);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC2_POST
        }
      case 3:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2352);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC2_POST
        }
      case 4:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2424);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MCRR2
          }
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2571);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2STC2L_OPTION
          }
        }
        break;
      case 5:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2453);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MRRC2
          }
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2347);
            if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // t2LDC2L_OPTION
          }
        }
        break;
      case 6:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2572);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC2L_POST
        }
      case 7:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2348);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC2L_POST
        }
      }
      break;
    case 5:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2574);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC2_OFFSET
        }
      case 1:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2350);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC2_OFFSET
        }
      case 2:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2577);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC2_PRE
        }
      case 3:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2353);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC2_PRE
        }
      case 4:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2570);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC2L_OFFSET
        }
      case 5:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2346);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC2L_OFFSET
        }
      case 6:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2573);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2STC2L_PRE
        }
      case 7:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2349);
          if (!Check(S, DecodeCopMemInstruction(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
          return S; // t2LDC2L_PRE
        }
      }
      break;
    case 6:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
          MI.setOpcode(2324);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 20, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return S; // t2CDP2
        }
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2422);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MCR2
          }
        case 1:
          if ((Bits & ARM::ModeThumb) && (Bits & ARM::FeatureThumb2)) {
            MI.setOpcode(2451);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!Check(S, DecodeCoprocessor(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return S; // t2MRC2
          }
        }
        break;
      }
      break;
    }
    break;
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeThumbSBitInstruction16(MCInst &MI, uint16_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{15-11} ...
  switch (fieldFromInstruction16(insn, 11, 5)) {
  case 0:
    if ((Bits & ARM::ModeThumb)) {
      MI.setOpcode(2738);
      tmp = fieldFromInstruction16(insn, 0, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 3, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 6, 5);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // tLSLri
    }
  case 1:
    if ((Bits & ARM::ModeThumb)) {
      MI.setOpcode(2740);
      tmp = fieldFromInstruction16(insn, 0, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 3, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 6, 5);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // tLSRri
    }
  case 2:
    if ((Bits & ARM::ModeThumb)) {
      MI.setOpcode(2690);
      tmp = fieldFromInstruction16(insn, 0, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 3, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 6, 5);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // tASRri
    }
  case 3:
    // Check Inst{10-9} ...
    switch (fieldFromInstruction16(insn, 9, 2)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2683);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 6, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tADDrr
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2772);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 6, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSUBrr
      }
    case 2:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2679);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 6, 3);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // tADDi3
      }
    case 3:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2770);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 6, 3);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return S; // tSUBi3
      }
    }
    break;
  case 4:
    if ((Bits & ARM::ModeThumb)) {
      MI.setOpcode(2744);
      tmp = fieldFromInstruction16(insn, 8, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 0, 8);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // tMOVi8
    }
  case 6:
    if ((Bits & ARM::ModeThumb)) {
      MI.setOpcode(2680);
      tmp = fieldFromInstruction16(insn, 8, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 8, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 0, 8);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // tADDi8
    }
  case 7:
    if ((Bits & ARM::ModeThumb)) {
      MI.setOpcode(2771);
      tmp = fieldFromInstruction16(insn, 8, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 8, 3);
      if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
      tmp = fieldFromInstruction16(insn, 0, 8);
      MI.addOperand(MCOperand::CreateImm(tmp));
      return S; // tSUBi8
    }
  case 8:
    // Check Inst{10-6} ...
    switch (fieldFromInstruction16(insn, 6, 5)) {
    case 0:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2689);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tAND
      }
    case 1:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2718);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tEOR
      }
    case 2:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2739);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLSLrr
      }
    case 3:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2741);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tLSRrr
      }
    case 4:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2691);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tASRrr
      }
    case 5:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2677);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tADC
      }
    case 6:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2759);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tSBC
      }
    case 7:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2757);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tROR
      }
    case 9:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2758);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tRSB
      }
    case 12:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2749);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tORR
      }
    case 13:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2746);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tMUL
      }
    case 14:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2693);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tBIC
      }
    case 15:
      if ((Bits & ARM::ModeThumb)) {
        MI.setOpcode(2747);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!Check(S, DecodetGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
        return S; // tMVN
      }
    }
    break;
  }

  return MCDisassembler::Fail;
}

static MCDisassembler::DecodeStatus decodeVFPInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder, const MCSubtargetInfo &STI) {
  unsigned tmp = 0;
  (void)tmp;
  MCDisassembler::DecodeStatus S = MCDisassembler::Success;
(void)S;
  uint64_t Bits = STI.getFeatureBits();
  (void)Bits;
  // Check Inst{21-20} ...
  switch (fieldFromInstruction32(insn, 20, 2)) {
  case 0:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22}  && Inst{7-6}  && Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1353);
            if (!Check(S, DecodeVMOVSRR(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMOVSRR
          }
          break;
        case 1:
          if ((Bits & ARM::FeatureVFP2)) {
            MI.setOpcode(2186);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
            if (!Check(S, DecodeSPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSTMSIA
          }
        }
        break;
      case 11:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22}  && Inst{7-6}  && Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1337);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMOVDRR
          }
          break;
        case 1:
          if ((Bits & ARM::FeatureVFP2)) {
            MI.setOpcode(2182);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
            if (!Check(S, DecodeDPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSTMDIA
          }
        }
        break;
      }
      break;
    case 13:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(2189);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
          if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeAddrMode5Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSTRS
        }
      case 11:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(2188);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeAddrMode5Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSTRD
        }
      }
      break;
    case 14:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(1295);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMLAS
              }
            case 1:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(730);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VDIVS
              }
            }
            break;
          case 11:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(1284);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VMLAD
              }
            case 1:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(729);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VDIVD
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23-23} for singleton decoding...
            if ((Bits & ARM::FeatureVFP2) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1321);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSS
            }
            break;
          case 11:
            // Check Inst{23-23} for singleton decoding...
            if ((Bits & ARM::FeatureVFP2) &&
                fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1310);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMLSD
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{23-22}  && Inst{11-8}  && Inst{6-5}  && Inst{3-0} for singleton decoding...
        if ((Bits & ARM::FeatureVFP2) &&
            fieldFromInstruction32(insn, 22, 2) == 0 && fieldFromInstruction32(insn, 8, 4) == 10 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 0) {
          MI.setOpcode(1352);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
          if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VMOVSR
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22}  && Inst{7-6}  && Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1349);
            if (!Check(S, DecodeVMOVRRS(MI, insn, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMOVRRS
          }
          break;
        case 1:
          if ((Bits & ARM::FeatureVFP2)) {
            MI.setOpcode(1252);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
            if (!Check(S, DecodeSPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLDMSIA
          }
        }
        break;
      case 11:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22}  && Inst{7-6}  && Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1348);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMOVRRD
          }
          break;
        case 1:
          if ((Bits & ARM::FeatureVFP2)) {
            MI.setOpcode(1248);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
            if (!Check(S, DecodeDPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VLDMDIA
          }
        }
        break;
      }
      break;
    case 13:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(1255);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
          if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeAddrMode5Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLDRS
        }
      case 11:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(1254);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!Check(S, DecodeAddrMode5Operand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLDRD
        }
      }
      break;
    case 14:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(1419);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNMLSS
              }
            case 1:
              if ((Bits & ARM::FeatureVFP4)) {
                MI.setOpcode(765);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VFNMSS
              }
            }
            break;
          case 11:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(1418);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNMLSD
              }
            case 1:
              if ((Bits & ARM::FeatureVFP4)) {
                MI.setOpcode(764);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VFNMSD
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(1417);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNMLAS
              }
            case 1:
              if ((Bits & ARM::FeatureVFP4)) {
                MI.setOpcode(763);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VFNMAS
              }
            }
            break;
          case 11:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              if ((Bits & ARM::FeatureVFP2)) {
                MI.setOpcode(1416);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VNMLAD
              }
            case 1:
              if ((Bits & ARM::FeatureVFP4)) {
                MI.setOpcode(762);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                return S; // VFNMAD
              }
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{23-22}  && Inst{11-8}  && Inst{6-5}  && Inst{3-0} for singleton decoding...
        if ((Bits & ARM::FeatureVFP2) &&
            fieldFromInstruction32(insn, 22, 2) == 0 && fieldFromInstruction32(insn, 8, 4) == 10 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 0) {
          MI.setOpcode(1350);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
          if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VMOVRS
        }
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{27-23} ...
    switch (fieldFromInstruction32(insn, 23, 5)) {
    case 25:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(2187);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!Check(S, DecodeSPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSTMSIA_UPD
        }
      case 11:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(2183);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!Check(S, DecodeDPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSTMDIA_UPD
        }
      }
      break;
    case 26:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(2185);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!Check(S, DecodeSPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSTMSDB_UPD
        }
      case 11:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(2181);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!Check(S, DecodeDPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VSTMDDB_UPD
        }
      }
      break;
    case 28:
      // Check Inst{6} ...
      switch (fieldFromInstruction32(insn, 6, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1383);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMULS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1371);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMULD
          }
          break;
        }
        break;
      case 1:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1421);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VNMULS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1420);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VNMULD
          }
          break;
        }
        break;
      }
      break;
    case 29:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            if ((Bits & ARM::FeatureVFP4)) {
              MI.setOpcode(755);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMAS
            }
          case 11:
            if ((Bits & ARM::FeatureVFP4)) {
              MI.setOpcode(754);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMAD
            }
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            if ((Bits & ARM::FeatureVFP4)) {
              MI.setOpcode(759);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
              if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMSS
            }
          case 11:
            if ((Bits & ARM::FeatureVFP4)) {
              MI.setOpcode(758);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VFMSD
            }
          }
          break;
        }
        break;
      case 1:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{22-22}  && Inst{11-7} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 7, 5) == 20) {
            MI.setOpcode(1370);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMSR_FPSID
          }
          break;
        case 1:
          // Check Inst{22-22}  && Inst{11-7} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 7, 5) == 20) {
            MI.setOpcode(1368);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMSR
          }
          break;
        case 8:
          // Check Inst{22-22}  && Inst{11-7} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 7, 5) == 20) {
            MI.setOpcode(1369);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMSR_FPEXC
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 3:
    // Check Inst{27-23} ...
    switch (fieldFromInstruction32(insn, 23, 5)) {
    case 25:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(1253);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!Check(S, DecodeSPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLDMSIA_UPD
        }
      case 11:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(1249);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!Check(S, DecodeDPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLDMDIA_UPD
        }
      }
      break;
    case 26:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(1251);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!Check(S, DecodeSPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLDMSDB_UPD
        }
      case 11:
        if ((Bits & ARM::FeatureVFP2)) {
          MI.setOpcode(1247);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!Check(S, DecodeDPRRegListOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // VLDMDDB_UPD
        }
      }
      break;
    case 28:
      // Check Inst{6} ...
      switch (fieldFromInstruction32(insn, 6, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(576);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(566);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VADDD
          }
          break;
        }
        break;
      case 1:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2200);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2190);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSUBD
          }
          break;
        }
        break;
      }
      break;
    case 29:
      // Check Inst{11-6} ...
      switch (fieldFromInstruction32(insn, 6, 6)) {
      case 40:
        // Check Inst{5-4} ...
        switch (fieldFromInstruction32(insn, 4, 2)) {
        case 0:
          if ((Bits & ARM::FeatureVFP3)) {
            MI.setOpcode(136);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // FCONSTS
          }
        case 1:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{22-22}  && Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureVFP2) &&
                fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 0, 4) == 0) {
              MI.setOpcode(1367);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMRS_FPSID
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 0:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if ((Bits & ARM::FeatureVFP2) &&
                    fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(137);
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                  return S; // FMSTAT
                }
                else
                  if ((Bits & ARM::FeatureVFP2)) {
                    MI.setOpcode(1365);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
                    return S; // VMRS
                  }
                break;
              }
              break;
            }
            break;
          case 8:
            // Check Inst{22-22}  && Inst{3-0} for singleton decoding...
            if ((Bits & ARM::FeatureVFP2) &&
                fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 0, 4) == 0) {
              MI.setOpcode(1366);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!Check(S, DecodeGPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
              return S; // VMRS_FPEXC
            }
            break;
          }
          break;
        }
        break;
      case 41:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1351);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMOVS
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1407);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VNEGS
          }
          break;
        case 2:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(706);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCVTBSH
          }
          break;
        case 3:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(705);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCVTBHS
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(700);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPS
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(702);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPZS
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2264);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VUITOS
          }
          break;
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1776);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSHTOS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2262);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VUHTOS
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2244);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOUIRS
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2236);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSIRS
          }
          break;
        case 14:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2234);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSHS
          }
          break;
        case 15:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2242);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOUHS
          }
          break;
        }
        break;
      case 43:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(553);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABSS
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1790);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSQRTS
          }
          break;
        case 2:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(710);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCVTTSH
          }
          break;
        case 3:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(709);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCVTTHS
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(697);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPES
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(699);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPEZS
          }
          break;
        case 7:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(707);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCVTDS
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1778);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSITOS
          }
          break;
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1788);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSLTOS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2266);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VULTOS
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2246);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOUIZS
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2238);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSIZS
          }
          break;
        case 14:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2240);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSLS
          }
          break;
        case 15:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2248);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOULS
          }
          break;
        }
        break;
      case 44:
        // Check Inst{5-4} for singleton decoding...
        if ((Bits & ARM::FeatureVFP3) &&
            fieldFromInstruction32(insn, 4, 2) == 0) {
          MI.setOpcode(135);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
          return S; // FCONSTD
        }
        break;
      case 45:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1336);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VMOVD
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1406);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VNEGD
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(695);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPD
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(701);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPZD
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2263);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VUITOD
          }
          break;
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1775);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSHTOD
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2261);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VUHTOD
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2243);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOUIRD
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2235);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSIRD
          }
          break;
        case 14:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2233);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSHD
          }
          break;
        case 15:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2241);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOUHD
          }
          break;
        }
        break;
      case 47:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(552);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VABSD
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1789);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSQRTD
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(696);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPED
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(698);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCMPEZD
          }
          break;
        case 7:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(708);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VCVTSD
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1777);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSITOD
          }
          break;
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1787);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VSLTOD
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2265);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VULTOD
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2245);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOUIZD
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2237);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!Check(S, DecodeSPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!Check(S, DecodeDPRRegisterClass(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSIZD
          }
          break;
        case 14:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2239);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOSLD
          }
          break;
        case 15:
          // Check Inst{4-4} for singleton decoding...
          if ((Bits & ARM::FeatureVFP2) &&
              fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(2247);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!Check(S, DecodePredicateOperand(MI, tmp, Address, Decoder))) return MCDisassembler::Fail;
            return S; // VTOULD
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  }

  return MCDisassembler::Fail;
}


} // End llvm namespace 
