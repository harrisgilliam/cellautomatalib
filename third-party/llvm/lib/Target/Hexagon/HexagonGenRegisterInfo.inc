//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register Enum Values
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass HexagonMCRegisterClasses[];

namespace Hexagon {
enum {
  NoRegister,
  D0 = 1,
  D1 = 2,
  D2 = 3,
  D3 = 4,
  D4 = 5,
  D5 = 6,
  D6 = 7,
  D7 = 8,
  D8 = 9,
  D9 = 10,
  D10 = 11,
  D11 = 12,
  D12 = 13,
  D13 = 14,
  D14 = 15,
  D15 = 16,
  GP = 17,
  LC0 = 18,
  LC1 = 19,
  P0 = 20,
  P1 = 21,
  P2 = 22,
  P3 = 23,
  PC = 24,
  R0 = 25,
  R1 = 26,
  R2 = 27,
  R3 = 28,
  R4 = 29,
  R5 = 30,
  R6 = 31,
  R7 = 32,
  R8 = 33,
  R9 = 34,
  R10 = 35,
  R11 = 36,
  R12 = 37,
  R13 = 38,
  R14 = 39,
  R15 = 40,
  R16 = 41,
  R17 = 42,
  R18 = 43,
  R19 = 44,
  R20 = 45,
  R21 = 46,
  R22 = 47,
  R23 = 48,
  R24 = 49,
  R25 = 50,
  R26 = 51,
  R27 = 52,
  R28 = 53,
  R29 = 54,
  R30 = 55,
  R31 = 56,
  SA0 = 57,
  SA1 = 58,
  NUM_TARGET_REGS 	// 59
};
}

// Register classes
namespace Hexagon {
enum {
  IntRegsRegClassID = 0,
  DoubleRegsRegClassID = 1,
  CRRegsRegClassID = 2,
  PredRegsRegClassID = 3
  };
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// MC Register Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {


namespace {
  const unsigned D0_Overlaps[] = { Hexagon::D0, Hexagon::R0, Hexagon::R1, 0 };
  const unsigned D1_Overlaps[] = { Hexagon::D1, Hexagon::R2, Hexagon::R3, 0 };
  const unsigned D2_Overlaps[] = { Hexagon::D2, Hexagon::R4, Hexagon::R5, 0 };
  const unsigned D3_Overlaps[] = { Hexagon::D3, Hexagon::R6, Hexagon::R7, 0 };
  const unsigned D4_Overlaps[] = { Hexagon::D4, Hexagon::R8, Hexagon::R9, 0 };
  const unsigned D5_Overlaps[] = { Hexagon::D5, Hexagon::R10, Hexagon::R11, 0 };
  const unsigned D6_Overlaps[] = { Hexagon::D6, Hexagon::R12, Hexagon::R13, 0 };
  const unsigned D7_Overlaps[] = { Hexagon::D7, Hexagon::R14, Hexagon::R15, 0 };
  const unsigned D8_Overlaps[] = { Hexagon::D8, Hexagon::R16, Hexagon::R17, 0 };
  const unsigned D9_Overlaps[] = { Hexagon::D9, Hexagon::R18, Hexagon::R19, 0 };
  const unsigned D10_Overlaps[] = { Hexagon::D10, Hexagon::R20, Hexagon::R21, 0 };
  const unsigned D11_Overlaps[] = { Hexagon::D11, Hexagon::R22, Hexagon::R23, 0 };
  const unsigned D12_Overlaps[] = { Hexagon::D12, Hexagon::R24, Hexagon::R25, 0 };
  const unsigned D13_Overlaps[] = { Hexagon::D13, Hexagon::R26, Hexagon::R27, 0 };
  const unsigned D14_Overlaps[] = { Hexagon::D14, Hexagon::R28, Hexagon::R29, 0 };
  const unsigned D15_Overlaps[] = { Hexagon::D15, Hexagon::R30, Hexagon::R31, 0 };
  const unsigned GP_Overlaps[] = { Hexagon::GP, 0 };
  const unsigned LC0_Overlaps[] = { Hexagon::LC0, 0 };
  const unsigned LC1_Overlaps[] = { Hexagon::LC1, 0 };
  const unsigned P0_Overlaps[] = { Hexagon::P0, 0 };
  const unsigned P1_Overlaps[] = { Hexagon::P1, 0 };
  const unsigned P2_Overlaps[] = { Hexagon::P2, 0 };
  const unsigned P3_Overlaps[] = { Hexagon::P3, 0 };
  const unsigned PC_Overlaps[] = { Hexagon::PC, 0 };
  const unsigned R0_Overlaps[] = { Hexagon::R0, Hexagon::D0, 0 };
  const unsigned R1_Overlaps[] = { Hexagon::R1, Hexagon::D0, 0 };
  const unsigned R2_Overlaps[] = { Hexagon::R2, Hexagon::D1, 0 };
  const unsigned R3_Overlaps[] = { Hexagon::R3, Hexagon::D1, 0 };
  const unsigned R4_Overlaps[] = { Hexagon::R4, Hexagon::D2, 0 };
  const unsigned R5_Overlaps[] = { Hexagon::R5, Hexagon::D2, 0 };
  const unsigned R6_Overlaps[] = { Hexagon::R6, Hexagon::D3, 0 };
  const unsigned R7_Overlaps[] = { Hexagon::R7, Hexagon::D3, 0 };
  const unsigned R8_Overlaps[] = { Hexagon::R8, Hexagon::D4, 0 };
  const unsigned R9_Overlaps[] = { Hexagon::R9, Hexagon::D4, 0 };
  const unsigned R10_Overlaps[] = { Hexagon::R10, Hexagon::D5, 0 };
  const unsigned R11_Overlaps[] = { Hexagon::R11, Hexagon::D5, 0 };
  const unsigned R12_Overlaps[] = { Hexagon::R12, Hexagon::D6, 0 };
  const unsigned R13_Overlaps[] = { Hexagon::R13, Hexagon::D6, 0 };
  const unsigned R14_Overlaps[] = { Hexagon::R14, Hexagon::D7, 0 };
  const unsigned R15_Overlaps[] = { Hexagon::R15, Hexagon::D7, 0 };
  const unsigned R16_Overlaps[] = { Hexagon::R16, Hexagon::D8, 0 };
  const unsigned R17_Overlaps[] = { Hexagon::R17, Hexagon::D8, 0 };
  const unsigned R18_Overlaps[] = { Hexagon::R18, Hexagon::D9, 0 };
  const unsigned R19_Overlaps[] = { Hexagon::R19, Hexagon::D9, 0 };
  const unsigned R20_Overlaps[] = { Hexagon::R20, Hexagon::D10, 0 };
  const unsigned R21_Overlaps[] = { Hexagon::R21, Hexagon::D10, 0 };
  const unsigned R22_Overlaps[] = { Hexagon::R22, Hexagon::D11, 0 };
  const unsigned R23_Overlaps[] = { Hexagon::R23, Hexagon::D11, 0 };
  const unsigned R24_Overlaps[] = { Hexagon::R24, Hexagon::D12, 0 };
  const unsigned R25_Overlaps[] = { Hexagon::R25, Hexagon::D12, 0 };
  const unsigned R26_Overlaps[] = { Hexagon::R26, Hexagon::D13, 0 };
  const unsigned R27_Overlaps[] = { Hexagon::R27, Hexagon::D13, 0 };
  const unsigned R28_Overlaps[] = { Hexagon::R28, Hexagon::D14, 0 };
  const unsigned R29_Overlaps[] = { Hexagon::R29, Hexagon::D14, 0 };
  const unsigned R30_Overlaps[] = { Hexagon::R30, Hexagon::D15, 0 };
  const unsigned R31_Overlaps[] = { Hexagon::R31, Hexagon::D15, 0 };
  const unsigned SA0_Overlaps[] = { Hexagon::SA0, 0 };
  const unsigned SA1_Overlaps[] = { Hexagon::SA1, 0 };
  const unsigned Empty_SubRegsSet[] = { 0 };
  const unsigned D0_SubRegsSet[] = { Hexagon::R0, Hexagon::R1, 0 };
  const unsigned D1_SubRegsSet[] = { Hexagon::R2, Hexagon::R3, 0 };
  const unsigned D2_SubRegsSet[] = { Hexagon::R4, Hexagon::R5, 0 };
  const unsigned D3_SubRegsSet[] = { Hexagon::R6, Hexagon::R7, 0 };
  const unsigned D4_SubRegsSet[] = { Hexagon::R8, Hexagon::R9, 0 };
  const unsigned D5_SubRegsSet[] = { Hexagon::R10, Hexagon::R11, 0 };
  const unsigned D6_SubRegsSet[] = { Hexagon::R12, Hexagon::R13, 0 };
  const unsigned D7_SubRegsSet[] = { Hexagon::R14, Hexagon::R15, 0 };
  const unsigned D8_SubRegsSet[] = { Hexagon::R16, Hexagon::R17, 0 };
  const unsigned D9_SubRegsSet[] = { Hexagon::R18, Hexagon::R19, 0 };
  const unsigned D10_SubRegsSet[] = { Hexagon::R20, Hexagon::R21, 0 };
  const unsigned D11_SubRegsSet[] = { Hexagon::R22, Hexagon::R23, 0 };
  const unsigned D12_SubRegsSet[] = { Hexagon::R24, Hexagon::R25, 0 };
  const unsigned D13_SubRegsSet[] = { Hexagon::R26, Hexagon::R27, 0 };
  const unsigned D14_SubRegsSet[] = { Hexagon::R28, Hexagon::R29, 0 };
  const unsigned D15_SubRegsSet[] = { Hexagon::R30, Hexagon::R31, 0 };
  const unsigned Empty_SuperRegsSet[] = { 0 };
  const unsigned R0_SuperRegsSet[] = { Hexagon::D0, 0 };
  const unsigned R1_SuperRegsSet[] = { Hexagon::D0, 0 };
  const unsigned R2_SuperRegsSet[] = { Hexagon::D1, 0 };
  const unsigned R3_SuperRegsSet[] = { Hexagon::D1, 0 };
  const unsigned R4_SuperRegsSet[] = { Hexagon::D2, 0 };
  const unsigned R5_SuperRegsSet[] = { Hexagon::D2, 0 };
  const unsigned R6_SuperRegsSet[] = { Hexagon::D3, 0 };
  const unsigned R7_SuperRegsSet[] = { Hexagon::D3, 0 };
  const unsigned R8_SuperRegsSet[] = { Hexagon::D4, 0 };
  const unsigned R9_SuperRegsSet[] = { Hexagon::D4, 0 };
  const unsigned R10_SuperRegsSet[] = { Hexagon::D5, 0 };
  const unsigned R11_SuperRegsSet[] = { Hexagon::D5, 0 };
  const unsigned R12_SuperRegsSet[] = { Hexagon::D6, 0 };
  const unsigned R13_SuperRegsSet[] = { Hexagon::D6, 0 };
  const unsigned R14_SuperRegsSet[] = { Hexagon::D7, 0 };
  const unsigned R15_SuperRegsSet[] = { Hexagon::D7, 0 };
  const unsigned R16_SuperRegsSet[] = { Hexagon::D8, 0 };
  const unsigned R17_SuperRegsSet[] = { Hexagon::D8, 0 };
  const unsigned R18_SuperRegsSet[] = { Hexagon::D9, 0 };
  const unsigned R19_SuperRegsSet[] = { Hexagon::D9, 0 };
  const unsigned R20_SuperRegsSet[] = { Hexagon::D10, 0 };
  const unsigned R21_SuperRegsSet[] = { Hexagon::D10, 0 };
  const unsigned R22_SuperRegsSet[] = { Hexagon::D11, 0 };
  const unsigned R23_SuperRegsSet[] = { Hexagon::D11, 0 };
  const unsigned R24_SuperRegsSet[] = { Hexagon::D12, 0 };
  const unsigned R25_SuperRegsSet[] = { Hexagon::D12, 0 };
  const unsigned R26_SuperRegsSet[] = { Hexagon::D13, 0 };
  const unsigned R27_SuperRegsSet[] = { Hexagon::D13, 0 };
  const unsigned R28_SuperRegsSet[] = { Hexagon::D14, 0 };
  const unsigned R29_SuperRegsSet[] = { Hexagon::D14, 0 };
  const unsigned R30_SuperRegsSet[] = { Hexagon::D15, 0 };
  const unsigned R31_SuperRegsSet[] = { Hexagon::D15, 0 };
}

extern const MCRegisterDesc HexagonRegDesc[] = { // Descriptors
  { "NOREG",	0,	0,	0 },
  { "D0",	D0_Overlaps,	D0_SubRegsSet,	Empty_SuperRegsSet },
  { "D1",	D1_Overlaps,	D1_SubRegsSet,	Empty_SuperRegsSet },
  { "D2",	D2_Overlaps,	D2_SubRegsSet,	Empty_SuperRegsSet },
  { "D3",	D3_Overlaps,	D3_SubRegsSet,	Empty_SuperRegsSet },
  { "D4",	D4_Overlaps,	D4_SubRegsSet,	Empty_SuperRegsSet },
  { "D5",	D5_Overlaps,	D5_SubRegsSet,	Empty_SuperRegsSet },
  { "D6",	D6_Overlaps,	D6_SubRegsSet,	Empty_SuperRegsSet },
  { "D7",	D7_Overlaps,	D7_SubRegsSet,	Empty_SuperRegsSet },
  { "D8",	D8_Overlaps,	D8_SubRegsSet,	Empty_SuperRegsSet },
  { "D9",	D9_Overlaps,	D9_SubRegsSet,	Empty_SuperRegsSet },
  { "D10",	D10_Overlaps,	D10_SubRegsSet,	Empty_SuperRegsSet },
  { "D11",	D11_Overlaps,	D11_SubRegsSet,	Empty_SuperRegsSet },
  { "D12",	D12_Overlaps,	D12_SubRegsSet,	Empty_SuperRegsSet },
  { "D13",	D13_Overlaps,	D13_SubRegsSet,	Empty_SuperRegsSet },
  { "D14",	D14_Overlaps,	D14_SubRegsSet,	Empty_SuperRegsSet },
  { "D15",	D15_Overlaps,	D15_SubRegsSet,	Empty_SuperRegsSet },
  { "GP",	GP_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "LC0",	LC0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "LC1",	LC1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "P0",	P0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "P1",	P1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "P2",	P2_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "P3",	P3_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "PC",	PC_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "R0",	R0_Overlaps,	Empty_SubRegsSet,	R0_SuperRegsSet },
  { "R1",	R1_Overlaps,	Empty_SubRegsSet,	R1_SuperRegsSet },
  { "R2",	R2_Overlaps,	Empty_SubRegsSet,	R2_SuperRegsSet },
  { "R3",	R3_Overlaps,	Empty_SubRegsSet,	R3_SuperRegsSet },
  { "R4",	R4_Overlaps,	Empty_SubRegsSet,	R4_SuperRegsSet },
  { "R5",	R5_Overlaps,	Empty_SubRegsSet,	R5_SuperRegsSet },
  { "R6",	R6_Overlaps,	Empty_SubRegsSet,	R6_SuperRegsSet },
  { "R7",	R7_Overlaps,	Empty_SubRegsSet,	R7_SuperRegsSet },
  { "R8",	R8_Overlaps,	Empty_SubRegsSet,	R8_SuperRegsSet },
  { "R9",	R9_Overlaps,	Empty_SubRegsSet,	R9_SuperRegsSet },
  { "R10",	R10_Overlaps,	Empty_SubRegsSet,	R10_SuperRegsSet },
  { "R11",	R11_Overlaps,	Empty_SubRegsSet,	R11_SuperRegsSet },
  { "R12",	R12_Overlaps,	Empty_SubRegsSet,	R12_SuperRegsSet },
  { "R13",	R13_Overlaps,	Empty_SubRegsSet,	R13_SuperRegsSet },
  { "R14",	R14_Overlaps,	Empty_SubRegsSet,	R14_SuperRegsSet },
  { "R15",	R15_Overlaps,	Empty_SubRegsSet,	R15_SuperRegsSet },
  { "R16",	R16_Overlaps,	Empty_SubRegsSet,	R16_SuperRegsSet },
  { "R17",	R17_Overlaps,	Empty_SubRegsSet,	R17_SuperRegsSet },
  { "R18",	R18_Overlaps,	Empty_SubRegsSet,	R18_SuperRegsSet },
  { "R19",	R19_Overlaps,	Empty_SubRegsSet,	R19_SuperRegsSet },
  { "R20",	R20_Overlaps,	Empty_SubRegsSet,	R20_SuperRegsSet },
  { "R21",	R21_Overlaps,	Empty_SubRegsSet,	R21_SuperRegsSet },
  { "R22",	R22_Overlaps,	Empty_SubRegsSet,	R22_SuperRegsSet },
  { "R23",	R23_Overlaps,	Empty_SubRegsSet,	R23_SuperRegsSet },
  { "R24",	R24_Overlaps,	Empty_SubRegsSet,	R24_SuperRegsSet },
  { "R25",	R25_Overlaps,	Empty_SubRegsSet,	R25_SuperRegsSet },
  { "R26",	R26_Overlaps,	Empty_SubRegsSet,	R26_SuperRegsSet },
  { "R27",	R27_Overlaps,	Empty_SubRegsSet,	R27_SuperRegsSet },
  { "R28",	R28_Overlaps,	Empty_SubRegsSet,	R28_SuperRegsSet },
  { "R29",	R29_Overlaps,	Empty_SubRegsSet,	R29_SuperRegsSet },
  { "R30",	R30_Overlaps,	Empty_SubRegsSet,	R30_SuperRegsSet },
  { "R31",	R31_Overlaps,	Empty_SubRegsSet,	R31_SuperRegsSet },
  { "SA0",	SA0_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  { "SA1",	SA1_Overlaps,	Empty_SubRegsSet,	Empty_SuperRegsSet },
};

namespace {     // Register classes...
  // IntRegs Register Class...
  static const unsigned IntRegs[] = {
    Hexagon::R0, Hexagon::R1, Hexagon::R2, Hexagon::R3, Hexagon::R4, Hexagon::R5, Hexagon::R6, Hexagon::R7, Hexagon::R8, Hexagon::R9, Hexagon::R12, Hexagon::R13, Hexagon::R14, Hexagon::R15, Hexagon::R16, Hexagon::R17, Hexagon::R18, Hexagon::R19, Hexagon::R20, Hexagon::R21, Hexagon::R22, Hexagon::R23, Hexagon::R24, Hexagon::R25, Hexagon::R26, Hexagon::R27, Hexagon::R28, Hexagon::R10, Hexagon::R11, Hexagon::R29, Hexagon::R30, Hexagon::R31, 
  };

  // IntRegs Bit set.
  static const unsigned char IntRegsBits[] = {
    0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // DoubleRegs Register Class...
  static const unsigned DoubleRegs[] = {
    Hexagon::D0, Hexagon::D1, Hexagon::D2, Hexagon::D3, Hexagon::D4, Hexagon::D6, Hexagon::D7, Hexagon::D8, Hexagon::D9, Hexagon::D10, Hexagon::D11, Hexagon::D12, Hexagon::D13, Hexagon::D5, Hexagon::D14, Hexagon::D15, 
  };

  // DoubleRegs Bit set.
  static const unsigned char DoubleRegsBits[] = {
    0xfe, 0xff, 0x01, 
  };

  // CRRegs Register Class...
  static const unsigned CRRegs[] = {
    Hexagon::LC0, Hexagon::LC1, Hexagon::SA0, Hexagon::SA1, Hexagon::PC, 
  };

  // CRRegs Bit set.
  static const unsigned char CRRegsBits[] = {
    0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x06, 
  };

  // PredRegs Register Class...
  static const unsigned PredRegs[] = {
    Hexagon::P0, Hexagon::P1, Hexagon::P2, Hexagon::P3, 
  };

  // PredRegs Bit set.
  static const unsigned char PredRegsBits[] = {
    0x00, 0x00, 0xf0, 
  };

}

extern const MCRegisterClass HexagonMCRegisterClasses[] = {
  MCRegisterClass(Hexagon::IntRegsRegClassID, "IntRegs", 4, 4, 1, 1, IntRegs, IntRegs + 32, IntRegsBits, sizeof(IntRegsBits)),
  MCRegisterClass(Hexagon::DoubleRegsRegClassID, "DoubleRegs", 8, 8, 1, 1, DoubleRegs, DoubleRegs + 16, DoubleRegsBits, sizeof(DoubleRegsBits)),
  MCRegisterClass(Hexagon::CRRegsRegClassID, "CRRegs", 4, 4, 1, 1, CRRegs, CRRegs + 5, CRRegsBits, sizeof(CRRegsBits)),
  MCRegisterClass(Hexagon::PredRegsRegClassID, "PredRegs", 4, 4, 1, 1, PredRegs, PredRegs + 4, PredRegsBits, sizeof(PredRegsBits)),
};

static inline void InitHexagonMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0) {
  RI->InitMCRegisterInfo(HexagonRegDesc, 59, RA, HexagonMCRegisterClasses, 4);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(32, Hexagon::D0, false );
    RI->mapDwarfRegToLLVMReg(34, Hexagon::D1, false );
    RI->mapDwarfRegToLLVMReg(36, Hexagon::D2, false );
    RI->mapDwarfRegToLLVMReg(38, Hexagon::D3, false );
    RI->mapDwarfRegToLLVMReg(40, Hexagon::D4, false );
    RI->mapDwarfRegToLLVMReg(42, Hexagon::D5, false );
    RI->mapDwarfRegToLLVMReg(44, Hexagon::D6, false );
    RI->mapDwarfRegToLLVMReg(46, Hexagon::D7, false );
    RI->mapDwarfRegToLLVMReg(48, Hexagon::D8, false );
    RI->mapDwarfRegToLLVMReg(50, Hexagon::D9, false );
    RI->mapDwarfRegToLLVMReg(52, Hexagon::D10, false );
    RI->mapDwarfRegToLLVMReg(54, Hexagon::D11, false );
    RI->mapDwarfRegToLLVMReg(56, Hexagon::D12, false );
    RI->mapDwarfRegToLLVMReg(58, Hexagon::D13, false );
    RI->mapDwarfRegToLLVMReg(60, Hexagon::D14, false );
    RI->mapDwarfRegToLLVMReg(62, Hexagon::D15, false );
    RI->mapDwarfRegToLLVMReg(33, Hexagon::GP, false );
    RI->mapDwarfRegToLLVMReg(68, Hexagon::LC0, false );
    RI->mapDwarfRegToLLVMReg(70, Hexagon::LC1, false );
    RI->mapDwarfRegToLLVMReg(63, Hexagon::P0, false );
    RI->mapDwarfRegToLLVMReg(64, Hexagon::P1, false );
    RI->mapDwarfRegToLLVMReg(65, Hexagon::P2, false );
    RI->mapDwarfRegToLLVMReg(66, Hexagon::P3, false );
    RI->mapDwarfRegToLLVMReg(32, Hexagon::PC, false );
    RI->mapDwarfRegToLLVMReg(0, Hexagon::R0, false );
    RI->mapDwarfRegToLLVMReg(1, Hexagon::R1, false );
    RI->mapDwarfRegToLLVMReg(2, Hexagon::R2, false );
    RI->mapDwarfRegToLLVMReg(3, Hexagon::R3, false );
    RI->mapDwarfRegToLLVMReg(4, Hexagon::R4, false );
    RI->mapDwarfRegToLLVMReg(5, Hexagon::R5, false );
    RI->mapDwarfRegToLLVMReg(6, Hexagon::R6, false );
    RI->mapDwarfRegToLLVMReg(7, Hexagon::R7, false );
    RI->mapDwarfRegToLLVMReg(8, Hexagon::R8, false );
    RI->mapDwarfRegToLLVMReg(9, Hexagon::R9, false );
    RI->mapDwarfRegToLLVMReg(10, Hexagon::R10, false );
    RI->mapDwarfRegToLLVMReg(11, Hexagon::R11, false );
    RI->mapDwarfRegToLLVMReg(12, Hexagon::R12, false );
    RI->mapDwarfRegToLLVMReg(13, Hexagon::R13, false );
    RI->mapDwarfRegToLLVMReg(14, Hexagon::R14, false );
    RI->mapDwarfRegToLLVMReg(15, Hexagon::R15, false );
    RI->mapDwarfRegToLLVMReg(16, Hexagon::R16, false );
    RI->mapDwarfRegToLLVMReg(17, Hexagon::R17, false );
    RI->mapDwarfRegToLLVMReg(18, Hexagon::R18, false );
    RI->mapDwarfRegToLLVMReg(19, Hexagon::R19, false );
    RI->mapDwarfRegToLLVMReg(20, Hexagon::R20, false );
    RI->mapDwarfRegToLLVMReg(21, Hexagon::R21, false );
    RI->mapDwarfRegToLLVMReg(22, Hexagon::R22, false );
    RI->mapDwarfRegToLLVMReg(23, Hexagon::R23, false );
    RI->mapDwarfRegToLLVMReg(24, Hexagon::R24, false );
    RI->mapDwarfRegToLLVMReg(25, Hexagon::R25, false );
    RI->mapDwarfRegToLLVMReg(26, Hexagon::R26, false );
    RI->mapDwarfRegToLLVMReg(27, Hexagon::R27, false );
    RI->mapDwarfRegToLLVMReg(28, Hexagon::R28, false );
    RI->mapDwarfRegToLLVMReg(29, Hexagon::R29, false );
    RI->mapDwarfRegToLLVMReg(30, Hexagon::R30, false );
    RI->mapDwarfRegToLLVMReg(31, Hexagon::R31, false );
    RI->mapDwarfRegToLLVMReg(67, Hexagon::SA0, false );
    RI->mapDwarfRegToLLVMReg(69, Hexagon::SA1, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapDwarfRegToLLVMReg(32, Hexagon::D0, true );
    RI->mapDwarfRegToLLVMReg(34, Hexagon::D1, true );
    RI->mapDwarfRegToLLVMReg(36, Hexagon::D2, true );
    RI->mapDwarfRegToLLVMReg(38, Hexagon::D3, true );
    RI->mapDwarfRegToLLVMReg(40, Hexagon::D4, true );
    RI->mapDwarfRegToLLVMReg(42, Hexagon::D5, true );
    RI->mapDwarfRegToLLVMReg(44, Hexagon::D6, true );
    RI->mapDwarfRegToLLVMReg(46, Hexagon::D7, true );
    RI->mapDwarfRegToLLVMReg(48, Hexagon::D8, true );
    RI->mapDwarfRegToLLVMReg(50, Hexagon::D9, true );
    RI->mapDwarfRegToLLVMReg(52, Hexagon::D10, true );
    RI->mapDwarfRegToLLVMReg(54, Hexagon::D11, true );
    RI->mapDwarfRegToLLVMReg(56, Hexagon::D12, true );
    RI->mapDwarfRegToLLVMReg(58, Hexagon::D13, true );
    RI->mapDwarfRegToLLVMReg(60, Hexagon::D14, true );
    RI->mapDwarfRegToLLVMReg(62, Hexagon::D15, true );
    RI->mapDwarfRegToLLVMReg(33, Hexagon::GP, true );
    RI->mapDwarfRegToLLVMReg(68, Hexagon::LC0, true );
    RI->mapDwarfRegToLLVMReg(70, Hexagon::LC1, true );
    RI->mapDwarfRegToLLVMReg(63, Hexagon::P0, true );
    RI->mapDwarfRegToLLVMReg(64, Hexagon::P1, true );
    RI->mapDwarfRegToLLVMReg(65, Hexagon::P2, true );
    RI->mapDwarfRegToLLVMReg(66, Hexagon::P3, true );
    RI->mapDwarfRegToLLVMReg(32, Hexagon::PC, true );
    RI->mapDwarfRegToLLVMReg(0, Hexagon::R0, true );
    RI->mapDwarfRegToLLVMReg(1, Hexagon::R1, true );
    RI->mapDwarfRegToLLVMReg(2, Hexagon::R2, true );
    RI->mapDwarfRegToLLVMReg(3, Hexagon::R3, true );
    RI->mapDwarfRegToLLVMReg(4, Hexagon::R4, true );
    RI->mapDwarfRegToLLVMReg(5, Hexagon::R5, true );
    RI->mapDwarfRegToLLVMReg(6, Hexagon::R6, true );
    RI->mapDwarfRegToLLVMReg(7, Hexagon::R7, true );
    RI->mapDwarfRegToLLVMReg(8, Hexagon::R8, true );
    RI->mapDwarfRegToLLVMReg(9, Hexagon::R9, true );
    RI->mapDwarfRegToLLVMReg(10, Hexagon::R10, true );
    RI->mapDwarfRegToLLVMReg(11, Hexagon::R11, true );
    RI->mapDwarfRegToLLVMReg(12, Hexagon::R12, true );
    RI->mapDwarfRegToLLVMReg(13, Hexagon::R13, true );
    RI->mapDwarfRegToLLVMReg(14, Hexagon::R14, true );
    RI->mapDwarfRegToLLVMReg(15, Hexagon::R15, true );
    RI->mapDwarfRegToLLVMReg(16, Hexagon::R16, true );
    RI->mapDwarfRegToLLVMReg(17, Hexagon::R17, true );
    RI->mapDwarfRegToLLVMReg(18, Hexagon::R18, true );
    RI->mapDwarfRegToLLVMReg(19, Hexagon::R19, true );
    RI->mapDwarfRegToLLVMReg(20, Hexagon::R20, true );
    RI->mapDwarfRegToLLVMReg(21, Hexagon::R21, true );
    RI->mapDwarfRegToLLVMReg(22, Hexagon::R22, true );
    RI->mapDwarfRegToLLVMReg(23, Hexagon::R23, true );
    RI->mapDwarfRegToLLVMReg(24, Hexagon::R24, true );
    RI->mapDwarfRegToLLVMReg(25, Hexagon::R25, true );
    RI->mapDwarfRegToLLVMReg(26, Hexagon::R26, true );
    RI->mapDwarfRegToLLVMReg(27, Hexagon::R27, true );
    RI->mapDwarfRegToLLVMReg(28, Hexagon::R28, true );
    RI->mapDwarfRegToLLVMReg(29, Hexagon::R29, true );
    RI->mapDwarfRegToLLVMReg(30, Hexagon::R30, true );
    RI->mapDwarfRegToLLVMReg(31, Hexagon::R31, true );
    RI->mapDwarfRegToLLVMReg(67, Hexagon::SA0, true );
    RI->mapDwarfRegToLLVMReg(69, Hexagon::SA1, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(Hexagon::D0, 32, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D1, 34, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D2, 36, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D3, 38, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D4, 40, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D5, 42, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D6, 44, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D7, 46, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D8, 48, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D9, 50, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D10, 52, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D11, 54, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D12, 56, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D13, 58, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D14, 60, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::D15, 62, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::GP, 33, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::LC0, 68, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::LC1, 70, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::P0, 63, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::P1, 64, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::P2, 65, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::P3, 66, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::PC, 32, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R0, 0, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R1, 1, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R2, 2, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R3, 3, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R4, 4, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R5, 5, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R6, 6, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R7, 7, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R8, 8, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R9, 9, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R10, 10, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R11, 11, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R12, 12, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R13, 13, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R14, 14, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R15, 15, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R16, 16, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R17, 17, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R18, 18, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R19, 19, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R20, 20, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R21, 21, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R22, 22, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R23, 23, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R24, 24, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R25, 25, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R26, 26, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R27, 27, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R28, 28, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R29, 29, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R30, 30, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::R31, 31, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::SA0, 67, false );
    RI->mapLLVMRegToDwarfReg(Hexagon::SA1, 69, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    RI->mapLLVMRegToDwarfReg(Hexagon::D0, 32, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D1, 34, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D2, 36, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D3, 38, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D4, 40, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D5, 42, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D6, 44, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D7, 46, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D8, 48, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D9, 50, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D10, 52, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D11, 54, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D12, 56, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D13, 58, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D14, 60, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::D15, 62, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::GP, 33, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::LC0, 68, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::LC1, 70, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::P0, 63, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::P1, 64, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::P2, 65, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::P3, 66, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::PC, 32, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R0, 0, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R1, 1, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R2, 2, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R3, 3, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R4, 4, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R5, 5, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R6, 6, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R7, 7, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R8, 8, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R9, 9, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R10, 10, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R11, 11, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R12, 12, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R13, 13, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R14, 14, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R15, 15, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R16, 16, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R17, 17, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R18, 18, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R19, 19, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R20, 20, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R21, 21, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R22, 22, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R23, 23, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R24, 24, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R25, 25, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R26, 26, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R27, 27, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R28, 28, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R29, 29, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R30, 30, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::R31, 31, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::SA0, 67, true );
    RI->mapLLVMRegToDwarfReg(Hexagon::SA1, 69, true );
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Header Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"
#include <string>

namespace llvm {

struct HexagonGenRegisterInfo : public TargetRegisterInfo {
  explicit HexagonGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  unsigned getSubReg(unsigned RegNo, unsigned Index) const;
  unsigned getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const;
  unsigned composeSubRegIndices(unsigned, unsigned) const;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  const TargetRegisterClass *getMatchingSuperRegClass(const TargetRegisterClass*, const TargetRegisterClass*, unsigned) const;
};


// Subregister indices
namespace Hexagon {
enum {
  NoSubRegister,
  subreg_hireg,	// 1
  subreg_loreg,	// 2
  NUM_TARGET_NAMED_SUBREGS = 3
};
}
namespace Hexagon { // Register classes
  struct IntRegsClass : public TargetRegisterClass {
    IntRegsClass();
  };
  extern IntRegsClass	IntRegsRegClass;
  static TargetRegisterClass * const IntRegsRegisterClass = &IntRegsRegClass;
  struct DoubleRegsClass : public TargetRegisterClass {
    DoubleRegsClass();
  };
  extern DoubleRegsClass	DoubleRegsRegClass;
  static TargetRegisterClass * const DoubleRegsRegisterClass = &DoubleRegsRegClass;
  struct CRRegsClass : public TargetRegisterClass {
    CRRegsClass();
  };
  extern CRRegsClass	CRRegsRegClass;
  static TargetRegisterClass * const CRRegsRegisterClass = &CRRegsRegClass;
  struct PredRegsClass : public TargetRegisterClass {
    PredRegsClass();
  };
  extern PredRegsClass	PredRegsRegClass;
  static TargetRegisterClass * const PredRegsRegisterClass = &PredRegsRegClass;
} // end of namespace Hexagon

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register and Register Classes Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass HexagonMCRegisterClasses[];
namespace {     // Register classes...
  // IntRegsVTs Register Class Value Types...
  static const EVT IntRegsVTs[] = {
    MVT::i32, MVT::Other
  };

  // DoubleRegsVTs Register Class Value Types...
  static const EVT DoubleRegsVTs[] = {
    MVT::i64, MVT::Other
  };

  // CRRegsVTs Register Class Value Types...
  static const EVT CRRegsVTs[] = {
    MVT::i32, MVT::Other
  };

  // PredRegsVTs Register Class Value Types...
  static const EVT PredRegsVTs[] = {
    MVT::i1, MVT::Other
  };

}  // end anonymous namespace

namespace Hexagon {   // Register class instances
  IntRegsClass	IntRegsRegClass;
  DoubleRegsClass	DoubleRegsRegClass;
  CRRegsClass	CRRegsRegClass;
  PredRegsClass	PredRegsRegClass;

  static const TargetRegisterClass* const NullRegClasses[] = { NULL };

  // IntRegs Super-register Classes...
  static const TargetRegisterClass* const IntRegsSuperRegClasses[] = {
    &Hexagon::DoubleRegsRegClass, NULL
  };

  // DoubleRegs Super-register Classes...
  static const TargetRegisterClass* const DoubleRegsSuperRegClasses[] = {
    NULL
  };

  // CRRegs Super-register Classes...
  static const TargetRegisterClass* const CRRegsSuperRegClasses[] = {
    NULL
  };

  // PredRegs Super-register Classes...
  static const TargetRegisterClass* const PredRegsSuperRegClasses[] = {
    NULL
  };

  static const unsigned IntRegsSubclassMask[] = { 0x00000001, };

  static const unsigned DoubleRegsSubclassMask[] = { 0x00000002, };

  static const unsigned CRRegsSubclassMask[] = { 0x00000004, };

  static const unsigned PredRegsSubclassMask[] = { 0x00000008, };

IntRegsClass::IntRegsClass()  : TargetRegisterClass(&HexagonMCRegisterClasses[IntRegsRegClassID], IntRegsVTs, IntRegsSubclassMask, NullRegClasses, IntRegsSuperRegClasses) {}
DoubleRegsClass::DoubleRegsClass()  : TargetRegisterClass(&HexagonMCRegisterClasses[DoubleRegsRegClassID], DoubleRegsVTs, DoubleRegsSubclassMask, NullRegClasses, DoubleRegsSuperRegClasses) {}
CRRegsClass::CRRegsClass()  : TargetRegisterClass(&HexagonMCRegisterClasses[CRRegsRegClassID], CRRegsVTs, CRRegsSubclassMask, NullRegClasses, CRRegsSuperRegClasses) {}
PredRegsClass::PredRegsClass()  : TargetRegisterClass(&HexagonMCRegisterClasses[PredRegsRegClassID], PredRegsVTs, PredRegsSubclassMask, NullRegClasses, PredRegsSuperRegClasses) {}
}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Hexagon::IntRegsRegClass,
    &Hexagon::DoubleRegsRegClass,
    &Hexagon::CRRegsRegClass,
    &Hexagon::PredRegsRegClass,
  };
}

  static const TargetRegisterInfoDesc HexagonRegInfoDesc[] = { // Extra Descriptors
    { 0, 0 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 0 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
    { 0, 1 },
  };

  static const char *const HexagonSubRegIndexTable[] = { "subreg_hireg", "subreg_loreg" };


unsigned HexagonGenRegisterInfo::getSubReg(unsigned RegNo, unsigned Index) const {
  switch (RegNo) {
  default:
    return 0;
  case Hexagon::D0:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R1;
    case Hexagon::subreg_loreg: return Hexagon::R0;
    };
    break;
  case Hexagon::D1:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R3;
    case Hexagon::subreg_loreg: return Hexagon::R2;
    };
    break;
  case Hexagon::D2:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R5;
    case Hexagon::subreg_loreg: return Hexagon::R4;
    };
    break;
  case Hexagon::D3:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R7;
    case Hexagon::subreg_loreg: return Hexagon::R6;
    };
    break;
  case Hexagon::D4:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R9;
    case Hexagon::subreg_loreg: return Hexagon::R8;
    };
    break;
  case Hexagon::D5:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R11;
    case Hexagon::subreg_loreg: return Hexagon::R10;
    };
    break;
  case Hexagon::D6:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R13;
    case Hexagon::subreg_loreg: return Hexagon::R12;
    };
    break;
  case Hexagon::D7:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R15;
    case Hexagon::subreg_loreg: return Hexagon::R14;
    };
    break;
  case Hexagon::D8:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R17;
    case Hexagon::subreg_loreg: return Hexagon::R16;
    };
    break;
  case Hexagon::D9:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R19;
    case Hexagon::subreg_loreg: return Hexagon::R18;
    };
    break;
  case Hexagon::D10:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R21;
    case Hexagon::subreg_loreg: return Hexagon::R20;
    };
    break;
  case Hexagon::D11:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R23;
    case Hexagon::subreg_loreg: return Hexagon::R22;
    };
    break;
  case Hexagon::D12:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R25;
    case Hexagon::subreg_loreg: return Hexagon::R24;
    };
    break;
  case Hexagon::D13:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R27;
    case Hexagon::subreg_loreg: return Hexagon::R26;
    };
    break;
  case Hexagon::D14:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R29;
    case Hexagon::subreg_loreg: return Hexagon::R28;
    };
    break;
  case Hexagon::D15:
    switch (Index) {
    default: return 0;
    case Hexagon::subreg_hireg: return Hexagon::R31;
    case Hexagon::subreg_loreg: return Hexagon::R30;
    };
    break;
  };
  return 0;
}

unsigned HexagonGenRegisterInfo::getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const {
  switch (RegNo) {
  default:
    return 0;
  case Hexagon::D0:
    if (SubRegNo == Hexagon::R1)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R0)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D1:
    if (SubRegNo == Hexagon::R3)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R2)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D2:
    if (SubRegNo == Hexagon::R5)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R4)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D3:
    if (SubRegNo == Hexagon::R7)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R6)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D4:
    if (SubRegNo == Hexagon::R9)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R8)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D5:
    if (SubRegNo == Hexagon::R11)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R10)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D6:
    if (SubRegNo == Hexagon::R13)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R12)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D7:
    if (SubRegNo == Hexagon::R15)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R14)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D8:
    if (SubRegNo == Hexagon::R17)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R16)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D9:
    if (SubRegNo == Hexagon::R19)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R18)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D10:
    if (SubRegNo == Hexagon::R21)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R20)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D11:
    if (SubRegNo == Hexagon::R23)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R22)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D12:
    if (SubRegNo == Hexagon::R25)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R24)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D13:
    if (SubRegNo == Hexagon::R27)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R26)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D14:
    if (SubRegNo == Hexagon::R29)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R28)  return Hexagon::subreg_loreg;
    return 0;
  case Hexagon::D15:
    if (SubRegNo == Hexagon::R31)  return Hexagon::subreg_hireg;
    if (SubRegNo == Hexagon::R30)  return Hexagon::subreg_loreg;
    return 0;
  };
  return 0;
}

unsigned HexagonGenRegisterInfo::composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
  switch (IdxA) {
  default:
    return IdxB;
  }
}

const TargetRegisterClass *HexagonGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[4][2] = {
    {	// IntRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
    },
    {	// DoubleRegs
      2,	// subreg_hireg -> DoubleRegs
      2,	// subreg_loreg -> DoubleRegs
    },
    {	// CRRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
    },
    {	// PredRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 2 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

const TargetRegisterClass *HexagonGenRegisterInfo::getMatchingSuperRegClass(const TargetRegisterClass *A, const TargetRegisterClass *B, unsigned Idx) const {
  static const unsigned Table[4][2][1] = {
    {	// IntRegs
      { 0x00000002, },	// subreg_hireg
      { 0x00000002, },	// subreg_loreg
    },
    {	// DoubleRegs
      { 0x00000000, },	// subreg_hireg
      { 0x00000000, },	// subreg_loreg
    },
    {	// CRRegs
      { 0x00000000, },	// subreg_hireg
      { 0x00000000, },	// subreg_loreg
    },
    {	// PredRegs
      { 0x00000000, },	// subreg_hireg
      { 0x00000000, },	// subreg_loreg
    },
  };
  assert(A && B && "Missing regclass");
  --Idx;
  assert(Idx < 2 && "Bad subreg");
  const unsigned *TV = Table[B->getID()][Idx];
  const unsigned *SC = A->getSubClassMask();
  for (unsigned i = 0; i != 1; ++i)
    if (unsigned Common = TV[i] & SC[i])
      return getRegClass(32*i + CountTrailingZeros_32(Common));
  return 0;
}

extern const MCRegisterDesc HexagonRegDesc[];
HexagonGenRegisterInfo::HexagonGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour)
  : TargetRegisterInfo(HexagonRegInfoDesc, RegisterClasses, RegisterClasses+4,
                 HexagonSubRegIndexTable) {
  InitMCRegisterInfo(HexagonRegDesc, 59, RA, HexagonMCRegisterClasses, 4);

  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(32, Hexagon::D0, false );
    mapDwarfRegToLLVMReg(34, Hexagon::D1, false );
    mapDwarfRegToLLVMReg(36, Hexagon::D2, false );
    mapDwarfRegToLLVMReg(38, Hexagon::D3, false );
    mapDwarfRegToLLVMReg(40, Hexagon::D4, false );
    mapDwarfRegToLLVMReg(42, Hexagon::D5, false );
    mapDwarfRegToLLVMReg(44, Hexagon::D6, false );
    mapDwarfRegToLLVMReg(46, Hexagon::D7, false );
    mapDwarfRegToLLVMReg(48, Hexagon::D8, false );
    mapDwarfRegToLLVMReg(50, Hexagon::D9, false );
    mapDwarfRegToLLVMReg(52, Hexagon::D10, false );
    mapDwarfRegToLLVMReg(54, Hexagon::D11, false );
    mapDwarfRegToLLVMReg(56, Hexagon::D12, false );
    mapDwarfRegToLLVMReg(58, Hexagon::D13, false );
    mapDwarfRegToLLVMReg(60, Hexagon::D14, false );
    mapDwarfRegToLLVMReg(62, Hexagon::D15, false );
    mapDwarfRegToLLVMReg(33, Hexagon::GP, false );
    mapDwarfRegToLLVMReg(68, Hexagon::LC0, false );
    mapDwarfRegToLLVMReg(70, Hexagon::LC1, false );
    mapDwarfRegToLLVMReg(63, Hexagon::P0, false );
    mapDwarfRegToLLVMReg(64, Hexagon::P1, false );
    mapDwarfRegToLLVMReg(65, Hexagon::P2, false );
    mapDwarfRegToLLVMReg(66, Hexagon::P3, false );
    mapDwarfRegToLLVMReg(32, Hexagon::PC, false );
    mapDwarfRegToLLVMReg(0, Hexagon::R0, false );
    mapDwarfRegToLLVMReg(1, Hexagon::R1, false );
    mapDwarfRegToLLVMReg(2, Hexagon::R2, false );
    mapDwarfRegToLLVMReg(3, Hexagon::R3, false );
    mapDwarfRegToLLVMReg(4, Hexagon::R4, false );
    mapDwarfRegToLLVMReg(5, Hexagon::R5, false );
    mapDwarfRegToLLVMReg(6, Hexagon::R6, false );
    mapDwarfRegToLLVMReg(7, Hexagon::R7, false );
    mapDwarfRegToLLVMReg(8, Hexagon::R8, false );
    mapDwarfRegToLLVMReg(9, Hexagon::R9, false );
    mapDwarfRegToLLVMReg(10, Hexagon::R10, false );
    mapDwarfRegToLLVMReg(11, Hexagon::R11, false );
    mapDwarfRegToLLVMReg(12, Hexagon::R12, false );
    mapDwarfRegToLLVMReg(13, Hexagon::R13, false );
    mapDwarfRegToLLVMReg(14, Hexagon::R14, false );
    mapDwarfRegToLLVMReg(15, Hexagon::R15, false );
    mapDwarfRegToLLVMReg(16, Hexagon::R16, false );
    mapDwarfRegToLLVMReg(17, Hexagon::R17, false );
    mapDwarfRegToLLVMReg(18, Hexagon::R18, false );
    mapDwarfRegToLLVMReg(19, Hexagon::R19, false );
    mapDwarfRegToLLVMReg(20, Hexagon::R20, false );
    mapDwarfRegToLLVMReg(21, Hexagon::R21, false );
    mapDwarfRegToLLVMReg(22, Hexagon::R22, false );
    mapDwarfRegToLLVMReg(23, Hexagon::R23, false );
    mapDwarfRegToLLVMReg(24, Hexagon::R24, false );
    mapDwarfRegToLLVMReg(25, Hexagon::R25, false );
    mapDwarfRegToLLVMReg(26, Hexagon::R26, false );
    mapDwarfRegToLLVMReg(27, Hexagon::R27, false );
    mapDwarfRegToLLVMReg(28, Hexagon::R28, false );
    mapDwarfRegToLLVMReg(29, Hexagon::R29, false );
    mapDwarfRegToLLVMReg(30, Hexagon::R30, false );
    mapDwarfRegToLLVMReg(31, Hexagon::R31, false );
    mapDwarfRegToLLVMReg(67, Hexagon::SA0, false );
    mapDwarfRegToLLVMReg(69, Hexagon::SA1, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapDwarfRegToLLVMReg(32, Hexagon::D0, true );
    mapDwarfRegToLLVMReg(34, Hexagon::D1, true );
    mapDwarfRegToLLVMReg(36, Hexagon::D2, true );
    mapDwarfRegToLLVMReg(38, Hexagon::D3, true );
    mapDwarfRegToLLVMReg(40, Hexagon::D4, true );
    mapDwarfRegToLLVMReg(42, Hexagon::D5, true );
    mapDwarfRegToLLVMReg(44, Hexagon::D6, true );
    mapDwarfRegToLLVMReg(46, Hexagon::D7, true );
    mapDwarfRegToLLVMReg(48, Hexagon::D8, true );
    mapDwarfRegToLLVMReg(50, Hexagon::D9, true );
    mapDwarfRegToLLVMReg(52, Hexagon::D10, true );
    mapDwarfRegToLLVMReg(54, Hexagon::D11, true );
    mapDwarfRegToLLVMReg(56, Hexagon::D12, true );
    mapDwarfRegToLLVMReg(58, Hexagon::D13, true );
    mapDwarfRegToLLVMReg(60, Hexagon::D14, true );
    mapDwarfRegToLLVMReg(62, Hexagon::D15, true );
    mapDwarfRegToLLVMReg(33, Hexagon::GP, true );
    mapDwarfRegToLLVMReg(68, Hexagon::LC0, true );
    mapDwarfRegToLLVMReg(70, Hexagon::LC1, true );
    mapDwarfRegToLLVMReg(63, Hexagon::P0, true );
    mapDwarfRegToLLVMReg(64, Hexagon::P1, true );
    mapDwarfRegToLLVMReg(65, Hexagon::P2, true );
    mapDwarfRegToLLVMReg(66, Hexagon::P3, true );
    mapDwarfRegToLLVMReg(32, Hexagon::PC, true );
    mapDwarfRegToLLVMReg(0, Hexagon::R0, true );
    mapDwarfRegToLLVMReg(1, Hexagon::R1, true );
    mapDwarfRegToLLVMReg(2, Hexagon::R2, true );
    mapDwarfRegToLLVMReg(3, Hexagon::R3, true );
    mapDwarfRegToLLVMReg(4, Hexagon::R4, true );
    mapDwarfRegToLLVMReg(5, Hexagon::R5, true );
    mapDwarfRegToLLVMReg(6, Hexagon::R6, true );
    mapDwarfRegToLLVMReg(7, Hexagon::R7, true );
    mapDwarfRegToLLVMReg(8, Hexagon::R8, true );
    mapDwarfRegToLLVMReg(9, Hexagon::R9, true );
    mapDwarfRegToLLVMReg(10, Hexagon::R10, true );
    mapDwarfRegToLLVMReg(11, Hexagon::R11, true );
    mapDwarfRegToLLVMReg(12, Hexagon::R12, true );
    mapDwarfRegToLLVMReg(13, Hexagon::R13, true );
    mapDwarfRegToLLVMReg(14, Hexagon::R14, true );
    mapDwarfRegToLLVMReg(15, Hexagon::R15, true );
    mapDwarfRegToLLVMReg(16, Hexagon::R16, true );
    mapDwarfRegToLLVMReg(17, Hexagon::R17, true );
    mapDwarfRegToLLVMReg(18, Hexagon::R18, true );
    mapDwarfRegToLLVMReg(19, Hexagon::R19, true );
    mapDwarfRegToLLVMReg(20, Hexagon::R20, true );
    mapDwarfRegToLLVMReg(21, Hexagon::R21, true );
    mapDwarfRegToLLVMReg(22, Hexagon::R22, true );
    mapDwarfRegToLLVMReg(23, Hexagon::R23, true );
    mapDwarfRegToLLVMReg(24, Hexagon::R24, true );
    mapDwarfRegToLLVMReg(25, Hexagon::R25, true );
    mapDwarfRegToLLVMReg(26, Hexagon::R26, true );
    mapDwarfRegToLLVMReg(27, Hexagon::R27, true );
    mapDwarfRegToLLVMReg(28, Hexagon::R28, true );
    mapDwarfRegToLLVMReg(29, Hexagon::R29, true );
    mapDwarfRegToLLVMReg(30, Hexagon::R30, true );
    mapDwarfRegToLLVMReg(31, Hexagon::R31, true );
    mapDwarfRegToLLVMReg(67, Hexagon::SA0, true );
    mapDwarfRegToLLVMReg(69, Hexagon::SA1, true );
    break;
  }
  switch (DwarfFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(Hexagon::D0, 32, false );
    mapLLVMRegToDwarfReg(Hexagon::D1, 34, false );
    mapLLVMRegToDwarfReg(Hexagon::D2, 36, false );
    mapLLVMRegToDwarfReg(Hexagon::D3, 38, false );
    mapLLVMRegToDwarfReg(Hexagon::D4, 40, false );
    mapLLVMRegToDwarfReg(Hexagon::D5, 42, false );
    mapLLVMRegToDwarfReg(Hexagon::D6, 44, false );
    mapLLVMRegToDwarfReg(Hexagon::D7, 46, false );
    mapLLVMRegToDwarfReg(Hexagon::D8, 48, false );
    mapLLVMRegToDwarfReg(Hexagon::D9, 50, false );
    mapLLVMRegToDwarfReg(Hexagon::D10, 52, false );
    mapLLVMRegToDwarfReg(Hexagon::D11, 54, false );
    mapLLVMRegToDwarfReg(Hexagon::D12, 56, false );
    mapLLVMRegToDwarfReg(Hexagon::D13, 58, false );
    mapLLVMRegToDwarfReg(Hexagon::D14, 60, false );
    mapLLVMRegToDwarfReg(Hexagon::D15, 62, false );
    mapLLVMRegToDwarfReg(Hexagon::GP, 33, false );
    mapLLVMRegToDwarfReg(Hexagon::LC0, 68, false );
    mapLLVMRegToDwarfReg(Hexagon::LC1, 70, false );
    mapLLVMRegToDwarfReg(Hexagon::P0, 63, false );
    mapLLVMRegToDwarfReg(Hexagon::P1, 64, false );
    mapLLVMRegToDwarfReg(Hexagon::P2, 65, false );
    mapLLVMRegToDwarfReg(Hexagon::P3, 66, false );
    mapLLVMRegToDwarfReg(Hexagon::PC, 32, false );
    mapLLVMRegToDwarfReg(Hexagon::R0, 0, false );
    mapLLVMRegToDwarfReg(Hexagon::R1, 1, false );
    mapLLVMRegToDwarfReg(Hexagon::R2, 2, false );
    mapLLVMRegToDwarfReg(Hexagon::R3, 3, false );
    mapLLVMRegToDwarfReg(Hexagon::R4, 4, false );
    mapLLVMRegToDwarfReg(Hexagon::R5, 5, false );
    mapLLVMRegToDwarfReg(Hexagon::R6, 6, false );
    mapLLVMRegToDwarfReg(Hexagon::R7, 7, false );
    mapLLVMRegToDwarfReg(Hexagon::R8, 8, false );
    mapLLVMRegToDwarfReg(Hexagon::R9, 9, false );
    mapLLVMRegToDwarfReg(Hexagon::R10, 10, false );
    mapLLVMRegToDwarfReg(Hexagon::R11, 11, false );
    mapLLVMRegToDwarfReg(Hexagon::R12, 12, false );
    mapLLVMRegToDwarfReg(Hexagon::R13, 13, false );
    mapLLVMRegToDwarfReg(Hexagon::R14, 14, false );
    mapLLVMRegToDwarfReg(Hexagon::R15, 15, false );
    mapLLVMRegToDwarfReg(Hexagon::R16, 16, false );
    mapLLVMRegToDwarfReg(Hexagon::R17, 17, false );
    mapLLVMRegToDwarfReg(Hexagon::R18, 18, false );
    mapLLVMRegToDwarfReg(Hexagon::R19, 19, false );
    mapLLVMRegToDwarfReg(Hexagon::R20, 20, false );
    mapLLVMRegToDwarfReg(Hexagon::R21, 21, false );
    mapLLVMRegToDwarfReg(Hexagon::R22, 22, false );
    mapLLVMRegToDwarfReg(Hexagon::R23, 23, false );
    mapLLVMRegToDwarfReg(Hexagon::R24, 24, false );
    mapLLVMRegToDwarfReg(Hexagon::R25, 25, false );
    mapLLVMRegToDwarfReg(Hexagon::R26, 26, false );
    mapLLVMRegToDwarfReg(Hexagon::R27, 27, false );
    mapLLVMRegToDwarfReg(Hexagon::R28, 28, false );
    mapLLVMRegToDwarfReg(Hexagon::R29, 29, false );
    mapLLVMRegToDwarfReg(Hexagon::R30, 30, false );
    mapLLVMRegToDwarfReg(Hexagon::R31, 31, false );
    mapLLVMRegToDwarfReg(Hexagon::SA0, 67, false );
    mapLLVMRegToDwarfReg(Hexagon::SA1, 69, false );
    break;
  }
  switch (EHFlavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    break;
  case 0:
    mapLLVMRegToDwarfReg(Hexagon::D0, 32, true );
    mapLLVMRegToDwarfReg(Hexagon::D1, 34, true );
    mapLLVMRegToDwarfReg(Hexagon::D2, 36, true );
    mapLLVMRegToDwarfReg(Hexagon::D3, 38, true );
    mapLLVMRegToDwarfReg(Hexagon::D4, 40, true );
    mapLLVMRegToDwarfReg(Hexagon::D5, 42, true );
    mapLLVMRegToDwarfReg(Hexagon::D6, 44, true );
    mapLLVMRegToDwarfReg(Hexagon::D7, 46, true );
    mapLLVMRegToDwarfReg(Hexagon::D8, 48, true );
    mapLLVMRegToDwarfReg(Hexagon::D9, 50, true );
    mapLLVMRegToDwarfReg(Hexagon::D10, 52, true );
    mapLLVMRegToDwarfReg(Hexagon::D11, 54, true );
    mapLLVMRegToDwarfReg(Hexagon::D12, 56, true );
    mapLLVMRegToDwarfReg(Hexagon::D13, 58, true );
    mapLLVMRegToDwarfReg(Hexagon::D14, 60, true );
    mapLLVMRegToDwarfReg(Hexagon::D15, 62, true );
    mapLLVMRegToDwarfReg(Hexagon::GP, 33, true );
    mapLLVMRegToDwarfReg(Hexagon::LC0, 68, true );
    mapLLVMRegToDwarfReg(Hexagon::LC1, 70, true );
    mapLLVMRegToDwarfReg(Hexagon::P0, 63, true );
    mapLLVMRegToDwarfReg(Hexagon::P1, 64, true );
    mapLLVMRegToDwarfReg(Hexagon::P2, 65, true );
    mapLLVMRegToDwarfReg(Hexagon::P3, 66, true );
    mapLLVMRegToDwarfReg(Hexagon::PC, 32, true );
    mapLLVMRegToDwarfReg(Hexagon::R0, 0, true );
    mapLLVMRegToDwarfReg(Hexagon::R1, 1, true );
    mapLLVMRegToDwarfReg(Hexagon::R2, 2, true );
    mapLLVMRegToDwarfReg(Hexagon::R3, 3, true );
    mapLLVMRegToDwarfReg(Hexagon::R4, 4, true );
    mapLLVMRegToDwarfReg(Hexagon::R5, 5, true );
    mapLLVMRegToDwarfReg(Hexagon::R6, 6, true );
    mapLLVMRegToDwarfReg(Hexagon::R7, 7, true );
    mapLLVMRegToDwarfReg(Hexagon::R8, 8, true );
    mapLLVMRegToDwarfReg(Hexagon::R9, 9, true );
    mapLLVMRegToDwarfReg(Hexagon::R10, 10, true );
    mapLLVMRegToDwarfReg(Hexagon::R11, 11, true );
    mapLLVMRegToDwarfReg(Hexagon::R12, 12, true );
    mapLLVMRegToDwarfReg(Hexagon::R13, 13, true );
    mapLLVMRegToDwarfReg(Hexagon::R14, 14, true );
    mapLLVMRegToDwarfReg(Hexagon::R15, 15, true );
    mapLLVMRegToDwarfReg(Hexagon::R16, 16, true );
    mapLLVMRegToDwarfReg(Hexagon::R17, 17, true );
    mapLLVMRegToDwarfReg(Hexagon::R18, 18, true );
    mapLLVMRegToDwarfReg(Hexagon::R19, 19, true );
    mapLLVMRegToDwarfReg(Hexagon::R20, 20, true );
    mapLLVMRegToDwarfReg(Hexagon::R21, 21, true );
    mapLLVMRegToDwarfReg(Hexagon::R22, 22, true );
    mapLLVMRegToDwarfReg(Hexagon::R23, 23, true );
    mapLLVMRegToDwarfReg(Hexagon::R24, 24, true );
    mapLLVMRegToDwarfReg(Hexagon::R25, 25, true );
    mapLLVMRegToDwarfReg(Hexagon::R26, 26, true );
    mapLLVMRegToDwarfReg(Hexagon::R27, 27, true );
    mapLLVMRegToDwarfReg(Hexagon::R28, 28, true );
    mapLLVMRegToDwarfReg(Hexagon::R29, 29, true );
    mapLLVMRegToDwarfReg(Hexagon::R30, 30, true );
    mapLLVMRegToDwarfReg(Hexagon::R31, 31, true );
    mapLLVMRegToDwarfReg(Hexagon::SA0, 67, true );
    mapLLVMRegToDwarfReg(Hexagon::SA1, 69, true );
    break;
  }
}



} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

