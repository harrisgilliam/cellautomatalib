//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// BUNDLE
    536870930U,	// ADD64_rr
    537919506U,	// ADDASL
    536871186U,	// ADD_ri
    1075847443U,	// ADD_ri_cNotPt
    1075847449U,	// ADD_ri_cPt
    1076896019U,	// ADD_ri_cdnNotPt
    1076896025U,	// ADD_ri_cdnPt
    536870930U,	// ADD_rr
    1075847187U,	// ADD_rr_cNotPt
    1075847193U,	// ADD_rr_cPt
    1076895763U,	// ADD_rr_cdnNotPt
    1076895769U,	// ADD_rr_cdnPt
    541081618U,	// ADDi_ASLri_V4
    541089810U,	// ADDi_LSRri_V4
    541098258U,	// ADDi_MPYri_V4
    541098002U,	// ADDi_MPYrr_V4
    536871442U,	// ADDr_ADDri_V4
    536871698U,	// ADDr_MPYir_V4
    536871954U,	// ADDr_MPYri_V4
    536871954U,	// ADDr_MPYrr_V4
    536872210U,	// ADDr_SUBri_V4
    536872210U,	// ADDri_SUBr_V4
    542156306U,	// ADDri_acc
    542164754U,	// ADDrr_acc
    30U,	// ADJCALLSTACKDOWN
    30U,	// ADJCALLSTACKUP
    536871186U,	// ADJDYNALLOC
    543162422U,	// ALLOCFRAME
    544210962U,	// ALL_pp
    545316882U,	// AND_pnotp
    545310738U,	// AND_pp
    545302802U,	// AND_ri
    545310738U,	// AND_rr
    545310738U,	// AND_rr64
    1075904531U,	// AND_rr_cNotPt
    1075904537U,	// AND_rr_cPt
    1076953107U,	// AND_rr_cdnNotPt
    1076953113U,	// AND_rr_cdnPt
    545335314U,	// ANDd_NOTd_V4
    546324498U,	// ANDi_ASLri_V4
    546332690U,	// ANDi_LSRri_V4
    547432210U,	// ANDr_ANDr_NOTr_V4
    547407634U,	// ANDr_ANDrr_V4
    548405266U,	// ANDr_ORrr_V4
    549453842U,	// ANDr_XORrr_V4
    550502418U,	// ANY_pp
    551632914U,	// ARGEXTEND
    552642834U,	// ASL
    553648146U,	// ASLH
    1075929107U,	// ASLH_cNotPt_V4
    1075929113U,	// ASLH_cPt_V4
    1076977683U,	// ASLH_cdnNotPt_V4
    1076977689U,	// ASLH_cdnPt_V4
    552650770U,	// ASL_rr
    554747666U,	// ASLd_rr_xor_V4
    555745298U,	// ASRH
    1075937299U,	// ASRH_cNotPt_V4
    1075937305U,	// ASRH_cPt_V4
    1076985875U,	// ASRH_cdnNotPt_V4
    1076985881U,	// ASRH_cdnPt_V4
    556837138U,	// ASR_ri
    556845074U,	// ASR_rr
    557893394U,	// ASR_rr_acc
    556837138U,	// ASRd_ri
    556845074U,	// ASRd_rr
    558891026U,	// ASRd_rr_xor_V4
    67U,	// BARRIER
    559939609U,	// BRCOND
    560988235U,	// BR_JT
    560988242U,	// CALL
    560988248U,	// CALLR
    560988248U,	// CALLRv3
    560988242U,	// CALLv3
    562087954U,	// CMPEHexagon4rr
    562080018U,	// CMPEQri
    562087954U,	// CMPEQrr
    563085330U,	// CMPGEUri
    564133906U,	// CMPGEri
    565233682U,	// CMPGT64rr
    566282258U,	// CMPGTU64rr
    566274322U,	// CMPGTUri
    566282258U,	// CMPGTUrr
    565225746U,	// CMPGTri
    565233682U,	// CMPGTrr
    567279634U,	// CMPLTrr
    568371474U,	// CMPbEQri_V4
    568379410U,	// CMPbEQrr_sbsb_V4
    568379410U,	// CMPbEQrr_ubub_V4
    569420050U,	// CMPbGTUri_V4
    569427986U,	// CMPbGTUrr_V4
    570468626U,	// CMPbGTri_V4
    570476562U,	// CMPbGTrr_V4
    571517202U,	// CMPhEQri_V4
    571525138U,	// CMPhEQrr_shl_V4
    571525138U,	// CMPhEQrr_xor_V4
    572565778U,	// CMPhGTUri_V4
    572573714U,	// CMPhGTUrr_V4
    573614354U,	// CMPhGTri_V4
    573622290U,	// CMPhGTrr_shl_V4
    574670866U,	// COMBINE_rr
    1075945491U,	// COMBINE_rr_cNotPt
    1075945497U,	// COMBINE_rr_cPt
    1076994067U,	// COMBINE_rr_cdnNotPt
    1076994073U,	// COMBINE_rr_cdnPt
    575782930U,	// CONST32
    575782930U,	// CONST32GP_set
    575670802U,	// CONST32_Int_Real
    576716818U,	// CONST32_Label
    575782930U,	// CONST32_set
    575791122U,	// CONST32_set_jt
    577765394U,	// CONST64_Int_Real
    95U,	// DEALLOCFRAME
    108U,	// DEALLOC_RET_V4
    578813971U,	// DEALLOC_RET_cNotPt_V4
    579862547U,	// DEALLOC_RET_cNotdnPnt_V4
    580911123U,	// DEALLOC_RET_cNotdnPt_V4
    578813977U,	// DEALLOC_RET_cPt_V4
    579862553U,	// DEALLOC_RET_cdnPnt_V4
    580911129U,	// DEALLOC_RET_cdnPt_V4
    123U,	// ENDLOOP0
    582002962U,	// HEXAGON_A4_cround_ri
    582010898U,	// HEXAGON_A4_cround_rr
    583008274U,	// HEXAGON_A4_modwrapu
    584100114U,	// HEXAGON_A4_round_ri
    584100114U,	// HEXAGON_A4_round_ri_sat
    584108050U,	// HEXAGON_A4_round_rr
    584108050U,	// HEXAGON_A4_round_rr_sat
    585156626U,	// HEXAGON_C2_bitsclr
    585148690U,	// HEXAGON_C2_bitsclri
    586154002U,	// HEXAGON_C2_bitsset
    547407634U,	// HEXAGON_M4_and_and
    547432210U,	// HEXAGON_M4_and_andn
    548405266U,	// HEXAGON_M4_and_or
    549453842U,	// HEXAGON_M4_and_xor
    587253522U,	// HEXAGON_M4_or_and
    587278098U,	// HEXAGON_M4_or_andn
    588302098U,	// HEXAGON_M4_or_or
    589299730U,	// HEXAGON_M4_or_xor
    590399250U,	// HEXAGON_M4_xor_and
    590423826U,	// HEXAGON_M4_xor_andn
    591396882U,	// HEXAGON_M4_xor_or
    592445458U,	// HEXAGON_S2_brev
    593494034U,	// HEXAGON_S2_deinterleave
    594585106U,	// HEXAGON_S2_insert
    594593554U,	// HEXAGON_S2_insert_rp
    594585106U,	// HEXAGON_S2_insertp
    594593554U,	// HEXAGON_S2_insertp_rp
    595591186U,	// HEXAGON_S2_interleave
    596639762U,	// HEXAGON_S2_lfsp
    597688338U,	// HEXAGON_S2_tableidxb_goodsyntax
    598736914U,	// HEXAGON_S2_tableidxd_goodsyntax
    599785490U,	// HEXAGON_S2_tableidxh_goodsyntax
    600834066U,	// HEXAGON_S2_tableidxw_goodsyntax
    601925138U,	// HEXAGON_S2_vspliceib
    601933586U,	// HEXAGON_S2_vsplicerb
    587245074U,	// HEXAGON_S4_or_andi
    603062546U,	// HEXAGON_S4_or_andix
    588293650U,	// HEXAGON_S4_or_ori
    604119058U,	// Hexagon_A2_abs
    604119058U,	// Hexagon_A2_absp
    604127250U,	// Hexagon_A2_abssat
    536870930U,	// Hexagon_A2_add
    536873746U,	// Hexagon_A2_addh_h16_hh
    536873746U,	// Hexagon_A2_addh_h16_hl
    536874002U,	// Hexagon_A2_addh_h16_lh
    536874002U,	// Hexagon_A2_addh_h16_ll
    536873746U,	// Hexagon_A2_addh_h16_sat_hh
    536873746U,	// Hexagon_A2_addh_h16_sat_hl
    536874002U,	// Hexagon_A2_addh_h16_sat_lh
    536874002U,	// Hexagon_A2_addh_h16_sat_ll
    536874002U,	// Hexagon_A2_addh_l16_hl
    536874002U,	// Hexagon_A2_addh_l16_ll
    536874002U,	// Hexagon_A2_addh_l16_sat_hl
    536874002U,	// Hexagon_A2_addh_l16_sat_ll
    536871186U,	// Hexagon_A2_addi
    536870930U,	// Hexagon_A2_addp
    536870930U,	// Hexagon_A2_addpsat
    536870930U,	// Hexagon_A2_addsat
    536870930U,	// Hexagon_A2_addsp
    545310738U,	// Hexagon_A2_and
    545302802U,	// Hexagon_A2_andir
    545310738U,	// Hexagon_A2_andp
    553648146U,	// Hexagon_A2_aslh
    555745298U,	// Hexagon_A2_asrh
    574777362U,	// Hexagon_A2_combine_hh
    574777362U,	// Hexagon_A2_combine_hl
    574785554U,	// Hexagon_A2_combine_lh
    574785554U,	// Hexagon_A2_combine_ll
    605071634U,	// Hexagon_A2_combineii
    574670866U,	// Hexagon_A2_combinew
    606076946U,	// Hexagon_A2_max
    606076946U,	// Hexagon_A2_maxp
    607125522U,	// Hexagon_A2_maxu
    607125522U,	// Hexagon_A2_maxup
    608174098U,	// Hexagon_A2_min
    609222674U,	// Hexagon_A2_minu
    610410514U,	// Hexagon_A2_neg
    610410514U,	// Hexagon_A2_negp
    610418706U,	// Hexagon_A2_negsat
    611319826U,	// Hexagon_A2_not
    611319826U,	// Hexagon_A2_notp
    602982418U,	// Hexagon_A2_or
    602974482U,	// Hexagon_A2_orir
    602982418U,	// Hexagon_A2_orp
    612368402U,	// Hexagon_A2_sat
    613416978U,	// Hexagon_A2_satb
    614465554U,	// Hexagon_A2_sath
    615514130U,	// Hexagon_A2_satub
    616562706U,	// Hexagon_A2_satuh
    617662482U,	// Hexagon_A2_sub
    617768978U,	// Hexagon_A2_subh_h16_hh
    617768978U,	// Hexagon_A2_subh_h16_hl
    617777170U,	// Hexagon_A2_subh_h16_lh
    617777170U,	// Hexagon_A2_subh_h16_ll
    617768978U,	// Hexagon_A2_subh_h16_sat_hh
    617768978U,	// Hexagon_A2_subh_h16_sat_hl
    617777170U,	// Hexagon_A2_subh_h16_sat_lh
    617777170U,	// Hexagon_A2_subh_h16_sat_ll
    617777170U,	// Hexagon_A2_subh_l16_hl
    617777170U,	// Hexagon_A2_subh_l16_ll
    617777170U,	// Hexagon_A2_subh_l16_sat_hl
    617777170U,	// Hexagon_A2_subh_l16_sat_ll
    617662482U,	// Hexagon_A2_subp
    618711058U,	// Hexagon_A2_subri
    617662482U,	// Hexagon_A2_subsat
    619847698U,	// Hexagon_A2_svaddh
    619855890U,	// Hexagon_A2_svaddhs
    620757010U,	// Hexagon_A2_svadduhs
    621944850U,	// Hexagon_A2_svavgh
    621977618U,	// Hexagon_A2_svavghs
    622993426U,	// Hexagon_A2_svnavgh
    624042002U,	// Hexagon_A2_svsubh
    624050194U,	// Hexagon_A2_svsubhs
    624951314U,	// Hexagon_A2_svsubuhs
    625999890U,	// Hexagon_A2_swiz
    627048466U,	// Hexagon_A2_sxtb
    628097042U,	// Hexagon_A2_sxth
    629145618U,	// Hexagon_A2_sxtw
    551632914U,	// Hexagon_A2_tfr
    630194194U,	// Hexagon_A2_tfrih
    631242770U,	// Hexagon_A2_tfril
    551632914U,	// Hexagon_A2_tfrp
    632291346U,	// Hexagon_A2_tfrpi
    632291346U,	// Hexagon_A2_tfrsi
    633479186U,	// Hexagon_A2_vabsh
    633487378U,	// Hexagon_A2_vabshsat
    634527762U,	// Hexagon_A2_vabsw
    634535954U,	// Hexagon_A2_vabswsat
    619847698U,	// Hexagon_A2_vaddh
    619855890U,	// Hexagon_A2_vaddhs
    635576338U,	// Hexagon_A2_vaddub
    635584530U,	// Hexagon_A2_vaddubs
    620757010U,	// Hexagon_A2_vadduhs
    636624914U,	// Hexagon_A2_vaddw
    636633106U,	// Hexagon_A2_vaddws
    621944850U,	// Hexagon_A2_vavgh
    621985810U,	// Hexagon_A2_vavghcr
    621977618U,	// Hexagon_A2_vavghr
    637673490U,	// Hexagon_A2_vavgub
    637706258U,	// Hexagon_A2_vavgubr
    638722066U,	// Hexagon_A2_vavguh
    638754834U,	// Hexagon_A2_vavguhr
    639770642U,	// Hexagon_A2_vavguw
    639803410U,	// Hexagon_A2_vavguwr
    640819218U,	// Hexagon_A2_vavgw
    640860178U,	// Hexagon_A2_vavgwcr
    640851986U,	// Hexagon_A2_vavgwr
    641728530U,	// Hexagon_A2_vcmpbeq
    642777106U,	// Hexagon_A2_vcmpbgtu
    643825682U,	// Hexagon_A2_vcmpheq
    644874258U,	// Hexagon_A2_vcmphgt
    645922834U,	// Hexagon_A2_vcmphgtu
    646971410U,	// Hexagon_A2_vcmpweq
    648019986U,	// Hexagon_A2_vcmpwgt
    649068562U,	// Hexagon_A2_vcmpwgtu
    650117138U,	// Hexagon_A2_vconj
    651165714U,	// Hexagon_A2_vmaxh
    652214290U,	// Hexagon_A2_vmaxub
    653262866U,	// Hexagon_A2_vmaxuh
    654311442U,	// Hexagon_A2_vmaxuw
    655360018U,	// Hexagon_A2_vmaxw
    656408594U,	// Hexagon_A2_vminh
    657457170U,	// Hexagon_A2_vminub
    658505746U,	// Hexagon_A2_vminuh
    659554322U,	// Hexagon_A2_vminuw
    660602898U,	// Hexagon_A2_vminw
    622993426U,	// Hexagon_A2_vnavgh
    623042578U,	// Hexagon_A2_vnavghcr
    623050770U,	// Hexagon_A2_vnavghr
    661790738U,	// Hexagon_A2_vnavgw
    661839890U,	// Hexagon_A2_vnavgwcr
    661848082U,	// Hexagon_A2_vnavgwr
    662700050U,	// Hexagon_A2_vraddub
    663748626U,	// Hexagon_A2_vraddub_acc
    664797202U,	// Hexagon_A2_vrsadub
    665845778U,	// Hexagon_A2_vrsadub_acc
    624042002U,	// Hexagon_A2_vsubh
    624050194U,	// Hexagon_A2_vsubhs
    667033618U,	// Hexagon_A2_vsubub
    667041810U,	// Hexagon_A2_vsububs
    624951314U,	// Hexagon_A2_vsubuhs
    668082194U,	// Hexagon_A2_vsubw
    668090386U,	// Hexagon_A2_vsubws
    668991506U,	// Hexagon_A2_xor
    668991506U,	// Hexagon_A2_xorp
    670040082U,	// Hexagon_A2_zxtb
    671088658U,	// Hexagon_A2_zxth
    545335314U,	// Hexagon_A4_andn
    605079570U,	// Hexagon_A4_combineir
    574662930U,	// Hexagon_A4_combineri
    603006994U,	// Hexagon_A4_orn
    562087954U,	// Hexagon_A4_rcmpeq
    562080018U,	// Hexagon_A4_rcmpeqi
    672188434U,	// Hexagon_A4_rcmpneq
    672180498U,	// Hexagon_A4_rcmpneqi
    544210962U,	// Hexagon_C2_all8
    545310738U,	// Hexagon_C2_and
    545316882U,	// Hexagon_C2_andn
    550502418U,	// Hexagon_C2_any8
    562087954U,	// Hexagon_C2_cmpeq
    562080018U,	// Hexagon_C2_cmpeqi
    562087954U,	// Hexagon_C2_cmpeqp
    564133906U,	// Hexagon_C2_cmpgei
    563085330U,	// Hexagon_C2_cmpgeui
    565233682U,	// Hexagon_C2_cmpgt
    565225746U,	// Hexagon_C2_cmpgti
    565233682U,	// Hexagon_C2_cmpgtp
    566282258U,	// Hexagon_C2_cmpgtu
    566274322U,	// Hexagon_C2_cmpgtui
    566282258U,	// Hexagon_C2_cmpgtup
    567279634U,	// Hexagon_C2_cmplt
    673185810U,	// Hexagon_C2_cmpltu
    674234386U,	// Hexagon_C2_mask
    675334162U,	// Hexagon_C2_mux
    675326226U,	// Hexagon_C2_muxii
    675334162U,	// Hexagon_C2_muxir
    675326226U,	// Hexagon_C2_muxri
    611319826U,	// Hexagon_C2_not
    602982418U,	// Hexagon_C2_or
    602988562U,	// Hexagon_C2_orn
    551632914U,	// Hexagon_C2_pxfer_map
    551632914U,	// Hexagon_C2_tfrpr
    551632914U,	// Hexagon_C2_tfrrp
    676331538U,	// Hexagon_C2_vitpack
    677380114U,	// Hexagon_C2_vmux
    668991506U,	// Hexagon_C2_xor
    545390610U,	// Hexagon_C4_and_and
    545393938U,	// Hexagon_C4_and_andn
    545464338U,	// Hexagon_C4_and_or
    545467666U,	// Hexagon_C4_and_orn
    678479890U,	// Hexagon_C4_cmplte
    678471954U,	// Hexagon_C4_cmpltei
    679528466U,	// Hexagon_C4_cmplteu
    679520530U,	// Hexagon_C4_cmplteui
    672188434U,	// Hexagon_C4_cmpneq
    672180498U,	// Hexagon_C4_cmpneqi
    680525842U,	// Hexagon_C4_fastcorner9
    681574418U,	// Hexagon_C4_fastcorner9_not
    603062290U,	// Hexagon_C4_or_and
    603065618U,	// Hexagon_C4_or_andn
    603136018U,	// Hexagon_C4_or_or
    603139346U,	// Hexagon_C4_or_orn
    542164754U,	// Hexagon_M2_acci
    542156306U,	// Hexagon_M2_accii
    682622994U,	// Hexagon_M2_cmaci_s0
    683671570U,	// Hexagon_M2_cmacr_s0
    684867602U,	// Hexagon_M2_cmacs_s0
    684933138U,	// Hexagon_M2_cmacs_s1
    684941330U,	// Hexagon_M2_cmacsc_s0
    684949522U,	// Hexagon_M2_cmacsc_s1
    685768722U,	// Hexagon_M2_cmpyi_s0
    686817298U,	// Hexagon_M2_cmpyr_s0
    688062482U,	// Hexagon_M2_cmpyrs_s0
    688103442U,	// Hexagon_M2_cmpyrs_s1
    688111634U,	// Hexagon_M2_cmpyrsc_s0
    688119826U,	// Hexagon_M2_cmpyrsc_s1
    688013330U,	// Hexagon_M2_cmpys_s0
    688078866U,	// Hexagon_M2_cmpys_s1
    688087058U,	// Hexagon_M2_cmpysc_s0
    688095250U,	// Hexagon_M2_cmpysc_s1
    689061906U,	// Hexagon_M2_cnacs_s0
    689127442U,	// Hexagon_M2_cnacs_s1
    689135634U,	// Hexagon_M2_cnacsc_s0
    689143826U,	// Hexagon_M2_cnacsc_s1
    690013970U,	// Hexagon_M2_dpmpyss_acc_s0
    691062546U,	// Hexagon_M2_dpmpyss_nac_s0
    692111378U,	// Hexagon_M2_dpmpyss_rnd_s0
    692111378U,	// Hexagon_M2_dpmpyss_s0
    693159698U,	// Hexagon_M2_dpmpyuu_acc_s0
    694208274U,	// Hexagon_M2_dpmpyuu_nac_s0
    695257106U,	// Hexagon_M2_dpmpyuu_s0
    692111378U,	// Hexagon_M2_hmmpyh_rs1
    692111378U,	// Hexagon_M2_hmmpyl_rs1
    696305426U,	// Hexagon_M2_maci
    697303058U,	// Hexagon_M2_macsin
    696296978U,	// Hexagon_M2_macsip
    698548242U,	// Hexagon_M2_mmachs_rs0
    698589202U,	// Hexagon_M2_mmachs_rs1
    698499090U,	// Hexagon_M2_mmachs_s0
    698564626U,	// Hexagon_M2_mmachs_s1
    699596818U,	// Hexagon_M2_mmacls_rs0
    699637778U,	// Hexagon_M2_mmacls_rs1
    699547666U,	// Hexagon_M2_mmacls_s0
    699613202U,	// Hexagon_M2_mmacls_s1
    700645394U,	// Hexagon_M2_mmacuhs_rs0
    700686354U,	// Hexagon_M2_mmacuhs_rs1
    700596242U,	// Hexagon_M2_mmacuhs_s0
    700661778U,	// Hexagon_M2_mmacuhs_s1
    701693970U,	// Hexagon_M2_mmaculs_rs0
    701734930U,	// Hexagon_M2_mmaculs_rs1
    701644818U,	// Hexagon_M2_mmaculs_s0
    701710354U,	// Hexagon_M2_mmaculs_s1
    702742546U,	// Hexagon_M2_mmpyh_rs0
    702783506U,	// Hexagon_M2_mmpyh_rs1
    702693394U,	// Hexagon_M2_mmpyh_s0
    702758930U,	// Hexagon_M2_mmpyh_s1
    703791122U,	// Hexagon_M2_mmpyl_rs0
    703832082U,	// Hexagon_M2_mmpyl_rs1
    703741970U,	// Hexagon_M2_mmpyl_s0
    703807506U,	// Hexagon_M2_mmpyl_s1
    704839698U,	// Hexagon_M2_mmpyuh_rs0
    704880658U,	// Hexagon_M2_mmpyuh_rs1
    704790546U,	// Hexagon_M2_mmpyuh_s0
    704856082U,	// Hexagon_M2_mmpyuh_s1
    705888274U,	// Hexagon_M2_mmpyul_rs0
    705929234U,	// Hexagon_M2_mmpyul_rs1
    705839122U,	// Hexagon_M2_mmpyul_s0
    705904658U,	// Hexagon_M2_mmpyul_s1
    690120466U,	// Hexagon_M2_mpy_acc_hh_s0
    690120466U,	// Hexagon_M2_mpy_acc_hh_s1
    690120466U,	// Hexagon_M2_mpy_acc_hl_s0
    690120466U,	// Hexagon_M2_mpy_acc_hl_s1
    690128658U,	// Hexagon_M2_mpy_acc_lh_s0
    690128658U,	// Hexagon_M2_mpy_acc_lh_s1
    690128658U,	// Hexagon_M2_mpy_acc_ll_s0
    690128658U,	// Hexagon_M2_mpy_acc_ll_s1
    690120466U,	// Hexagon_M2_mpy_acc_sat_hh_s0
    690120466U,	// Hexagon_M2_mpy_acc_sat_hh_s1
    690120466U,	// Hexagon_M2_mpy_acc_sat_hl_s0
    690120466U,	// Hexagon_M2_mpy_acc_sat_hl_s1
    690128658U,	// Hexagon_M2_mpy_acc_sat_lh_s0
    690128658U,	// Hexagon_M2_mpy_acc_sat_lh_s1
    690128658U,	// Hexagon_M2_mpy_acc_sat_ll_s0
    690128658U,	// Hexagon_M2_mpy_acc_sat_ll_s1
    692217874U,	// Hexagon_M2_mpy_hh_s0
    692217874U,	// Hexagon_M2_mpy_hh_s1
    692217874U,	// Hexagon_M2_mpy_hl_s0
    692217874U,	// Hexagon_M2_mpy_hl_s1
    692226066U,	// Hexagon_M2_mpy_lh_s0
    692226066U,	// Hexagon_M2_mpy_lh_s1
    692226066U,	// Hexagon_M2_mpy_ll_s0
    692226066U,	// Hexagon_M2_mpy_ll_s1
    691169042U,	// Hexagon_M2_mpy_nac_hh_s0
    691169042U,	// Hexagon_M2_mpy_nac_hh_s1
    691169042U,	// Hexagon_M2_mpy_nac_hl_s0
    691169042U,	// Hexagon_M2_mpy_nac_hl_s1
    691177234U,	// Hexagon_M2_mpy_nac_lh_s0
    691177234U,	// Hexagon_M2_mpy_nac_lh_s1
    691177234U,	// Hexagon_M2_mpy_nac_ll_s0
    691177234U,	// Hexagon_M2_mpy_nac_ll_s1
    691169042U,	// Hexagon_M2_mpy_nac_sat_hh_s0
    691169042U,	// Hexagon_M2_mpy_nac_sat_hh_s1
    691169042U,	// Hexagon_M2_mpy_nac_sat_hl_s0
    691169042U,	// Hexagon_M2_mpy_nac_sat_hl_s1
    691177234U,	// Hexagon_M2_mpy_nac_sat_lh_s0
    691177234U,	// Hexagon_M2_mpy_nac_sat_lh_s1
    691177234U,	// Hexagon_M2_mpy_nac_sat_ll_s0
    691177234U,	// Hexagon_M2_mpy_nac_sat_ll_s1
    692217874U,	// Hexagon_M2_mpy_rnd_hh_s0
    692217874U,	// Hexagon_M2_mpy_rnd_hh_s1
    692217874U,	// Hexagon_M2_mpy_rnd_hl_s0
    692217874U,	// Hexagon_M2_mpy_rnd_hl_s1
    692226066U,	// Hexagon_M2_mpy_rnd_lh_s0
    692226066U,	// Hexagon_M2_mpy_rnd_lh_s1
    692226066U,	// Hexagon_M2_mpy_rnd_ll_s0
    692226066U,	// Hexagon_M2_mpy_rnd_ll_s1
    692217874U,	// Hexagon_M2_mpy_sat_hh_s0
    692217874U,	// Hexagon_M2_mpy_sat_hh_s1
    692217874U,	// Hexagon_M2_mpy_sat_hl_s0
    692217874U,	// Hexagon_M2_mpy_sat_hl_s1
    692226066U,	// Hexagon_M2_mpy_sat_lh_s0
    692226066U,	// Hexagon_M2_mpy_sat_lh_s1
    692226066U,	// Hexagon_M2_mpy_sat_ll_s0
    692226066U,	// Hexagon_M2_mpy_sat_ll_s1
    692217874U,	// Hexagon_M2_mpy_sat_rnd_hh_s0
    692217874U,	// Hexagon_M2_mpy_sat_rnd_hh_s1
    692217874U,	// Hexagon_M2_mpy_sat_rnd_hl_s0
    692217874U,	// Hexagon_M2_mpy_sat_rnd_hl_s1
    692226066U,	// Hexagon_M2_mpy_sat_rnd_lh_s0
    692226066U,	// Hexagon_M2_mpy_sat_rnd_lh_s1
    692226066U,	// Hexagon_M2_mpy_sat_rnd_ll_s0
    692226066U,	// Hexagon_M2_mpy_sat_rnd_ll_s1
    692111378U,	// Hexagon_M2_mpy_up
    690120466U,	// Hexagon_M2_mpyd_acc_hh_s0
    690120466U,	// Hexagon_M2_mpyd_acc_hh_s1
    690120466U,	// Hexagon_M2_mpyd_acc_hl_s0
    690120466U,	// Hexagon_M2_mpyd_acc_hl_s1
    690128658U,	// Hexagon_M2_mpyd_acc_lh_s0
    690128658U,	// Hexagon_M2_mpyd_acc_lh_s1
    690128658U,	// Hexagon_M2_mpyd_acc_ll_s0
    690128658U,	// Hexagon_M2_mpyd_acc_ll_s1
    692217874U,	// Hexagon_M2_mpyd_hh_s0
    692217874U,	// Hexagon_M2_mpyd_hh_s1
    692217874U,	// Hexagon_M2_mpyd_hl_s0
    692217874U,	// Hexagon_M2_mpyd_hl_s1
    692226066U,	// Hexagon_M2_mpyd_lh_s0
    692226066U,	// Hexagon_M2_mpyd_lh_s1
    692226066U,	// Hexagon_M2_mpyd_ll_s0
    692226066U,	// Hexagon_M2_mpyd_ll_s1
    691169042U,	// Hexagon_M2_mpyd_nac_hh_s0
    691169042U,	// Hexagon_M2_mpyd_nac_hh_s1
    691169042U,	// Hexagon_M2_mpyd_nac_hl_s0
    691169042U,	// Hexagon_M2_mpyd_nac_hl_s1
    691177234U,	// Hexagon_M2_mpyd_nac_lh_s0
    691177234U,	// Hexagon_M2_mpyd_nac_lh_s1
    691177234U,	// Hexagon_M2_mpyd_nac_ll_s0
    691177234U,	// Hexagon_M2_mpyd_nac_ll_s1
    692217874U,	// Hexagon_M2_mpyd_rnd_hh_s0
    692217874U,	// Hexagon_M2_mpyd_rnd_hh_s1
    692217874U,	// Hexagon_M2_mpyd_rnd_hl_s0
    692217874U,	// Hexagon_M2_mpyd_rnd_hl_s1
    692226066U,	// Hexagon_M2_mpyd_rnd_lh_s0
    692226066U,	// Hexagon_M2_mpyd_rnd_lh_s1
    692226066U,	// Hexagon_M2_mpyd_rnd_ll_s0
    692226066U,	// Hexagon_M2_mpyd_rnd_ll_s1
    706791442U,	// Hexagon_M2_mpyi
    693266194U,	// Hexagon_M2_mpyu_acc_hh_s0
    693266194U,	// Hexagon_M2_mpyu_acc_hh_s1
    693266194U,	// Hexagon_M2_mpyu_acc_hl_s0
    693266194U,	// Hexagon_M2_mpyu_acc_hl_s1
    693274386U,	// Hexagon_M2_mpyu_acc_lh_s0
    693274386U,	// Hexagon_M2_mpyu_acc_lh_s1
    693274386U,	// Hexagon_M2_mpyu_acc_ll_s0
    693274386U,	// Hexagon_M2_mpyu_acc_ll_s1
    695363602U,	// Hexagon_M2_mpyu_hh_s0
    695363602U,	// Hexagon_M2_mpyu_hh_s1
    695363602U,	// Hexagon_M2_mpyu_hl_s0
    695363602U,	// Hexagon_M2_mpyu_hl_s1
    695371794U,	// Hexagon_M2_mpyu_lh_s0
    695371794U,	// Hexagon_M2_mpyu_lh_s1
    695371794U,	// Hexagon_M2_mpyu_ll_s0
    695371794U,	// Hexagon_M2_mpyu_ll_s1
    694314770U,	// Hexagon_M2_mpyu_nac_hh_s0
    694314770U,	// Hexagon_M2_mpyu_nac_hh_s1
    694314770U,	// Hexagon_M2_mpyu_nac_hl_s0
    694314770U,	// Hexagon_M2_mpyu_nac_hl_s1
    694322962U,	// Hexagon_M2_mpyu_nac_lh_s0
    694322962U,	// Hexagon_M2_mpyu_nac_lh_s1
    694322962U,	// Hexagon_M2_mpyu_nac_ll_s0
    694322962U,	// Hexagon_M2_mpyu_nac_ll_s1
    695257106U,	// Hexagon_M2_mpyu_up
    693266194U,	// Hexagon_M2_mpyud_acc_hh_s0
    693266194U,	// Hexagon_M2_mpyud_acc_hh_s1
    693266194U,	// Hexagon_M2_mpyud_acc_hl_s0
    693266194U,	// Hexagon_M2_mpyud_acc_hl_s1
    693274386U,	// Hexagon_M2_mpyud_acc_lh_s0
    693274386U,	// Hexagon_M2_mpyud_acc_lh_s1
    693274386U,	// Hexagon_M2_mpyud_acc_ll_s0
    693274386U,	// Hexagon_M2_mpyud_acc_ll_s1
    695363602U,	// Hexagon_M2_mpyud_hh_s0
    695363602U,	// Hexagon_M2_mpyud_hh_s1
    695363602U,	// Hexagon_M2_mpyud_hl_s0
    695363602U,	// Hexagon_M2_mpyud_hl_s1
    695371794U,	// Hexagon_M2_mpyud_lh_s0
    695371794U,	// Hexagon_M2_mpyud_lh_s1
    695371794U,	// Hexagon_M2_mpyud_ll_s0
    695371794U,	// Hexagon_M2_mpyud_ll_s1
    694314770U,	// Hexagon_M2_mpyud_nac_hh_s0
    694314770U,	// Hexagon_M2_mpyud_nac_hh_s1
    694314770U,	// Hexagon_M2_mpyud_nac_hl_s0
    694314770U,	// Hexagon_M2_mpyud_nac_hl_s1
    694322962U,	// Hexagon_M2_mpyud_nac_lh_s0
    694322962U,	// Hexagon_M2_mpyud_nac_lh_s1
    694322962U,	// Hexagon_M2_mpyud_nac_ll_s0
    694322962U,	// Hexagon_M2_mpyud_nac_ll_s1
    707788818U,	// Hexagon_M2_mpyui
    708888338U,	// Hexagon_M2_nacci
    708879890U,	// Hexagon_M2_naccii
    709885970U,	// Hexagon_M2_subacc
    710934546U,	// Hexagon_M2_vabsdiffh
    711983122U,	// Hexagon_M2_vabsdiffw
    713031698U,	// Hexagon_M2_vcmac_s0_sat_i
    714080274U,	// Hexagon_M2_vcmac_s0_sat_r
    715276306U,	// Hexagon_M2_vcmpy_s0_sat_i
    716324882U,	// Hexagon_M2_vcmpy_s0_sat_r
    715341842U,	// Hexagon_M2_vcmpy_s1_sat_i
    716390418U,	// Hexagon_M2_vcmpy_s1_sat_r
    717373458U,	// Hexagon_M2_vdmacs_s0
    717438994U,	// Hexagon_M2_vdmacs_s1
    718471186U,	// Hexagon_M2_vdmpyrs_s0
    718512146U,	// Hexagon_M2_vdmpyrs_s1
    718422034U,	// Hexagon_M2_vdmpys_s0
    718487570U,	// Hexagon_M2_vdmpys_s1
    719462418U,	// Hexagon_M2_vmac2
    720510994U,	// Hexagon_M2_vmac2es
    720519186U,	// Hexagon_M2_vmac2es_s0
    720584722U,	// Hexagon_M2_vmac2es_s1
    719470610U,	// Hexagon_M2_vmac2s_s0
    719536146U,	// Hexagon_M2_vmac2s_s1
    721567762U,	// Hexagon_M2_vmpy2es_s0
    721633298U,	// Hexagon_M2_vmpy2es_s1
    722616338U,	// Hexagon_M2_vmpy2s_s0
    722665490U,	// Hexagon_M2_vmpy2s_s0pack
    722681874U,	// Hexagon_M2_vmpy2s_s1
    722706450U,	// Hexagon_M2_vmpy2s_s1pack
    723517458U,	// Hexagon_M2_vradduh
    724705298U,	// Hexagon_M2_vrcmaci_s0
    724828178U,	// Hexagon_M2_vrcmaci_s0c
    725753874U,	// Hexagon_M2_vrcmacr_s0
    725876754U,	// Hexagon_M2_vrcmacr_s0c
    726802450U,	// Hexagon_M2_vrcmpyi_s0
    726925330U,	// Hexagon_M2_vrcmpyi_s0c
    727851026U,	// Hexagon_M2_vrcmpyr_s0
    727973906U,	// Hexagon_M2_vrcmpyr_s0c
    728760338U,	// Hexagon_M2_vrcmpys_acc_s1
    730021906U,	// Hexagon_M2_vrcmpys_s1
    730046482U,	// Hexagon_M2_vrcmpys_s1rp
    730857490U,	// Hexagon_M2_vrmac_s0
    731906066U,	// Hexagon_M2_vrmpy_s0
    732954642U,	// Hexagon_M2_xor_xacc
    732954642U,	// Hexagon_M4_xor_xacc
    537919506U,	// Hexagon_S2_addasl_rrri
    552642834U,	// Hexagon_S2_asl_i_p
    734045714U,	// Hexagon_S2_asl_i_p_acc
    735094290U,	// Hexagon_S2_asl_i_p_and
    736142866U,	// Hexagon_S2_asl_i_p_nac
    737191442U,	// Hexagon_S2_asl_i_p_or
    554739218U,	// Hexagon_S2_asl_i_p_xacc
    552642834U,	// Hexagon_S2_asl_i_r
    734045714U,	// Hexagon_S2_asl_i_r_acc
    735094290U,	// Hexagon_S2_asl_i_r_and
    736142866U,	// Hexagon_S2_asl_i_r_nac
    737191442U,	// Hexagon_S2_asl_i_r_or
    552650770U,	// Hexagon_S2_asl_i_r_sat
    554739218U,	// Hexagon_S2_asl_i_r_xacc
    738197522U,	// Hexagon_S2_asl_i_vh
    739246098U,	// Hexagon_S2_asl_i_vw
    552650770U,	// Hexagon_S2_asl_r_p
    734054162U,	// Hexagon_S2_asl_r_p_acc
    735102738U,	// Hexagon_S2_asl_r_p_and
    736151314U,	// Hexagon_S2_asl_r_p_nac
    737199890U,	// Hexagon_S2_asl_r_p_or
    552650770U,	// Hexagon_S2_asl_r_r
    734054162U,	// Hexagon_S2_asl_r_r_acc
    735102738U,	// Hexagon_S2_asl_r_r_and
    736151314U,	// Hexagon_S2_asl_r_r_nac
    737199890U,	// Hexagon_S2_asl_r_r_or
    552650770U,	// Hexagon_S2_asl_r_r_sat
    738197522U,	// Hexagon_S2_asl_r_vh
    739246098U,	// Hexagon_S2_asl_r_vw
    556837138U,	// Hexagon_S2_asr_i_p
    557884946U,	// Hexagon_S2_asr_i_p_acc
    740337170U,	// Hexagon_S2_asr_i_p_and
    741385746U,	// Hexagon_S2_asr_i_p_nac
    742434322U,	// Hexagon_S2_asr_i_p_or
    556837138U,	// Hexagon_S2_asr_i_r
    557884946U,	// Hexagon_S2_asr_i_r_acc
    740337170U,	// Hexagon_S2_asr_i_r_and
    741385746U,	// Hexagon_S2_asr_i_r_nac
    742434322U,	// Hexagon_S2_asr_i_r_or
    556837138U,	// Hexagon_S2_asr_i_r_rnd
    743440402U,	// Hexagon_S2_asr_i_r_rnd_goodsyntax
    744532242U,	// Hexagon_S2_asr_i_svw_trun
    745537554U,	// Hexagon_S2_asr_i_vh
    744540178U,	// Hexagon_S2_asr_i_vw
    556845074U,	// Hexagon_S2_asr_r_p
    557893394U,	// Hexagon_S2_asr_r_p_acc
    740345618U,	// Hexagon_S2_asr_r_p_and
    741394194U,	// Hexagon_S2_asr_r_p_nac
    742442770U,	// Hexagon_S2_asr_r_p_or
    556845074U,	// Hexagon_S2_asr_r_r
    557893394U,	// Hexagon_S2_asr_r_r_acc
    740345618U,	// Hexagon_S2_asr_r_r_and
    741394194U,	// Hexagon_S2_asr_r_r_nac
    742442770U,	// Hexagon_S2_asr_r_r_or
    556845074U,	// Hexagon_S2_asr_r_r_sat
    744540178U,	// Hexagon_S2_asr_r_svw_trun
    745537554U,	// Hexagon_S2_asr_r_vh
    744540178U,	// Hexagon_S2_asr_r_vw
    746586130U,	// Hexagon_S2_cl0
    746586130U,	// Hexagon_S2_cl0p
    747634706U,	// Hexagon_S2_cl1
    747634706U,	// Hexagon_S2_cl1p
    748683282U,	// Hexagon_S2_clb
    749731858U,	// Hexagon_S2_clbnorm
    748683282U,	// Hexagon_S2_clbp
    750823698U,	// Hexagon_S2_clrbit_i
    750831634U,	// Hexagon_S2_clrbit_r
    751829010U,	// Hexagon_S2_ct0
    752877586U,	// Hexagon_S2_ct1
    753969426U,	// Hexagon_S2_extractu
    753977362U,	// Hexagon_S2_extractu_rp
    753969426U,	// Hexagon_S2_extractup
    753977362U,	// Hexagon_S2_extractup_rp
    754974738U,	// Hexagon_S2_lsl_r_p
    756023314U,	// Hexagon_S2_lsl_r_p_acc
    757071890U,	// Hexagon_S2_lsl_r_p_and
    758120466U,	// Hexagon_S2_lsl_r_p_nac
    759169042U,	// Hexagon_S2_lsl_r_p_or
    754974738U,	// Hexagon_S2_lsl_r_r
    756023314U,	// Hexagon_S2_lsl_r_r_acc
    757071890U,	// Hexagon_S2_lsl_r_r_and
    758120466U,	// Hexagon_S2_lsl_r_r_nac
    759169042U,	// Hexagon_S2_lsl_r_r_or
    760217618U,	// Hexagon_S2_lsl_r_vh
    761266194U,	// Hexagon_S2_lsl_r_vw
    762358034U,	// Hexagon_S2_lsr_i_p
    763405842U,	// Hexagon_S2_lsr_i_p_acc
    764454418U,	// Hexagon_S2_lsr_i_p_and
    765502994U,	// Hexagon_S2_lsr_i_p_nac
    766551570U,	// Hexagon_S2_lsr_i_p_or
    767600146U,	// Hexagon_S2_lsr_i_p_xacc
    762358034U,	// Hexagon_S2_lsr_i_r
    763405842U,	// Hexagon_S2_lsr_i_r_acc
    764454418U,	// Hexagon_S2_lsr_i_r_and
    765502994U,	// Hexagon_S2_lsr_i_r_nac
    766551570U,	// Hexagon_S2_lsr_i_r_or
    767600146U,	// Hexagon_S2_lsr_i_r_xacc
    768606226U,	// Hexagon_S2_lsr_i_vh
    769654802U,	// Hexagon_S2_lsr_i_vw
    762365970U,	// Hexagon_S2_lsr_r_p
    763414290U,	// Hexagon_S2_lsr_r_p_acc
    764462866U,	// Hexagon_S2_lsr_r_p_and
    765511442U,	// Hexagon_S2_lsr_r_p_nac
    766560018U,	// Hexagon_S2_lsr_r_p_or
    762365970U,	// Hexagon_S2_lsr_r_r
    763414290U,	// Hexagon_S2_lsr_r_r_acc
    764462866U,	// Hexagon_S2_lsr_r_r_and
    765511442U,	// Hexagon_S2_lsr_r_r_nac
    766560018U,	// Hexagon_S2_lsr_r_r_or
    768606226U,	// Hexagon_S2_lsr_r_vh
    769654802U,	// Hexagon_S2_lsr_r_vw
    770703378U,	// Hexagon_S2_packhl
    771751954U,	// Hexagon_S2_parityp
    772843794U,	// Hexagon_S2_setbit_i
    772851730U,	// Hexagon_S2_setbit_r
    773849106U,	// Hexagon_S2_shuffeb
    774897682U,	// Hexagon_S2_shuffeh
    775946258U,	// Hexagon_S2_shuffob
    776994834U,	// Hexagon_S2_shuffoh
    778043410U,	// Hexagon_S2_svsathb
    779091986U,	// Hexagon_S2_svsathub
    780183826U,	// Hexagon_S2_togglebit_i
    780191762U,	// Hexagon_S2_togglebit_r
    781232402U,	// Hexagon_S2_tstbit_i
    781240338U,	// Hexagon_S2_tstbit_r
    782280210U,	// Hexagon_S2_valignib
    782288658U,	// Hexagon_S2_valignrb
    783286290U,	// Hexagon_S2_vcrotate
    784474130U,	// Hexagon_S2_vrndpackwh
    784482322U,	// Hexagon_S2_vrndpackwhs
    778043410U,	// Hexagon_S2_vsathb
    778043410U,	// Hexagon_S2_vsathb_nopack
    779091986U,	// Hexagon_S2_vsathub
    779091986U,	// Hexagon_S2_vsathub_nopack
    785383442U,	// Hexagon_S2_vsatwh
    785383442U,	// Hexagon_S2_vsatwh_nopack
    786432018U,	// Hexagon_S2_vsatwuh
    786432018U,	// Hexagon_S2_vsatwuh_nopack
    787480594U,	// Hexagon_S2_vsplatrb
    788529170U,	// Hexagon_S2_vsplatrh
    789577746U,	// Hexagon_S2_vsxtbh
    790626322U,	// Hexagon_S2_vsxthw
    791674898U,	// Hexagon_S2_vtrunehb
    792723474U,	// Hexagon_S2_vtrunewh
    793772050U,	// Hexagon_S2_vtrunohb
    794820626U,	// Hexagon_S2_vtrunowh
    795869202U,	// Hexagon_S2_vzxtbh
    796917778U,	// Hexagon_S2_vzxthw
    536871442U,	// Hexagon_S4_addaddi
    545335314U,	// Hexagon_S4_andnp
    603006994U,	// Hexagon_S4_ornp
    536872210U,	// Hexagon_S4_subaddi
    560988293U,	// JMP
    139U,	// JMPR
    797966355U,	// JMPR_cNotPnewNt
    799014931U,	// JMPR_cNotPnewt
    800063507U,	// JMPR_cNotPt
    797966361U,	// JMPR_cPnewNt
    799014937U,	// JMPR_cPnewt
    800063513U,	// JMPR_cPt
    559939609U,	// JMP_Pred
    559939603U,	// JMP_PredNot
    801112083U,	// JMP_PredNotPnt
    802160659U,	// JMP_PredNotPt
    801112089U,	// JMP_PredPnt
    802160665U,	// JMP_PredPt
    803348498U,	// LDb_GP
    804397074U,	// LDd_GP
    805445650U,	// LDh_GP
    806627858U,	// LDrib
    803490066U,	// LDrib_GP
    806627858U,	// LDrib_ae
    807690258U,	// LDrib_ae_indexed
    1076137491U,	// LDrib_cNotPt
    1076137497U,	// LDrib_cPt
    1077186067U,	// LDrib_cdnNotPt
    1077186073U,	// LDrib_cdnPt
    807690258U,	// LDrib_indexed
    807684114U,	// LDrib_indexed_V4
    1076135955U,	// LDrib_indexed_cNotPt
    1076145939U,	// LDrib_indexed_cNotPt_V4
    1076135961U,	// LDrib_indexed_cPt
    1076145945U,	// LDrib_indexed_cPt_V4
    1077184531U,	// LDrib_indexed_cdnNotPt
    1077194515U,	// LDrib_indexed_cdnNotPt_V4
    1077184537U,	// LDrib_indexed_cdnPt
    1077194521U,	// LDrib_indexed_cdnPt_V4
    807684114U,	// LDrib_indexed_shl_V4
    1076146195U,	// LDrib_indexed_shl_cNotPt_V4
    1076146201U,	// LDrib_indexed_shl_cPt_V4
    1077194771U,	// LDrib_indexed_shl_cdnNotPt_V4
    1077194777U,	// LDrib_indexed_shl_cdnPt_V4
    808725010U,	// LDrid
    804538642U,	// LDrid_GP
    1076153875U,	// LDrid_cNotPt
    1076153881U,	// LDrid_cPt
    1077202451U,	// LDrid_cdnNotPt
    1077202457U,	// LDrid_cdnPt
    809787410U,	// LDrid_indexed
    809781266U,	// LDrid_indexed_V4
    1076162835U,	// LDrid_indexed_cNotPt
    1076163091U,	// LDrid_indexed_cNotPt_V4
    1076162841U,	// LDrid_indexed_cPt
    1076163097U,	// LDrid_indexed_cPt_V4
    1077211411U,	// LDrid_indexed_cdnNotPt
    1077211667U,	// LDrid_indexed_cdnNotPt_V4
    1077211417U,	// LDrid_indexed_cdnPt
    1077211673U,	// LDrid_indexed_cdnPt_V4
    809781266U,	// LDrid_indexed_shl_V4
    1076163091U,	// LDrid_indexed_shl_cNotPt_V4
    1076163097U,	// LDrid_indexed_shl_cPt_V4
    1077211667U,	// LDrid_indexed_shl_cdnNotPt_V4
    1077211673U,	// LDrid_indexed_shl_cdnPt_V4
    810822162U,	// LDrih
    805587218U,	// LDrih_GP
    810822162U,	// LDrih_ae
    811884562U,	// LDrih_ae_indexed
    1076170259U,	// LDrih_cNotPt
    1076170265U,	// LDrih_cPt
    1077218835U,	// LDrih_cdnNotPt
    1077218841U,	// LDrih_cdnPt
    811884562U,	// LDrih_indexed
    811878418U,	// LDrih_indexed_V4
    1076168723U,	// LDrih_indexed_cNotPt
    1076178707U,	// LDrih_indexed_cNotPt_V4
    1076168729U,	// LDrih_indexed_cPt
    1076178713U,	// LDrih_indexed_cPt_V4
    1077217299U,	// LDrih_indexed_cdnNotPt
    1077227283U,	// LDrih_indexed_cdnNotPt_V4
    1077217305U,	// LDrih_indexed_cdnPt
    1077227289U,	// LDrih_indexed_cdnPt_V4
    811878418U,	// LDrih_indexed_shl_V4
    1076178963U,	// LDrih_indexed_shl_cNotPt_V4
    1076178969U,	// LDrih_indexed_shl_cPt_V4
    1077227539U,	// LDrih_indexed_shl_cdnNotPt_V4
    1077227545U,	// LDrih_indexed_shl_cdnPt_V4
    812919314U,	// LDriub
    813975826U,	// LDriub_GP
    812919314U,	// LDriub_ae
    815030290U,	// LDriub_ae_indexed
    815024146U,	// LDriub_ae_indexed_V4
    815024146U,	// LDriub_ae_indexed_shl_V4
    1076186643U,	// LDriub_cNotPt
    1076186649U,	// LDriub_cPt
    1077235219U,	// LDriub_cdnNotPt
    1077235225U,	// LDriub_cdnPt
    815030290U,	// LDriub_indexed
    815024146U,	// LDriub_indexed_V4
    1076185107U,	// LDriub_indexed_cNotPt
    1076195091U,	// LDriub_indexed_cNotPt_V4
    1076185113U,	// LDriub_indexed_cPt
    1076195097U,	// LDriub_indexed_cPt_V4
    1077233683U,	// LDriub_indexed_cdnNotPt
    1077243667U,	// LDriub_indexed_cdnNotPt_V4
    1077233689U,	// LDriub_indexed_cdnPt
    1077243673U,	// LDriub_indexed_cdnPt_V4
    815024146U,	// LDriub_indexed_shl_V4
    1076195347U,	// LDriub_indexed_shl_cNotPt_V4
    1076195353U,	// LDriub_indexed_shl_cPt_V4
    1077243923U,	// LDriub_indexed_shl_cdnNotPt_V4
    1077243929U,	// LDriub_indexed_shl_cdnPt_V4
    812919314U,	// LDriubit
    815030290U,	// LDriubit_indexed
    816065042U,	// LDriuh
    817121554U,	// LDriuh_GP
    816065042U,	// LDriuh_ae
    818176018U,	// LDriuh_ae_indexed
    818169874U,	// LDriuh_ae_indexed_V4
    818169874U,	// LDriuh_ae_indexed_shl_V4
    1076203027U,	// LDriuh_cNotPt
    1076203033U,	// LDriuh_cPt
    1077251603U,	// LDriuh_cdnNotPt
    1077251609U,	// LDriuh_cdnPt
    818176018U,	// LDriuh_indexed
    818169874U,	// LDriuh_indexed_V4
    1076201491U,	// LDriuh_indexed_cNotPt
    1076211475U,	// LDriuh_indexed_cNotPt_V4
    1076201497U,	// LDriuh_indexed_cPt
    1076211481U,	// LDriuh_indexed_cPt_V4
    1077250067U,	// LDriuh_indexed_cdnNotPt
    1077260051U,	// LDriuh_indexed_cdnNotPt_V4
    1077250073U,	// LDriuh_indexed_cdnPt
    1077260057U,	// LDriuh_indexed_cdnPt_V4
    818169874U,	// LDriuh_indexed_shl_V4
    1076211731U,	// LDriuh_indexed_shl_cNotPt_V4
    1076211737U,	// LDriuh_indexed_shl_cPt_V4
    1077260307U,	// LDriuh_indexed_shl_cdnNotPt_V4
    1077260313U,	// LDriuh_indexed_shl_cdnPt_V4
    819210770U,	// LDriw
    820267282U,	// LDriw_GP
    1076219411U,	// LDriw_cNotPt
    1076219417U,	// LDriw_cPt
    1077267987U,	// LDriw_cdnNotPt
    1077267993U,	// LDriw_cdnPt
    821321746U,	// LDriw_indexed
    821315602U,	// LDriw_indexed_V4
    1076228371U,	// LDriw_indexed_cNotPt
    1076228627U,	// LDriw_indexed_cNotPt_V4
    1076228377U,	// LDriw_indexed_cPt
    1076228633U,	// LDriw_indexed_cPt_V4
    1077276947U,	// LDriw_indexed_cdnNotPt
    1077277203U,	// LDriw_indexed_cdnNotPt_V4
    1077276953U,	// LDriw_indexed_cdnPt
    1077277209U,	// LDriw_indexed_cdnPt_V4
    821315602U,	// LDriw_indexed_shl_V4
    1076228627U,	// LDriw_indexed_shl_cNotPt_V4
    1076228633U,	// LDriw_indexed_shl_cPt_V4
    1077277203U,	// LDriw_indexed_shl_cdnNotPt_V4
    1077277209U,	// LDriw_indexed_shl_cdnPt_V4
    149U,	// LDriw_pred
    813834258U,	// LDub_GP
    816979986U,	// LDuh_GP
    820125714U,	// LDw_GP
    822083756U,	// LOOP0_i
    823132332U,	// LOOP0_r
    754974738U,	// LSLd
    824180754U,	// LSLd_rr_xor_V4
    825229330U,	// LSLi_V4
    762358034U,	// LSR_ri
    762365970U,	// LSR_rr
    762358034U,	// LSRd_ri
    763405842U,	// LSRd_ri_acc
    762365970U,	// LSRd_rr
    767608594U,	// LSRd_rr_xor_V4
    674234386U,	// MASK_p
    606470162U,	// MAXw_dd
    606470162U,	// MAXw_rr
    149U,	// MEMb_ADDSUBi_MEM_V4
    149U,	// MEMb_ADDSUBi_indexed_MEM_V4
    1900421299U,	// MEMb_ADDi_MEM_V4
    827738547U,	// MEMb_ADDi_indexed_MEM_V4
    1900417971U,	// MEMb_ADDr_MEM_V4
    827738291U,	// MEMb_ADDr_indexed_MEM_V4
    1902117043U,	// MEMb_ANDr_MEM_V4
    827738291U,	// MEMb_ANDr_indexed_MEM_V4
    1903165619U,	// MEMb_ORr_MEM_V4
    827744435U,	// MEMb_ORr_indexed_MEM_V4
    1904615603U,	// MEMb_SUBi_MEM_V4
    827754931U,	// MEMb_SUBi_indexed_MEM_V4
    1904612275U,	// MEMb_SUBr_MEM_V4
    827754675U,	// MEMb_SUBr_indexed_MEM_V4
    149U,	// MEMh_ADDSUBi_MEM_V4
    149U,	// MEMh_ADDSUBi_indexed_MEM_V4
    1900421305U,	// MEMh_ADDi_MEM_V4
    827738553U,	// MEMh_ADDi_indexed_MEM_V4
    1900417977U,	// MEMh_ADDr_MEM_V4
    827738297U,	// MEMh_ADDr_indexed_MEM_V4
    1902117049U,	// MEMh_ANDr_MEM_V4
    827738297U,	// MEMh_ANDr_indexed_MEM_V4
    1903165625U,	// MEMh_ORr_MEM_V4
    827744441U,	// MEMh_ORr_indexed_MEM_V4
    1904615609U,	// MEMh_SUBi_MEM_V4
    827754937U,	// MEMh_SUBi_indexed_MEM_V4
    1904612281U,	// MEMh_SUBr_MEM_V4
    827754681U,	// MEMh_SUBr_indexed_MEM_V4
    149U,	// MEMw_ADDSUBi_MEM_V4
    149U,	// MEMw_ADDSUBi_indexed_MEM_V4
    1900421311U,	// MEMw_ADDi_MEM_V4
    827738559U,	// MEMw_ADDi_indexed_MEM_V4
    1900417983U,	// MEMw_ADDr_MEM_V4
    827738303U,	// MEMw_ADDr_indexed_MEM_V4
    1902117055U,	// MEMw_ANDr_MEM_V4
    827738303U,	// MEMw_ANDr_indexed_MEM_V4
    1903165631U,	// MEMw_ORr_MEM_V4
    827744447U,	// MEMw_ORr_indexed_MEM_V4
    1904615615U,	// MEMw_SUBi_MEM_V4
    827754943U,	// MEMw_SUBi_indexed_MEM_V4
    1904612287U,	// MEMw_SUBr_MEM_V4
    827754687U,	// MEMw_SUBr_indexed_MEM_V4
    608567314U,	// MINw_dd
    608567314U,	// MINw_rr
    692111378U,	// MPY
    692111378U,	// MPY64
    690013970U,	// MPY64_acc
    691062546U,	// MPY64_sub
    706791442U,	// MPYI
    696296978U,	// MPYI_acc_ri
    696305426U,	// MPYI_acc_rr
    706783506U,	// MPYI_ri
    831520786U,	// MPYI_rin
    832569362U,	// MPYI_riu
    697303058U,	// MPYI_sub_ri
    695257106U,	// MPYU
    695257106U,	// MPYU64
    693159698U,	// MPYU64_acc
    693159698U,	// MPYU64_sub
    692111378U,	// MPY_trsext
    675326226U,	// MUX_ii
    675326226U,	// MUX_ir
    675334162U,	// MUX_ri
    675334162U,	// MUX_rr
    610410514U,	// NEG
    197U,	// NOP
    611319826U,	// NOT_Ps
    611319826U,	// NOT_pp
    611319826U,	// NOT_rr
    611319826U,	// NOT_rr64
    602982418U,	// OR_pp
    602974482U,	// OR_ri
    602982418U,	// OR_rr
    602982418U,	// OR_rr64
    1076273171U,	// OR_rr_cNotPt
    1076273177U,	// OR_rr_cPt
    1077321747U,	// OR_rr_cdnNotPt
    1077321753U,	// OR_rr_cdnPt
    603006994U,	// ORd_NOTd_V4
    833634322U,	// ORi_ASLri_V4
    833642514U,	// ORi_LSRri_V4
    587278098U,	// ORr_ANDr_NOTr_V4
    587245074U,	// ORr_ANDri2_V4
    603062546U,	// ORr_ANDri_V4
    587253522U,	// ORr_ANDrr_V4
    588293650U,	// ORr_ORri_V4
    588302098U,	// ORr_ORrr_V4
    589299730U,	// ORr_XORrr_V4
    806753298U,	// POST_LDrib
    2149877523U,	// POST_LDrib_cNotPt
    2149877529U,	// POST_LDrib_cPt
    2150926099U,	// POST_LDrib_cdnNotPt_V4
    2150926105U,	// POST_LDrib_cdnPt_V4
    808850450U,	// POST_LDrid
    2149893907U,	// POST_LDrid_cNotPt
    2149893913U,	// POST_LDrid_cPt
    2150942483U,	// POST_LDrid_cdnNotPt_V4
    2150942489U,	// POST_LDrid_cdnPt_V4
    810947602U,	// POST_LDrih
    2149910291U,	// POST_LDrih_cNotPt
    2149910297U,	// POST_LDrih_cPt
    2150958867U,	// POST_LDrih_cdnNotPt_V4
    2150958873U,	// POST_LDrih_cdnPt_V4
    813044754U,	// POST_LDriub
    2149926675U,	// POST_LDriub_cNotPt
    2149926681U,	// POST_LDriub_cPt
    2150975251U,	// POST_LDriub_cdnNotPt_V4
    2150975257U,	// POST_LDriub_cdnPt_V4
    816190482U,	// POST_LDriuh
    2149943059U,	// POST_LDriuh_cNotPt
    2149943065U,	// POST_LDriuh_cPt
    2150991635U,	// POST_LDriuh_cdnNotPt_V4
    2150991641U,	// POST_LDriuh_cdnPt_V4
    819336210U,	// POST_LDriw
    2149959443U,	// POST_LDriw_cNotPt
    2149959449U,	// POST_LDriw_cPt
    2151008019U,	// POST_LDriw_cdnNotPt_V4
    2151008025U,	// POST_LDriw_cdnPt_V4
    2445361331U,	// POST_STbri
    1373033235U,	// POST_STbri_cNotPt
    1373033747U,	// POST_STbri_cNotPt_nv_V4
    1373033241U,	// POST_STbri_cPt
    1373033753U,	// POST_STbri_cPt_nv_V4
    1374081811U,	// POST_STbri_cdnNotPt_V4
    1374082323U,	// POST_STbri_cdnNotPt_nv_V4
    1374081817U,	// POST_STbri_cdnPt_V4
    1374082329U,	// POST_STbri_cdnPt_nv_V4
    2445729971U,	// POST_STbri_nv_V4
    2445361353U,	// POST_STdri
    1375130387U,	// POST_STdri_cNotPt
    1375130393U,	// POST_STdri_cPt
    1376178963U,	// POST_STdri_cdnNotPt_V4
    1376178969U,	// POST_STdri_cdnPt_V4
    2445361337U,	// POST_SThri
    1377227539U,	// POST_SThri_cNotPt
    1377228051U,	// POST_SThri_cNotPt_nv_V4
    1377227545U,	// POST_SThri_cPt
    1377228057U,	// POST_SThri_cPt_nv_V4
    1378276115U,	// POST_SThri_cdnNotPt_V4
    1378276627U,	// POST_SThri_cdnNotPt_nv_V4
    1378276121U,	// POST_SThri_cdnPt_V4
    1378276633U,	// POST_SThri_cdnPt_nv_V4
    2445729977U,	// POST_SThri_nv_V4
    2445361343U,	// POST_STwri
    1379324691U,	// POST_STwri_cNotPt
    1379325203U,	// POST_STwri_cNotPt_nv_V4
    1379324697U,	// POST_STwri_cPt
    1379325209U,	// POST_STwri_cPt_nv_V4
    1380373267U,	// POST_STwri_cdnNotPt_V4
    1380373779U,	// POST_STwri_cdnNotPt_nv_V4
    1380373273U,	// POST_STwri_cdnPt_V4
    1380373785U,	// POST_STwri_cdnPt_nv_V4
    2445729983U,	// POST_STwri_nv_V4
    555745298U,	// SI_to_SXTHI_asrh
    2991592399U,	// STb_GP
    2991592406U,	// STh_GP
    1918243763U,	// STrib
    2993099727U,	// STrib_GP
    2993100239U,	// STrib_GP_nv_V4
    835991059U,	// STrib_cNotPt
    835991059U,	// STrib_cNotPt_nv_V4
    835991065U,	// STrib_cPt
    835991065U,	// STrib_cPt_nv_V4
    837039635U,	// STrib_cdnNotPt_V4
    837039635U,	// STrib_cdnNotPt_nv_V4
    837039641U,	// STrib_cdnPt_V4
    837039641U,	// STrib_cdnPt_nv_V4
    827793587U,	// STrib_imm_V4
    835719443U,	// STrib_imm_cNotPt_V4
    835719449U,	// STrib_imm_cPt_V4
    836768019U,	// STrib_imm_cdnNotPt_V4
    836768025U,	// STrib_imm_cdnPt_V4
    827806643U,	// STrib_indexed
    835719443U,	// STrib_indexed_cNotPt
    835719443U,	// STrib_indexed_cNotPt_nv_V4
    835719449U,	// STrib_indexed_cPt
    835719449U,	// STrib_indexed_cPt_nv_V4
    836768019U,	// STrib_indexed_cdnNotPt_V4
    836768019U,	// STrib_indexed_cdnNotPt_nv_V4
    836768025U,	// STrib_indexed_cdnPt_V4
    836768025U,	// STrib_indexed_cdnPt_nv_V4
    827807155U,	// STrib_indexed_nv_V4
    845156531U,	// STrib_indexed_shl_V4
    835719699U,	// STrib_indexed_shl_cNotPt_V4
    835719699U,	// STrib_indexed_shl_cNotPt_nv_V4
    835719705U,	// STrib_indexed_shl_cPt_V4
    835719705U,	// STrib_indexed_shl_cPt_nv_V4
    836768275U,	// STrib_indexed_shl_cdnNotPt_V4
    836768275U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    836768281U,	// STrib_indexed_shl_cdnPt_V4
    836768281U,	// STrib_indexed_shl_cdnPt_nv_V4
    845156531U,	// STrib_indexed_shl_nv_V4
    1918244275U,	// STrib_nv_V4
    846282931U,	// STrib_shl_V4
    846651571U,	// STrib_shl_nv_V4
    1918243785U,	// STrid
    2993099741U,	// STrid_GP
    838088211U,	// STrid_cNotPt
    838088217U,	// STrid_cPt
    839136787U,	// STrid_cdnNotPt_V4
    839136793U,	// STrid_cdnPt_V4
    827806665U,	// STrid_indexed
    837816595U,	// STrid_indexed_cNotPt
    837816601U,	// STrid_indexed_cPt
    838865171U,	// STrid_indexed_cdnNotPt_V4
    838865177U,	// STrid_indexed_cdnPt_V4
    845156553U,	// STrid_indexed_shl_V4
    837816851U,	// STrid_indexed_shl_cNotPt_V4
    837816857U,	// STrid_indexed_shl_cPt_V4
    838865427U,	// STrid_indexed_shl_cdnNotPt_V4
    837816857U,	// STrid_indexed_shl_cdnPt_V4
    846282953U,	// STrid_shl_V4
    1918243769U,	// STrih
    2993099734U,	// STrih_GP
    2993100246U,	// STrih_GP_nv_V4
    840185363U,	// STrih_cNotPt
    840185363U,	// STrih_cNotPt_nv_V4
    840185369U,	// STrih_cPt
    840185369U,	// STrih_cPt_nv_V4
    841233939U,	// STrih_cdnNotPt_V4
    841233939U,	// STrih_cdnNotPt_nv_V4
    841233945U,	// STrih_cdnPt_V4
    841233945U,	// STrih_cdnPt_nv_V4
    827793593U,	// STrih_imm_V4
    839913747U,	// STrih_imm_cNotPt_V4
    839913753U,	// STrih_imm_cPt_V4
    840962323U,	// STrih_imm_cdnNotPt_V4
    840962329U,	// STrih_imm_cdnPt_V4
    827806649U,	// STrih_indexed
    839913747U,	// STrih_indexed_cNotPt
    839913747U,	// STrih_indexed_cNotPt_nv_V4
    839913753U,	// STrih_indexed_cPt
    839913753U,	// STrih_indexed_cPt_nv_V4
    840962323U,	// STrih_indexed_cdnNotPt_V4
    840962323U,	// STrih_indexed_cdnNotPt_nv_V4
    840962329U,	// STrih_indexed_cdnPt_V4
    840962329U,	// STrih_indexed_cdnPt_nv_V4
    827807161U,	// STrih_indexed_nv_V4
    845156537U,	// STrih_indexed_shl_V4
    839914003U,	// STrih_indexed_shl_cNotPt_V4
    839914003U,	// STrih_indexed_shl_cNotPt_nv_V4
    839914009U,	// STrih_indexed_shl_cPt_V4
    839914009U,	// STrih_indexed_shl_cPt_nv_V4
    840962579U,	// STrih_indexed_shl_cdnNotPt_V4
    840962579U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    840962585U,	// STrih_indexed_shl_cdnPt_V4
    840962585U,	// STrih_indexed_shl_cdnPt_nv_V4
    845156537U,	// STrih_indexed_shl_nv_V4
    1918244281U,	// STrih_nv_V4
    846282937U,	// STrih_shl_V4
    846651577U,	// STrih_shl_nv_V4
    1918243775U,	// STriw
    2993099748U,	// STriw_GP
    2993100260U,	// STriw_GP_nv_V4
    842282515U,	// STriw_cNotPt
    842282515U,	// STriw_cNotPt_nv_V4
    842282521U,	// STriw_cPt
    842282521U,	// STriw_cPt_nv_V4
    843331091U,	// STriw_cdnNotPt_V4
    843331091U,	// STriw_cdnNotPt_nv_V4
    843331097U,	// STriw_cdnPt_V4
    843331097U,	// STriw_cdnPt_nv_V4
    827793599U,	// STriw_imm_V4
    842010899U,	// STriw_imm_cNotPt_V4
    842010905U,	// STriw_imm_cPt_V4
    843059475U,	// STriw_imm_cdnNotPt_V4
    843059481U,	// STriw_imm_cdnPt_V4
    827806655U,	// STriw_indexed
    842010899U,	// STriw_indexed_cNotPt
    842010899U,	// STriw_indexed_cNotPt_nv_V4
    842010905U,	// STriw_indexed_cPt
    842010905U,	// STriw_indexed_cPt_nv_V4
    843059475U,	// STriw_indexed_cdnNotPt_V4
    843059475U,	// STriw_indexed_cdnNotPt_nv_V4
    843059481U,	// STriw_indexed_cdnPt_V4
    843059481U,	// STriw_indexed_cdnPt_nv_V4
    827807167U,	// STriw_indexed_nv_V4
    845156543U,	// STriw_indexed_shl_V4
    842011155U,	// STriw_indexed_shl_cNotPt_V4
    842011155U,	// STriw_indexed_shl_cNotPt_nv_V4
    842011161U,	// STriw_indexed_shl_cPt_V4
    842011161U,	// STriw_indexed_shl_cPt_nv_V4
    843059731U,	// STriw_indexed_shl_cdnNotPt_V4
    843059731U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    843059737U,	// STriw_indexed_shl_cdnPt_V4
    843059737U,	// STriw_indexed_shl_cdnPt_nv_V4
    845156543U,	// STriw_indexed_shl_nv_V4
    1918244287U,	// STriw_nv_V4
    149U,	// STriw_pred
    846282943U,	// STriw_shl_V4
    846651583U,	// STriw_shl_nv_V4
    1918243775U,	// STriwt
    617662482U,	// SUB64_rr
    617662482U,	// SUB_rr
    1076322323U,	// SUB_rr_cNotPt
    1076322329U,	// SUB_rr_cPt
    1077370899U,	// SUB_rr_cdnNotPt
    1077370905U,	// SUB_rr_cdnPt
    618676242U,	// SUBi_ASLri_V4
    618684434U,	// SUBi_LSRri_V4
    708879890U,	// SUBri_acc
    708888338U,	// SUBrr_acc
    627048466U,	// SXTB
    1076330515U,	// SXTB_cNotPt_V4
    1076330521U,	// SXTB_cPt_V4
    1077379091U,	// SXTB_cdnNotPt_V4
    1077379097U,	// SXTB_cdnPt_V4
    628097042U,	// SXTH
    1076338707U,	// SXTH_cNotPt_V4
    1076338713U,	// SXTH_cPt_V4
    1077387283U,	// SXTH_cdnNotPt_V4
    1077387289U,	// SXTH_cdnPt_V4
    629145618U,	// SXTW
    847249483U,	// TCRETURNR
    847249541U,	// TCRETURNtext
    847249541U,	// TCRETURNtg
    551632914U,	// TFCR
    551632914U,	// TFR
    632291346U,	// TFRI
    632291346U,	// TFRI64
    1076346899U,	// TFRI_cNotPt
    1076346905U,	// TFRI_cPt
    1077395475U,	// TFRI_cdnNotPt
    1077395481U,	// TFRI_cdnPt
    551632914U,	// TFR_64
    537387026U,	// TFR_FI
    669515794U,	// TFR_PdFalse
    552083474U,	// TFR_PdRs
    552091666U,	// TFR_RsPd
    1076387859U,	// TFR_cNotPt
    1076387865U,	// TFR_cPt
    1077436435U,	// TFR_cdnNotPt
    1077436441U,	// TFR_cdnPt
    149U,	// TFR_condset_ii
    149U,	// TFR_condset_rr
    782288658U,	// VALIGN_rrp
    676331538U,	// VITPACK_pp
    677380114U,	// VMUX_prr64
    601933586U,	// VSPLICE_rrp
    668991506U,	// XOR_pp
    668991506U,	// XOR_rr
    668991506U,	// XOR_rr64
    1076396051U,	// XOR_rr_cNotPt
    1076396057U,	// XOR_rr_cPt
    1077444627U,	// XOR_rr_cdnNotPt
    1077444633U,	// XOR_rr_cdnPt
    732954642U,	// XORd_XORdd
    590423826U,	// XORr_ANDr_NOTr_V4
    590399250U,	// XORr_ANDrr_V4
    591396882U,	// XORr_ORrr_V4
    732954642U,	// XORr_XORrr_V4
    670040082U,	// ZXTB
    1076404243U,	// ZXTB_cNotPt_V4
    1076404249U,	// ZXTB_cPt_V4
    1077452819U,	// ZXTB_cdnNotPt_V4
    1077452825U,	// ZXTB_cdnPt_V4
    671088658U,	// ZXTH
    1076412435U,	// ZXTH_cNotPt_V4
    1076412441U,	// ZXTH_cPt_V4
    1077461011U,	// ZXTH_cdnNotPt_V4
    1077461017U,	// ZXTH_cdnPt_V4
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000BUNDLE\000\000if (!\000if (\000Should never be emitted\000"
    "allocframe(#\000barrier\000jumpr \000call \000callr \000deallocframe\000"
    "dealloc_return\000:endloop0\000jump \000jumpr r31\000Error; should not "
    "emit\000loop0(\000memb(\000memh(\000memw(\000nop\000memd(\000memb(#\000"
    "memh(#\000memd(#\000memw(#\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 255)-1;


  // Fragment 0 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, ADJCALLSTACKDOWN, ADJCALLSTACKUP, BARRIER, DEALLOCF...
    return;
    break;
  case 1:
    // ADD64_rr, ADDASL, ADD_ri, ADD_rr, ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_M...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMb_ANDr_MEM_V4, MEMb_ORr_MEM_V4,...
    printHexagonMEMriOperand(MI, 0, O); 
    break;
  case 4:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    printOperand(MI, 2, O); 
    break;
  case 5:
    // STb_GP, STh_GP, STrib_GP, STrib_GP_nv_V4, STrid_GP, STrih_GP, STrih_GP...
    printGlobalOperand(MI, 0, O); 
    break;
  }


  // Fragment 1 encoded into 9 bits for 297 unique commands.
  switch ((Bits >> 20) & 511) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    O << " = add("; 
    break;
  case 1:
    // ADDASL, Hexagon_S2_addasl_rrri
    O << " = addasl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_rr_cNotPt, ADD_rr_cPt, AND_rr_cNotPt, A...
    O << ") "; 
    printOperand(MI, 0, O); 
    break;
  case 3:
    // ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cdnNotPt, ADD_rr_cdnPt, AND_rr_c...
    O << ".new) "; 
    printOperand(MI, 0, O); 
    break;
  case 4:
    // ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << " = add(#"; 
    printHexagonImmOperand(MI, 1, O); 
    break;
  case 5:
    // ADDri_acc, ADDrr_acc, Hexagon_M2_acci, Hexagon_M2_accii
    O << " += add("; 
    printOperand(MI, 2, O); 
    break;
  case 6:
    // ALLOCFRAME
    O << ')'; 
    return;
    break;
  case 7:
    // ALL_pp, Hexagon_C2_all8
    O << " = all8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_pnotp, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, Hexagon_A2_...
    O << " = and("; 
    printOperand(MI, 1, O); 
    break;
  case 9:
    // ANDi_ASLri_V4, ANDi_LSRri_V4
    O << " = and(#"; 
    printHexagonImmOperand(MI, 1, O); 
    break;
  case 10:
    // ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, HEXAGON_M4_and_and, HEXAGON_M4_and_a...
    O << " &= and("; 
    printOperand(MI, 2, O); 
    break;
  case 11:
    // ANDr_ORrr_V4, HEXAGON_M4_and_or
    O << " &= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ANDr_XORrr_V4, HEXAGON_M4_and_xor
    O << " &= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // ANY_pp, Hexagon_C2_any8
    O << " = any8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // ARGEXTEND, Hexagon_A2_tfr, Hexagon_A2_tfrp, Hexagon_C2_pxfer_map, Hexa...
    O << " = "; 
    printOperand(MI, 1, O); 
    break;
  case 15:
    // ASL, ASL_rr, Hexagon_S2_asl_i_p, Hexagon_S2_asl_i_r, Hexagon_S2_asl_i_...
    O << " = asl("; 
    printOperand(MI, 1, O); 
    break;
  case 16:
    // ASLH, Hexagon_A2_aslh
    O << " = aslh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 17:
    // ASLd_rr_xor_V4, Hexagon_S2_asl_i_p_xacc, Hexagon_S2_asl_i_r_xacc
    O << " ^= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 18:
    // ASRH, Hexagon_A2_asrh, SI_to_SXTHI_asrh
    O << " = asrh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // ASR_ri, ASR_rr, ASRd_ri, ASRd_rr, Hexagon_S2_asr_i_p, Hexagon_S2_asr_i...
    O << " = asr("; 
    printOperand(MI, 1, O); 
    break;
  case 20:
    // ASR_rr_acc, Hexagon_S2_asr_i_p_acc, Hexagon_S2_asr_i_r_acc, Hexagon_S2...
    O << " += asr("; 
    printOperand(MI, 2, O); 
    break;
  case 21:
    // ASRd_rr_xor_V4
    O << " ^= asr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 22:
    // BRCOND, JMP_Pred, JMP_PredNot
    O << ") jump "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 23:
    // BR_JT, CALL, CALLR, CALLRv3, CALLv3, JMP
    return;
    break;
  case 24:
    // CMPEHexagon4rr, CMPEQri, CMPEQrr, Hexagon_A4_rcmpeq, Hexagon_A4_rcmpeq...
    O << " = cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 25:
    // CMPGEUri, Hexagon_C2_cmpgeui
    O << " = cmp.geu("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 26:
    // CMPGEri, Hexagon_C2_cmpgei
    O << " = cmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 27:
    // CMPGT64rr, CMPGTri, CMPGTrr, Hexagon_C2_cmpgt, Hexagon_C2_cmpgti, Hexa...
    O << " = cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 28:
    // CMPGTU64rr, CMPGTUri, CMPGTUrr, Hexagon_C2_cmpgtu, Hexagon_C2_cmpgtui,...
    O << " = cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 29:
    // CMPLTrr, Hexagon_C2_cmplt
    O << " = cmp.lt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 30:
    // CMPbEQri_V4, CMPbEQrr_sbsb_V4, CMPbEQrr_ubub_V4
    O << " = cmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 31:
    // CMPbGTUri_V4, CMPbGTUrr_V4
    O << " = cmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // CMPbGTri_V4, CMPbGTrr_V4
    O << " = cmpb.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 33:
    // CMPhEQri_V4, CMPhEQrr_shl_V4, CMPhEQrr_xor_V4
    O << " = cmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 34:
    // CMPhGTUri_V4, CMPhGTUrr_V4
    O << " = cmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 35:
    // CMPhGTri_V4, CMPhGTrr_shl_V4
    O << " = cmph.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 36:
    // COMBINE_rr, Hexagon_A2_combine_hh, Hexagon_A2_combine_hl, Hexagon_A2_c...
    O << " = combine("; 
    printOperand(MI, 1, O); 
    break;
  case 37:
    // CONST32, CONST32GP_set, CONST32_Int_Real, CONST32_set, CONST32_set_jt
    O << " = CONST32(#"; 
    break;
  case 38:
    // CONST32_Label
    O << " = CONST32("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 39:
    // CONST64_Int_Real
    O << " = CONST64(#"; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 40:
    // DEALLOC_RET_cNotPt_V4, DEALLOC_RET_cPt_V4
    O << ") dealloc_return"; 
    return;
    break;
  case 41:
    // DEALLOC_RET_cNotdnPnt_V4, DEALLOC_RET_cdnPnt_V4
    O << ".new) dealloc_return:nt"; 
    return;
    break;
  case 42:
    // DEALLOC_RET_cNotdnPt_V4, DEALLOC_RET_cdnPt_V4
    O << ".new) dealloc_return:t"; 
    return;
    break;
  case 43:
    // HEXAGON_A4_cround_ri, HEXAGON_A4_cround_rr
    O << " = cround("; 
    printOperand(MI, 1, O); 
    break;
  case 44:
    // HEXAGON_A4_modwrapu
    O << " = modwrap("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // HEXAGON_A4_round_ri, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr, HEX...
    O << " = round("; 
    printOperand(MI, 1, O); 
    break;
  case 46:
    // HEXAGON_C2_bitsclr, HEXAGON_C2_bitsclri
    O << " = bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // HEXAGON_C2_bitsset
    O << " = bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 48:
    // HEXAGON_M4_or_and, HEXAGON_M4_or_andn, HEXAGON_S4_or_andi, ORr_ANDr_NO...
    O << " |= and("; 
    printOperand(MI, 2, O); 
    break;
  case 49:
    // HEXAGON_M4_or_or, HEXAGON_S4_or_ori, ORr_ORri_V4, ORr_ORrr_V4
    O << " |= or("; 
    printOperand(MI, 2, O); 
    break;
  case 50:
    // HEXAGON_M4_or_xor, ORr_XORrr_V4
    O << " |= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 51:
    // HEXAGON_M4_xor_and, HEXAGON_M4_xor_andn, XORr_ANDr_NOTr_V4, XORr_ANDrr...
    O << " ^= and("; 
    printOperand(MI, 2, O); 
    break;
  case 52:
    // HEXAGON_M4_xor_or, XORr_ORrr_V4
    O << " ^= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 53:
    // HEXAGON_S2_brev
    O << " = brev("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 54:
    // HEXAGON_S2_deinterleave
    O << " = deinterleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 55:
    // HEXAGON_S2_insert, HEXAGON_S2_insert_rp, HEXAGON_S2_insertp, HEXAGON_S...
    O << " = insert("; 
    printOperand(MI, 2, O); 
    break;
  case 56:
    // HEXAGON_S2_interleave
    O << " = interleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 57:
    // HEXAGON_S2_lfsp
    O << " = lfs("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 58:
    // HEXAGON_S2_tableidxb_goodsyntax
    O << " = tableidxb("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 59:
    // HEXAGON_S2_tableidxd_goodsyntax
    O << " = tableidxd("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 60:
    // HEXAGON_S2_tableidxh_goodsyntax
    O << " = tableidxh("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 61:
    // HEXAGON_S2_tableidxw_goodsyntax
    O << " = tableidxw("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // HEXAGON_S2_vspliceib, HEXAGON_S2_vsplicerb, VSPLICE_rrp
    O << " = vspliceb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 63:
    // HEXAGON_S4_or_andix, Hexagon_A2_or, Hexagon_A2_orir, Hexagon_A2_orp, H...
    O << " = or("; 
    printOperand(MI, 1, O); 
    break;
  case 64:
    // Hexagon_A2_abs, Hexagon_A2_absp, Hexagon_A2_abssat
    O << " = abs("; 
    printOperand(MI, 1, O); 
    break;
  case 65:
    // Hexagon_A2_combineii, Hexagon_A4_combineir
    O << " = combine(#"; 
    printHexagonImmOperand(MI, 1, O); 
    break;
  case 66:
    // Hexagon_A2_max, Hexagon_A2_maxp, MAXw_dd, MAXw_rr
    O << " = max("; 
    break;
  case 67:
    // Hexagon_A2_maxu, Hexagon_A2_maxup
    O << " = maxu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 68:
    // Hexagon_A2_min, MINw_dd, MINw_rr
    O << " = min("; 
    break;
  case 69:
    // Hexagon_A2_minu
    O << " = minu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // Hexagon_A2_neg, Hexagon_A2_negp, Hexagon_A2_negsat, NEG
    O << " = neg("; 
    printOperand(MI, 1, O); 
    break;
  case 71:
    // Hexagon_A2_not, Hexagon_A2_notp, Hexagon_C2_not, NOT_Ps, NOT_pp, NOT_r...
    O << " = not("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // Hexagon_A2_sat
    O << " = sat("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // Hexagon_A2_satb
    O << " = satb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 74:
    // Hexagon_A2_sath
    O << " = sath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 75:
    // Hexagon_A2_satub
    O << " = satub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // Hexagon_A2_satuh
    O << " = satuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // Hexagon_A2_sub, Hexagon_A2_subh_h16_hh, Hexagon_A2_subh_h16_hl, Hexago...
    O << " = sub("; 
    printOperand(MI, 1, O); 
    break;
  case 78:
    // Hexagon_A2_subri, SUBi_ASLri_V4, SUBi_LSRri_V4
    O << " = sub(#"; 
    printHexagonImmOperand(MI, 1, O); 
    break;
  case 79:
    // Hexagon_A2_svaddh, Hexagon_A2_svaddhs, Hexagon_A2_vaddh, Hexagon_A2_va...
    O << " = vaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 80:
    // Hexagon_A2_svadduhs, Hexagon_A2_vadduhs
    O << " = vadduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 81:
    // Hexagon_A2_svavgh, Hexagon_A2_svavghs, Hexagon_A2_vavgh, Hexagon_A2_va...
    O << " = vavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 82:
    // Hexagon_A2_svnavgh, Hexagon_A2_vnavgh, Hexagon_A2_vnavghcr, Hexagon_A2...
    O << " = vnavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 83:
    // Hexagon_A2_svsubh, Hexagon_A2_svsubhs, Hexagon_A2_vsubh, Hexagon_A2_vs...
    O << " = vsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 84:
    // Hexagon_A2_svsubuhs, Hexagon_A2_vsubuhs
    O << " = vsubuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 85:
    // Hexagon_A2_swiz
    O << " = swiz("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 86:
    // Hexagon_A2_sxtb, SXTB
    O << " = sxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 87:
    // Hexagon_A2_sxth, SXTH
    O << " = sxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 88:
    // Hexagon_A2_sxtw, SXTW
    O << " = sxtw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 89:
    // Hexagon_A2_tfrih
    O << ".h = #"; 
    printHexagonImmOperand(MI, 2, O); 
    return;
    break;
  case 90:
    // Hexagon_A2_tfril
    O << ".l = #"; 
    printHexagonImmOperand(MI, 2, O); 
    return;
    break;
  case 91:
    // Hexagon_A2_tfrpi, Hexagon_A2_tfrsi, TFRI, TFRI64
    O << " = #"; 
    printHexagonImmOperand(MI, 1, O); 
    return;
    break;
  case 92:
    // Hexagon_A2_vabsh, Hexagon_A2_vabshsat
    O << " = vabsh("; 
    printOperand(MI, 1, O); 
    break;
  case 93:
    // Hexagon_A2_vabsw, Hexagon_A2_vabswsat
    O << " = vabsw("; 
    printOperand(MI, 1, O); 
    break;
  case 94:
    // Hexagon_A2_vaddub, Hexagon_A2_vaddubs
    O << " = vaddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 95:
    // Hexagon_A2_vaddw, Hexagon_A2_vaddws
    O << " = vaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 96:
    // Hexagon_A2_vavgub, Hexagon_A2_vavgubr
    O << " = vavgub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 97:
    // Hexagon_A2_vavguh, Hexagon_A2_vavguhr
    O << " = vavguh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 98:
    // Hexagon_A2_vavguw, Hexagon_A2_vavguwr
    O << " = vavguw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 99:
    // Hexagon_A2_vavgw, Hexagon_A2_vavgwcr, Hexagon_A2_vavgwr
    O << " = vavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 100:
    // Hexagon_A2_vcmpbeq
    O << " = vcmpb.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 101:
    // Hexagon_A2_vcmpbgtu
    O << " = vcmpb.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 102:
    // Hexagon_A2_vcmpheq
    O << " = vcmph.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 103:
    // Hexagon_A2_vcmphgt
    O << " = vcmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 104:
    // Hexagon_A2_vcmphgtu
    O << " = vcmph.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 105:
    // Hexagon_A2_vcmpweq
    O << " = vcmpw.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 106:
    // Hexagon_A2_vcmpwgt
    O << " = vcmpw.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 107:
    // Hexagon_A2_vcmpwgtu
    O << " = vcmpw.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 108:
    // Hexagon_A2_vconj
    O << " = vconj("; 
    printOperand(MI, 1, O); 
    O << "):sat"; 
    return;
    break;
  case 109:
    // Hexagon_A2_vmaxh
    O << " = vmaxh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 110:
    // Hexagon_A2_vmaxub
    O << " = vmaxub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 111:
    // Hexagon_A2_vmaxuh
    O << " = vmaxuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 112:
    // Hexagon_A2_vmaxuw
    O << " = vmaxuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 113:
    // Hexagon_A2_vmaxw
    O << " = vmaxw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 114:
    // Hexagon_A2_vminh
    O << " = vminh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 115:
    // Hexagon_A2_vminub
    O << " = vminub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 116:
    // Hexagon_A2_vminuh
    O << " = vminuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 117:
    // Hexagon_A2_vminuw
    O << " = vminuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 118:
    // Hexagon_A2_vminw
    O << " = vminw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 119:
    // Hexagon_A2_vnavgw, Hexagon_A2_vnavgwcr, Hexagon_A2_vnavgwr
    O << " = vnavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 120:
    // Hexagon_A2_vraddub
    O << " = vraddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 121:
    // Hexagon_A2_vraddub_acc
    O << " += vraddub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 122:
    // Hexagon_A2_vrsadub
    O << " = vrsadub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 123:
    // Hexagon_A2_vrsadub_acc
    O << " += vrsadub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 124:
    // Hexagon_A2_vsubub, Hexagon_A2_vsububs
    O << " = vsubub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 125:
    // Hexagon_A2_vsubw, Hexagon_A2_vsubws
    O << " = vsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 126:
    // Hexagon_A2_xor, Hexagon_A2_xorp, Hexagon_C2_xor, TFR_PdFalse, XOR_pp, ...
    O << " = xor("; 
    break;
  case 127:
    // Hexagon_A2_zxtb, ZXTB
    O << " = zxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 128:
    // Hexagon_A2_zxth, ZXTH
    O << " = zxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 129:
    // Hexagon_A4_rcmpneq, Hexagon_A4_rcmpneqi, Hexagon_C4_cmpneq, Hexagon_C4...
    O << " = !cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 130:
    // Hexagon_C2_cmpltu
    O << " = cmp.ltu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 131:
    // Hexagon_C2_mask, MASK_p
    O << " = mask("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 132:
    // Hexagon_C2_mux, Hexagon_C2_muxii, Hexagon_C2_muxir, Hexagon_C2_muxri, ...
    O << " = mux("; 
    printOperand(MI, 1, O); 
    break;
  case 133:
    // Hexagon_C2_vitpack, VITPACK_pp
    O << " = vitpack("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 134:
    // Hexagon_C2_vmux, VMUX_prr64
    O << " = vmux("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 135:
    // Hexagon_C4_cmplte, Hexagon_C4_cmpltei
    O << " = !cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 136:
    // Hexagon_C4_cmplteu, Hexagon_C4_cmplteui
    O << " = !cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 137:
    // Hexagon_C4_fastcorner9
    O << " = fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 138:
    // Hexagon_C4_fastcorner9_not
    O << " = !fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 139:
    // Hexagon_M2_cmaci_s0
    O << " += cmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 140:
    // Hexagon_M2_cmacr_s0
    O << " += cmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 141:
    // Hexagon_M2_cmacs_s0, Hexagon_M2_cmacs_s1, Hexagon_M2_cmacsc_s0, Hexago...
    O << " += cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 142:
    // Hexagon_M2_cmpyi_s0
    O << " = cmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 143:
    // Hexagon_M2_cmpyr_s0
    O << " = cmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 144:
    // Hexagon_M2_cmpyrs_s0, Hexagon_M2_cmpyrs_s1, Hexagon_M2_cmpyrsc_s0, Hex...
    O << " = cmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 145:
    // Hexagon_M2_cnacs_s0, Hexagon_M2_cnacs_s1, Hexagon_M2_cnacsc_s0, Hexago...
    O << " -= cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 146:
    // Hexagon_M2_dpmpyss_acc_s0, Hexagon_M2_mpy_acc_hh_s0, Hexagon_M2_mpy_ac...
    O << " += mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 147:
    // Hexagon_M2_dpmpyss_nac_s0, Hexagon_M2_mpy_nac_hh_s0, Hexagon_M2_mpy_na...
    O << " -= mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 148:
    // Hexagon_M2_dpmpyss_rnd_s0, Hexagon_M2_dpmpyss_s0, Hexagon_M2_hmmpyh_rs...
    O << " = mpy("; 
    printOperand(MI, 1, O); 
    break;
  case 149:
    // Hexagon_M2_dpmpyuu_acc_s0, Hexagon_M2_mpyu_acc_hh_s0, Hexagon_M2_mpyu_...
    O << " += mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 150:
    // Hexagon_M2_dpmpyuu_nac_s0, Hexagon_M2_mpyu_nac_hh_s0, Hexagon_M2_mpyu_...
    O << " -= mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 151:
    // Hexagon_M2_dpmpyuu_s0, Hexagon_M2_mpyu_hh_s0, Hexagon_M2_mpyu_hh_s1, H...
    O << " = mpyu("; 
    printOperand(MI, 1, O); 
    break;
  case 152:
    // Hexagon_M2_maci, Hexagon_M2_macsip, MPYI_acc_ri, MPYI_acc_rr
    O << " += mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 153:
    // Hexagon_M2_macsin, MPYI_sub_ri
    O << " -= mpyi("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 154:
    // Hexagon_M2_mmachs_rs0, Hexagon_M2_mmachs_rs1, Hexagon_M2_mmachs_s0, He...
    O << " += vmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 155:
    // Hexagon_M2_mmacls_rs0, Hexagon_M2_mmacls_rs1, Hexagon_M2_mmacls_s0, He...
    O << " += vmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 156:
    // Hexagon_M2_mmacuhs_rs0, Hexagon_M2_mmacuhs_rs1, Hexagon_M2_mmacuhs_s0,...
    O << " += vmpywouh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 157:
    // Hexagon_M2_mmaculs_rs0, Hexagon_M2_mmaculs_rs1, Hexagon_M2_mmaculs_s0,...
    O << " += vmpyweuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 158:
    // Hexagon_M2_mmpyh_rs0, Hexagon_M2_mmpyh_rs1, Hexagon_M2_mmpyh_s0, Hexag...
    O << " = vmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 159:
    // Hexagon_M2_mmpyl_rs0, Hexagon_M2_mmpyl_rs1, Hexagon_M2_mmpyl_s0, Hexag...
    O << " = vmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 160:
    // Hexagon_M2_mmpyuh_rs0, Hexagon_M2_mmpyuh_rs1, Hexagon_M2_mmpyuh_s0, He...
    O << " = vmpywouh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 161:
    // Hexagon_M2_mmpyul_rs0, Hexagon_M2_mmpyul_rs1, Hexagon_M2_mmpyul_s0, He...
    O << " = vmpyweuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 162:
    // Hexagon_M2_mpyi, MPYI, MPYI_ri
    O << " = mpyi("; 
    printOperand(MI, 1, O); 
    break;
  case 163:
    // Hexagon_M2_mpyui
    O << " = mpyui("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 164:
    // Hexagon_M2_nacci, Hexagon_M2_naccii, SUBri_acc, SUBrr_acc
    O << " -= add("; 
    printOperand(MI, 2, O); 
    break;
  case 165:
    // Hexagon_M2_subacc
    O << " += sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 166:
    // Hexagon_M2_vabsdiffh
    O << " = vabsdiffh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 167:
    // Hexagon_M2_vabsdiffw
    O << " = vabsdiffw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 168:
    // Hexagon_M2_vcmac_s0_sat_i
    O << " += vcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 169:
    // Hexagon_M2_vcmac_s0_sat_r
    O << " += vcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 170:
    // Hexagon_M2_vcmpy_s0_sat_i, Hexagon_M2_vcmpy_s1_sat_i
    O << " = vcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 171:
    // Hexagon_M2_vcmpy_s0_sat_r, Hexagon_M2_vcmpy_s1_sat_r
    O << " = vcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 172:
    // Hexagon_M2_vdmacs_s0, Hexagon_M2_vdmacs_s1
    O << " += vdmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 173:
    // Hexagon_M2_vdmpyrs_s0, Hexagon_M2_vdmpyrs_s1, Hexagon_M2_vdmpys_s0, He...
    O << " = vdmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 174:
    // Hexagon_M2_vmac2, Hexagon_M2_vmac2s_s0, Hexagon_M2_vmac2s_s1
    O << " += vmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 175:
    // Hexagon_M2_vmac2es, Hexagon_M2_vmac2es_s0, Hexagon_M2_vmac2es_s1
    O << " += vmpyeh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 176:
    // Hexagon_M2_vmpy2es_s0, Hexagon_M2_vmpy2es_s1
    O << " = vmpyeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 177:
    // Hexagon_M2_vmpy2s_s0, Hexagon_M2_vmpy2s_s0pack, Hexagon_M2_vmpy2s_s1, ...
    O << " = vmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 178:
    // Hexagon_M2_vradduh
    O << " = vradduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 179:
    // Hexagon_M2_vrcmaci_s0, Hexagon_M2_vrcmaci_s0c
    O << " += vrcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 180:
    // Hexagon_M2_vrcmacr_s0, Hexagon_M2_vrcmacr_s0c
    O << " += vrcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 181:
    // Hexagon_M2_vrcmpyi_s0, Hexagon_M2_vrcmpyi_s0c
    O << " = vrcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 182:
    // Hexagon_M2_vrcmpyr_s0, Hexagon_M2_vrcmpyr_s0c
    O << " = vrcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 183:
    // Hexagon_M2_vrcmpys_acc_s1
    O << " += vrcmpys("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):<<1:sat"; 
    return;
    break;
  case 184:
    // Hexagon_M2_vrcmpys_s1, Hexagon_M2_vrcmpys_s1rp
    O << " = vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 185:
    // Hexagon_M2_vrmac_s0
    O << " += vrmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 186:
    // Hexagon_M2_vrmpy_s0
    O << " = vrmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 187:
    // Hexagon_M2_xor_xacc, Hexagon_M4_xor_xacc, XORd_XORdd, XORr_XORrr_V4
    O << " ^= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 188:
    // Hexagon_S2_asl_i_p_acc, Hexagon_S2_asl_i_r_acc, Hexagon_S2_asl_r_p_acc...
    O << " += asl("; 
    printOperand(MI, 2, O); 
    break;
  case 189:
    // Hexagon_S2_asl_i_p_and, Hexagon_S2_asl_i_r_and, Hexagon_S2_asl_r_p_and...
    O << " &= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 190:
    // Hexagon_S2_asl_i_p_nac, Hexagon_S2_asl_i_r_nac, Hexagon_S2_asl_r_p_nac...
    O << " -= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 191:
    // Hexagon_S2_asl_i_p_or, Hexagon_S2_asl_i_r_or, Hexagon_S2_asl_r_p_or, H...
    O << " |= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 192:
    // Hexagon_S2_asl_i_vh, Hexagon_S2_asl_r_vh
    O << " = vaslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 193:
    // Hexagon_S2_asl_i_vw, Hexagon_S2_asl_r_vw
    O << " = vaslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 194:
    // Hexagon_S2_asr_i_p_and, Hexagon_S2_asr_i_r_and, Hexagon_S2_asr_r_p_and...
    O << " &= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 195:
    // Hexagon_S2_asr_i_p_nac, Hexagon_S2_asr_i_r_nac, Hexagon_S2_asr_r_p_nac...
    O << " -= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 196:
    // Hexagon_S2_asr_i_p_or, Hexagon_S2_asr_i_r_or, Hexagon_S2_asr_r_p_or, H...
    O << " |= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 197:
    // Hexagon_S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 198:
    // Hexagon_S2_asr_i_svw_trun, Hexagon_S2_asr_i_vw, Hexagon_S2_asr_r_svw_t...
    O << " = vasrw("; 
    printOperand(MI, 1, O); 
    break;
  case 199:
    // Hexagon_S2_asr_i_vh, Hexagon_S2_asr_r_vh
    O << " = vasrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 200:
    // Hexagon_S2_cl0, Hexagon_S2_cl0p
    O << " = cl0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 201:
    // Hexagon_S2_cl1, Hexagon_S2_cl1p
    O << " = cl1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 202:
    // Hexagon_S2_clb, Hexagon_S2_clbp
    O << " = clb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 203:
    // Hexagon_S2_clbnorm
    O << " = normamt("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 204:
    // Hexagon_S2_clrbit_i, Hexagon_S2_clrbit_r
    O << " = clrbit("; 
    printOperand(MI, 1, O); 
    break;
  case 205:
    // Hexagon_S2_ct0
    O << " = ct0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 206:
    // Hexagon_S2_ct1
    O << " = ct1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 207:
    // Hexagon_S2_extractu, Hexagon_S2_extractu_rp, Hexagon_S2_extractup, Hex...
    O << " = extractu("; 
    printOperand(MI, 1, O); 
    break;
  case 208:
    // Hexagon_S2_lsl_r_p, Hexagon_S2_lsl_r_r, LSLd
    O << " = lsl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 209:
    // Hexagon_S2_lsl_r_p_acc, Hexagon_S2_lsl_r_r_acc
    O << " += lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 210:
    // Hexagon_S2_lsl_r_p_and, Hexagon_S2_lsl_r_r_and
    O << " &= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 211:
    // Hexagon_S2_lsl_r_p_nac, Hexagon_S2_lsl_r_r_nac
    O << " -= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 212:
    // Hexagon_S2_lsl_r_p_or, Hexagon_S2_lsl_r_r_or
    O << " |= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 213:
    // Hexagon_S2_lsl_r_vh
    O << " = vlslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 214:
    // Hexagon_S2_lsl_r_vw
    O << " = vlslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 215:
    // Hexagon_S2_lsr_i_p, Hexagon_S2_lsr_i_r, Hexagon_S2_lsr_r_p, Hexagon_S2...
    O << " = lsr("; 
    printOperand(MI, 1, O); 
    break;
  case 216:
    // Hexagon_S2_lsr_i_p_acc, Hexagon_S2_lsr_i_r_acc, Hexagon_S2_lsr_r_p_acc...
    O << " += lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 217:
    // Hexagon_S2_lsr_i_p_and, Hexagon_S2_lsr_i_r_and, Hexagon_S2_lsr_r_p_and...
    O << " &= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 218:
    // Hexagon_S2_lsr_i_p_nac, Hexagon_S2_lsr_i_r_nac, Hexagon_S2_lsr_r_p_nac...
    O << " -= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 219:
    // Hexagon_S2_lsr_i_p_or, Hexagon_S2_lsr_i_r_or, Hexagon_S2_lsr_r_p_or, H...
    O << " |= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 220:
    // Hexagon_S2_lsr_i_p_xacc, Hexagon_S2_lsr_i_r_xacc, LSRd_rr_xor_V4
    O << " ^= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 221:
    // Hexagon_S2_lsr_i_vh, Hexagon_S2_lsr_r_vh
    O << " = vlsrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 222:
    // Hexagon_S2_lsr_i_vw, Hexagon_S2_lsr_r_vw
    O << " = vlsrw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 223:
    // Hexagon_S2_packhl
    O << " = packhl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 224:
    // Hexagon_S2_parityp
    O << " = parity("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 225:
    // Hexagon_S2_setbit_i, Hexagon_S2_setbit_r
    O << " = setbit("; 
    printOperand(MI, 1, O); 
    break;
  case 226:
    // Hexagon_S2_shuffeb
    O << " = shuffeb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 227:
    // Hexagon_S2_shuffeh
    O << " = shuffeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 228:
    // Hexagon_S2_shuffob
    O << " = shuffob("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 229:
    // Hexagon_S2_shuffoh
    O << " = shuffoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 230:
    // Hexagon_S2_svsathb, Hexagon_S2_vsathb, Hexagon_S2_vsathb_nopack
    O << " = vsathb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 231:
    // Hexagon_S2_svsathub, Hexagon_S2_vsathub, Hexagon_S2_vsathub_nopack
    O << " = vsathub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 232:
    // Hexagon_S2_togglebit_i, Hexagon_S2_togglebit_r
    O << " = togglebit("; 
    printOperand(MI, 1, O); 
    break;
  case 233:
    // Hexagon_S2_tstbit_i, Hexagon_S2_tstbit_r
    O << " = tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 234:
    // Hexagon_S2_valignib, Hexagon_S2_valignrb, VALIGN_rrp
    O << " = valignb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 235:
    // Hexagon_S2_vcrotate
    O << " = vcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 236:
    // Hexagon_S2_vrndpackwh, Hexagon_S2_vrndpackwhs
    O << " = vrndwh("; 
    printOperand(MI, 1, O); 
    break;
  case 237:
    // Hexagon_S2_vsatwh, Hexagon_S2_vsatwh_nopack
    O << " = vsatwh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 238:
    // Hexagon_S2_vsatwuh, Hexagon_S2_vsatwuh_nopack
    O << " = vsatwuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 239:
    // Hexagon_S2_vsplatrb
    O << " = vsplatb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 240:
    // Hexagon_S2_vsplatrh
    O << " = vsplath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 241:
    // Hexagon_S2_vsxtbh
    O << " = vsxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 242:
    // Hexagon_S2_vsxthw
    O << " = vsxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 243:
    // Hexagon_S2_vtrunehb
    O << " = vtrunehb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 244:
    // Hexagon_S2_vtrunewh
    O << " = vtrunewh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 245:
    // Hexagon_S2_vtrunohb
    O << " = vtrunohb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 246:
    // Hexagon_S2_vtrunowh
    O << " = vtrunowh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 247:
    // Hexagon_S2_vzxtbh
    O << " = vzxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 248:
    // Hexagon_S2_vzxthw
    O << " = vzxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 249:
    // JMPR_cNotPnewNt, JMPR_cPnewNt
    O << ".new) jumpr:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 250:
    // JMPR_cNotPnewt, JMPR_cPnewt
    O << ".new) jumpr:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 251:
    // JMPR_cNotPt, JMPR_cPt
    O << ") jumpr r31"; 
    return;
    break;
  case 252:
    // JMP_PredNotPnt, JMP_PredPnt
    O << ".new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 253:
    // JMP_PredNotPt, JMP_PredPt
    O << ".new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 254:
    // LDb_GP, LDrib_GP
    O << "=memb(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 255:
    // LDd_GP, LDrid_GP
    O << "=memd(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 256:
    // LDh_GP, LDrih_GP
    O << "=memh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 257:
    // LDrib, LDrib_ae, POST_LDrib
    O << " = memb("; 
    break;
  case 258:
    // LDrib_ae_indexed, LDrib_indexed, LDrib_indexed_V4, LDrib_indexed_shl_V...
    O << "=memb("; 
    printOperand(MI, 1, O); 
    break;
  case 259:
    // LDrid, POST_LDrid
    O << " = memd("; 
    break;
  case 260:
    // LDrid_indexed, LDrid_indexed_V4, LDrid_indexed_shl_V4
    O << "=memd("; 
    printOperand(MI, 1, O); 
    break;
  case 261:
    // LDrih, LDrih_ae, POST_LDrih
    O << " = memh("; 
    break;
  case 262:
    // LDrih_ae_indexed, LDrih_indexed, LDrih_indexed_V4, LDrih_indexed_shl_V...
    O << "=memh("; 
    printOperand(MI, 1, O); 
    break;
  case 263:
    // LDriub, LDriub_ae, LDriubit, POST_LDriub
    O << " = memub("; 
    break;
  case 264:
    // LDriub_GP, LDub_GP
    O << "=memub(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 265:
    // LDriub_ae_indexed, LDriub_ae_indexed_V4, LDriub_ae_indexed_shl_V4, LDr...
    O << "=memub("; 
    printOperand(MI, 1, O); 
    break;
  case 266:
    // LDriuh, LDriuh_ae, POST_LDriuh
    O << " = memuh("; 
    break;
  case 267:
    // LDriuh_GP, LDuh_GP
    O << "=memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 268:
    // LDriuh_ae_indexed, LDriuh_ae_indexed_V4, LDriuh_ae_indexed_shl_V4, LDr...
    O << "=memuh("; 
    printOperand(MI, 1, O); 
    break;
  case 269:
    // LDriw, POST_LDriw
    O << " = memw("; 
    break;
  case 270:
    // LDriw_GP, LDw_GP
    O << "=memw(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 271:
    // LDriw_indexed, LDriw_indexed_V4, LDriw_indexed_shl_V4
    O << "=memw("; 
    printOperand(MI, 1, O); 
    break;
  case 272:
    // LOOP0_i
    O << ", #"; 
    printHexagonImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 273:
    // LOOP0_r
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 274:
    // LSLd_rr_xor_V4
    O << " ^= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 275:
    // LSLi_V4
    O << " = lsl(#"; 
    printHexagonImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 276:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMh_ADDi_MEM_V4, MEMh_ADDr_MEM_V4...
    O << ") += "; 
    break;
  case 277:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << "+#"; 
    printHexagonImmOperand(MI, 1, O); 
    break;
  case 278:
    // MEMb_ANDr_MEM_V4, MEMh_ANDr_MEM_V4, MEMw_ANDr_MEM_V4
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 279:
    // MEMb_ORr_MEM_V4, MEMh_ORr_MEM_V4, MEMw_ORr_MEM_V4
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 280:
    // MEMb_SUBi_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_SUBi_MEM_V4, MEMh_SUBr_MEM_V4...
    O << ") -= "; 
    break;
  case 281:
    // MPYI_rin
    O << " =- mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 282:
    // MPYI_riu
    O << " =+ mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 283:
    // ORi_ASLri_V4, ORi_LSRri_V4
    O << " = or(#"; 
    printHexagonImmOperand(MI, 1, O); 
    break;
  case 284:
    // POST_STbri, POST_STbri_nv_V4, POST_STdri, POST_SThri, POST_SThri_nv_V4...
    O << "++#"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    break;
  case 285:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    O << ") memb("; 
    break;
  case 286:
    // POST_STbri_cdnNotPt_V4, POST_STbri_cdnNotPt_nv_V4, POST_STbri_cdnPt_V4...
    O << ".new) memb("; 
    break;
  case 287:
    // POST_STdri_cNotPt, POST_STdri_cPt, STrid_cNotPt, STrid_cPt, STrid_inde...
    O << ") memd("; 
    break;
  case 288:
    // POST_STdri_cdnNotPt_V4, POST_STdri_cdnPt_V4, STrid_cdnNotPt_V4, STrid_...
    O << ".new) memd("; 
    break;
  case 289:
    // POST_SThri_cNotPt, POST_SThri_cNotPt_nv_V4, POST_SThri_cPt, POST_SThri...
    O << ") memh("; 
    break;
  case 290:
    // POST_SThri_cdnNotPt_V4, POST_SThri_cdnNotPt_nv_V4, POST_SThri_cdnPt_V4...
    O << ".new) memh("; 
    break;
  case 291:
    // POST_STwri_cNotPt, POST_STwri_cNotPt_nv_V4, POST_STwri_cPt, POST_STwri...
    O << ") memw("; 
    break;
  case 292:
    // POST_STwri_cdnNotPt_V4, POST_STwri_cdnNotPt_nv_V4, POST_STwri_cdnPt_V4...
    O << ".new) memw("; 
    break;
  case 293:
    // STb_GP, STh_GP, STrib, STrib_nv_V4, STrid, STrih, STrih_nv_V4, STriw, ...
    O << ") = "; 
    break;
  case 294:
    // STrib_GP, STrib_GP_nv_V4, STrib_indexed_shl_V4, STrib_indexed_shl_nv_V...
    O << '+'; 
    break;
  case 295:
    // STrib_shl_V4, STrib_shl_nv_V4, STrid_shl_V4, STrih_shl_V4, STrih_shl_n...
    O << "<<#"; 
    printHexagonImmOperand(MI, 1, O); 
    O << "+#"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 296:
    // TCRETURNR, TCRETURNtext, TCRETURNtg
    O << " // TAILCALL"; 
    return;
    break;
  }


  // Fragment 2 encoded into 7 bits for 71 unique commands.
  switch ((Bits >> 13) & 127) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    O << " = add("; 
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDi_ASLri_V4, ANDi_ASLri_V4, ORi_ASLri_V4, SUBi_ASLri_V4
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 3:
    // ADDi_LSRri_V4, ANDi_LSRri_V4, ORi_LSRri_V4, SUBi_LSRri_V4
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDri_acc, AND_ri, ASL, ASR_ri, ASRd_ri, CMPEQri, CMPGTUri, CMPGTri, C...
    O << ", #"; 
    break;
  case 6:
    // ADDrr_acc, AND_pp, AND_rr, AND_rr64, ANDr_ANDrr_V4, ASL_rr, ASLd_rr_xo...
    O << ", "; 
    break;
  case 7:
    // AND_pnotp, Hexagon_C2_andn, Hexagon_C2_orn
    O << ", !"; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_rr_cNotPt, AND_rr_cPt, AND_rr_cdnNotPt, AND_rr_cdnPt
    O << " = and("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // ANDd_NOTd_V4, ANDr_ANDr_NOTr_V4, HEXAGON_M4_and_andn, HEXAGON_M4_or_an...
    O << ", ~"; 
    break;
  case 10:
    // ARGEXTEND, Hexagon_A2_tfr, Hexagon_A2_tfrp, Hexagon_C2_pxfer_map, Hexa...
    return;
    break;
  case 11:
    // ASLH_cNotPt_V4, ASLH_cPt_V4, ASLH_cdnNotPt_V4, ASLH_cdnPt_V4
    O << " = aslh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ASRH_cNotPt_V4, ASRH_cPt_V4, ASRH_cdnNotPt_V4, ASRH_cdnPt_V4
    O << " = asrh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // COMBINE_rr_cNotPt, COMBINE_rr_cPt, COMBINE_rr_cdnNotPt, COMBINE_rr_cdn...
    O << " = combine("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // CONST32, CONST32GP_set, CONST32_set
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 15:
    // CONST32_set_jt
    printJumpTable(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 16:
    // HEXAGON_S4_or_andix, Hexagon_C4_and_and, Hexagon_C4_and_andn, Hexagon_...
    O << ", and("; 
    printOperand(MI, 2, O); 
    break;
  case 17:
    // Hexagon_A2_abs, Hexagon_A2_absp, Hexagon_A2_neg, Hexagon_A2_negp, Hexa...
    O << ')'; 
    return;
    break;
  case 18:
    // Hexagon_A2_abssat, Hexagon_A2_negsat, Hexagon_A2_svaddhs, Hexagon_A2_s...
    O << "):sat"; 
    return;
    break;
  case 19:
    // Hexagon_A2_combine_hh, Hexagon_A2_combine_hl, Hexagon_A2_subh_h16_hh, ...
    O << ".H, "; 
    break;
  case 20:
    // Hexagon_A2_combine_lh, Hexagon_A2_combine_ll, Hexagon_A2_subh_h16_lh, ...
    O << ".L, "; 
    break;
  case 21:
    // Hexagon_A2_svavghs, Hexagon_A2_vavghr, Hexagon_A2_vavgubr, Hexagon_A2_...
    O << "):rnd"; 
    return;
    break;
  case 22:
    // Hexagon_A2_vavghcr, Hexagon_A2_vavgwcr
    O << "):crnd"; 
    return;
    break;
  case 23:
    // Hexagon_A2_vnavghcr, Hexagon_A2_vnavgwcr
    O << "):crnd:sat"; 
    return;
    break;
  case 24:
    // Hexagon_A2_vnavghr, Hexagon_A2_vnavgwr, Hexagon_M2_cmpyrs_s0, Hexagon_...
    O << "):rnd:sat"; 
    return;
    break;
  case 25:
    // Hexagon_C4_and_or, Hexagon_C4_and_orn, Hexagon_C4_or_or, Hexagon_C4_or...
    O << ", or("; 
    printOperand(MI, 2, O); 
    break;
  case 26:
    // Hexagon_M2_cmacs_s1, Hexagon_M2_cmpys_s1, Hexagon_M2_cnacs_s1, Hexagon...
    O << "):<<1:sat"; 
    return;
    break;
  case 27:
    // Hexagon_M2_cmacsc_s0, Hexagon_M2_cmpysc_s0, Hexagon_M2_cnacsc_s0
    O << "*):sat"; 
    return;
    break;
  case 28:
    // Hexagon_M2_cmacsc_s1, Hexagon_M2_cmpysc_s1, Hexagon_M2_cnacsc_s1
    O << "*):<<1:sat"; 
    return;
    break;
  case 29:
    // Hexagon_M2_cmpyrs_s1, Hexagon_M2_mmachs_rs1, Hexagon_M2_mmacls_rs1, He...
    O << "):<<1:rnd:sat"; 
    return;
    break;
  case 30:
    // Hexagon_M2_cmpyrsc_s0
    O << "*):rnd:sat"; 
    return;
    break;
  case 31:
    // Hexagon_M2_cmpyrsc_s1
    O << "*):<<1:rnd:sat"; 
    return;
    break;
  case 32:
    // Hexagon_M2_vrcmaci_s0c, Hexagon_M2_vrcmacr_s0c, Hexagon_M2_vrcmpyi_s0c...
    O << "*)"; 
    return;
    break;
  case 33:
    // LDrib, LDrib_ae, LDrid, LDrih, LDrih_ae, LDriub, LDriub_ae, LDriubit, ...
    printHexagonMEMriOperand(MI, 1, O); 
    break;
  case 34:
    // LDrib_GP, LDrib_indexed_V4, LDrib_indexed_shl_V4, LDrid_GP, LDrid_inde...
    O << '+'; 
    break;
  case 35:
    // LDrib_ae_indexed, LDrib_indexed, LDrid_indexed, LDrih_ae_indexed, LDri...
    O << "+#"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 36:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrib_indexed_cN...
    O << " = memb("; 
    break;
  case 37:
    // LDrib_indexed_cNotPt_V4, LDrib_indexed_cPt_V4, LDrib_indexed_cdnNotPt_...
    O << "=memb("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 38:
    // LDrid_cNotPt, LDrid_cPt, LDrid_cdnNotPt, LDrid_cdnPt, POST_LDrid_cNotP...
    O << " = memd("; 
    break;
  case 39:
    // LDrid_indexed_cNotPt, LDrid_indexed_cNotPt_V4, LDrid_indexed_cPt, LDri...
    O << "=memd("; 
    printOperand(MI, 2, O); 
    break;
  case 40:
    // LDrih_cNotPt, LDrih_cPt, LDrih_cdnNotPt, LDrih_cdnPt, LDrih_indexed_cN...
    O << " = memh("; 
    break;
  case 41:
    // LDrih_indexed_cNotPt_V4, LDrih_indexed_cPt_V4, LDrih_indexed_cdnNotPt_...
    O << "=memh("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 42:
    // LDriub_cNotPt, LDriub_cPt, LDriub_cdnNotPt, LDriub_cdnPt, LDriub_index...
    O << " = memub("; 
    break;
  case 43:
    // LDriub_indexed_cNotPt_V4, LDriub_indexed_cPt_V4, LDriub_indexed_cdnNot...
    O << "=memub("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 44:
    // LDriuh_cNotPt, LDriuh_cPt, LDriuh_cdnNotPt, LDriuh_cdnPt, LDriuh_index...
    O << " = memuh("; 
    break;
  case 45:
    // LDriuh_indexed_cNotPt_V4, LDriuh_indexed_cPt_V4, LDriuh_indexed_cdnNot...
    O << "=memuh("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 46:
    // LDriw_cNotPt, LDriw_cPt, LDriw_cdnNotPt, LDriw_cdnPt, POST_LDriw_cNotP...
    O << " = memw("; 
    break;
  case 47:
    // LDriw_indexed_cNotPt, LDriw_indexed_cNotPt_V4, LDriw_indexed_cPt, LDri...
    O << "=memw("; 
    printOperand(MI, 2, O); 
    break;
  case 48:
    // MAXw_dd, MAXw_rr, MEMb_ADDr_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_ADDr_MEM_V4...
    printOperand(MI, 2, O); 
    break;
  case 49:
    // MEMb_ADDi_MEM_V4, MEMb_SUBi_MEM_V4, MEMh_ADDi_MEM_V4, MEMh_SUBi_MEM_V4...
    printHexagonImmOperand(MI, 2, O); 
    return;
    break;
  case 50:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << ") += "; 
    break;
  case 51:
    // MEMb_ORr_indexed_MEM_V4, MEMh_ORr_indexed_MEM_V4, MEMw_ORr_indexed_MEM...
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 52:
    // MEMb_SUBi_indexed_MEM_V4, MEMb_SUBr_indexed_MEM_V4, MEMh_SUBi_indexed_...
    O << ") -= "; 
    break;
  case 53:
    // OR_rr_cNotPt, OR_rr_cPt, OR_rr_cdnNotPt, OR_rr_cdnPt
    O << " = or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 54:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    printOperand(MI, 3, O); 
    O << "++#"; 
    printHexagonImmOperand(MI, 4, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 55:
    // POST_STbri_nv_V4, POST_SThri_nv_V4, POST_STwri_nv_V4, STrib_shl_nv_V4,...
    O << ".new"; 
    return;
    break;
  case 56:
    // STrib_GP, STrib_GP_nv_V4, STrid_GP, STrih_GP, STrih_GP_nv_V4, STriw_GP...
    printHexagonImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 57:
    // STrib_imm_V4, STrih_imm_V4, STriw_imm_V4
    O << ") = #"; 
    printHexagonImmOperand(MI, 2, O); 
    return;
    break;
  case 58:
    // STrib_indexed, STrib_indexed_nv_V4, STrid_indexed, STrih_indexed, STri...
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 59:
    // SUB_rr_cNotPt, SUB_rr_cPt, SUB_rr_cdnNotPt, SUB_rr_cdnPt
    O << " = sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 60:
    // SXTB_cNotPt_V4, SXTB_cPt_V4, SXTB_cdnNotPt_V4, SXTB_cdnPt_V4
    O << " = sxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 61:
    // SXTH_cNotPt_V4, SXTH_cPt_V4, SXTH_cdnNotPt_V4, SXTH_cdnPt_V4
    O << " = sxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // TFRI_cNotPt, TFRI_cPt, TFRI_cdnNotPt, TFRI_cdnPt
    O << " = #"; 
    printHexagonImmOperand(MI, 2, O); 
    return;
    break;
  case 63:
    // TFR_FI
    printHexagonFrameIndexOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 64:
    // TFR_PdFalse
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ')'; 
    return;
    break;
  case 65:
    // TFR_PdRs
    O << "  // Should almost never emit!"; 
    return;
    break;
  case 66:
    // TFR_RsPd
    O << "  // Should almost never emit this"; 
    return;
    break;
  case 67:
    // TFR_cNotPt, TFR_cPt, TFR_cdnNotPt, TFR_cdnPt
    O << " = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 68:
    // XOR_rr_cNotPt, XOR_rr_cPt, XOR_rr_cdnNotPt, XOR_rr_cdnPt
    O << " = xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // ZXTB_cNotPt_V4, ZXTB_cPt_V4, ZXTB_cdnNotPt_V4, ZXTB_cdnPt_V4
    O << " = zxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // ZXTH_cNotPt_V4, ZXTH_cPt_V4, ZXTH_cdnNotPt_V4, ZXTH_cdnPt_V4
    O << " = zxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 8) & 31) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_rr, ADD_rr_cNotPt, ADD_rr_cPt, ADD_rr_cdnNotPt, ADD_rr_c...
    O << ", "; 
    break;
  case 1:
    // ADD_ri, ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADDi...
    O << ", #"; 
    break;
  case 2:
    // ADDr_ADDri_V4, Hexagon_S4_addaddi
    O << ", add("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    break;
  case 3:
    // ADDr_MPYir_V4
    O << ", mpyi(#"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDr_MPYri_V4, ADDr_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, Hexagon_S4_subaddi
    O << ", sub(#"; 
    printHexagonImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 6:
    // ADDri_acc, HEXAGON_S2_insert, HEXAGON_S2_insertp, HEXAGON_S2_vspliceib...
    printHexagonImmOperand(MI, 3, O); 
    break;
  case 7:
    // ADDrr_acc, ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, ASLd_rr_xor_V4, ASR_rr_ac...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // AND_pp, AND_rr, AND_rr64, ANDd_NOTd_V4, ASL_rr, ASR_rr, ASRd_rr, CMPEH...
    printOperand(MI, 2, O); 
    break;
  case 9:
    // AND_ri, ASL, ASR_ri, ASRd_ri, CMPEQri, CMPGTUri, CMPGTri, CMPbEQri_V4,...
    printHexagonImmOperand(MI, 2, O); 
    break;
  case 10:
    // CONST32_Int_Real, LDrib, LDrib_ae, LDrid, LDrih, LDrih_ae, LDriub, LDr...
    O << ')'; 
    return;
    break;
  case 11:
    // Hexagon_A2_addh_h16_hh, Hexagon_A2_addh_h16_hl, Hexagon_A2_addh_h16_sa...
    O << ".H, "; 
    printOperand(MI, 2, O); 
    break;
  case 12:
    // Hexagon_A2_addh_h16_lh, Hexagon_A2_addh_h16_ll, Hexagon_A2_addh_h16_sa...
    O << ".L, "; 
    printOperand(MI, 2, O); 
    break;
  case 13:
    // Hexagon_C4_and_andn, Hexagon_C4_and_orn, Hexagon_C4_or_andn, Hexagon_C...
    O << ", !"; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrid_cNotPt, LD...
    printHexagonMEMriOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 15:
    // LDrib_indexed_cNotPt_V4, LDrib_indexed_cPt_V4, LDrib_indexed_cdnNotPt_...
    O << "<<#0)"; 
    return;
    break;
  case 16:
    // LDrib_indexed_shl_cNotPt_V4, LDrib_indexed_shl_cPt_V4, LDrib_indexed_s...
    O << "<<#"; 
    break;
  case 17:
    // LDrid_indexed_cNotPt, LDrid_indexed_cPt, LDrid_indexed_cdnNotPt, LDrid...
    O << "+#"; 
    break;
  case 18:
    // LDrid_indexed_cNotPt_V4, LDrid_indexed_cPt_V4, LDrid_indexed_cdnNotPt_...
    O << '+'; 
    break;
  case 19:
    // MEMb_ADDr_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_ADDr_MEM_V4, MEMh_SUBr_MEM_V4...
    return;
    break;
  case 20:
    // POST_LDrib, POST_LDrid, POST_LDrih, POST_LDriub, POST_LDriuh, POST_LDr...
    O << "++#"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // POST_STbri_cNotPt_nv_V4, POST_STbri_cPt_nv_V4, POST_STbri_cdnNotPt_nv_...
    O << ".new"; 
    return;
    break;
  case 22:
    // STrib_cNotPt, STrib_cNotPt_nv_V4, STrib_cPt, STrib_cPt_nv_V4, STrib_cd...
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  }

  switch (MI->getOpcode()) {
  case Hexagon::ADD64_rr:
  case Hexagon::ADD_ri:
  case Hexagon::ADD_ri_cNotPt:
  case Hexagon::ADD_ri_cPt:
  case Hexagon::ADD_ri_cdnNotPt:
  case Hexagon::ADD_ri_cdnPt:
  case Hexagon::ADD_rr:
  case Hexagon::ADD_rr_cNotPt:
  case Hexagon::ADD_rr_cPt:
  case Hexagon::ADD_rr_cdnNotPt:
  case Hexagon::ADD_rr_cdnPt:
  case Hexagon::ADJDYNALLOC:
  case Hexagon::Hexagon_A2_add:
  case Hexagon::Hexagon_A2_addi:
  case Hexagon::Hexagon_A2_addp:
  case Hexagon::Hexagon_A2_addpsat:
  case Hexagon::Hexagon_A2_addsp:
  case Hexagon::Hexagon_A2_max:
  case Hexagon::Hexagon_A2_maxp:
  case Hexagon::Hexagon_A2_min:
  case Hexagon::Hexagon_A2_xor:
  case Hexagon::Hexagon_A2_xorp:
  case Hexagon::Hexagon_C2_xor:
  case Hexagon::Hexagon_C4_and_and:
  case Hexagon::Hexagon_C4_and_or:
  case Hexagon::Hexagon_C4_or_and:
  case Hexagon::Hexagon_C4_or_or:
  case Hexagon::LDrib_indexed_shl_cNotPt_V4:
  case Hexagon::LDrib_indexed_shl_cPt_V4:
  case Hexagon::LDrib_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDrib_indexed_shl_cdnPt_V4:
  case Hexagon::LDrid_indexed_cNotPt:
  case Hexagon::LDrid_indexed_cPt:
  case Hexagon::LDrid_indexed_cdnNotPt:
  case Hexagon::LDrid_indexed_cdnPt:
  case Hexagon::LDrih_indexed_shl_cNotPt_V4:
  case Hexagon::LDrih_indexed_shl_cPt_V4:
  case Hexagon::LDrih_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDrih_indexed_shl_cdnPt_V4:
  case Hexagon::LDriub_indexed_shl_cNotPt_V4:
  case Hexagon::LDriub_indexed_shl_cPt_V4:
  case Hexagon::LDriub_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDriub_indexed_shl_cdnPt_V4:
  case Hexagon::LDriuh_indexed_shl_cNotPt_V4:
  case Hexagon::LDriuh_indexed_shl_cPt_V4:
  case Hexagon::LDriuh_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDriuh_indexed_shl_cdnPt_V4:
  case Hexagon::LDriw_indexed_cNotPt:
  case Hexagon::LDriw_indexed_cPt:
  case Hexagon::LDriw_indexed_cdnNotPt:
  case Hexagon::LDriw_indexed_cdnPt:
  case Hexagon::MAXw_dd:
  case Hexagon::MAXw_rr:
  case Hexagon::MINw_dd:
  case Hexagon::MINw_rr:
  case Hexagon::XOR_pp:
  case Hexagon::XOR_rr:
  case Hexagon::XOR_rr64:
    switch (MI->getOpcode()) {
    case Hexagon::ADD64_rr: 
    case Hexagon::ADD_rr: 
    case Hexagon::Hexagon_A2_add: 
    case Hexagon::Hexagon_A2_addp: 
    case Hexagon::Hexagon_A2_addpsat: 
    case Hexagon::Hexagon_A2_addsp: 
    case Hexagon::Hexagon_A2_max: 
    case Hexagon::Hexagon_A2_maxp: 
    case Hexagon::Hexagon_A2_min: 
    case Hexagon::Hexagon_A2_xor: 
    case Hexagon::Hexagon_A2_xorp: 
    case Hexagon::Hexagon_C2_xor: 
    case Hexagon::XOR_pp: 
    case Hexagon::XOR_rr: 
    case Hexagon::XOR_rr64: printOperand(MI, 2, O); break;
    case Hexagon::ADD_ri: 
    case Hexagon::ADJDYNALLOC: 
    case Hexagon::Hexagon_A2_addi: printHexagonImmOperand(MI, 2, O); break;
    case Hexagon::ADD_ri_cNotPt: 
    case Hexagon::ADD_ri_cPt: 
    case Hexagon::ADD_ri_cdnNotPt: 
    case Hexagon::ADD_ri_cdnPt: 
    case Hexagon::LDrid_indexed_cNotPt: 
    case Hexagon::LDrid_indexed_cPt: 
    case Hexagon::LDrid_indexed_cdnNotPt: 
    case Hexagon::LDrid_indexed_cdnPt: 
    case Hexagon::LDriw_indexed_cNotPt: 
    case Hexagon::LDriw_indexed_cPt: 
    case Hexagon::LDriw_indexed_cdnNotPt: 
    case Hexagon::LDriw_indexed_cdnPt: printHexagonImmOperand(MI, 3, O); break;
    case Hexagon::ADD_rr_cNotPt: 
    case Hexagon::ADD_rr_cPt: 
    case Hexagon::ADD_rr_cdnNotPt: 
    case Hexagon::ADD_rr_cdnPt: 
    case Hexagon::Hexagon_C4_and_and: 
    case Hexagon::Hexagon_C4_and_or: 
    case Hexagon::Hexagon_C4_or_and: 
    case Hexagon::Hexagon_C4_or_or: printOperand(MI, 3, O); break;
    case Hexagon::LDrib_indexed_shl_cNotPt_V4: 
    case Hexagon::LDrib_indexed_shl_cPt_V4: 
    case Hexagon::LDrib_indexed_shl_cdnNotPt_V4: 
    case Hexagon::LDrib_indexed_shl_cdnPt_V4: 
    case Hexagon::LDrih_indexed_shl_cNotPt_V4: 
    case Hexagon::LDrih_indexed_shl_cPt_V4: 
    case Hexagon::LDrih_indexed_shl_cdnNotPt_V4: 
    case Hexagon::LDrih_indexed_shl_cdnPt_V4: 
    case Hexagon::LDriub_indexed_shl_cNotPt_V4: 
    case Hexagon::LDriub_indexed_shl_cPt_V4: 
    case Hexagon::LDriub_indexed_shl_cdnNotPt_V4: 
    case Hexagon::LDriub_indexed_shl_cdnPt_V4: 
    case Hexagon::LDriuh_indexed_shl_cNotPt_V4: 
    case Hexagon::LDriuh_indexed_shl_cPt_V4: 
    case Hexagon::LDriuh_indexed_shl_cdnNotPt_V4: 
    case Hexagon::LDriuh_indexed_shl_cdnPt_V4: printHexagonImmOperand(MI, 4, O); break;
    case Hexagon::MAXw_dd: 
    case Hexagon::MAXw_rr: 
    case Hexagon::MINw_dd: 
    case Hexagon::MINw_rr: printOperand(MI, 1, O); break;
    }
    O << ')'; 
    return;
    break;
  case Hexagon::ADDi_MPYri_V4:
  case Hexagon::ADDi_MPYrr_V4:
  case Hexagon::HEXAGON_S4_or_andix:
  case Hexagon::ORr_ANDri_V4:
    switch (MI->getOpcode()) {
    case Hexagon::ADDi_MPYri_V4: 
    case Hexagon::HEXAGON_S4_or_andix: 
    case Hexagon::ORr_ANDri_V4: printHexagonImmOperand(MI, 3, O); break;
    case Hexagon::ADDi_MPYrr_V4: printOperand(MI, 3, O); break;
    }
    O << "))"; 
    return;
    break;
  case Hexagon::ADDr_ADDri_V4:
  case Hexagon::ADDr_SUBri_V4:
  case Hexagon::ADDri_SUBr_V4:
  case Hexagon::ADDri_acc:
  case Hexagon::ADDrr_acc:
  case Hexagon::AND_pp:
  case Hexagon::AND_ri:
  case Hexagon::AND_rr:
  case Hexagon::AND_rr64:
  case Hexagon::ANDd_NOTd_V4:
  case Hexagon::ANDr_ANDr_NOTr_V4:
  case Hexagon::ANDr_ANDrr_V4:
  case Hexagon::ASL:
  case Hexagon::ASL_rr:
  case Hexagon::ASLd_rr_xor_V4:
  case Hexagon::ASR_ri:
  case Hexagon::ASR_rr:
  case Hexagon::ASR_rr_acc:
  case Hexagon::ASRd_ri:
  case Hexagon::ASRd_rr:
  case Hexagon::CMPEHexagon4rr:
  case Hexagon::CMPEQri:
  case Hexagon::CMPEQrr:
  case Hexagon::CMPGT64rr:
  case Hexagon::CMPGTU64rr:
  case Hexagon::CMPGTUri:
  case Hexagon::CMPGTUrr:
  case Hexagon::CMPGTri:
  case Hexagon::CMPGTrr:
  case Hexagon::CMPbEQri_V4:
  case Hexagon::CMPbEQrr_sbsb_V4:
  case Hexagon::CMPbEQrr_ubub_V4:
  case Hexagon::CMPbGTUri_V4:
  case Hexagon::CMPbGTUrr_V4:
  case Hexagon::CMPbGTri_V4:
  case Hexagon::CMPbGTrr_V4:
  case Hexagon::CMPhEQri_V4:
  case Hexagon::CMPhEQrr_shl_V4:
  case Hexagon::CMPhEQrr_xor_V4:
  case Hexagon::CMPhGTUri_V4:
  case Hexagon::CMPhGTUrr_V4:
  case Hexagon::CMPhGTri_V4:
  case Hexagon::CMPhGTrr_shl_V4:
  case Hexagon::COMBINE_rr:
  case Hexagon::HEXAGON_A4_cround_ri:
  case Hexagon::HEXAGON_A4_cround_rr:
  case Hexagon::HEXAGON_A4_round_ri:
  case Hexagon::HEXAGON_A4_round_ri_sat:
  case Hexagon::HEXAGON_A4_round_rr:
  case Hexagon::HEXAGON_A4_round_rr_sat:
  case Hexagon::HEXAGON_C2_bitsclr:
  case Hexagon::HEXAGON_C2_bitsclri:
  case Hexagon::HEXAGON_M4_and_and:
  case Hexagon::HEXAGON_M4_and_andn:
  case Hexagon::HEXAGON_M4_or_and:
  case Hexagon::HEXAGON_M4_or_andn:
  case Hexagon::HEXAGON_M4_or_or:
  case Hexagon::HEXAGON_M4_xor_and:
  case Hexagon::HEXAGON_M4_xor_andn:
  case Hexagon::HEXAGON_S2_insert_rp:
  case Hexagon::HEXAGON_S2_insertp_rp:
  case Hexagon::HEXAGON_S2_vspliceib:
  case Hexagon::HEXAGON_S2_vsplicerb:
  case Hexagon::HEXAGON_S4_or_andi:
  case Hexagon::HEXAGON_S4_or_ori:
  case Hexagon::Hexagon_A2_addh_h16_hh:
  case Hexagon::Hexagon_A2_addh_h16_hl:
  case Hexagon::Hexagon_A2_addh_h16_lh:
  case Hexagon::Hexagon_A2_addh_h16_ll:
  case Hexagon::Hexagon_A2_addh_h16_sat_hh:
  case Hexagon::Hexagon_A2_addh_h16_sat_hl:
  case Hexagon::Hexagon_A2_addh_h16_sat_lh:
  case Hexagon::Hexagon_A2_addh_h16_sat_ll:
  case Hexagon::Hexagon_A2_addh_l16_hl:
  case Hexagon::Hexagon_A2_addh_l16_ll:
  case Hexagon::Hexagon_A2_addh_l16_sat_hl:
  case Hexagon::Hexagon_A2_addh_l16_sat_ll:
  case Hexagon::Hexagon_A2_and:
  case Hexagon::Hexagon_A2_andir:
  case Hexagon::Hexagon_A2_andp:
  case Hexagon::Hexagon_A2_combine_hh:
  case Hexagon::Hexagon_A2_combine_hl:
  case Hexagon::Hexagon_A2_combine_lh:
  case Hexagon::Hexagon_A2_combine_ll:
  case Hexagon::Hexagon_A2_combineii:
  case Hexagon::Hexagon_A2_combinew:
  case Hexagon::Hexagon_A2_or:
  case Hexagon::Hexagon_A2_orir:
  case Hexagon::Hexagon_A2_orp:
  case Hexagon::Hexagon_A2_sub:
  case Hexagon::Hexagon_A2_subh_h16_hh:
  case Hexagon::Hexagon_A2_subh_h16_hl:
  case Hexagon::Hexagon_A2_subh_h16_lh:
  case Hexagon::Hexagon_A2_subh_h16_ll:
  case Hexagon::Hexagon_A2_subh_h16_sat_hh:
  case Hexagon::Hexagon_A2_subh_h16_sat_hl:
  case Hexagon::Hexagon_A2_subh_h16_sat_lh:
  case Hexagon::Hexagon_A2_subh_h16_sat_ll:
  case Hexagon::Hexagon_A2_subh_l16_hl:
  case Hexagon::Hexagon_A2_subh_l16_ll:
  case Hexagon::Hexagon_A2_subh_l16_sat_hl:
  case Hexagon::Hexagon_A2_subh_l16_sat_ll:
  case Hexagon::Hexagon_A2_subp:
  case Hexagon::Hexagon_A2_subri:
  case Hexagon::Hexagon_A2_subsat:
  case Hexagon::Hexagon_A4_andn:
  case Hexagon::Hexagon_A4_combineir:
  case Hexagon::Hexagon_A4_combineri:
  case Hexagon::Hexagon_A4_orn:
  case Hexagon::Hexagon_A4_rcmpeq:
  case Hexagon::Hexagon_A4_rcmpeqi:
  case Hexagon::Hexagon_A4_rcmpneq:
  case Hexagon::Hexagon_A4_rcmpneqi:
  case Hexagon::Hexagon_C2_and:
  case Hexagon::Hexagon_C2_cmpeq:
  case Hexagon::Hexagon_C2_cmpeqi:
  case Hexagon::Hexagon_C2_cmpeqp:
  case Hexagon::Hexagon_C2_cmpgt:
  case Hexagon::Hexagon_C2_cmpgti:
  case Hexagon::Hexagon_C2_cmpgtp:
  case Hexagon::Hexagon_C2_cmpgtu:
  case Hexagon::Hexagon_C2_cmpgtui:
  case Hexagon::Hexagon_C2_cmpgtup:
  case Hexagon::Hexagon_C2_or:
  case Hexagon::Hexagon_C4_cmplte:
  case Hexagon::Hexagon_C4_cmpltei:
  case Hexagon::Hexagon_C4_cmplteu:
  case Hexagon::Hexagon_C4_cmplteui:
  case Hexagon::Hexagon_C4_cmpneq:
  case Hexagon::Hexagon_C4_cmpneqi:
  case Hexagon::Hexagon_M2_acci:
  case Hexagon::Hexagon_M2_accii:
  case Hexagon::Hexagon_M2_dpmpyss_acc_s0:
  case Hexagon::Hexagon_M2_dpmpyss_nac_s0:
  case Hexagon::Hexagon_M2_dpmpyss_rnd_s0:
  case Hexagon::Hexagon_M2_dpmpyss_s0:
  case Hexagon::Hexagon_M2_dpmpyuu_acc_s0:
  case Hexagon::Hexagon_M2_dpmpyuu_nac_s0:
  case Hexagon::Hexagon_M2_dpmpyuu_s0:
  case Hexagon::Hexagon_M2_hmmpyh_rs1:
  case Hexagon::Hexagon_M2_hmmpyl_rs1:
  case Hexagon::Hexagon_M2_maci:
  case Hexagon::Hexagon_M2_macsip:
  case Hexagon::Hexagon_M2_mpy_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpy_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpy_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpy_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s1:
  case Hexagon::Hexagon_M2_mpy_hh_s0:
  case Hexagon::Hexagon_M2_mpy_hh_s1:
  case Hexagon::Hexagon_M2_mpy_hl_s0:
  case Hexagon::Hexagon_M2_mpy_hl_s1:
  case Hexagon::Hexagon_M2_mpy_lh_s0:
  case Hexagon::Hexagon_M2_mpy_lh_s1:
  case Hexagon::Hexagon_M2_mpy_ll_s0:
  case Hexagon::Hexagon_M2_mpy_ll_s1:
  case Hexagon::Hexagon_M2_mpy_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpy_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpy_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpy_nac_ll_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_hh_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_hh_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_hl_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_hl_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_lh_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_lh_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_ll_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_ll_s1:
  case Hexagon::Hexagon_M2_mpy_sat_hh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_hh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_hl_s0:
  case Hexagon::Hexagon_M2_mpy_sat_hl_s1:
  case Hexagon::Hexagon_M2_mpy_sat_lh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_lh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_ll_s0:
  case Hexagon::Hexagon_M2_mpy_sat_ll_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s1:
  case Hexagon::Hexagon_M2_mpy_up:
  case Hexagon::Hexagon_M2_mpyd_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpyd_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_ll_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_ll_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_ll_s1:
  case Hexagon::Hexagon_M2_mpyi:
  case Hexagon::Hexagon_M2_mpyu_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpyu_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpyu_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpyu_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpyu_hh_s0:
  case Hexagon::Hexagon_M2_mpyu_hh_s1:
  case Hexagon::Hexagon_M2_mpyu_hl_s0:
  case Hexagon::Hexagon_M2_mpyu_hl_s1:
  case Hexagon::Hexagon_M2_mpyu_lh_s0:
  case Hexagon::Hexagon_M2_mpyu_lh_s1:
  case Hexagon::Hexagon_M2_mpyu_ll_s0:
  case Hexagon::Hexagon_M2_mpyu_ll_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_ll_s1:
  case Hexagon::Hexagon_M2_mpyu_up:
  case Hexagon::Hexagon_M2_mpyud_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpyud_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpyud_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpyud_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpyud_hh_s0:
  case Hexagon::Hexagon_M2_mpyud_hh_s1:
  case Hexagon::Hexagon_M2_mpyud_hl_s0:
  case Hexagon::Hexagon_M2_mpyud_hl_s1:
  case Hexagon::Hexagon_M2_mpyud_lh_s0:
  case Hexagon::Hexagon_M2_mpyud_lh_s1:
  case Hexagon::Hexagon_M2_mpyud_ll_s0:
  case Hexagon::Hexagon_M2_mpyud_ll_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_ll_s1:
  case Hexagon::Hexagon_M2_nacci:
  case Hexagon::Hexagon_M2_naccii:
  case Hexagon::Hexagon_S2_asl_i_p:
  case Hexagon::Hexagon_S2_asl_i_p_acc:
  case Hexagon::Hexagon_S2_asl_i_p_and:
  case Hexagon::Hexagon_S2_asl_i_p_nac:
  case Hexagon::Hexagon_S2_asl_i_p_or:
  case Hexagon::Hexagon_S2_asl_i_p_xacc:
  case Hexagon::Hexagon_S2_asl_i_r:
  case Hexagon::Hexagon_S2_asl_i_r_acc:
  case Hexagon::Hexagon_S2_asl_i_r_and:
  case Hexagon::Hexagon_S2_asl_i_r_nac:
  case Hexagon::Hexagon_S2_asl_i_r_or:
  case Hexagon::Hexagon_S2_asl_i_r_sat:
  case Hexagon::Hexagon_S2_asl_i_r_xacc:
  case Hexagon::Hexagon_S2_asl_r_p:
  case Hexagon::Hexagon_S2_asl_r_p_acc:
  case Hexagon::Hexagon_S2_asl_r_p_and:
  case Hexagon::Hexagon_S2_asl_r_p_nac:
  case Hexagon::Hexagon_S2_asl_r_p_or:
  case Hexagon::Hexagon_S2_asl_r_r:
  case Hexagon::Hexagon_S2_asl_r_r_acc:
  case Hexagon::Hexagon_S2_asl_r_r_and:
  case Hexagon::Hexagon_S2_asl_r_r_nac:
  case Hexagon::Hexagon_S2_asl_r_r_or:
  case Hexagon::Hexagon_S2_asl_r_r_sat:
  case Hexagon::Hexagon_S2_asr_i_p:
  case Hexagon::Hexagon_S2_asr_i_p_acc:
  case Hexagon::Hexagon_S2_asr_i_p_and:
  case Hexagon::Hexagon_S2_asr_i_p_nac:
  case Hexagon::Hexagon_S2_asr_i_p_or:
  case Hexagon::Hexagon_S2_asr_i_r:
  case Hexagon::Hexagon_S2_asr_i_r_acc:
  case Hexagon::Hexagon_S2_asr_i_r_and:
  case Hexagon::Hexagon_S2_asr_i_r_nac:
  case Hexagon::Hexagon_S2_asr_i_r_or:
  case Hexagon::Hexagon_S2_asr_i_r_rnd:
  case Hexagon::Hexagon_S2_asr_i_svw_trun:
  case Hexagon::Hexagon_S2_asr_i_vw:
  case Hexagon::Hexagon_S2_asr_r_p:
  case Hexagon::Hexagon_S2_asr_r_p_acc:
  case Hexagon::Hexagon_S2_asr_r_p_and:
  case Hexagon::Hexagon_S2_asr_r_p_nac:
  case Hexagon::Hexagon_S2_asr_r_p_or:
  case Hexagon::Hexagon_S2_asr_r_r:
  case Hexagon::Hexagon_S2_asr_r_r_acc:
  case Hexagon::Hexagon_S2_asr_r_r_and:
  case Hexagon::Hexagon_S2_asr_r_r_nac:
  case Hexagon::Hexagon_S2_asr_r_r_or:
  case Hexagon::Hexagon_S2_asr_r_r_sat:
  case Hexagon::Hexagon_S2_asr_r_svw_trun:
  case Hexagon::Hexagon_S2_asr_r_vw:
  case Hexagon::Hexagon_S2_clrbit_i:
  case Hexagon::Hexagon_S2_clrbit_r:
  case Hexagon::Hexagon_S2_extractu_rp:
  case Hexagon::Hexagon_S2_extractup_rp:
  case Hexagon::Hexagon_S2_lsr_i_p:
  case Hexagon::Hexagon_S2_lsr_i_p_acc:
  case Hexagon::Hexagon_S2_lsr_i_p_and:
  case Hexagon::Hexagon_S2_lsr_i_p_nac:
  case Hexagon::Hexagon_S2_lsr_i_p_or:
  case Hexagon::Hexagon_S2_lsr_i_p_xacc:
  case Hexagon::Hexagon_S2_lsr_i_r:
  case Hexagon::Hexagon_S2_lsr_i_r_acc:
  case Hexagon::Hexagon_S2_lsr_i_r_and:
  case Hexagon::Hexagon_S2_lsr_i_r_nac:
  case Hexagon::Hexagon_S2_lsr_i_r_or:
  case Hexagon::Hexagon_S2_lsr_i_r_xacc:
  case Hexagon::Hexagon_S2_lsr_r_p:
  case Hexagon::Hexagon_S2_lsr_r_p_acc:
  case Hexagon::Hexagon_S2_lsr_r_p_and:
  case Hexagon::Hexagon_S2_lsr_r_p_nac:
  case Hexagon::Hexagon_S2_lsr_r_p_or:
  case Hexagon::Hexagon_S2_lsr_r_r:
  case Hexagon::Hexagon_S2_lsr_r_r_acc:
  case Hexagon::Hexagon_S2_lsr_r_r_and:
  case Hexagon::Hexagon_S2_lsr_r_r_nac:
  case Hexagon::Hexagon_S2_lsr_r_r_or:
  case Hexagon::Hexagon_S2_setbit_i:
  case Hexagon::Hexagon_S2_setbit_r:
  case Hexagon::Hexagon_S2_togglebit_i:
  case Hexagon::Hexagon_S2_togglebit_r:
  case Hexagon::Hexagon_S2_tstbit_i:
  case Hexagon::Hexagon_S2_tstbit_r:
  case Hexagon::Hexagon_S2_valignib:
  case Hexagon::Hexagon_S2_valignrb:
  case Hexagon::Hexagon_S4_addaddi:
  case Hexagon::Hexagon_S4_andnp:
  case Hexagon::Hexagon_S4_ornp:
  case Hexagon::Hexagon_S4_subaddi:
  case Hexagon::LDrib_GP:
  case Hexagon::LDrib_indexed_V4:
  case Hexagon::LDrid_GP:
  case Hexagon::LDrid_indexed_V4:
  case Hexagon::LDrih_GP:
  case Hexagon::LDrih_indexed_V4:
  case Hexagon::LDriub_GP:
  case Hexagon::LDriub_ae_indexed_V4:
  case Hexagon::LDriub_indexed_V4:
  case Hexagon::LDriuh_GP:
  case Hexagon::LDriuh_ae_indexed_V4:
  case Hexagon::LDriuh_indexed_V4:
  case Hexagon::LDriw_GP:
  case Hexagon::LDriw_indexed_V4:
  case Hexagon::LSR_ri:
  case Hexagon::LSR_rr:
  case Hexagon::LSRd_ri:
  case Hexagon::LSRd_ri_acc:
  case Hexagon::LSRd_rr:
  case Hexagon::LSRd_rr_xor_V4:
  case Hexagon::MPY:
  case Hexagon::MPY64:
  case Hexagon::MPY64_acc:
  case Hexagon::MPY64_sub:
  case Hexagon::MPYI:
  case Hexagon::MPYI_acc_ri:
  case Hexagon::MPYI_acc_rr:
  case Hexagon::MPYI_ri:
  case Hexagon::MPYU:
  case Hexagon::MPYU64:
  case Hexagon::MPYU64_acc:
  case Hexagon::MPYU64_sub:
  case Hexagon::MPY_trsext:
  case Hexagon::OR_pp:
  case Hexagon::OR_ri:
  case Hexagon::OR_rr:
  case Hexagon::OR_rr64:
  case Hexagon::ORd_NOTd_V4:
  case Hexagon::ORr_ANDr_NOTr_V4:
  case Hexagon::ORr_ANDri2_V4:
  case Hexagon::ORr_ANDrr_V4:
  case Hexagon::ORr_ORri_V4:
  case Hexagon::ORr_ORrr_V4:
  case Hexagon::STrib_cNotPt_nv_V4:
  case Hexagon::STrib_cPt_nv_V4:
  case Hexagon::STrib_cdnNotPt_nv_V4:
  case Hexagon::STrib_cdnPt_nv_V4:
  case Hexagon::STrih_cNotPt_nv_V4:
  case Hexagon::STrih_cPt_nv_V4:
  case Hexagon::STrih_cdnNotPt_nv_V4:
  case Hexagon::STrih_cdnPt_nv_V4:
  case Hexagon::STriw_cNotPt_nv_V4:
  case Hexagon::STriw_cPt_nv_V4:
  case Hexagon::STriw_cdnNotPt_nv_V4:
  case Hexagon::STriw_cdnPt_nv_V4:
  case Hexagon::SUB64_rr:
  case Hexagon::SUB_rr:
  case Hexagon::SUBri_acc:
  case Hexagon::SUBrr_acc:
  case Hexagon::VALIGN_rrp:
  case Hexagon::VSPLICE_rrp:
  case Hexagon::XORr_ANDr_NOTr_V4:
  case Hexagon::XORr_ANDrr_V4:
    switch (MI->getOpcode()) {
    case Hexagon::ADDr_ADDri_V4: 
    case Hexagon::ADDr_SUBri_V4: 
    case Hexagon::ADDri_SUBr_V4: O << "))"; break;
    case Hexagon::ADDri_acc: 
    case Hexagon::ADDrr_acc: 
    case Hexagon::AND_pp: 
    case Hexagon::AND_ri: 
    case Hexagon::AND_rr: 
    case Hexagon::AND_rr64: 
    case Hexagon::ANDd_NOTd_V4: 
    case Hexagon::ANDr_ANDr_NOTr_V4: 
    case Hexagon::ANDr_ANDrr_V4: 
    case Hexagon::ASL: 
    case Hexagon::ASL_rr: 
    case Hexagon::ASLd_rr_xor_V4: 
    case Hexagon::ASR_ri: 
    case Hexagon::ASR_rr: 
    case Hexagon::ASR_rr_acc: 
    case Hexagon::ASRd_ri: 
    case Hexagon::ASRd_rr: 
    case Hexagon::CMPEHexagon4rr: 
    case Hexagon::CMPEQri: 
    case Hexagon::CMPEQrr: 
    case Hexagon::CMPGT64rr: 
    case Hexagon::CMPGTU64rr: 
    case Hexagon::CMPGTUri: 
    case Hexagon::CMPGTUrr: 
    case Hexagon::CMPGTri: 
    case Hexagon::CMPGTrr: 
    case Hexagon::CMPbEQri_V4: 
    case Hexagon::CMPbEQrr_sbsb_V4: 
    case Hexagon::CMPbEQrr_ubub_V4: 
    case Hexagon::CMPbGTUri_V4: 
    case Hexagon::CMPbGTUrr_V4: 
    case Hexagon::CMPbGTri_V4: 
    case Hexagon::CMPbGTrr_V4: 
    case Hexagon::CMPhEQri_V4: 
    case Hexagon::CMPhEQrr_shl_V4: 
    case Hexagon::CMPhEQrr_xor_V4: 
    case Hexagon::CMPhGTUri_V4: 
    case Hexagon::CMPhGTUrr_V4: 
    case Hexagon::CMPhGTri_V4: 
    case Hexagon::CMPhGTrr_shl_V4: 
    case Hexagon::COMBINE_rr: 
    case Hexagon::HEXAGON_A4_cround_ri: 
    case Hexagon::HEXAGON_A4_cround_rr: 
    case Hexagon::HEXAGON_A4_round_ri: 
    case Hexagon::HEXAGON_A4_round_rr: 
    case Hexagon::HEXAGON_C2_bitsclr: 
    case Hexagon::HEXAGON_C2_bitsclri: 
    case Hexagon::HEXAGON_M4_and_and: 
    case Hexagon::HEXAGON_M4_and_andn: 
    case Hexagon::HEXAGON_M4_or_and: 
    case Hexagon::HEXAGON_M4_or_andn: 
    case Hexagon::HEXAGON_M4_or_or: 
    case Hexagon::HEXAGON_M4_xor_and: 
    case Hexagon::HEXAGON_M4_xor_andn: 
    case Hexagon::HEXAGON_S2_insert_rp: 
    case Hexagon::HEXAGON_S2_insertp_rp: 
    case Hexagon::HEXAGON_S2_vspliceib: 
    case Hexagon::HEXAGON_S2_vsplicerb: 
    case Hexagon::HEXAGON_S4_or_andi: 
    case Hexagon::HEXAGON_S4_or_ori: 
    case Hexagon::Hexagon_A2_and: 
    case Hexagon::Hexagon_A2_andir: 
    case Hexagon::Hexagon_A2_andp: 
    case Hexagon::Hexagon_A2_combineii: 
    case Hexagon::Hexagon_A2_combinew: 
    case Hexagon::Hexagon_A2_or: 
    case Hexagon::Hexagon_A2_orir: 
    case Hexagon::Hexagon_A2_orp: 
    case Hexagon::Hexagon_A2_sub: 
    case Hexagon::Hexagon_A2_subp: 
    case Hexagon::Hexagon_A2_subri: 
    case Hexagon::Hexagon_A4_andn: 
    case Hexagon::Hexagon_A4_combineir: 
    case Hexagon::Hexagon_A4_combineri: 
    case Hexagon::Hexagon_A4_orn: 
    case Hexagon::Hexagon_A4_rcmpeq: 
    case Hexagon::Hexagon_A4_rcmpeqi: 
    case Hexagon::Hexagon_A4_rcmpneq: 
    case Hexagon::Hexagon_A4_rcmpneqi: 
    case Hexagon::Hexagon_C2_and: 
    case Hexagon::Hexagon_C2_cmpeq: 
    case Hexagon::Hexagon_C2_cmpeqi: 
    case Hexagon::Hexagon_C2_cmpeqp: 
    case Hexagon::Hexagon_C2_cmpgt: 
    case Hexagon::Hexagon_C2_cmpgti: 
    case Hexagon::Hexagon_C2_cmpgtp: 
    case Hexagon::Hexagon_C2_cmpgtu: 
    case Hexagon::Hexagon_C2_cmpgtui: 
    case Hexagon::Hexagon_C2_cmpgtup: 
    case Hexagon::Hexagon_C2_or: 
    case Hexagon::Hexagon_C4_cmplte: 
    case Hexagon::Hexagon_C4_cmpltei: 
    case Hexagon::Hexagon_C4_cmplteu: 
    case Hexagon::Hexagon_C4_cmplteui: 
    case Hexagon::Hexagon_C4_cmpneq: 
    case Hexagon::Hexagon_C4_cmpneqi: 
    case Hexagon::Hexagon_M2_acci: 
    case Hexagon::Hexagon_M2_accii: 
    case Hexagon::Hexagon_M2_dpmpyss_acc_s0: 
    case Hexagon::Hexagon_M2_dpmpyss_nac_s0: 
    case Hexagon::Hexagon_M2_dpmpyss_s0: 
    case Hexagon::Hexagon_M2_dpmpyuu_acc_s0: 
    case Hexagon::Hexagon_M2_dpmpyuu_nac_s0: 
    case Hexagon::Hexagon_M2_dpmpyuu_s0: 
    case Hexagon::Hexagon_M2_maci: 
    case Hexagon::Hexagon_M2_macsip: 
    case Hexagon::Hexagon_M2_mpy_up: 
    case Hexagon::Hexagon_M2_mpyi: 
    case Hexagon::Hexagon_M2_mpyu_up: 
    case Hexagon::Hexagon_M2_nacci: 
    case Hexagon::Hexagon_M2_naccii: 
    case Hexagon::Hexagon_S2_asl_i_p: 
    case Hexagon::Hexagon_S2_asl_i_p_acc: 
    case Hexagon::Hexagon_S2_asl_i_p_and: 
    case Hexagon::Hexagon_S2_asl_i_p_nac: 
    case Hexagon::Hexagon_S2_asl_i_p_or: 
    case Hexagon::Hexagon_S2_asl_i_p_xacc: 
    case Hexagon::Hexagon_S2_asl_i_r: 
    case Hexagon::Hexagon_S2_asl_i_r_acc: 
    case Hexagon::Hexagon_S2_asl_i_r_and: 
    case Hexagon::Hexagon_S2_asl_i_r_nac: 
    case Hexagon::Hexagon_S2_asl_i_r_or: 
    case Hexagon::Hexagon_S2_asl_i_r_xacc: 
    case Hexagon::Hexagon_S2_asl_r_p: 
    case Hexagon::Hexagon_S2_asl_r_p_acc: 
    case Hexagon::Hexagon_S2_asl_r_p_and: 
    case Hexagon::Hexagon_S2_asl_r_p_nac: 
    case Hexagon::Hexagon_S2_asl_r_p_or: 
    case Hexagon::Hexagon_S2_asl_r_r: 
    case Hexagon::Hexagon_S2_asl_r_r_acc: 
    case Hexagon::Hexagon_S2_asl_r_r_and: 
    case Hexagon::Hexagon_S2_asl_r_r_nac: 
    case Hexagon::Hexagon_S2_asl_r_r_or: 
    case Hexagon::Hexagon_S2_asr_i_p: 
    case Hexagon::Hexagon_S2_asr_i_p_acc: 
    case Hexagon::Hexagon_S2_asr_i_p_and: 
    case Hexagon::Hexagon_S2_asr_i_p_nac: 
    case Hexagon::Hexagon_S2_asr_i_p_or: 
    case Hexagon::Hexagon_S2_asr_i_r: 
    case Hexagon::Hexagon_S2_asr_i_r_acc: 
    case Hexagon::Hexagon_S2_asr_i_r_and: 
    case Hexagon::Hexagon_S2_asr_i_r_nac: 
    case Hexagon::Hexagon_S2_asr_i_r_or: 
    case Hexagon::Hexagon_S2_asr_i_svw_trun: 
    case Hexagon::Hexagon_S2_asr_i_vw: 
    case Hexagon::Hexagon_S2_asr_r_p: 
    case Hexagon::Hexagon_S2_asr_r_p_acc: 
    case Hexagon::Hexagon_S2_asr_r_p_and: 
    case Hexagon::Hexagon_S2_asr_r_p_nac: 
    case Hexagon::Hexagon_S2_asr_r_p_or: 
    case Hexagon::Hexagon_S2_asr_r_r: 
    case Hexagon::Hexagon_S2_asr_r_r_acc: 
    case Hexagon::Hexagon_S2_asr_r_r_and: 
    case Hexagon::Hexagon_S2_asr_r_r_nac: 
    case Hexagon::Hexagon_S2_asr_r_r_or: 
    case Hexagon::Hexagon_S2_asr_r_svw_trun: 
    case Hexagon::Hexagon_S2_asr_r_vw: 
    case Hexagon::Hexagon_S2_clrbit_i: 
    case Hexagon::Hexagon_S2_clrbit_r: 
    case Hexagon::Hexagon_S2_extractu_rp: 
    case Hexagon::Hexagon_S2_extractup_rp: 
    case Hexagon::Hexagon_S2_lsr_i_p: 
    case Hexagon::Hexagon_S2_lsr_i_p_acc: 
    case Hexagon::Hexagon_S2_lsr_i_p_and: 
    case Hexagon::Hexagon_S2_lsr_i_p_nac: 
    case Hexagon::Hexagon_S2_lsr_i_p_or: 
    case Hexagon::Hexagon_S2_lsr_i_p_xacc: 
    case Hexagon::Hexagon_S2_lsr_i_r: 
    case Hexagon::Hexagon_S2_lsr_i_r_acc: 
    case Hexagon::Hexagon_S2_lsr_i_r_and: 
    case Hexagon::Hexagon_S2_lsr_i_r_nac: 
    case Hexagon::Hexagon_S2_lsr_i_r_or: 
    case Hexagon::Hexagon_S2_lsr_i_r_xacc: 
    case Hexagon::Hexagon_S2_lsr_r_p: 
    case Hexagon::Hexagon_S2_lsr_r_p_acc: 
    case Hexagon::Hexagon_S2_lsr_r_p_and: 
    case Hexagon::Hexagon_S2_lsr_r_p_nac: 
    case Hexagon::Hexagon_S2_lsr_r_p_or: 
    case Hexagon::Hexagon_S2_lsr_r_r: 
    case Hexagon::Hexagon_S2_lsr_r_r_acc: 
    case Hexagon::Hexagon_S2_lsr_r_r_and: 
    case Hexagon::Hexagon_S2_lsr_r_r_nac: 
    case Hexagon::Hexagon_S2_lsr_r_r_or: 
    case Hexagon::Hexagon_S2_setbit_i: 
    case Hexagon::Hexagon_S2_setbit_r: 
    case Hexagon::Hexagon_S2_togglebit_i: 
    case Hexagon::Hexagon_S2_togglebit_r: 
    case Hexagon::Hexagon_S2_tstbit_i: 
    case Hexagon::Hexagon_S2_tstbit_r: 
    case Hexagon::Hexagon_S2_valignib: 
    case Hexagon::Hexagon_S2_valignrb: 
    case Hexagon::Hexagon_S4_addaddi: 
    case Hexagon::Hexagon_S4_andnp: 
    case Hexagon::Hexagon_S4_ornp: 
    case Hexagon::Hexagon_S4_subaddi: 
    case Hexagon::LDrib_GP: 
    case Hexagon::LDrid_GP: 
    case Hexagon::LDrih_GP: 
    case Hexagon::LDriub_GP: 
    case Hexagon::LDriuh_GP: 
    case Hexagon::LDriw_GP: 
    case Hexagon::LSR_ri: 
    case Hexagon::LSR_rr: 
    case Hexagon::LSRd_ri: 
    case Hexagon::LSRd_ri_acc: 
    case Hexagon::LSRd_rr: 
    case Hexagon::LSRd_rr_xor_V4: 
    case Hexagon::MPY: 
    case Hexagon::MPY64: 
    case Hexagon::MPY64_acc: 
    case Hexagon::MPY64_sub: 
    case Hexagon::MPYI: 
    case Hexagon::MPYI_acc_ri: 
    case Hexagon::MPYI_acc_rr: 
    case Hexagon::MPYI_ri: 
    case Hexagon::MPYU: 
    case Hexagon::MPYU64: 
    case Hexagon::MPYU64_acc: 
    case Hexagon::MPYU64_sub: 
    case Hexagon::MPY_trsext: 
    case Hexagon::OR_pp: 
    case Hexagon::OR_ri: 
    case Hexagon::OR_rr: 
    case Hexagon::OR_rr64: 
    case Hexagon::ORd_NOTd_V4: 
    case Hexagon::ORr_ANDr_NOTr_V4: 
    case Hexagon::ORr_ANDri2_V4: 
    case Hexagon::ORr_ANDrr_V4: 
    case Hexagon::ORr_ORri_V4: 
    case Hexagon::ORr_ORrr_V4: 
    case Hexagon::SUB64_rr: 
    case Hexagon::SUB_rr: 
    case Hexagon::SUBri_acc: 
    case Hexagon::SUBrr_acc: 
    case Hexagon::VALIGN_rrp: 
    case Hexagon::VSPLICE_rrp: 
    case Hexagon::XORr_ANDr_NOTr_V4: 
    case Hexagon::XORr_ANDrr_V4: O << ')'; break;
    case Hexagon::HEXAGON_A4_round_ri_sat: 
    case Hexagon::HEXAGON_A4_round_rr_sat: 
    case Hexagon::Hexagon_A2_subsat: 
    case Hexagon::Hexagon_S2_asl_i_r_sat: 
    case Hexagon::Hexagon_S2_asl_r_r_sat: 
    case Hexagon::Hexagon_S2_asr_r_r_sat: O << "):sat"; break;
    case Hexagon::Hexagon_A2_addh_h16_hh: 
    case Hexagon::Hexagon_A2_addh_h16_lh: 
    case Hexagon::Hexagon_A2_subh_h16_hh: 
    case Hexagon::Hexagon_A2_subh_h16_lh: O << ".H):<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_hl: 
    case Hexagon::Hexagon_A2_addh_h16_ll: 
    case Hexagon::Hexagon_A2_subh_h16_hl: 
    case Hexagon::Hexagon_A2_subh_h16_ll: O << ".L):<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_sat_hh: 
    case Hexagon::Hexagon_A2_addh_h16_sat_lh: 
    case Hexagon::Hexagon_A2_subh_h16_sat_hh: 
    case Hexagon::Hexagon_A2_subh_h16_sat_lh: O << ".H):sat:<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_sat_hl: 
    case Hexagon::Hexagon_A2_addh_h16_sat_ll: 
    case Hexagon::Hexagon_A2_subh_h16_sat_hl: 
    case Hexagon::Hexagon_A2_subh_h16_sat_ll: O << ".L):sat:<<16"; break;
    case Hexagon::Hexagon_A2_addh_l16_hl: 
    case Hexagon::Hexagon_A2_combine_hh: 
    case Hexagon::Hexagon_A2_combine_lh: 
    case Hexagon::Hexagon_A2_subh_l16_hl: 
    case Hexagon::Hexagon_M2_mpy_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpy_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_lh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_lh_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpyu_hh_s0: 
    case Hexagon::Hexagon_M2_mpyu_lh_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_lh_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpyud_hh_s0: 
    case Hexagon::Hexagon_M2_mpyud_lh_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_lh_s0: O << ".H)"; break;
    case Hexagon::Hexagon_A2_addh_l16_ll: 
    case Hexagon::Hexagon_A2_combine_hl: 
    case Hexagon::Hexagon_A2_combine_ll: 
    case Hexagon::Hexagon_A2_subh_l16_ll: 
    case Hexagon::Hexagon_M2_mpy_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpy_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_ll_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_ll_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpyu_hl_s0: 
    case Hexagon::Hexagon_M2_mpyu_ll_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_ll_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpyud_hl_s0: 
    case Hexagon::Hexagon_M2_mpyud_ll_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_ll_s0: O << ".L)"; break;
    case Hexagon::Hexagon_A2_addh_l16_sat_hl: 
    case Hexagon::Hexagon_A2_subh_l16_sat_hl: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_lh_s0: O << ".H):sat"; break;
    case Hexagon::Hexagon_A2_addh_l16_sat_ll: 
    case Hexagon::Hexagon_A2_subh_l16_sat_ll: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_ll_s0: O << ".L):sat"; break;
    case Hexagon::Hexagon_M2_dpmpyss_rnd_s0: 
    case Hexagon::Hexagon_S2_asr_i_r_rnd: O << "):rnd"; break;
    case Hexagon::Hexagon_M2_hmmpyh_rs1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s1: O << ".H):<<1:rnd:sat"; break;
    case Hexagon::Hexagon_M2_hmmpyl_rs1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s1: O << ".L):<<1:rnd:sat"; break;
    case Hexagon::Hexagon_M2_mpy_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpy_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_lh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_lh_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpyu_hh_s1: 
    case Hexagon::Hexagon_M2_mpyu_lh_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_lh_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpyud_hh_s1: 
    case Hexagon::Hexagon_M2_mpyud_lh_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_lh_s1: O << ".H):<<1"; break;
    case Hexagon::Hexagon_M2_mpy_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpy_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_ll_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_ll_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpyu_hl_s1: 
    case Hexagon::Hexagon_M2_mpyu_ll_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_ll_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpyud_hl_s1: 
    case Hexagon::Hexagon_M2_mpyud_ll_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_ll_s1: O << ".L):<<1"; break;
    case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_lh_s1: O << ".H):<<1:sat"; break;
    case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_ll_s1: O << ".L):<<1:sat"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_rnd_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_lh_s0: O << ".H):rnd"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_rnd_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_lh_s1: O << ".H):<<1:rnd"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_rnd_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_ll_s0: O << ".L):rnd"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_rnd_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_ll_s1: O << ".L):<<1:rnd"; break;
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s0: O << ".H):rnd:sat"; break;
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s0: O << ".L):rnd:sat"; break;
    case Hexagon::LDrib_indexed_V4: 
    case Hexagon::LDrid_indexed_V4: 
    case Hexagon::LDrih_indexed_V4: 
    case Hexagon::LDriub_ae_indexed_V4: 
    case Hexagon::LDriub_indexed_V4: 
    case Hexagon::LDriuh_ae_indexed_V4: 
    case Hexagon::LDriuh_indexed_V4: 
    case Hexagon::LDriw_indexed_V4: O << "<<#0)"; break;
    case Hexagon::STrib_cNotPt_nv_V4: 
    case Hexagon::STrib_cPt_nv_V4: 
    case Hexagon::STrib_cdnNotPt_nv_V4: 
    case Hexagon::STrib_cdnPt_nv_V4: 
    case Hexagon::STrih_cNotPt_nv_V4: 
    case Hexagon::STrih_cPt_nv_V4: 
    case Hexagon::STrih_cdnNotPt_nv_V4: 
    case Hexagon::STrih_cdnPt_nv_V4: 
    case Hexagon::STriw_cNotPt_nv_V4: 
    case Hexagon::STriw_cPt_nv_V4: 
    case Hexagon::STriw_cdnNotPt_nv_V4: 
    case Hexagon::STriw_cdnPt_nv_V4: O << ".new"; break;
    }
    return;
    break;
  case Hexagon::ADDr_MPYri_V4:
  case Hexagon::Hexagon_C2_muxii:
  case Hexagon::Hexagon_C2_muxir:
  case Hexagon::Hexagon_S2_extractu:
  case Hexagon::Hexagon_S2_extractup:
  case Hexagon::MUX_ii:
  case Hexagon::MUX_ri:
    O << ", #"; 
    printHexagonImmOperand(MI, 3, O); 
    switch (MI->getOpcode()) {
    case Hexagon::ADDr_MPYri_V4: O << "))"; break;
    case Hexagon::Hexagon_C2_muxii: 
    case Hexagon::Hexagon_C2_muxir: 
    case Hexagon::Hexagon_S2_extractu: 
    case Hexagon::Hexagon_S2_extractup: 
    case Hexagon::MUX_ii: 
    case Hexagon::MUX_ri: O << ')'; break;
    }
    return;
    break;
  case Hexagon::ADDr_MPYrr_V4:
  case Hexagon::Hexagon_C2_mux:
  case Hexagon::Hexagon_C2_muxri:
  case Hexagon::MUX_ir:
  case Hexagon::MUX_rr:
    O << ", "; 
    printOperand(MI, 3, O); 
    switch (MI->getOpcode()) {
    case Hexagon::ADDr_MPYrr_V4: O << "))"; break;
    case Hexagon::Hexagon_C2_mux: 
    case Hexagon::Hexagon_C2_muxri: 
    case Hexagon::MUX_ir: 
    case Hexagon::MUX_rr: O << ')'; break;
    }
    return;
    break;
  case Hexagon::HEXAGON_S2_insert:
  case Hexagon::HEXAGON_S2_insertp:
  case Hexagon::POST_LDrib_cNotPt:
  case Hexagon::POST_LDrib_cPt:
  case Hexagon::POST_LDrib_cdnNotPt_V4:
  case Hexagon::POST_LDrib_cdnPt_V4:
  case Hexagon::POST_LDrid_cNotPt:
  case Hexagon::POST_LDrid_cPt:
  case Hexagon::POST_LDrid_cdnNotPt_V4:
  case Hexagon::POST_LDrid_cdnPt_V4:
  case Hexagon::POST_LDrih_cNotPt:
  case Hexagon::POST_LDrih_cPt:
  case Hexagon::POST_LDrih_cdnNotPt_V4:
  case Hexagon::POST_LDrih_cdnPt_V4:
  case Hexagon::POST_LDriub_cNotPt:
  case Hexagon::POST_LDriub_cPt:
  case Hexagon::POST_LDriub_cdnNotPt_V4:
  case Hexagon::POST_LDriub_cdnPt_V4:
  case Hexagon::POST_LDriuh_cNotPt:
  case Hexagon::POST_LDriuh_cPt:
  case Hexagon::POST_LDriuh_cdnNotPt_V4:
  case Hexagon::POST_LDriuh_cdnPt_V4:
  case Hexagon::POST_LDriw_cNotPt:
  case Hexagon::POST_LDriw_cPt:
  case Hexagon::POST_LDriw_cdnNotPt_V4:
  case Hexagon::POST_LDriw_cdnPt_V4:
    switch (MI->getOpcode()) {
    case Hexagon::HEXAGON_S2_insert: 
    case Hexagon::HEXAGON_S2_insertp: O << ", #"; break;
    case Hexagon::POST_LDrib_cNotPt: 
    case Hexagon::POST_LDrib_cPt: 
    case Hexagon::POST_LDrib_cdnNotPt_V4: 
    case Hexagon::POST_LDrib_cdnPt_V4: 
    case Hexagon::POST_LDrid_cNotPt: 
    case Hexagon::POST_LDrid_cPt: 
    case Hexagon::POST_LDrid_cdnNotPt_V4: 
    case Hexagon::POST_LDrid_cdnPt_V4: 
    case Hexagon::POST_LDrih_cNotPt: 
    case Hexagon::POST_LDrih_cPt: 
    case Hexagon::POST_LDrih_cdnNotPt_V4: 
    case Hexagon::POST_LDrih_cdnPt_V4: 
    case Hexagon::POST_LDriub_cNotPt: 
    case Hexagon::POST_LDriub_cPt: 
    case Hexagon::POST_LDriub_cdnNotPt_V4: 
    case Hexagon::POST_LDriub_cdnPt_V4: 
    case Hexagon::POST_LDriuh_cNotPt: 
    case Hexagon::POST_LDriuh_cPt: 
    case Hexagon::POST_LDriuh_cdnNotPt_V4: 
    case Hexagon::POST_LDriuh_cdnPt_V4: 
    case Hexagon::POST_LDriw_cNotPt: 
    case Hexagon::POST_LDriw_cPt: 
    case Hexagon::POST_LDriw_cdnNotPt_V4: 
    case Hexagon::POST_LDriw_cdnPt_V4: O << "++#"; break;
    }
    printHexagonImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::Hexagon_A2_addsat:
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case Hexagon::LDrib_indexed_cNotPt:
  case Hexagon::LDrib_indexed_cPt:
  case Hexagon::LDrib_indexed_cdnNotPt:
  case Hexagon::LDrib_indexed_cdnPt:
  case Hexagon::LDrib_indexed_shl_V4:
  case Hexagon::LDrid_indexed_shl_V4:
  case Hexagon::LDrih_indexed_cNotPt:
  case Hexagon::LDrih_indexed_cPt:
  case Hexagon::LDrih_indexed_cdnNotPt:
  case Hexagon::LDrih_indexed_cdnPt:
  case Hexagon::LDrih_indexed_shl_V4:
  case Hexagon::LDriub_ae_indexed_shl_V4:
  case Hexagon::LDriub_indexed_cNotPt:
  case Hexagon::LDriub_indexed_cPt:
  case Hexagon::LDriub_indexed_cdnNotPt:
  case Hexagon::LDriub_indexed_cdnPt:
  case Hexagon::LDriub_indexed_shl_V4:
  case Hexagon::LDriuh_ae_indexed_shl_V4:
  case Hexagon::LDriuh_indexed_cNotPt:
  case Hexagon::LDriuh_indexed_cPt:
  case Hexagon::LDriuh_indexed_cdnNotPt:
  case Hexagon::LDriuh_indexed_cdnPt:
  case Hexagon::LDriuh_indexed_shl_V4:
  case Hexagon::LDriw_indexed_shl_V4:
    switch (MI->getOpcode()) {
    case Hexagon::LDrib_indexed_cNotPt: 
    case Hexagon::LDrib_indexed_cPt: 
    case Hexagon::LDrib_indexed_cdnNotPt: 
    case Hexagon::LDrib_indexed_cdnPt: 
    case Hexagon::LDrih_indexed_cNotPt: 
    case Hexagon::LDrih_indexed_cPt: 
    case Hexagon::LDrih_indexed_cdnNotPt: 
    case Hexagon::LDrih_indexed_cdnPt: 
    case Hexagon::LDriub_indexed_cNotPt: 
    case Hexagon::LDriub_indexed_cPt: 
    case Hexagon::LDriub_indexed_cdnNotPt: 
    case Hexagon::LDriub_indexed_cdnPt: 
    case Hexagon::LDriuh_indexed_cNotPt: 
    case Hexagon::LDriuh_indexed_cPt: 
    case Hexagon::LDriuh_indexed_cdnNotPt: 
    case Hexagon::LDriuh_indexed_cdnPt: O << "+#"; break;
    case Hexagon::LDrib_indexed_shl_V4: 
    case Hexagon::LDrid_indexed_shl_V4: 
    case Hexagon::LDrih_indexed_shl_V4: 
    case Hexagon::LDriub_ae_indexed_shl_V4: 
    case Hexagon::LDriub_indexed_shl_V4: 
    case Hexagon::LDriuh_ae_indexed_shl_V4: 
    case Hexagon::LDriuh_indexed_shl_V4: 
    case Hexagon::LDriw_indexed_shl_V4: O << "<<#"; break;
    }
    printHexagonImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::LDrid_indexed_cNotPt_V4:
  case Hexagon::LDrid_indexed_cPt_V4:
  case Hexagon::LDrid_indexed_cdnNotPt_V4:
  case Hexagon::LDrid_indexed_cdnPt_V4:
  case Hexagon::LDriw_indexed_cNotPt_V4:
  case Hexagon::LDriw_indexed_cPt_V4:
  case Hexagon::LDriw_indexed_cdnNotPt_V4:
  case Hexagon::LDriw_indexed_cdnPt_V4:
    printOperand(MI, 3, O); 
    O << "<<#0)"; 
    return;
    break;
  case Hexagon::LDrid_indexed_shl_cNotPt_V4:
  case Hexagon::LDrid_indexed_shl_cPt_V4:
  case Hexagon::LDrid_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDrid_indexed_shl_cdnPt_V4:
  case Hexagon::LDriw_indexed_shl_cNotPt_V4:
  case Hexagon::LDriw_indexed_shl_cPt_V4:
  case Hexagon::LDriw_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDriw_indexed_shl_cdnPt_V4:
    printOperand(MI, 3, O); 
    O << "<<#"; 
    printHexagonImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::MEMb_ADDi_indexed_MEM_V4:
  case Hexagon::MEMb_ADDr_indexed_MEM_V4:
  case Hexagon::MEMb_ANDr_indexed_MEM_V4:
  case Hexagon::MEMb_SUBi_indexed_MEM_V4:
  case Hexagon::MEMb_SUBr_indexed_MEM_V4:
  case Hexagon::MEMh_ADDi_indexed_MEM_V4:
  case Hexagon::MEMh_ADDr_indexed_MEM_V4:
  case Hexagon::MEMh_ANDr_indexed_MEM_V4:
  case Hexagon::MEMh_SUBi_indexed_MEM_V4:
  case Hexagon::MEMh_SUBr_indexed_MEM_V4:
  case Hexagon::MEMw_ADDi_indexed_MEM_V4:
  case Hexagon::MEMw_ADDr_indexed_MEM_V4:
  case Hexagon::MEMw_ANDr_indexed_MEM_V4:
  case Hexagon::MEMw_SUBi_indexed_MEM_V4:
  case Hexagon::MEMw_SUBr_indexed_MEM_V4:
  case Hexagon::STrib_cNotPt:
  case Hexagon::STrib_cPt:
  case Hexagon::STrib_cdnNotPt_V4:
  case Hexagon::STrib_cdnPt_V4:
  case Hexagon::STrid_cNotPt:
  case Hexagon::STrid_cPt:
  case Hexagon::STrid_cdnNotPt_V4:
  case Hexagon::STrid_cdnPt_V4:
  case Hexagon::STrih_cNotPt:
  case Hexagon::STrih_cPt:
  case Hexagon::STrih_cdnNotPt_V4:
  case Hexagon::STrih_cdnPt_V4:
  case Hexagon::STriw_cNotPt:
  case Hexagon::STriw_cPt:
  case Hexagon::STriw_cdnNotPt_V4:
  case Hexagon::STriw_cdnPt_V4:
    return;
    break;
  case Hexagon::STrib_imm_cNotPt_V4:
  case Hexagon::STrib_imm_cPt_V4:
  case Hexagon::STrib_imm_cdnNotPt_V4:
  case Hexagon::STrib_imm_cdnPt_V4:
  case Hexagon::STrih_imm_cNotPt_V4:
  case Hexagon::STrih_imm_cPt_V4:
  case Hexagon::STrih_imm_cdnNotPt_V4:
  case Hexagon::STrih_imm_cdnPt_V4:
  case Hexagon::STriw_imm_cNotPt_V4:
  case Hexagon::STriw_imm_cPt_V4:
  case Hexagon::STriw_imm_cdnNotPt_V4:
  case Hexagon::STriw_imm_cdnPt_V4:
    printHexagonImmOperand(MI, 2, O); 
    O << ") = #"; 
    printHexagonImmOperand(MI, 3, O); 
    return;
    break;
  case Hexagon::STrib_indexed_cNotPt:
  case Hexagon::STrib_indexed_cPt:
  case Hexagon::STrib_indexed_cdnNotPt_V4:
  case Hexagon::STrib_indexed_cdnPt_V4:
  case Hexagon::STrib_indexed_shl_V4:
  case Hexagon::STrid_indexed_cNotPt:
  case Hexagon::STrid_indexed_cPt:
  case Hexagon::STrid_indexed_cdnNotPt_V4:
  case Hexagon::STrid_indexed_cdnPt_V4:
  case Hexagon::STrid_indexed_shl_V4:
  case Hexagon::STrih_indexed_cNotPt:
  case Hexagon::STrih_indexed_cPt:
  case Hexagon::STrih_indexed_cdnNotPt_V4:
  case Hexagon::STrih_indexed_cdnPt_V4:
  case Hexagon::STrih_indexed_shl_V4:
  case Hexagon::STriw_indexed_cNotPt:
  case Hexagon::STriw_indexed_cPt:
  case Hexagon::STriw_indexed_cdnNotPt_V4:
  case Hexagon::STriw_indexed_cdnPt_V4:
  case Hexagon::STriw_indexed_shl_V4:
    printHexagonImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case Hexagon::STrib_indexed_cNotPt_nv_V4:
  case Hexagon::STrib_indexed_cPt_nv_V4:
  case Hexagon::STrib_indexed_cdnNotPt_nv_V4:
  case Hexagon::STrib_indexed_cdnPt_nv_V4:
  case Hexagon::STrib_indexed_shl_nv_V4:
  case Hexagon::STrih_indexed_cNotPt_nv_V4:
  case Hexagon::STrih_indexed_cPt_nv_V4:
  case Hexagon::STrih_indexed_cdnNotPt_nv_V4:
  case Hexagon::STrih_indexed_cdnPt_nv_V4:
  case Hexagon::STrih_indexed_shl_nv_V4:
  case Hexagon::STriw_indexed_cNotPt_nv_V4:
  case Hexagon::STriw_indexed_cPt_nv_V4:
  case Hexagon::STriw_indexed_cdnNotPt_nv_V4:
  case Hexagon::STriw_indexed_cdnPt_nv_V4:
  case Hexagon::STriw_indexed_shl_nv_V4:
    printHexagonImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    O << ".new"; 
    return;
    break;
  case Hexagon::STrib_indexed_shl_cNotPt_V4:
  case Hexagon::STrib_indexed_shl_cPt_V4:
  case Hexagon::STrib_indexed_shl_cdnNotPt_V4:
  case Hexagon::STrib_indexed_shl_cdnPt_V4:
  case Hexagon::STrid_indexed_shl_cNotPt_V4:
  case Hexagon::STrid_indexed_shl_cPt_V4:
  case Hexagon::STrid_indexed_shl_cdnNotPt_V4:
  case Hexagon::STrid_indexed_shl_cdnPt_V4:
  case Hexagon::STrih_indexed_shl_cNotPt_V4:
  case Hexagon::STrih_indexed_shl_cPt_V4:
  case Hexagon::STrih_indexed_shl_cdnNotPt_V4:
  case Hexagon::STrih_indexed_shl_cdnPt_V4:
  case Hexagon::STriw_indexed_shl_cNotPt_V4:
  case Hexagon::STriw_indexed_shl_cPt_V4:
  case Hexagon::STriw_indexed_shl_cdnNotPt_V4:
  case Hexagon::STriw_indexed_shl_cdnPt_V4:
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case Hexagon::STrib_indexed_shl_cNotPt_nv_V4:
  case Hexagon::STrib_indexed_shl_cPt_nv_V4:
  case Hexagon::STrib_indexed_shl_cdnNotPt_nv_V4:
  case Hexagon::STrib_indexed_shl_cdnPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cNotPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cdnNotPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cdnPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cNotPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cdnNotPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cdnPt_nv_V4:
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printHexagonImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 4, O); 
    O << ".new"; 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 59 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 5, 10, 15, 20, 25, 32, 39, 46, 53, 60, 67, 74, 81,
    88, 95, 102, 106, 110, 114, 117, 120, 123, 102, 126, 129, 132, 135,
    138, 141, 144, 147, 150, 153, 156, 160, 164, 168, 172, 176, 180, 184,
    188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 102,
    240, 244, 0
  };

  const char *AsmStrs =
    "r1:0\000r3:2\000r5:4\000r7:6\000r9:8\000r11:10\000r13:12\000r15:14\000r"
    "17:16\000r19:18\000r21:20\000r23:22\000r25:24\000r27:26\000r29:28\000r3"
    "1:30\000r31\000lc0\000lc1\000p0\000p1\000p2\000p3\000r0\000r1\000r2\000"
    "r3\000r4\000r5\000r6\000r7\000r8\000r9\000r10\000r11\000r12\000r13\000r"
    "14\000r15\000r16\000r17\000r18\000r19\000r20\000r21\000r22\000r23\000r2"
    "4\000r25\000r26\000r27\000r28\000r29\000r30\000sa0\000sa1\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *HexagonAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 1324 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 158, 167, 174, 181, 195, 206, 222, 235, 242, 256, 267, 283, 296, 
    310, 324, 338, 352, 366, 380, 394, 408, 422, 436, 446, 456, 473, 488, 
    500, 511, 518, 528, 535, 542, 549, 558, 572, 583, 599, 612, 625, 639, 
    653, 671, 685, 698, 712, 719, 729, 733, 738, 753, 765, 782, 796, 803, 
    818, 823, 838, 850, 867, 881, 888, 895, 906, 914, 922, 937, 945, 952, 
    958, 963, 969, 977, 984, 999, 1007, 1015, 1024, 1032, 1042, 1053, 1062, 1071, 
    1079, 1087, 1095, 1107, 1124, 1141, 1154, 1167, 1179, 1191, 1203, 1219, 1235, 1248, 
    1261, 1273, 1289, 1300, 1318, 1333, 1353, 1370, 1378, 1392, 1409, 1423, 1435, 1450, 
    1467, 1480, 1495, 1517, 1542, 1566, 1585, 1607, 1628, 1637, 1658, 1679, 1699, 1719, 
    1743, 1763, 1787, 1806, 1826, 1845, 1864, 1884, 1902, 1921, 1939, 1958, 1975, 1993, 
    2012, 2032, 2050, 2066, 2090, 2108, 2129, 2148, 2170, 2192, 2208, 2240, 2272, 2304, 
    2336, 2357, 2378, 2397, 2417, 2435, 2450, 2466, 2484, 2499, 2522, 2545, 2568, 2591, 
    2618, 2645, 2672, 2699, 2722, 2745, 2772, 2799, 2815, 2831, 2850, 2868, 2885, 2900, 
    2917, 2933, 2949, 2965, 2987, 3009, 3031, 3053, 3074, 3094, 3109, 3125, 3141, 3158, 
    3173, 3189, 3204, 3220, 3238, 3253, 3269, 3283, 3299, 3314, 3329, 3345, 3361, 3378, 
    3395, 3410, 3433, 3456, 3479, 3502, 3529, 3556, 3583, 3610, 3633, 3656, 3683, 3710, 
    3726, 3743, 3761, 3779, 3798, 3818, 3836, 3855, 3874, 3892, 3911, 3931, 3947, 3963, 
    3979, 3995, 4010, 4027, 4044, 4060, 4077, 4094, 4111, 4131, 4148, 4168, 4185, 4203, 
    4221, 4240, 4259, 4276, 4294, 4311, 4330, 4348, 4366, 4385, 4403, 4422, 4440, 4459, 
    4476, 4495, 4513, 4532, 4552, 4571, 4590, 4610, 4629, 4648, 4668, 4685, 4702, 4720, 
    4738, 4756, 4773, 4790, 4808, 4826, 4844, 4861, 4879, 4899, 4918, 4936, 4956, 4975, 
    4994, 5017, 5036, 5059, 5076, 5094, 5112, 5131, 5150, 5167, 5185, 5200, 5216, 5232, 
    5248, 5264, 5285, 5306, 5321, 5339, 5358, 5377, 5397, 5413, 5428, 5444, 5460, 5477, 
    5495, 5513, 5531, 5550, 5567, 5585, 5603, 5621, 5640, 5659, 5676, 5694, 5710, 5725, 
    5742, 5759, 5776, 5791, 5805, 5820, 5841, 5858, 5875, 5894, 5910, 5925, 5944, 5964, 
    5982, 6001, 6019, 6038, 6057, 6077, 6095, 6114, 6137, 6164, 6182, 6201, 6218, 6236, 
    6252, 6269, 6289, 6309, 6329, 6349, 6370, 6391, 6411, 6431, 6452, 6473, 6495, 6517, 
    6537, 6557, 6578, 6599, 6619, 6639, 6660, 6681, 6707, 6733, 6759, 6781, 6807, 6833, 
    6855, 6877, 6899, 6915, 6933, 6951, 6973, 6995, 7016, 7037, 7059, 7081, 7102, 7123, 
    7146, 7169, 7191, 7213, 7236, 7259, 7281, 7303, 7324, 7345, 7365, 7385, 7406, 7427, 
    7447, 7467, 7489, 7511, 7532, 7553, 7575, 7597, 7618, 7639, 7664, 7689, 7714, 7739, 
    7764, 7789, 7814, 7839, 7868, 7897, 7926, 7955, 7984, 8013, 8042, 8071, 8092, 8113, 
    8134, 8155, 8176, 8197, 8218, 8239, 8264, 8289, 8314, 8339, 8364, 8389, 8414, 8439, 
    8468, 8497, 8526, 8555, 8584, 8613, 8642, 8671, 8696, 8721, 8746, 8771, 8796, 8821, 
    8846, 8871, 8896, 8921, 8946, 8971, 8996, 9021, 9046, 9071, 9100, 9129, 9158, 9187, 
    9216, 9245, 9274, 9303, 9321, 9347, 9373, 9399, 9425, 9451, 9477, 9503, 9529, 9551, 
    9573, 9595, 9617, 9639, 9661, 9683, 9705, 9731, 9757, 9783, 9809, 9835, 9861, 9887, 
    9913, 9939, 9965, 9991, 10017, 10043, 10069, 10095, 10121, 10137, 10163, 10189, 10215, 10241, 
    10267, 10293, 10319, 10345, 10367, 10389, 10411, 10433, 10455, 10477, 10499, 10521, 10547, 10573, 
    10599, 10625, 10651, 10677, 10703, 10729, 10748, 10775, 10802, 10829, 10856, 10883, 10910, 10937, 
    10964, 10987, 11010, 11033, 11056, 11079, 11102, 11125, 11148, 11175, 11202, 11229, 11256, 11283, 
    11310, 11337, 11364, 11381, 11398, 11416, 11434, 11455, 11476, 11502, 11528, 11554, 11580, 11606, 
    11632, 11653, 11674, 11696, 11718, 11739, 11760, 11777, 11796, 11818, 11840, 11861, 11882, 11904, 
    11926, 11947, 11972, 11993, 12018, 12037, 12059, 12082, 12104, 12127, 12149, 12172, 12194, 12217, 
    12243, 12265, 12289, 12309, 12329, 12349, 12369, 12392, 12411, 12434, 12457, 12480, 12502, 12526, 
    12545, 12568, 12591, 12614, 12636, 12659, 12683, 12703, 12723, 12742, 12765, 12788, 12811, 12833, 
    12852, 12875, 12898, 12921, 12943, 12966, 12986, 13006, 13025, 13048, 13071, 13094, 13116, 13135, 
    13158, 13181, 13204, 13226, 13249, 13283, 13309, 13329, 13349, 13368, 13391, 13414, 13437, 13459, 
    13478, 13501, 13524, 13547, 13569, 13592, 13618, 13638, 13658, 13673, 13689, 13704, 13720, 13735, 
    13754, 13770, 13790, 13810, 13825, 13840, 13860, 13883, 13904, 13928, 13947, 13970, 13993, 14016, 
    14038, 14057, 14080, 14103, 14126, 14148, 14168, 14188, 14207, 14230, 14253, 14276, 14298, 14322, 
    14341, 14364, 14387, 14410, 14432, 14456, 14476, 14496, 14515, 14538, 14561, 14584, 14606, 14625, 
    14648, 14671, 14694, 14716, 14736, 14756, 14774, 14793, 14813, 14833, 14852, 14871, 14890, 14909, 
    14928, 14948, 14971, 14994, 15014, 15034, 15054, 15074, 15094, 15116, 15139, 15157, 15182, 15201, 
    15227, 15245, 15270, 15289, 15315, 15335, 15355, 15373, 15391, 15411, 15431, 15451, 15471, 15489, 
    15507, 15526, 15543, 15559, 15578, 15582, 15587, 15603, 15618, 15630, 15643, 15655, 15664, 15673, 
    15685, 15700, 15714, 15726, 15737, 15744, 15751, 15758, 15764, 15773, 15782, 15799, 15812, 15822, 
    15837, 15849, 15863, 15880, 15901, 15925, 15943, 15964, 15987, 16013, 16033, 16056, 16077, 16105, 
    16130, 16160, 16187, 16193, 16202, 16215, 16225, 16240, 16252, 16266, 16283, 16304, 16328, 16346, 
    16367, 16390, 16416, 16436, 16459, 16480, 16508, 16533, 16563, 16590, 16596, 16605, 16614, 16631, 
    16644, 16654, 16669, 16681, 16695, 16712, 16733, 16757, 16775, 16796, 16819, 16845, 16865, 16888, 
    16909, 16937, 16962, 16992, 17019, 17026, 17036, 17046, 17064, 17085, 17110, 17124, 17135, 17151, 
    17164, 17179, 17197, 17219, 17244, 17263, 17285, 17309, 17336, 17357, 17381, 17403, 17432, 17458, 
    17489, 17517, 17526, 17543, 17550, 17560, 17570, 17588, 17609, 17634, 17648, 17659, 17675, 17688, 
    17703, 17721, 17743, 17768, 17787, 17809, 17833, 17860, 17881, 17905, 17927, 17956, 17982, 18013, 
    18041, 18047, 18056, 18069, 18079, 18094, 18106, 18120, 18137, 18158, 18182, 18200, 18221, 18244, 
    18270, 18290, 18313, 18334, 18362, 18387, 18417, 18444, 18455, 18463, 18471, 18478, 18486, 18494, 
    18499, 18514, 18522, 18529, 18536, 18544, 18556, 18564, 18579, 18586, 18594, 18602, 18622, 18650, 
    18667, 18692, 18709, 18734, 18751, 18776, 18792, 18816, 18833, 18858, 18875, 18900, 18920, 18948, 
    18965, 18990, 19007, 19032, 19049, 19074, 19090, 19114, 19131, 19156, 19173, 19198, 19218, 19246, 
    19263, 19288, 19305, 19330, 19347, 19372, 19388, 19412, 19429, 19454, 19471, 19496, 19504, 19512, 
    19516, 19522, 19532, 19542, 19547, 19559, 19571, 19579, 19588, 19597, 19609, 19614, 19621, 19632, 
    19643, 19654, 19661, 19668, 19675, 19682, 19686, 19690, 19697, 19704, 19711, 19720, 19726, 19732, 
    19738, 19746, 19759, 19769, 19784, 19796, 19808, 19821, 19834, 19851, 19865, 19878, 19891, 19903, 
    19915, 19928, 19939, 19957, 19972, 19995, 20015, 20026, 20044, 20059, 20082, 20102, 20113, 20131, 
    20146, 20169, 20189, 20201, 20220, 20236, 20260, 20281, 20293, 20312, 20328, 20352, 20373, 20384, 
    20402, 20417, 20440, 20460, 20471, 20489, 20513, 20528, 20549, 20572, 20598, 20618, 20641, 20658, 
    20669, 20687, 20702, 20725, 20745, 20756, 20774, 20798, 20813, 20834, 20857, 20883, 20903, 20926, 
    20943, 20954, 20972, 20996, 21011, 21032, 21055, 21081, 21101, 21124, 21141, 21158, 21165, 21172, 
    21178, 21187, 21202, 21215, 21234, 21244, 21260, 21278, 21299, 21314, 21332, 21345, 21365, 21382, 
    21404, 21423, 21437, 21458, 21485, 21503, 21527, 21553, 21582, 21605, 21631, 21651, 21672, 21700, 
    21731, 21756, 21784, 21814, 21847, 21874, 21904, 21928, 21940, 21953, 21969, 21975, 21984, 21997, 
    22007, 22025, 22040, 22054, 22075, 22093, 22119, 22142, 22163, 22191, 22216, 22246, 22273, 22286, 
    22292, 22301, 22316, 22329, 22348, 22358, 22374, 22392, 22413, 22428, 22446, 22459, 22479, 22496, 
    22518, 22537, 22551, 22572, 22599, 22617, 22641, 22667, 22696, 22719, 22745, 22765, 22786, 22814, 
    22845, 22870, 22898, 22928, 22961, 22988, 23018, 23042, 23054, 23067, 23083, 23089, 23098, 23113, 
    23126, 23145, 23155, 23171, 23189, 23210, 23225, 23243, 23256, 23276, 23293, 23315, 23334, 23348, 
    23369, 23396, 23414, 23438, 23464, 23493, 23516, 23542, 23562, 23583, 23611, 23642, 23667, 23695, 
    23725, 23758, 23785, 23815, 23839, 23851, 23862, 23875, 23891, 23898, 23907, 23914, 23928, 23939, 
    23955, 23968, 23982, 23996, 24006, 24016, 24021, 24036, 24048, 24065, 24079, 24084, 24099, 24111, 
    24128, 24142, 24147, 24157, 24170, 24181, 24186, 24190, 24195, 24202, 24214, 24223, 24237, 24248, 
    24255, 24262, 24274, 24283, 24292, 24303, 24311, 24324, 24334, 24349, 24364, 24375, 24386, 24397, 
    24409, 24416, 24423, 24432, 24446, 24457, 24473, 24486, 24497, 24515, 24529, 24542, 24556, 24561, 
    24576, 24588, 24605, 24619, 24624, 24639, 24651, 24668, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000BUNDLE\000ADD64_rr\000"
    "ADDASL\000ADD_ri\000ADD_ri_cNotPt\000ADD_ri_cPt\000ADD_ri_cdnNotPt\000A"
    "DD_ri_cdnPt\000ADD_rr\000ADD_rr_cNotPt\000ADD_rr_cPt\000ADD_rr_cdnNotPt"
    "\000ADD_rr_cdnPt\000ADDi_ASLri_V4\000ADDi_LSRri_V4\000ADDi_MPYri_V4\000"
    "ADDi_MPYrr_V4\000ADDr_ADDri_V4\000ADDr_MPYir_V4\000ADDr_MPYri_V4\000ADD"
    "r_MPYrr_V4\000ADDr_SUBri_V4\000ADDri_SUBr_V4\000ADDri_acc\000ADDrr_acc\000"
    "ADJCALLSTACKDOWN\000ADJCALLSTACKUP\000ADJDYNALLOC\000ALLOCFRAME\000ALL_"
    "pp\000AND_pnotp\000AND_pp\000AND_ri\000AND_rr\000AND_rr64\000AND_rr_cNo"
    "tPt\000AND_rr_cPt\000AND_rr_cdnNotPt\000AND_rr_cdnPt\000ANDd_NOTd_V4\000"
    "ANDi_ASLri_V4\000ANDi_LSRri_V4\000ANDr_ANDr_NOTr_V4\000ANDr_ANDrr_V4\000"
    "ANDr_ORrr_V4\000ANDr_XORrr_V4\000ANY_pp\000ARGEXTEND\000ASL\000ASLH\000"
    "ASLH_cNotPt_V4\000ASLH_cPt_V4\000ASLH_cdnNotPt_V4\000ASLH_cdnPt_V4\000A"
    "SL_rr\000ASLd_rr_xor_V4\000ASRH\000ASRH_cNotPt_V4\000ASRH_cPt_V4\000ASR"
    "H_cdnNotPt_V4\000ASRH_cdnPt_V4\000ASR_ri\000ASR_rr\000ASR_rr_acc\000ASR"
    "d_ri\000ASRd_rr\000ASRd_rr_xor_V4\000BARRIER\000BRCOND\000BR_JT\000CALL"
    "\000CALLR\000CALLRv3\000CALLv3\000CMPEHexagon4rr\000CMPEQri\000CMPEQrr\000"
    "CMPGEUri\000CMPGEri\000CMPGT64rr\000CMPGTU64rr\000CMPGTUri\000CMPGTUrr\000"
    "CMPGTri\000CMPGTrr\000CMPLTrr\000CMPbEQri_V4\000CMPbEQrr_sbsb_V4\000CMP"
    "bEQrr_ubub_V4\000CMPbGTUri_V4\000CMPbGTUrr_V4\000CMPbGTri_V4\000CMPbGTr"
    "r_V4\000CMPhEQri_V4\000CMPhEQrr_shl_V4\000CMPhEQrr_xor_V4\000CMPhGTUri_"
    "V4\000CMPhGTUrr_V4\000CMPhGTri_V4\000CMPhGTrr_shl_V4\000COMBINE_rr\000C"
    "OMBINE_rr_cNotPt\000COMBINE_rr_cPt\000COMBINE_rr_cdnNotPt\000COMBINE_rr"
    "_cdnPt\000CONST32\000CONST32GP_set\000CONST32_Int_Real\000CONST32_Label"
    "\000CONST32_set\000CONST32_set_jt\000CONST64_Int_Real\000DEALLOCFRAME\000"
    "DEALLOC_RET_V4\000DEALLOC_RET_cNotPt_V4\000DEALLOC_RET_cNotdnPnt_V4\000"
    "DEALLOC_RET_cNotdnPt_V4\000DEALLOC_RET_cPt_V4\000DEALLOC_RET_cdnPnt_V4\000"
    "DEALLOC_RET_cdnPt_V4\000ENDLOOP0\000HEXAGON_A4_cround_ri\000HEXAGON_A4_"
    "cround_rr\000HEXAGON_A4_modwrapu\000HEXAGON_A4_round_ri\000HEXAGON_A4_r"
    "ound_ri_sat\000HEXAGON_A4_round_rr\000HEXAGON_A4_round_rr_sat\000HEXAGO"
    "N_C2_bitsclr\000HEXAGON_C2_bitsclri\000HEXAGON_C2_bitsset\000HEXAGON_M4"
    "_and_and\000HEXAGON_M4_and_andn\000HEXAGON_M4_and_or\000HEXAGON_M4_and_"
    "xor\000HEXAGON_M4_or_and\000HEXAGON_M4_or_andn\000HEXAGON_M4_or_or\000H"
    "EXAGON_M4_or_xor\000HEXAGON_M4_xor_and\000HEXAGON_M4_xor_andn\000HEXAGO"
    "N_M4_xor_or\000HEXAGON_S2_brev\000HEXAGON_S2_deinterleave\000HEXAGON_S2"
    "_insert\000HEXAGON_S2_insert_rp\000HEXAGON_S2_insertp\000HEXAGON_S2_ins"
    "ertp_rp\000HEXAGON_S2_interleave\000HEXAGON_S2_lfsp\000HEXAGON_S2_table"
    "idxb_goodsyntax\000HEXAGON_S2_tableidxd_goodsyntax\000HEXAGON_S2_tablei"
    "dxh_goodsyntax\000HEXAGON_S2_tableidxw_goodsyntax\000HEXAGON_S2_vsplice"
    "ib\000HEXAGON_S2_vsplicerb\000HEXAGON_S4_or_andi\000HEXAGON_S4_or_andix"
    "\000HEXAGON_S4_or_ori\000Hexagon_A2_abs\000Hexagon_A2_absp\000Hexagon_A"
    "2_abssat\000Hexagon_A2_add\000Hexagon_A2_addh_h16_hh\000Hexagon_A2_addh"
    "_h16_hl\000Hexagon_A2_addh_h16_lh\000Hexagon_A2_addh_h16_ll\000Hexagon_"
    "A2_addh_h16_sat_hh\000Hexagon_A2_addh_h16_sat_hl\000Hexagon_A2_addh_h16"
    "_sat_lh\000Hexagon_A2_addh_h16_sat_ll\000Hexagon_A2_addh_l16_hl\000Hexa"
    "gon_A2_addh_l16_ll\000Hexagon_A2_addh_l16_sat_hl\000Hexagon_A2_addh_l16"
    "_sat_ll\000Hexagon_A2_addi\000Hexagon_A2_addp\000Hexagon_A2_addpsat\000"
    "Hexagon_A2_addsat\000Hexagon_A2_addsp\000Hexagon_A2_and\000Hexagon_A2_a"
    "ndir\000Hexagon_A2_andp\000Hexagon_A2_aslh\000Hexagon_A2_asrh\000Hexago"
    "n_A2_combine_hh\000Hexagon_A2_combine_hl\000Hexagon_A2_combine_lh\000He"
    "xagon_A2_combine_ll\000Hexagon_A2_combineii\000Hexagon_A2_combinew\000H"
    "exagon_A2_max\000Hexagon_A2_maxp\000Hexagon_A2_maxu\000Hexagon_A2_maxup"
    "\000Hexagon_A2_min\000Hexagon_A2_minu\000Hexagon_A2_neg\000Hexagon_A2_n"
    "egp\000Hexagon_A2_negsat\000Hexagon_A2_not\000Hexagon_A2_notp\000Hexago"
    "n_A2_or\000Hexagon_A2_orir\000Hexagon_A2_orp\000Hexagon_A2_sat\000Hexag"
    "on_A2_satb\000Hexagon_A2_sath\000Hexagon_A2_satub\000Hexagon_A2_satuh\000"
    "Hexagon_A2_sub\000Hexagon_A2_subh_h16_hh\000Hexagon_A2_subh_h16_hl\000H"
    "exagon_A2_subh_h16_lh\000Hexagon_A2_subh_h16_ll\000Hexagon_A2_subh_h16_"
    "sat_hh\000Hexagon_A2_subh_h16_sat_hl\000Hexagon_A2_subh_h16_sat_lh\000H"
    "exagon_A2_subh_h16_sat_ll\000Hexagon_A2_subh_l16_hl\000Hexagon_A2_subh_"
    "l16_ll\000Hexagon_A2_subh_l16_sat_hl\000Hexagon_A2_subh_l16_sat_ll\000H"
    "exagon_A2_subp\000Hexagon_A2_subri\000Hexagon_A2_subsat\000Hexagon_A2_s"
    "vaddh\000Hexagon_A2_svaddhs\000Hexagon_A2_svadduhs\000Hexagon_A2_svavgh"
    "\000Hexagon_A2_svavghs\000Hexagon_A2_svnavgh\000Hexagon_A2_svsubh\000He"
    "xagon_A2_svsubhs\000Hexagon_A2_svsubuhs\000Hexagon_A2_swiz\000Hexagon_A"
    "2_sxtb\000Hexagon_A2_sxth\000Hexagon_A2_sxtw\000Hexagon_A2_tfr\000Hexag"
    "on_A2_tfrih\000Hexagon_A2_tfril\000Hexagon_A2_tfrp\000Hexagon_A2_tfrpi\000"
    "Hexagon_A2_tfrsi\000Hexagon_A2_vabsh\000Hexagon_A2_vabshsat\000Hexagon_"
    "A2_vabsw\000Hexagon_A2_vabswsat\000Hexagon_A2_vaddh\000Hexagon_A2_vaddh"
    "s\000Hexagon_A2_vaddub\000Hexagon_A2_vaddubs\000Hexagon_A2_vadduhs\000H"
    "exagon_A2_vaddw\000Hexagon_A2_vaddws\000Hexagon_A2_vavgh\000Hexagon_A2_"
    "vavghcr\000Hexagon_A2_vavghr\000Hexagon_A2_vavgub\000Hexagon_A2_vavgubr"
    "\000Hexagon_A2_vavguh\000Hexagon_A2_vavguhr\000Hexagon_A2_vavguw\000Hex"
    "agon_A2_vavguwr\000Hexagon_A2_vavgw\000Hexagon_A2_vavgwcr\000Hexagon_A2"
    "_vavgwr\000Hexagon_A2_vcmpbeq\000Hexagon_A2_vcmpbgtu\000Hexagon_A2_vcmp"
    "heq\000Hexagon_A2_vcmphgt\000Hexagon_A2_vcmphgtu\000Hexagon_A2_vcmpweq\000"
    "Hexagon_A2_vcmpwgt\000Hexagon_A2_vcmpwgtu\000Hexagon_A2_vconj\000Hexago"
    "n_A2_vmaxh\000Hexagon_A2_vmaxub\000Hexagon_A2_vmaxuh\000Hexagon_A2_vmax"
    "uw\000Hexagon_A2_vmaxw\000Hexagon_A2_vminh\000Hexagon_A2_vminub\000Hexa"
    "gon_A2_vminuh\000Hexagon_A2_vminuw\000Hexagon_A2_vminw\000Hexagon_A2_vn"
    "avgh\000Hexagon_A2_vnavghcr\000Hexagon_A2_vnavghr\000Hexagon_A2_vnavgw\000"
    "Hexagon_A2_vnavgwcr\000Hexagon_A2_vnavgwr\000Hexagon_A2_vraddub\000Hexa"
    "gon_A2_vraddub_acc\000Hexagon_A2_vrsadub\000Hexagon_A2_vrsadub_acc\000H"
    "exagon_A2_vsubh\000Hexagon_A2_vsubhs\000Hexagon_A2_vsubub\000Hexagon_A2"
    "_vsububs\000Hexagon_A2_vsubuhs\000Hexagon_A2_vsubw\000Hexagon_A2_vsubws"
    "\000Hexagon_A2_xor\000Hexagon_A2_xorp\000Hexagon_A2_zxtb\000Hexagon_A2_"
    "zxth\000Hexagon_A4_andn\000Hexagon_A4_combineir\000Hexagon_A4_combineri"
    "\000Hexagon_A4_orn\000Hexagon_A4_rcmpeq\000Hexagon_A4_rcmpeqi\000Hexago"
    "n_A4_rcmpneq\000Hexagon_A4_rcmpneqi\000Hexagon_C2_all8\000Hexagon_C2_an"
    "d\000Hexagon_C2_andn\000Hexagon_C2_any8\000Hexagon_C2_cmpeq\000Hexagon_"
    "C2_cmpeqi\000Hexagon_C2_cmpeqp\000Hexagon_C2_cmpgei\000Hexagon_C2_cmpge"
    "ui\000Hexagon_C2_cmpgt\000Hexagon_C2_cmpgti\000Hexagon_C2_cmpgtp\000Hex"
    "agon_C2_cmpgtu\000Hexagon_C2_cmpgtui\000Hexagon_C2_cmpgtup\000Hexagon_C"
    "2_cmplt\000Hexagon_C2_cmpltu\000Hexagon_C2_mask\000Hexagon_C2_mux\000He"
    "xagon_C2_muxii\000Hexagon_C2_muxir\000Hexagon_C2_muxri\000Hexagon_C2_no"
    "t\000Hexagon_C2_or\000Hexagon_C2_orn\000Hexagon_C2_pxfer_map\000Hexagon"
    "_C2_tfrpr\000Hexagon_C2_tfrrp\000Hexagon_C2_vitpack\000Hexagon_C2_vmux\000"
    "Hexagon_C2_xor\000Hexagon_C4_and_and\000Hexagon_C4_and_andn\000Hexagon_"
    "C4_and_or\000Hexagon_C4_and_orn\000Hexagon_C4_cmplte\000Hexagon_C4_cmpl"
    "tei\000Hexagon_C4_cmplteu\000Hexagon_C4_cmplteui\000Hexagon_C4_cmpneq\000"
    "Hexagon_C4_cmpneqi\000Hexagon_C4_fastcorner9\000Hexagon_C4_fastcorner9_"
    "not\000Hexagon_C4_or_and\000Hexagon_C4_or_andn\000Hexagon_C4_or_or\000H"
    "exagon_C4_or_orn\000Hexagon_M2_acci\000Hexagon_M2_accii\000Hexagon_M2_c"
    "maci_s0\000Hexagon_M2_cmacr_s0\000Hexagon_M2_cmacs_s0\000Hexagon_M2_cma"
    "cs_s1\000Hexagon_M2_cmacsc_s0\000Hexagon_M2_cmacsc_s1\000Hexagon_M2_cmp"
    "yi_s0\000Hexagon_M2_cmpyr_s0\000Hexagon_M2_cmpyrs_s0\000Hexagon_M2_cmpy"
    "rs_s1\000Hexagon_M2_cmpyrsc_s0\000Hexagon_M2_cmpyrsc_s1\000Hexagon_M2_c"
    "mpys_s0\000Hexagon_M2_cmpys_s1\000Hexagon_M2_cmpysc_s0\000Hexagon_M2_cm"
    "pysc_s1\000Hexagon_M2_cnacs_s0\000Hexagon_M2_cnacs_s1\000Hexagon_M2_cna"
    "csc_s0\000Hexagon_M2_cnacsc_s1\000Hexagon_M2_dpmpyss_acc_s0\000Hexagon_"
    "M2_dpmpyss_nac_s0\000Hexagon_M2_dpmpyss_rnd_s0\000Hexagon_M2_dpmpyss_s0"
    "\000Hexagon_M2_dpmpyuu_acc_s0\000Hexagon_M2_dpmpyuu_nac_s0\000Hexagon_M"
    "2_dpmpyuu_s0\000Hexagon_M2_hmmpyh_rs1\000Hexagon_M2_hmmpyl_rs1\000Hexag"
    "on_M2_maci\000Hexagon_M2_macsin\000Hexagon_M2_macsip\000Hexagon_M2_mmac"
    "hs_rs0\000Hexagon_M2_mmachs_rs1\000Hexagon_M2_mmachs_s0\000Hexagon_M2_m"
    "machs_s1\000Hexagon_M2_mmacls_rs0\000Hexagon_M2_mmacls_rs1\000Hexagon_M"
    "2_mmacls_s0\000Hexagon_M2_mmacls_s1\000Hexagon_M2_mmacuhs_rs0\000Hexago"
    "n_M2_mmacuhs_rs1\000Hexagon_M2_mmacuhs_s0\000Hexagon_M2_mmacuhs_s1\000H"
    "exagon_M2_mmaculs_rs0\000Hexagon_M2_mmaculs_rs1\000Hexagon_M2_mmaculs_s"
    "0\000Hexagon_M2_mmaculs_s1\000Hexagon_M2_mmpyh_rs0\000Hexagon_M2_mmpyh_"
    "rs1\000Hexagon_M2_mmpyh_s0\000Hexagon_M2_mmpyh_s1\000Hexagon_M2_mmpyl_r"
    "s0\000Hexagon_M2_mmpyl_rs1\000Hexagon_M2_mmpyl_s0\000Hexagon_M2_mmpyl_s"
    "1\000Hexagon_M2_mmpyuh_rs0\000Hexagon_M2_mmpyuh_rs1\000Hexagon_M2_mmpyu"
    "h_s0\000Hexagon_M2_mmpyuh_s1\000Hexagon_M2_mmpyul_rs0\000Hexagon_M2_mmp"
    "yul_rs1\000Hexagon_M2_mmpyul_s0\000Hexagon_M2_mmpyul_s1\000Hexagon_M2_m"
    "py_acc_hh_s0\000Hexagon_M2_mpy_acc_hh_s1\000Hexagon_M2_mpy_acc_hl_s0\000"
    "Hexagon_M2_mpy_acc_hl_s1\000Hexagon_M2_mpy_acc_lh_s0\000Hexagon_M2_mpy_"
    "acc_lh_s1\000Hexagon_M2_mpy_acc_ll_s0\000Hexagon_M2_mpy_acc_ll_s1\000He"
    "xagon_M2_mpy_acc_sat_hh_s0\000Hexagon_M2_mpy_acc_sat_hh_s1\000Hexagon_M"
    "2_mpy_acc_sat_hl_s0\000Hexagon_M2_mpy_acc_sat_hl_s1\000Hexagon_M2_mpy_a"
    "cc_sat_lh_s0\000Hexagon_M2_mpy_acc_sat_lh_s1\000Hexagon_M2_mpy_acc_sat_"
    "ll_s0\000Hexagon_M2_mpy_acc_sat_ll_s1\000Hexagon_M2_mpy_hh_s0\000Hexago"
    "n_M2_mpy_hh_s1\000Hexagon_M2_mpy_hl_s0\000Hexagon_M2_mpy_hl_s1\000Hexag"
    "on_M2_mpy_lh_s0\000Hexagon_M2_mpy_lh_s1\000Hexagon_M2_mpy_ll_s0\000Hexa"
    "gon_M2_mpy_ll_s1\000Hexagon_M2_mpy_nac_hh_s0\000Hexagon_M2_mpy_nac_hh_s"
    "1\000Hexagon_M2_mpy_nac_hl_s0\000Hexagon_M2_mpy_nac_hl_s1\000Hexagon_M2"
    "_mpy_nac_lh_s0\000Hexagon_M2_mpy_nac_lh_s1\000Hexagon_M2_mpy_nac_ll_s0\000"
    "Hexagon_M2_mpy_nac_ll_s1\000Hexagon_M2_mpy_nac_sat_hh_s0\000Hexagon_M2_"
    "mpy_nac_sat_hh_s1\000Hexagon_M2_mpy_nac_sat_hl_s0\000Hexagon_M2_mpy_nac"
    "_sat_hl_s1\000Hexagon_M2_mpy_nac_sat_lh_s0\000Hexagon_M2_mpy_nac_sat_lh"
    "_s1\000Hexagon_M2_mpy_nac_sat_ll_s0\000Hexagon_M2_mpy_nac_sat_ll_s1\000"
    "Hexagon_M2_mpy_rnd_hh_s0\000Hexagon_M2_mpy_rnd_hh_s1\000Hexagon_M2_mpy_"
    "rnd_hl_s0\000Hexagon_M2_mpy_rnd_hl_s1\000Hexagon_M2_mpy_rnd_lh_s0\000He"
    "xagon_M2_mpy_rnd_lh_s1\000Hexagon_M2_mpy_rnd_ll_s0\000Hexagon_M2_mpy_rn"
    "d_ll_s1\000Hexagon_M2_mpy_sat_hh_s0\000Hexagon_M2_mpy_sat_hh_s1\000Hexa"
    "gon_M2_mpy_sat_hl_s0\000Hexagon_M2_mpy_sat_hl_s1\000Hexagon_M2_mpy_sat_"
    "lh_s0\000Hexagon_M2_mpy_sat_lh_s1\000Hexagon_M2_mpy_sat_ll_s0\000Hexago"
    "n_M2_mpy_sat_ll_s1\000Hexagon_M2_mpy_sat_rnd_hh_s0\000Hexagon_M2_mpy_sa"
    "t_rnd_hh_s1\000Hexagon_M2_mpy_sat_rnd_hl_s0\000Hexagon_M2_mpy_sat_rnd_h"
    "l_s1\000Hexagon_M2_mpy_sat_rnd_lh_s0\000Hexagon_M2_mpy_sat_rnd_lh_s1\000"
    "Hexagon_M2_mpy_sat_rnd_ll_s0\000Hexagon_M2_mpy_sat_rnd_ll_s1\000Hexagon"
    "_M2_mpy_up\000Hexagon_M2_mpyd_acc_hh_s0\000Hexagon_M2_mpyd_acc_hh_s1\000"
    "Hexagon_M2_mpyd_acc_hl_s0\000Hexagon_M2_mpyd_acc_hl_s1\000Hexagon_M2_mp"
    "yd_acc_lh_s0\000Hexagon_M2_mpyd_acc_lh_s1\000Hexagon_M2_mpyd_acc_ll_s0\000"
    "Hexagon_M2_mpyd_acc_ll_s1\000Hexagon_M2_mpyd_hh_s0\000Hexagon_M2_mpyd_h"
    "h_s1\000Hexagon_M2_mpyd_hl_s0\000Hexagon_M2_mpyd_hl_s1\000Hexagon_M2_mp"
    "yd_lh_s0\000Hexagon_M2_mpyd_lh_s1\000Hexagon_M2_mpyd_ll_s0\000Hexagon_M"
    "2_mpyd_ll_s1\000Hexagon_M2_mpyd_nac_hh_s0\000Hexagon_M2_mpyd_nac_hh_s1\000"
    "Hexagon_M2_mpyd_nac_hl_s0\000Hexagon_M2_mpyd_nac_hl_s1\000Hexagon_M2_mp"
    "yd_nac_lh_s0\000Hexagon_M2_mpyd_nac_lh_s1\000Hexagon_M2_mpyd_nac_ll_s0\000"
    "Hexagon_M2_mpyd_nac_ll_s1\000Hexagon_M2_mpyd_rnd_hh_s0\000Hexagon_M2_mp"
    "yd_rnd_hh_s1\000Hexagon_M2_mpyd_rnd_hl_s0\000Hexagon_M2_mpyd_rnd_hl_s1\000"
    "Hexagon_M2_mpyd_rnd_lh_s0\000Hexagon_M2_mpyd_rnd_lh_s1\000Hexagon_M2_mp"
    "yd_rnd_ll_s0\000Hexagon_M2_mpyd_rnd_ll_s1\000Hexagon_M2_mpyi\000Hexagon"
    "_M2_mpyu_acc_hh_s0\000Hexagon_M2_mpyu_acc_hh_s1\000Hexagon_M2_mpyu_acc_"
    "hl_s0\000Hexagon_M2_mpyu_acc_hl_s1\000Hexagon_M2_mpyu_acc_lh_s0\000Hexa"
    "gon_M2_mpyu_acc_lh_s1\000Hexagon_M2_mpyu_acc_ll_s0\000Hexagon_M2_mpyu_a"
    "cc_ll_s1\000Hexagon_M2_mpyu_hh_s0\000Hexagon_M2_mpyu_hh_s1\000Hexagon_M"
    "2_mpyu_hl_s0\000Hexagon_M2_mpyu_hl_s1\000Hexagon_M2_mpyu_lh_s0\000Hexag"
    "on_M2_mpyu_lh_s1\000Hexagon_M2_mpyu_ll_s0\000Hexagon_M2_mpyu_ll_s1\000H"
    "exagon_M2_mpyu_nac_hh_s0\000Hexagon_M2_mpyu_nac_hh_s1\000Hexagon_M2_mpy"
    "u_nac_hl_s0\000Hexagon_M2_mpyu_nac_hl_s1\000Hexagon_M2_mpyu_nac_lh_s0\000"
    "Hexagon_M2_mpyu_nac_lh_s1\000Hexagon_M2_mpyu_nac_ll_s0\000Hexagon_M2_mp"
    "yu_nac_ll_s1\000Hexagon_M2_mpyu_up\000Hexagon_M2_mpyud_acc_hh_s0\000Hex"
    "agon_M2_mpyud_acc_hh_s1\000Hexagon_M2_mpyud_acc_hl_s0\000Hexagon_M2_mpy"
    "ud_acc_hl_s1\000Hexagon_M2_mpyud_acc_lh_s0\000Hexagon_M2_mpyud_acc_lh_s"
    "1\000Hexagon_M2_mpyud_acc_ll_s0\000Hexagon_M2_mpyud_acc_ll_s1\000Hexago"
    "n_M2_mpyud_hh_s0\000Hexagon_M2_mpyud_hh_s1\000Hexagon_M2_mpyud_hl_s0\000"
    "Hexagon_M2_mpyud_hl_s1\000Hexagon_M2_mpyud_lh_s0\000Hexagon_M2_mpyud_lh"
    "_s1\000Hexagon_M2_mpyud_ll_s0\000Hexagon_M2_mpyud_ll_s1\000Hexagon_M2_m"
    "pyud_nac_hh_s0\000Hexagon_M2_mpyud_nac_hh_s1\000Hexagon_M2_mpyud_nac_hl"
    "_s0\000Hexagon_M2_mpyud_nac_hl_s1\000Hexagon_M2_mpyud_nac_lh_s0\000Hexa"
    "gon_M2_mpyud_nac_lh_s1\000Hexagon_M2_mpyud_nac_ll_s0\000Hexagon_M2_mpyu"
    "d_nac_ll_s1\000Hexagon_M2_mpyui\000Hexagon_M2_nacci\000Hexagon_M2_nacci"
    "i\000Hexagon_M2_subacc\000Hexagon_M2_vabsdiffh\000Hexagon_M2_vabsdiffw\000"
    "Hexagon_M2_vcmac_s0_sat_i\000Hexagon_M2_vcmac_s0_sat_r\000Hexagon_M2_vc"
    "mpy_s0_sat_i\000Hexagon_M2_vcmpy_s0_sat_r\000Hexagon_M2_vcmpy_s1_sat_i\000"
    "Hexagon_M2_vcmpy_s1_sat_r\000Hexagon_M2_vdmacs_s0\000Hexagon_M2_vdmacs_"
    "s1\000Hexagon_M2_vdmpyrs_s0\000Hexagon_M2_vdmpyrs_s1\000Hexagon_M2_vdmp"
    "ys_s0\000Hexagon_M2_vdmpys_s1\000Hexagon_M2_vmac2\000Hexagon_M2_vmac2es"
    "\000Hexagon_M2_vmac2es_s0\000Hexagon_M2_vmac2es_s1\000Hexagon_M2_vmac2s"
    "_s0\000Hexagon_M2_vmac2s_s1\000Hexagon_M2_vmpy2es_s0\000Hexagon_M2_vmpy"
    "2es_s1\000Hexagon_M2_vmpy2s_s0\000Hexagon_M2_vmpy2s_s0pack\000Hexagon_M"
    "2_vmpy2s_s1\000Hexagon_M2_vmpy2s_s1pack\000Hexagon_M2_vradduh\000Hexago"
    "n_M2_vrcmaci_s0\000Hexagon_M2_vrcmaci_s0c\000Hexagon_M2_vrcmacr_s0\000H"
    "exagon_M2_vrcmacr_s0c\000Hexagon_M2_vrcmpyi_s0\000Hexagon_M2_vrcmpyi_s0"
    "c\000Hexagon_M2_vrcmpyr_s0\000Hexagon_M2_vrcmpyr_s0c\000Hexagon_M2_vrcm"
    "pys_acc_s1\000Hexagon_M2_vrcmpys_s1\000Hexagon_M2_vrcmpys_s1rp\000Hexag"
    "on_M2_vrmac_s0\000Hexagon_M2_vrmpy_s0\000Hexagon_M2_xor_xacc\000Hexagon"
    "_M4_xor_xacc\000Hexagon_S2_addasl_rrri\000Hexagon_S2_asl_i_p\000Hexagon"
    "_S2_asl_i_p_acc\000Hexagon_S2_asl_i_p_and\000Hexagon_S2_asl_i_p_nac\000"
    "Hexagon_S2_asl_i_p_or\000Hexagon_S2_asl_i_p_xacc\000Hexagon_S2_asl_i_r\000"
    "Hexagon_S2_asl_i_r_acc\000Hexagon_S2_asl_i_r_and\000Hexagon_S2_asl_i_r_"
    "nac\000Hexagon_S2_asl_i_r_or\000Hexagon_S2_asl_i_r_sat\000Hexagon_S2_as"
    "l_i_r_xacc\000Hexagon_S2_asl_i_vh\000Hexagon_S2_asl_i_vw\000Hexagon_S2_"
    "asl_r_p\000Hexagon_S2_asl_r_p_acc\000Hexagon_S2_asl_r_p_and\000Hexagon_"
    "S2_asl_r_p_nac\000Hexagon_S2_asl_r_p_or\000Hexagon_S2_asl_r_r\000Hexago"
    "n_S2_asl_r_r_acc\000Hexagon_S2_asl_r_r_and\000Hexagon_S2_asl_r_r_nac\000"
    "Hexagon_S2_asl_r_r_or\000Hexagon_S2_asl_r_r_sat\000Hexagon_S2_asl_r_vh\000"
    "Hexagon_S2_asl_r_vw\000Hexagon_S2_asr_i_p\000Hexagon_S2_asr_i_p_acc\000"
    "Hexagon_S2_asr_i_p_and\000Hexagon_S2_asr_i_p_nac\000Hexagon_S2_asr_i_p_"
    "or\000Hexagon_S2_asr_i_r\000Hexagon_S2_asr_i_r_acc\000Hexagon_S2_asr_i_"
    "r_and\000Hexagon_S2_asr_i_r_nac\000Hexagon_S2_asr_i_r_or\000Hexagon_S2_"
    "asr_i_r_rnd\000Hexagon_S2_asr_i_r_rnd_goodsyntax\000Hexagon_S2_asr_i_sv"
    "w_trun\000Hexagon_S2_asr_i_vh\000Hexagon_S2_asr_i_vw\000Hexagon_S2_asr_"
    "r_p\000Hexagon_S2_asr_r_p_acc\000Hexagon_S2_asr_r_p_and\000Hexagon_S2_a"
    "sr_r_p_nac\000Hexagon_S2_asr_r_p_or\000Hexagon_S2_asr_r_r\000Hexagon_S2"
    "_asr_r_r_acc\000Hexagon_S2_asr_r_r_and\000Hexagon_S2_asr_r_r_nac\000Hex"
    "agon_S2_asr_r_r_or\000Hexagon_S2_asr_r_r_sat\000Hexagon_S2_asr_r_svw_tr"
    "un\000Hexagon_S2_asr_r_vh\000Hexagon_S2_asr_r_vw\000Hexagon_S2_cl0\000H"
    "exagon_S2_cl0p\000Hexagon_S2_cl1\000Hexagon_S2_cl1p\000Hexagon_S2_clb\000"
    "Hexagon_S2_clbnorm\000Hexagon_S2_clbp\000Hexagon_S2_clrbit_i\000Hexagon"
    "_S2_clrbit_r\000Hexagon_S2_ct0\000Hexagon_S2_ct1\000Hexagon_S2_extractu"
    "\000Hexagon_S2_extractu_rp\000Hexagon_S2_extractup\000Hexagon_S2_extrac"
    "tup_rp\000Hexagon_S2_lsl_r_p\000Hexagon_S2_lsl_r_p_acc\000Hexagon_S2_ls"
    "l_r_p_and\000Hexagon_S2_lsl_r_p_nac\000Hexagon_S2_lsl_r_p_or\000Hexagon"
    "_S2_lsl_r_r\000Hexagon_S2_lsl_r_r_acc\000Hexagon_S2_lsl_r_r_and\000Hexa"
    "gon_S2_lsl_r_r_nac\000Hexagon_S2_lsl_r_r_or\000Hexagon_S2_lsl_r_vh\000H"
    "exagon_S2_lsl_r_vw\000Hexagon_S2_lsr_i_p\000Hexagon_S2_lsr_i_p_acc\000H"
    "exagon_S2_lsr_i_p_and\000Hexagon_S2_lsr_i_p_nac\000Hexagon_S2_lsr_i_p_o"
    "r\000Hexagon_S2_lsr_i_p_xacc\000Hexagon_S2_lsr_i_r\000Hexagon_S2_lsr_i_"
    "r_acc\000Hexagon_S2_lsr_i_r_and\000Hexagon_S2_lsr_i_r_nac\000Hexagon_S2"
    "_lsr_i_r_or\000Hexagon_S2_lsr_i_r_xacc\000Hexagon_S2_lsr_i_vh\000Hexago"
    "n_S2_lsr_i_vw\000Hexagon_S2_lsr_r_p\000Hexagon_S2_lsr_r_p_acc\000Hexago"
    "n_S2_lsr_r_p_and\000Hexagon_S2_lsr_r_p_nac\000Hexagon_S2_lsr_r_p_or\000"
    "Hexagon_S2_lsr_r_r\000Hexagon_S2_lsr_r_r_acc\000Hexagon_S2_lsr_r_r_and\000"
    "Hexagon_S2_lsr_r_r_nac\000Hexagon_S2_lsr_r_r_or\000Hexagon_S2_lsr_r_vh\000"
    "Hexagon_S2_lsr_r_vw\000Hexagon_S2_packhl\000Hexagon_S2_parityp\000Hexag"
    "on_S2_setbit_i\000Hexagon_S2_setbit_r\000Hexagon_S2_shuffeb\000Hexagon_"
    "S2_shuffeh\000Hexagon_S2_shuffob\000Hexagon_S2_shuffoh\000Hexagon_S2_sv"
    "sathb\000Hexagon_S2_svsathub\000Hexagon_S2_togglebit_i\000Hexagon_S2_to"
    "gglebit_r\000Hexagon_S2_tstbit_i\000Hexagon_S2_tstbit_r\000Hexagon_S2_v"
    "alignib\000Hexagon_S2_valignrb\000Hexagon_S2_vcrotate\000Hexagon_S2_vrn"
    "dpackwh\000Hexagon_S2_vrndpackwhs\000Hexagon_S2_vsathb\000Hexagon_S2_vs"
    "athb_nopack\000Hexagon_S2_vsathub\000Hexagon_S2_vsathub_nopack\000Hexag"
    "on_S2_vsatwh\000Hexagon_S2_vsatwh_nopack\000Hexagon_S2_vsatwuh\000Hexag"
    "on_S2_vsatwuh_nopack\000Hexagon_S2_vsplatrb\000Hexagon_S2_vsplatrh\000H"
    "exagon_S2_vsxtbh\000Hexagon_S2_vsxthw\000Hexagon_S2_vtrunehb\000Hexagon"
    "_S2_vtrunewh\000Hexagon_S2_vtrunohb\000Hexagon_S2_vtrunowh\000Hexagon_S"
    "2_vzxtbh\000Hexagon_S2_vzxthw\000Hexagon_S4_addaddi\000Hexagon_S4_andnp"
    "\000Hexagon_S4_ornp\000Hexagon_S4_subaddi\000JMP\000JMPR\000JMPR_cNotPn"
    "ewNt\000JMPR_cNotPnewt\000JMPR_cNotPt\000JMPR_cPnewNt\000JMPR_cPnewt\000"
    "JMPR_cPt\000JMP_Pred\000JMP_PredNot\000JMP_PredNotPnt\000JMP_PredNotPt\000"
    "JMP_PredPnt\000JMP_PredPt\000LDb_GP\000LDd_GP\000LDh_GP\000LDrib\000LDr"
    "ib_GP\000LDrib_ae\000LDrib_ae_indexed\000LDrib_cNotPt\000LDrib_cPt\000L"
    "Drib_cdnNotPt\000LDrib_cdnPt\000LDrib_indexed\000LDrib_indexed_V4\000LD"
    "rib_indexed_cNotPt\000LDrib_indexed_cNotPt_V4\000LDrib_indexed_cPt\000L"
    "Drib_indexed_cPt_V4\000LDrib_indexed_cdnNotPt\000LDrib_indexed_cdnNotPt"
    "_V4\000LDrib_indexed_cdnPt\000LDrib_indexed_cdnPt_V4\000LDrib_indexed_s"
    "hl_V4\000LDrib_indexed_shl_cNotPt_V4\000LDrib_indexed_shl_cPt_V4\000LDr"
    "ib_indexed_shl_cdnNotPt_V4\000LDrib_indexed_shl_cdnPt_V4\000LDrid\000LD"
    "rid_GP\000LDrid_cNotPt\000LDrid_cPt\000LDrid_cdnNotPt\000LDrid_cdnPt\000"
    "LDrid_indexed\000LDrid_indexed_V4\000LDrid_indexed_cNotPt\000LDrid_inde"
    "xed_cNotPt_V4\000LDrid_indexed_cPt\000LDrid_indexed_cPt_V4\000LDrid_ind"
    "exed_cdnNotPt\000LDrid_indexed_cdnNotPt_V4\000LDrid_indexed_cdnPt\000LD"
    "rid_indexed_cdnPt_V4\000LDrid_indexed_shl_V4\000LDrid_indexed_shl_cNotP"
    "t_V4\000LDrid_indexed_shl_cPt_V4\000LDrid_indexed_shl_cdnNotPt_V4\000LD"
    "rid_indexed_shl_cdnPt_V4\000LDrih\000LDrih_GP\000LDrih_ae\000LDrih_ae_i"
    "ndexed\000LDrih_cNotPt\000LDrih_cPt\000LDrih_cdnNotPt\000LDrih_cdnPt\000"
    "LDrih_indexed\000LDrih_indexed_V4\000LDrih_indexed_cNotPt\000LDrih_inde"
    "xed_cNotPt_V4\000LDrih_indexed_cPt\000LDrih_indexed_cPt_V4\000LDrih_ind"
    "exed_cdnNotPt\000LDrih_indexed_cdnNotPt_V4\000LDrih_indexed_cdnPt\000LD"
    "rih_indexed_cdnPt_V4\000LDrih_indexed_shl_V4\000LDrih_indexed_shl_cNotP"
    "t_V4\000LDrih_indexed_shl_cPt_V4\000LDrih_indexed_shl_cdnNotPt_V4\000LD"
    "rih_indexed_shl_cdnPt_V4\000LDriub\000LDriub_GP\000LDriub_ae\000LDriub_"
    "ae_indexed\000LDriub_ae_indexed_V4\000LDriub_ae_indexed_shl_V4\000LDriu"
    "b_cNotPt\000LDriub_cPt\000LDriub_cdnNotPt\000LDriub_cdnPt\000LDriub_ind"
    "exed\000LDriub_indexed_V4\000LDriub_indexed_cNotPt\000LDriub_indexed_cN"
    "otPt_V4\000LDriub_indexed_cPt\000LDriub_indexed_cPt_V4\000LDriub_indexe"
    "d_cdnNotPt\000LDriub_indexed_cdnNotPt_V4\000LDriub_indexed_cdnPt\000LDr"
    "iub_indexed_cdnPt_V4\000LDriub_indexed_shl_V4\000LDriub_indexed_shl_cNo"
    "tPt_V4\000LDriub_indexed_shl_cPt_V4\000LDriub_indexed_shl_cdnNotPt_V4\000"
    "LDriub_indexed_shl_cdnPt_V4\000LDriubit\000LDriubit_indexed\000LDriuh\000"
    "LDriuh_GP\000LDriuh_ae\000LDriuh_ae_indexed\000LDriuh_ae_indexed_V4\000"
    "LDriuh_ae_indexed_shl_V4\000LDriuh_cNotPt\000LDriuh_cPt\000LDriuh_cdnNo"
    "tPt\000LDriuh_cdnPt\000LDriuh_indexed\000LDriuh_indexed_V4\000LDriuh_in"
    "dexed_cNotPt\000LDriuh_indexed_cNotPt_V4\000LDriuh_indexed_cPt\000LDriu"
    "h_indexed_cPt_V4\000LDriuh_indexed_cdnNotPt\000LDriuh_indexed_cdnNotPt_"
    "V4\000LDriuh_indexed_cdnPt\000LDriuh_indexed_cdnPt_V4\000LDriuh_indexed"
    "_shl_V4\000LDriuh_indexed_shl_cNotPt_V4\000LDriuh_indexed_shl_cPt_V4\000"
    "LDriuh_indexed_shl_cdnNotPt_V4\000LDriuh_indexed_shl_cdnPt_V4\000LDriw\000"
    "LDriw_GP\000LDriw_cNotPt\000LDriw_cPt\000LDriw_cdnNotPt\000LDriw_cdnPt\000"
    "LDriw_indexed\000LDriw_indexed_V4\000LDriw_indexed_cNotPt\000LDriw_inde"
    "xed_cNotPt_V4\000LDriw_indexed_cPt\000LDriw_indexed_cPt_V4\000LDriw_ind"
    "exed_cdnNotPt\000LDriw_indexed_cdnNotPt_V4\000LDriw_indexed_cdnPt\000LD"
    "riw_indexed_cdnPt_V4\000LDriw_indexed_shl_V4\000LDriw_indexed_shl_cNotP"
    "t_V4\000LDriw_indexed_shl_cPt_V4\000LDriw_indexed_shl_cdnNotPt_V4\000LD"
    "riw_indexed_shl_cdnPt_V4\000LDriw_pred\000LDub_GP\000LDuh_GP\000LDw_GP\000"
    "LOOP0_i\000LOOP0_r\000LSLd\000LSLd_rr_xor_V4\000LSLi_V4\000LSR_ri\000LS"
    "R_rr\000LSRd_ri\000LSRd_ri_acc\000LSRd_rr\000LSRd_rr_xor_V4\000MASK_p\000"
    "MAXw_dd\000MAXw_rr\000MEMb_ADDSUBi_MEM_V4\000MEMb_ADDSUBi_indexed_MEM_V"
    "4\000MEMb_ADDi_MEM_V4\000MEMb_ADDi_indexed_MEM_V4\000MEMb_ADDr_MEM_V4\000"
    "MEMb_ADDr_indexed_MEM_V4\000MEMb_ANDr_MEM_V4\000MEMb_ANDr_indexed_MEM_V"
    "4\000MEMb_ORr_MEM_V4\000MEMb_ORr_indexed_MEM_V4\000MEMb_SUBi_MEM_V4\000"
    "MEMb_SUBi_indexed_MEM_V4\000MEMb_SUBr_MEM_V4\000MEMb_SUBr_indexed_MEM_V"
    "4\000MEMh_ADDSUBi_MEM_V4\000MEMh_ADDSUBi_indexed_MEM_V4\000MEMh_ADDi_ME"
    "M_V4\000MEMh_ADDi_indexed_MEM_V4\000MEMh_ADDr_MEM_V4\000MEMh_ADDr_index"
    "ed_MEM_V4\000MEMh_ANDr_MEM_V4\000MEMh_ANDr_indexed_MEM_V4\000MEMh_ORr_M"
    "EM_V4\000MEMh_ORr_indexed_MEM_V4\000MEMh_SUBi_MEM_V4\000MEMh_SUBi_index"
    "ed_MEM_V4\000MEMh_SUBr_MEM_V4\000MEMh_SUBr_indexed_MEM_V4\000MEMw_ADDSU"
    "Bi_MEM_V4\000MEMw_ADDSUBi_indexed_MEM_V4\000MEMw_ADDi_MEM_V4\000MEMw_AD"
    "Di_indexed_MEM_V4\000MEMw_ADDr_MEM_V4\000MEMw_ADDr_indexed_MEM_V4\000ME"
    "Mw_ANDr_MEM_V4\000MEMw_ANDr_indexed_MEM_V4\000MEMw_ORr_MEM_V4\000MEMw_O"
    "Rr_indexed_MEM_V4\000MEMw_SUBi_MEM_V4\000MEMw_SUBi_indexed_MEM_V4\000ME"
    "Mw_SUBr_MEM_V4\000MEMw_SUBr_indexed_MEM_V4\000MINw_dd\000MINw_rr\000MPY"
    "\000MPY64\000MPY64_acc\000MPY64_sub\000MPYI\000MPYI_acc_ri\000MPYI_acc_"
    "rr\000MPYI_ri\000MPYI_rin\000MPYI_riu\000MPYI_sub_ri\000MPYU\000MPYU64\000"
    "MPYU64_acc\000MPYU64_sub\000MPY_trsext\000MUX_ii\000MUX_ir\000MUX_ri\000"
    "MUX_rr\000NEG\000NOP\000NOT_Ps\000NOT_pp\000NOT_rr\000NOT_rr64\000OR_pp"
    "\000OR_ri\000OR_rr\000OR_rr64\000OR_rr_cNotPt\000OR_rr_cPt\000OR_rr_cdn"
    "NotPt\000OR_rr_cdnPt\000ORd_NOTd_V4\000ORi_ASLri_V4\000ORi_LSRri_V4\000"
    "ORr_ANDr_NOTr_V4\000ORr_ANDri2_V4\000ORr_ANDri_V4\000ORr_ANDrr_V4\000OR"
    "r_ORri_V4\000ORr_ORrr_V4\000ORr_XORrr_V4\000POST_LDrib\000POST_LDrib_cN"
    "otPt\000POST_LDrib_cPt\000POST_LDrib_cdnNotPt_V4\000POST_LDrib_cdnPt_V4"
    "\000POST_LDrid\000POST_LDrid_cNotPt\000POST_LDrid_cPt\000POST_LDrid_cdn"
    "NotPt_V4\000POST_LDrid_cdnPt_V4\000POST_LDrih\000POST_LDrih_cNotPt\000P"
    "OST_LDrih_cPt\000POST_LDrih_cdnNotPt_V4\000POST_LDrih_cdnPt_V4\000POST_"
    "LDriub\000POST_LDriub_cNotPt\000POST_LDriub_cPt\000POST_LDriub_cdnNotPt"
    "_V4\000POST_LDriub_cdnPt_V4\000POST_LDriuh\000POST_LDriuh_cNotPt\000POS"
    "T_LDriuh_cPt\000POST_LDriuh_cdnNotPt_V4\000POST_LDriuh_cdnPt_V4\000POST"
    "_LDriw\000POST_LDriw_cNotPt\000POST_LDriw_cPt\000POST_LDriw_cdnNotPt_V4"
    "\000POST_LDriw_cdnPt_V4\000POST_STbri\000POST_STbri_cNotPt\000POST_STbr"
    "i_cNotPt_nv_V4\000POST_STbri_cPt\000POST_STbri_cPt_nv_V4\000POST_STbri_"
    "cdnNotPt_V4\000POST_STbri_cdnNotPt_nv_V4\000POST_STbri_cdnPt_V4\000POST"
    "_STbri_cdnPt_nv_V4\000POST_STbri_nv_V4\000POST_STdri\000POST_STdri_cNot"
    "Pt\000POST_STdri_cPt\000POST_STdri_cdnNotPt_V4\000POST_STdri_cdnPt_V4\000"
    "POST_SThri\000POST_SThri_cNotPt\000POST_SThri_cNotPt_nv_V4\000POST_SThr"
    "i_cPt\000POST_SThri_cPt_nv_V4\000POST_SThri_cdnNotPt_V4\000POST_SThri_c"
    "dnNotPt_nv_V4\000POST_SThri_cdnPt_V4\000POST_SThri_cdnPt_nv_V4\000POST_"
    "SThri_nv_V4\000POST_STwri\000POST_STwri_cNotPt\000POST_STwri_cNotPt_nv_"
    "V4\000POST_STwri_cPt\000POST_STwri_cPt_nv_V4\000POST_STwri_cdnNotPt_V4\000"
    "POST_STwri_cdnNotPt_nv_V4\000POST_STwri_cdnPt_V4\000POST_STwri_cdnPt_nv"
    "_V4\000POST_STwri_nv_V4\000SI_to_SXTHI_asrh\000STb_GP\000STh_GP\000STri"
    "b\000STrib_GP\000STrib_GP_nv_V4\000STrib_cNotPt\000STrib_cNotPt_nv_V4\000"
    "STrib_cPt\000STrib_cPt_nv_V4\000STrib_cdnNotPt_V4\000STrib_cdnNotPt_nv_"
    "V4\000STrib_cdnPt_V4\000STrib_cdnPt_nv_V4\000STrib_imm_V4\000STrib_imm_"
    "cNotPt_V4\000STrib_imm_cPt_V4\000STrib_imm_cdnNotPt_V4\000STrib_imm_cdn"
    "Pt_V4\000STrib_indexed\000STrib_indexed_cNotPt\000STrib_indexed_cNotPt_"
    "nv_V4\000STrib_indexed_cPt\000STrib_indexed_cPt_nv_V4\000STrib_indexed_"
    "cdnNotPt_V4\000STrib_indexed_cdnNotPt_nv_V4\000STrib_indexed_cdnPt_V4\000"
    "STrib_indexed_cdnPt_nv_V4\000STrib_indexed_nv_V4\000STrib_indexed_shl_V"
    "4\000STrib_indexed_shl_cNotPt_V4\000STrib_indexed_shl_cNotPt_nv_V4\000S"
    "Trib_indexed_shl_cPt_V4\000STrib_indexed_shl_cPt_nv_V4\000STrib_indexed"
    "_shl_cdnNotPt_V4\000STrib_indexed_shl_cdnNotPt_nv_V4\000STrib_indexed_s"
    "hl_cdnPt_V4\000STrib_indexed_shl_cdnPt_nv_V4\000STrib_indexed_shl_nv_V4"
    "\000STrib_nv_V4\000STrib_shl_V4\000STrib_shl_nv_V4\000STrid\000STrid_GP"
    "\000STrid_cNotPt\000STrid_cPt\000STrid_cdnNotPt_V4\000STrid_cdnPt_V4\000"
    "STrid_indexed\000STrid_indexed_cNotPt\000STrid_indexed_cPt\000STrid_ind"
    "exed_cdnNotPt_V4\000STrid_indexed_cdnPt_V4\000STrid_indexed_shl_V4\000S"
    "Trid_indexed_shl_cNotPt_V4\000STrid_indexed_shl_cPt_V4\000STrid_indexed"
    "_shl_cdnNotPt_V4\000STrid_indexed_shl_cdnPt_V4\000STrid_shl_V4\000STrih"
    "\000STrih_GP\000STrih_GP_nv_V4\000STrih_cNotPt\000STrih_cNotPt_nv_V4\000"
    "STrih_cPt\000STrih_cPt_nv_V4\000STrih_cdnNotPt_V4\000STrih_cdnNotPt_nv_"
    "V4\000STrih_cdnPt_V4\000STrih_cdnPt_nv_V4\000STrih_imm_V4\000STrih_imm_"
    "cNotPt_V4\000STrih_imm_cPt_V4\000STrih_imm_cdnNotPt_V4\000STrih_imm_cdn"
    "Pt_V4\000STrih_indexed\000STrih_indexed_cNotPt\000STrih_indexed_cNotPt_"
    "nv_V4\000STrih_indexed_cPt\000STrih_indexed_cPt_nv_V4\000STrih_indexed_"
    "cdnNotPt_V4\000STrih_indexed_cdnNotPt_nv_V4\000STrih_indexed_cdnPt_V4\000"
    "STrih_indexed_cdnPt_nv_V4\000STrih_indexed_nv_V4\000STrih_indexed_shl_V"
    "4\000STrih_indexed_shl_cNotPt_V4\000STrih_indexed_shl_cNotPt_nv_V4\000S"
    "Trih_indexed_shl_cPt_V4\000STrih_indexed_shl_cPt_nv_V4\000STrih_indexed"
    "_shl_cdnNotPt_V4\000STrih_indexed_shl_cdnNotPt_nv_V4\000STrih_indexed_s"
    "hl_cdnPt_V4\000STrih_indexed_shl_cdnPt_nv_V4\000STrih_indexed_shl_nv_V4"
    "\000STrih_nv_V4\000STrih_shl_V4\000STrih_shl_nv_V4\000STriw\000STriw_GP"
    "\000STriw_GP_nv_V4\000STriw_cNotPt\000STriw_cNotPt_nv_V4\000STriw_cPt\000"
    "STriw_cPt_nv_V4\000STriw_cdnNotPt_V4\000STriw_cdnNotPt_nv_V4\000STriw_c"
    "dnPt_V4\000STriw_cdnPt_nv_V4\000STriw_imm_V4\000STriw_imm_cNotPt_V4\000"
    "STriw_imm_cPt_V4\000STriw_imm_cdnNotPt_V4\000STriw_imm_cdnPt_V4\000STri"
    "w_indexed\000STriw_indexed_cNotPt\000STriw_indexed_cNotPt_nv_V4\000STri"
    "w_indexed_cPt\000STriw_indexed_cPt_nv_V4\000STriw_indexed_cdnNotPt_V4\000"
    "STriw_indexed_cdnNotPt_nv_V4\000STriw_indexed_cdnPt_V4\000STriw_indexed"
    "_cdnPt_nv_V4\000STriw_indexed_nv_V4\000STriw_indexed_shl_V4\000STriw_in"
    "dexed_shl_cNotPt_V4\000STriw_indexed_shl_cNotPt_nv_V4\000STriw_indexed_"
    "shl_cPt_V4\000STriw_indexed_shl_cPt_nv_V4\000STriw_indexed_shl_cdnNotPt"
    "_V4\000STriw_indexed_shl_cdnNotPt_nv_V4\000STriw_indexed_shl_cdnPt_V4\000"
    "STriw_indexed_shl_cdnPt_nv_V4\000STriw_indexed_shl_nv_V4\000STriw_nv_V4"
    "\000STriw_pred\000STriw_shl_V4\000STriw_shl_nv_V4\000STriwt\000SUB64_rr"
    "\000SUB_rr\000SUB_rr_cNotPt\000SUB_rr_cPt\000SUB_rr_cdnNotPt\000SUB_rr_"
    "cdnPt\000SUBi_ASLri_V4\000SUBi_LSRri_V4\000SUBri_acc\000SUBrr_acc\000SX"
    "TB\000SXTB_cNotPt_V4\000SXTB_cPt_V4\000SXTB_cdnNotPt_V4\000SXTB_cdnPt_V"
    "4\000SXTH\000SXTH_cNotPt_V4\000SXTH_cPt_V4\000SXTH_cdnNotPt_V4\000SXTH_"
    "cdnPt_V4\000SXTW\000TCRETURNR\000TCRETURNtext\000TCRETURNtg\000TFCR\000"
    "TFR\000TFRI\000TFRI64\000TFRI_cNotPt\000TFRI_cPt\000TFRI_cdnNotPt\000TF"
    "RI_cdnPt\000TFR_64\000TFR_FI\000TFR_PdFalse\000TFR_PdRs\000TFR_RsPd\000"
    "TFR_cNotPt\000TFR_cPt\000TFR_cdnNotPt\000TFR_cdnPt\000TFR_condset_ii\000"
    "TFR_condset_rr\000VALIGN_rrp\000VITPACK_pp\000VMUX_prr64\000VSPLICE_rrp"
    "\000XOR_pp\000XOR_rr\000XOR_rr64\000XOR_rr_cNotPt\000XOR_rr_cPt\000XOR_"
    "rr_cdnNotPt\000XOR_rr_cdnPt\000XORd_XORdd\000XORr_ANDr_NOTr_V4\000XORr_"
    "ANDrr_V4\000XORr_ORrr_V4\000XORr_XORrr_V4\000ZXTB\000ZXTB_cNotPt_V4\000"
    "ZXTB_cPt_V4\000ZXTB_cdnNotPt_V4\000ZXTB_cdnPt_V4\000ZXTH\000ZXTH_cNotPt"
    "_V4\000ZXTH_cPt_V4\000ZXTH_cdnNotPt_V4\000ZXTH_cdnPt_V4\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif
