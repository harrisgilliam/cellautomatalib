//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SPUAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// BUNDLE
    536870930U,	// ABSDB
    536870937U,	// ADDXr32
    536870937U,	// ADDXr64
    536870937U,	// ADDXv2i64
    536870937U,	// ADDXv4i32
    1140850719U,	// ADJCALLSTACKDOWN
    1207959583U,	// ADJCALLSTACKUP
    537002016U,	// AHIr16
    537002016U,	// AHIvec
    536870949U,	// AHr16
    536870949U,	// AHv8i16
    537002025U,	// AIf32
    537002025U,	// AIr32
    537002025U,	// AIv4f32
    537002025U,	// AIv4i32
    537133101U,	// ANDBIr8
    537133101U,	// ANDBIv16i8
    536870964U,	// ANDCr128
    536870964U,	// ANDCr16
    536870964U,	// ANDCr32
    536870964U,	// ANDCr64
    536870964U,	// ANDCr8
    536870964U,	// ANDCv16i8
    536870964U,	// ANDCv16i8_conv
    536870964U,	// ANDCv2i64
    536870964U,	// ANDCv4i32
    536870964U,	// ANDCv8i16
    537133114U,	// ANDHIi8i16
    537133114U,	// ANDHIr16
    537002042U,	// ANDHIv8i16
    537002049U,	// ANDIi16i32
    537002049U,	// ANDIi8i32
    537002049U,	// ANDIr32
    537002049U,	// ANDIv4i32
    536870983U,	// ANDfabs32
    536870983U,	// ANDfabs64
    536870983U,	// ANDfabsvec
    536870983U,	// ANDi16i32
    536870983U,	// ANDr128
    536870983U,	// ANDr16
    536870983U,	// ANDr32
    536870983U,	// ANDr64
    536870983U,	// ANDr8
    536870983U,	// ANDv16i8
    536870983U,	// ANDv2i64
    536870983U,	// ANDv4i32
    536870983U,	// ANDv8i16
    536870988U,	// AVGB
    536870994U,	// Ar32
    536870994U,	// Av16i8
    536870994U,	// Av4i32
    536870997U,	// BGXvec
    536871002U,	// BGr32
    536871002U,	// BGr64
    536871002U,	// BGv2i64
    536871002U,	// BGv4i32
    738197598U,	// BI
    738197602U,	// BISL
    1610612845U,	// BISLED_00
    1610612845U,	// BISLED_0D
    1610612845U,	// BISLED_E0
    1610612845U,	// BISLED_ED
    2147483770U,	// BR
    2147483774U,	// BRA
    1610612867U,	// BRASL
    805306511U,	// BRHNZr16
    805306511U,	// BRHNZv8i16
    805306518U,	// BRHZr16
    805306518U,	// BRHZv8i16
    805306524U,	// BRNZr32
    805306524U,	// BRNZv4i32
    2147483810U,	// BRSL
    805306541U,	// BRZr32
    805306541U,	// BRZv4i32
    541065394U,	// CBD
    545259703U,	// CBX
    541065404U,	// CDD
    541065404U,	// CDDf64
    545259713U,	// CDX
    545259713U,	// CDXf64
    537002182U,	// CEQBIr8
    537002182U,	// CEQBIv16i8
    536871117U,	// CEQBr8
    536871117U,	// CEQBv16i8
    537002195U,	// CEQHIr16
    537002195U,	// CEQHIv8i16
    536871130U,	// CEQHr16
    536871130U,	// CEQHv8i16
    537002208U,	// CEQIr32
    537002208U,	// CEQIv4i32
    536871142U,	// CEQr32
    536871142U,	// CEQv4i32
    537919723U,	// CFSif32
    537919723U,	// CFSiv4f32
    537919730U,	// CFUif32
    537919730U,	// CFUiv4f32
    537002233U,	// CGTBIr8
    537002233U,	// CGTBIv16i8
    536871168U,	// CGTBr8
    536871168U,	// CGTBv16i8
    537002246U,	// CGTHIr16
    537002246U,	// CGTHIv8i16
    536871181U,	// CGTHr16
    536871181U,	// CGTHv8i16
    537002259U,	// CGTIf32
    537002259U,	// CGTIr32
    537002259U,	// CGTIv4f32
    537002259U,	// CGTIv4i32
    536871193U,	// CGTr32
    536871193U,	// CGTv4i32
    536871198U,	// CGr32
    536871198U,	// CGr64
    536871198U,	// CGv2i64
    536871198U,	// CGv4i32
    541065506U,	// CHD
    545259815U,	// CHX
    537002284U,	// CLGTBIr8
    537002284U,	// CLGTBIv16i8
    536871220U,	// CLGTBr8
    536871220U,	// CLGTBv16i8
    537002299U,	// CLGTHIr16
    537002299U,	// CLGTHIv8i16
    536871235U,	// CLGTHr16
    536871235U,	// CLGTHv8i16
    537002314U,	// CLGTIr32
    537002314U,	// CLGTIv4i32
    536871249U,	// CLGTr32
    536871249U,	// CLGTv4i32
    538968407U,	// CLZr32
    538968407U,	// CLZv4i32
    538968412U,	// CNTBv16i8
    538968412U,	// CNTBv4i32
    538968412U,	// CNTBv8i16
    537919842U,	// CSiFf32
    537919842U,	// CSiFv4f32
    537919849U,	// CUiFf32
    537919849U,	// CUiFv4f32
    541065584U,	// CWD
    541065584U,	// CWDf32
    545259893U,	// CWX
    545259893U,	// CWXf32
    536871290U,	// CellSDKa
    536871293U,	// CellSDKaddx
    536871299U,	// CellSDKah
    549847431U,	// CellSDKahi
    549847436U,	// CellSDKai
    536871312U,	// CellSDKand
    537133462U,	// CellSDKandbi
    536871326U,	// CellSDKandc
    537002405U,	// CellSDKandhi
    537002413U,	// CellSDKandi
    536871348U,	// CellSDKbg
    536871352U,	// CellSDKbgx
    536871357U,	// CellSDKceq
    536871363U,	// CellSDKceqb
    537133514U,	// CellSDKceqbi
    536871378U,	// CellSDKceqh
    537002457U,	// CellSDKceqhi
    537002465U,	// CellSDKceqi
    536871400U,	// CellSDKcg
    536871404U,	// CellSDKcgt
    536871410U,	// CellSDKcgtb
    537133561U,	// CellSDKcgtbi
    536871425U,	// CellSDKcgth
    537002504U,	// CellSDKcgthi
    537002512U,	// CellSDKcgti
    536871447U,	// CellSDKcgx
    536871452U,	// CellSDKclgt
    536871459U,	// CellSDKclgtb
    537133611U,	// CellSDKclgtbi
    536871476U,	// CellSDKclgth
    537002556U,	// CellSDKclgthi
    537002565U,	// CellSDKclgti
    536871501U,	// CellSDKdfa
    536871507U,	// CellSDKdfm
    536871513U,	// CellSDKdfma
    536871520U,	// CellSDKdfms
    536871527U,	// CellSDKdfnma
    536871535U,	// CellSDKdfnms
    536871543U,	// CellSDKdfs
    536871549U,	// CellSDKfa
    536871554U,	// CellSDKfceq
    536871561U,	// CellSDKfcgt
    536871568U,	// CellSDKfcmeq
    536871576U,	// CellSDKfcmgt
    536871584U,	// CellSDKfm
    536937125U,	// CellSDKfma
    536937131U,	// CellSDKfms
    536937137U,	// CellSDKfnms
    536871608U,	// CellSDKfs
    536871613U,	// CellSDKmpy
    536937154U,	// CellSDKmpya
    536871624U,	// CellSDKmpyh
    536871630U,	// CellSDKmpyhh
    536871637U,	// CellSDKmpyhha
    536871645U,	// CellSDKmpyhhau
    536871654U,	// CellSDKmpyhhu
    537002734U,	// CellSDKmpyi
    536871668U,	// CellSDKmpys
    536871674U,	// CellSDKmpyu
    537002752U,	// CellSDKmpyui
    536871687U,	// CellSDKnand
    536871694U,	// CellSDKnor
    536871700U,	// CellSDKor
    537133849U,	// CellSDKorbi
    536871712U,	// CellSDKorc
    537002791U,	// CellSDKorhi
    537002798U,	// CellSDKori
    536871732U,	// CellSDKsf
    536871736U,	// CellSDKsfh
    549847869U,	// CellSDKsfhi
    549847875U,	// CellSDKsfi
    536871752U,	// CellSDKsfx
    536871757U,	// CellSDKxor
    537133907U,	// CellSDKxorbi
    537002843U,	// CellSDKxorhi
    537002851U,	// CellSDKxori
    536871786U,	// DFNMSf64
    536871786U,	// DFNMSv2f64
    881U,	// ENOP
    536871797U,	// EQVr128
    536871797U,	// EQVr128_1
    536871797U,	// EQVr128_2
    536871797U,	// EQVr128_3
    536871797U,	// EQVr16
    536871797U,	// EQVr16_1
    536871797U,	// EQVr16_2
    536871797U,	// EQVr16_3
    536871797U,	// EQVr32
    536871797U,	// EQVr32_1
    536871797U,	// EQVr32_2
    536871797U,	// EQVr32_3
    536871797U,	// EQVr64
    536871797U,	// EQVr64_1
    536871797U,	// EQVr64_2
    536871797U,	// EQVr64_3
    536871797U,	// EQVr8
    536871797U,	// EQVr8_1
    536871797U,	// EQVr8_2
    536871797U,	// EQVr8_3
    536871797U,	// EQVv16i8
    536871797U,	// EQVv16i8_1
    536871797U,	// EQVv16i8_2
    536871797U,	// EQVv16i8_3
    536871797U,	// EQVv2i64
    536871797U,	// EQVv2i64_1
    536871797U,	// EQVv2i64_2
    536871797U,	// EQVv2i64_3
    536871797U,	// EQVv4i32
    536871797U,	// EQVv4i32_1
    536871797U,	// EQVv4i32_2
    536871797U,	// EQVv4i32_3
    536871797U,	// EQVv8i16
    536871797U,	// EQVv8i16_1
    536871797U,	// EQVv8i16_2
    536871797U,	// EQVv8i16_3
    536871802U,	// FAf32
    536871806U,	// FAf64
    536871806U,	// FAv2f64
    536871802U,	// FAv4f32
    536871811U,	// FCEQf32
    536871817U,	// FCGTf32
    536871823U,	// FCMEQf32
    536871830U,	// FCMGTf32
    538968989U,	// FESDf32
    538968989U,	// FESDvec
    536871843U,	// FIf32
    536871843U,	// FIv4f32
    536937383U,	// FMAf32
    536871852U,	// FMAf64
    536871852U,	// FMAv2f64
    536937383U,	// FMAv4f32
    536937394U,	// FMSf32
    536871863U,	// FMSf64
    536871863U,	// FMSv2f64
    536937394U,	// FMSv4f32
    536871869U,	// FMf32
    536871873U,	// FMf64
    536871873U,	// FMv2f64
    536871869U,	// FMv4f32
    536871878U,	// FNMAf64
    536871878U,	// FNMAv2f64
    536937421U,	// FNMSf32
    536937421U,	// FNMSv4f32
    538969043U,	// FRDSf64
    538969049U,	// FRESTf32
    538969049U,	// FRESTv4f32
    738198496U,	// FSCRRf32
    2684355560U,	// FSCRWf32
    538969072U,	// FSM64r16
    538969072U,	// FSM64r32
    553649141U,	// FSMBIv16i8
    553649141U,	// FSMBIv2i64
    553649141U,	// FSMBIv4i32
    553649141U,	// FSMBIv8i16
    538969084U,	// FSMBv16i8
    538969084U,	// FSMBv16i8_r16
    538969090U,	// FSMHv8i16
    538969090U,	// FSMHv8i16_r16
    538969072U,	// FSMr16
    538969072U,	// FSMr32
    538969072U,	// FSMv4i32
    536871944U,	// FSf32
    536871948U,	// FSf64
    536871948U,	// FSv2f64
    536871944U,	// FSv4f32
    538969105U,	// GBBv16i8
    538969105U,	// GBBv16i8_r16
    538969105U,	// GBBv16i8_r32
    538969110U,	// GBHv8i16
    538969110U,	// GBHv8i16_r16
    538969110U,	// GBHv8i16_r32
    538969115U,	// GBv4i32
    538969115U,	// GBv4i32_r16
    538969115U,	// GBv4i32_r32
    3242198047U,	// HBRA
    3556769823U,	// HBR_LABEL
    562037797U,	// HEQIr32
    538969131U,	// HEQr32
    562037808U,	// HGTIr32
    538969142U,	// HGTr32
    562037819U,	// HLGTIr32
    538969154U,	// HLGTr32
    566232136U,	// ILAf32
    566232136U,	// ILAf64
    570426440U,	// ILAhi
    574620744U,	// ILAlo
    578815048U,	// ILAlsa
    566232136U,	// ILAr32
    566232136U,	// ILAr64
    566232136U,	// ILAv2i64
    566232136U,	// ILAv4i32
    553649229U,	// ILHUf32
    570426445U,	// ILHUhi
    553649229U,	// ILHUr32
    553649229U,	// ILHUr64
    553649229U,	// ILHUv2i64
    553649229U,	// ILHUv4i32
    583009363U,	// ILHr16
    583009363U,	// ILHr8
    583009363U,	// ILHv8i16
    583009368U,	// ILf32
    583009368U,	// ILf64
    583009368U,	// ILr32
    583009368U,	// ILr64
    583009368U,	// ILv2i64
    583009368U,	// ILv4i32
    551552092U,	// IOHLf32
    587203676U,	// IOHLlo
    551552092U,	// IOHLr32
    591397980U,	// IOHLv2i64
    591397980U,	// IOHLv4i32
    1122U,	// LNOP
    595592295U,	// LQAf32
    595592295U,	// LQAf64
    595592295U,	// LQAr128
    595592295U,	// LQAr16
    595592295U,	// LQAr32
    595592295U,	// LQAr64
    595592295U,	// LQAr8
    595592295U,	// LQAv16i8
    595592295U,	// LQAv2f64
    595592295U,	// LQAv2i64
    595592295U,	// LQAv4f32
    595592295U,	// LQAv4i32
    595592295U,	// LQAv8i16
    599786604U,	// LQDf32
    599786604U,	// LQDf64
    599786604U,	// LQDr128
    599786604U,	// LQDr16
    599786604U,	// LQDr32
    599786604U,	// LQDr64
    599786604U,	// LQDr8
    599786604U,	// LQDv16i8
    599786604U,	// LQDv2f64
    599786604U,	// LQDv2i64
    599786604U,	// LQDv4f32
    599786604U,	// LQDv4i32
    599786604U,	// LQDv8i16
    545260657U,	// LQXf32
    545260657U,	// LQXf64
    545260657U,	// LQXr128
    545260657U,	// LQXr16
    545260657U,	// LQXr32
    545260657U,	// LQXr64
    545260657U,	// LQXr8
    545260657U,	// LQXv16i8
    545260657U,	// LQXv2f64
    545260657U,	// LQXv2i64
    545260657U,	// LQXv4f32
    545260657U,	// LQXv4i32
    545260657U,	// LQXv8i16
    538969206U,	// LRf32
    538969206U,	// LRf64
    538969206U,	// LRr128
    538969206U,	// LRr16
    538969206U,	// LRr32
    538969206U,	// LRr64
    538969206U,	// LRr8
    538969206U,	// LRv16i8
    538969206U,	// LRv2f64
    538969206U,	// LRv2i64
    538969206U,	// LRv4f32
    538969206U,	// LRv4i32
    538969206U,	// LRv8i16
    536937594U,	// MPYAr32
    536937594U,	// MPYAr32_sext
    536937594U,	// MPYAr32_sextinreg
    536937594U,	// MPYAv4i32
    536872064U,	// MPYHHAUr32
    536872064U,	// MPYHHAUvec
    536872073U,	// MPYHHAr32
    536872073U,	// MPYHHAvec
    536872081U,	// MPYHHUr32
    536872081U,	// MPYHHUv4i32
    536872089U,	// MPYHHr32
    536872089U,	// MPYHHv8i16
    536872096U,	// MPYHr32
    536872096U,	// MPYHv4i32
    537003174U,	// MPYIr16
    537003174U,	// MPYIvec
    536872108U,	// MPYSr16
    536872108U,	// MPYSv4i32
    537003186U,	// MPYUIr16
    537003186U,	// MPYUIvec
    536872121U,	// MPYUr16
    536872121U,	// MPYUr32
    536872121U,	// MPYUv4i32
    536872127U,	// MPYr16
    536872127U,	// MPYv8i16
    536872132U,	// NANDr128
    536872132U,	// NANDr16
    536872132U,	// NANDr32
    536872132U,	// NANDr64
    536872132U,	// NANDr8
    536872132U,	// NANDv16i8
    536872132U,	// NANDv2i64
    536872132U,	// NANDv4i32
    536872132U,	// NANDv8i16
    536872138U,	// NORr128
    536872138U,	// NORr16
    536872138U,	// NORr32
    536872138U,	// NORr64
    536872138U,	// NORr8
    536872138U,	// NORv16i8
    536872138U,	// NORv2i64
    536872138U,	// NORv4i32
    536872138U,	// NORv8i16
    537134287U,	// ORBIr8
    537134287U,	// ORBIv16i8
    536872149U,	// ORCr128
    536872149U,	// ORCr16
    536872149U,	// ORCr32
    536872149U,	// ORCr64
    536872149U,	// ORCr8
    536872149U,	// ORCv16i8
    536872149U,	// ORCv2i64
    536872149U,	// ORCv4i32
    536872149U,	// ORCv8i16
    537003226U,	// ORHIi8i16
    537134298U,	// ORHIr16
    537134298U,	// ORHIv8i16
    537003232U,	// ORIi16i32
    537003232U,	// ORIi8i32
    537003232U,	// ORIr32
    537134304U,	// ORIv4i32
    536872165U,	// ORXv4i32
    536872170U,	// ORf32
    536872170U,	// ORf64
    536872170U,	// ORr128
    536872170U,	// ORr16
    536872170U,	// ORr32
    536872170U,	// ORr64
    536872170U,	// ORr8
    536872170U,	// ORv16i8
    536872170U,	// ORv2f64
    536872170U,	// ORv2i64
    536872170U,	// ORv4f32
    536872170U,	// ORv4i32
    536872170U,	// ORv8i16
    1262U,	// RET
    537396469U,	// ROTHIr16
    537396469U,	// ROTHIr16_r32
    537396469U,	// ROTHIv8i16
    537527548U,	// ROTHMIr16
    537527548U,	// ROTHMIv8i16
    536872196U,	// ROTHMr16
    536872196U,	// ROTHMv8i16
    536872203U,	// ROTHr16
    536872203U,	// ROTHr16_r32
    536872203U,	// ROTHv8i16
    537396497U,	// ROTIr32
    537396497U,	// ROTIr32_i16
    537396497U,	// ROTIr32_i8
    537396497U,	// ROTIv4i32
    537396497U,	// ROTIv4i32_i16
    537396497U,	// ROTIv4i32_i8
    537527575U,	// ROTMAHIr16
    537527575U,	// ROTMAHIv8i16
    536872224U,	// ROTMAHr16
    536872224U,	// ROTMAHv8i16
    537658664U,	// ROTMAIr32_i32
    537658664U,	// ROTMAIr64_i32
    537658664U,	// ROTMAIv2i64_i32
    537658664U,	// ROTMAIv4i32_i32
    536872240U,	// ROTMAr32
    536872240U,	// ROTMAv4i32
    537658679U,	// ROTMIr32
    537658679U,	// ROTMIv4i32
    536872254U,	// ROTMr32
    536872254U,	// ROTMv4i32
    537396548U,	// ROTQBIIr128
    537396548U,	// ROTQBIIr64
    537396548U,	// ROTQBIIv16i8
    537396548U,	// ROTQBIIv2i64
    537396548U,	// ROTQBIIv4i32
    537396548U,	// ROTQBIIv8i16
    536872269U,	// ROTQBIr128
    536872269U,	// ROTQBIr64
    536872269U,	// ROTQBIv16i8
    536872269U,	// ROTQBIv2i64
    536872269U,	// ROTQBIv4i32
    536872269U,	// ROTQBIv8i16
    536872277U,	// ROTQBYBIv16i8_r32
    536872277U,	// ROTQBYBIv2i64_r32
    536872277U,	// ROTQBYBIv4i32_r32
    536872277U,	// ROTQBYBIv8i16_r32
    537396575U,	// ROTQBYIi128
    537396575U,	// ROTQBYIv16i8
    537396575U,	// ROTQBYIv2i64
    537396575U,	// ROTQBYIv4f32
    537396575U,	// ROTQBYIv4i32
    537396575U,	// ROTQBYIv8i16
    537396575U,	// ROTQBYIvfi64
    536872296U,	// ROTQBYi128
    536872296U,	// ROTQBYv16i8
    536872296U,	// ROTQBYv2f64
    536872296U,	// ROTQBYv2i64
    536872296U,	// ROTQBYv4f32
    536872296U,	// ROTQBYv4i32
    536872296U,	// ROTQBYv8i16
    537658736U,	// ROTQMBIIr128
    537658736U,	// ROTQMBIIr64
    537658736U,	// ROTQMBIIv16i8
    537658736U,	// ROTQMBIIv2i64
    537658736U,	// ROTQMBIIv4i32
    537658736U,	// ROTQMBIIv8i16
    536872314U,	// ROTQMBIr128
    536872314U,	// ROTQMBIr64
    536872314U,	// ROTQMBIv16i8
    536872314U,	// ROTQMBIv2i64
    536872314U,	// ROTQMBIv4i32
    536872314U,	// ROTQMBIv8i16
    536872323U,	// ROTQMBYBIr128
    536872323U,	// ROTQMBYBIv16i8
    536872323U,	// ROTQMBYBIv2i64
    536872323U,	// ROTQMBYBIv4i32
    536872323U,	// ROTQMBYBIv8i16
    537658766U,	// ROTQMBYIr128
    537658766U,	// ROTQMBYIr128_zext_r16
    537658766U,	// ROTQMBYIr128_zext_r32
    537658766U,	// ROTQMBYIr128_zext_r64
    537658766U,	// ROTQMBYIr128_zext_r8
    537658766U,	// ROTQMBYIr64
    537658766U,	// ROTQMBYIv16i8
    537658766U,	// ROTQMBYIv2i64
    537658766U,	// ROTQMBYIv4i32
    537658766U,	// ROTQMBYIv8i16
    536872344U,	// ROTQMBYr128
    536872344U,	// ROTQMBYr64
    536872344U,	// ROTQMBYv16i8
    536872344U,	// ROTQMBYv2i64
    536872344U,	// ROTQMBYv4i32
    536872344U,	// ROTQMBYv8i16
    536872353U,	// ROTr32
    536872353U,	// ROTr32_r16_anyext
    536872353U,	// ROTr32_r8_anyext
    536872353U,	// ROTv4i32
    536937894U,	// SELBf32_cond
    536937894U,	// SELBf64_cond
    536937894U,	// SELBr128
    536937894U,	// SELBr16
    536937894U,	// SELBr16_cond
    536937894U,	// SELBr32
    536937894U,	// SELBr32_cond
    536937894U,	// SELBr64
    536937894U,	// SELBr64_cond
    536937894U,	// SELBr8
    536937894U,	// SELBr8_cond
    536937894U,	// SELBv16i8
    536937894U,	// SELBv16i8_cond
    536937894U,	// SELBv16i8_vcond
    536937894U,	// SELBv2i64
    536937894U,	// SELBv2i64_cond
    536937894U,	// SELBv2i64_vcond
    536937894U,	// SELBv4f32_cond
    536937894U,	// SELBv4i32
    536937894U,	// SELBv4i32_cond
    536937894U,	// SELBv4i32_vcond
    536937894U,	// SELBv8i16
    536937894U,	// SELBv8i16_cond
    536937894U,	// SELBv8i16_vcond
    537003436U,	// SFHIr16
    537003436U,	// SFHIvec
    536872370U,	// SFHr16
    536872370U,	// SFHvec
    537003447U,	// SFIr32
    537003447U,	// SFIvec
    536872380U,	// SFXr32
    536872380U,	// SFXr64
    536872380U,	// SFXv2i64
    536872380U,	// SFXv4i32
    536872385U,	// SFr32
    536872385U,	// SFvec
    537396677U,	// SHLHIr16
    537396677U,	// SHLHIv8i16
    536872396U,	// SHLHr16
    536872396U,	// SHLHr16_r32
    536872396U,	// SHLHv8i16
    537396690U,	// SHLIr32
    537396690U,	// SHLIv4i32
    537396696U,	// SHLQBIIv16i8
    537396696U,	// SHLQBIIv2f64
    537396696U,	// SHLQBIIv2i64
    537396696U,	// SHLQBIIv4f32
    537396696U,	// SHLQBIIv4i32
    537396696U,	// SHLQBIIv8i16
    536872417U,	// SHLQBIr128
    536872417U,	// SHLQBIv16i8
    536872417U,	// SHLQBIv2f64
    536872417U,	// SHLQBIv2i64
    536872417U,	// SHLQBIv4f32
    536872417U,	// SHLQBIv4i32
    536872417U,	// SHLQBIv8i16
    536872425U,	// SHLQBYBIr128
    536872425U,	// SHLQBYBIv16i8
    536872425U,	// SHLQBYBIv2f64
    536872425U,	// SHLQBYBIv2i64
    536872425U,	// SHLQBYBIv4f32
    536872425U,	// SHLQBYBIv4i32
    536872425U,	// SHLQBYBIv8i16
    537396723U,	// SHLQBYIr128
    537396723U,	// SHLQBYIv16i8
    537396723U,	// SHLQBYIv2f64
    537396723U,	// SHLQBYIv2i64
    537396723U,	// SHLQBYIv4f32
    537396723U,	// SHLQBYIv4i32
    537396723U,	// SHLQBYIv8i16
    536872444U,	// SHLQBYr128
    536872444U,	// SHLQBYv16i8
    536872444U,	// SHLQBYv2f64
    536872444U,	// SHLQBYv2i64
    536872444U,	// SHLQBYv4f32
    536872444U,	// SHLQBYv4i32
    536872444U,	// SHLQBYv8i16
    536872452U,	// SHLr32
    536872452U,	// SHLv4i32
    536937993U,	// SHUFBgprc
    536937993U,	// SHUFBv16i8
    536937993U,	// SHUFBv16i8_m32
    536937993U,	// SHUFBv2f64
    536937993U,	// SHUFBv2f64_m32
    536937993U,	// SHUFBv2i64
    536937993U,	// SHUFBv2i64_m32
    536937993U,	// SHUFBv4f32
    536937993U,	// SHUFBv4f32_m32
    536937993U,	// SHUFBv4i32
    536937993U,	// SHUFBv4i32_m32
    536937993U,	// SHUFBv8i16
    536937993U,	// SHUFBv8i16_m32
    595592720U,	// STQAf32
    595592720U,	// STQAf64
    595592720U,	// STQAr128
    595592720U,	// STQAr16
    595592720U,	// STQAr32
    595592720U,	// STQAr64
    595592720U,	// STQAr8
    595592720U,	// STQAv16i8
    595592720U,	// STQAv2f64
    595592720U,	// STQAv2i64
    595592720U,	// STQAv4f32
    595592720U,	// STQAv4i32
    595592720U,	// STQAv8i16
    599787030U,	// STQDf32
    599787030U,	// STQDf64
    599787030U,	// STQDr128
    599787030U,	// STQDr16
    599787030U,	// STQDr32
    599787030U,	// STQDr64
    599787030U,	// STQDr8
    599787030U,	// STQDv16i8
    599787030U,	// STQDv2f64
    599787030U,	// STQDv2i64
    599787030U,	// STQDv4f32
    599787030U,	// STQDv4i32
    599787030U,	// STQDv8i16
    545261084U,	// STQXf32
    545261084U,	// STQXf64
    545261084U,	// STQXr128
    545261084U,	// STQXr16
    545261084U,	// STQXr32
    545261084U,	// STQXr64
    545261084U,	// STQXr8
    545261084U,	// STQXv16i8
    545261084U,	// STQXv2f64
    545261084U,	// STQXv2i64
    545261084U,	// STQXv4f32
    545261084U,	// STQXv4i32
    545261084U,	// STQXv8i16
    536872482U,	// SUMB
    537134632U,	// XORBIr8
    537134632U,	// XORBIv16i8
    537003567U,	// XORHIr16
    537134639U,	// XORHIv8i16
    537003574U,	// XORIr32
    537003574U,	// XORIv4i32
    536872508U,	// XORfneg32
    536872508U,	// XORfneg64
    536872508U,	// XORfnegvec
    536872508U,	// XORr128
    536872508U,	// XORr16
    536872508U,	// XORr32
    536872508U,	// XORr64
    536872508U,	// XORr8
    536872508U,	// XORv16i8
    536872508U,	// XORv2i64
    536872508U,	// XORv4i32
    536872508U,	// XORv8i16
    538969665U,	// XSBHr16
    538969665U,	// XSBHr32
    538969665U,	// XSBHr64
    538969665U,	// XSBHr8
    538969665U,	// XSBHv16i8
    538969671U,	// XSHWr16
    538969671U,	// XSHWr32
    538969671U,	// XSHWr64
    538969671U,	// XSHWv4i32
    538969677U,	// XSWDr64
    538969677U,	// XSWDr64_inreg
    538969677U,	// XSWDv2i64
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000BUNDLE\000absdb\t\000addx\t\000\000ahi\t\000ah\t\000ai\t\000"
    "andbi\t\000andc\t\000andhi\t\000andi\t\000and\t\000avgb\t\000a\t\000bgx"
    "\t\000bg\t\000bi\t\000bisl\t$lr, \000bisled\t$lr, \000br\t\000bra\t\000"
    "brasl\t$lr, \000brhnz\t\000brhz\t\000brnz\t\000brsl\t$lr, \000brz\t\000"
    "cbd\t\000cbx\t\000cdd\t\000cdx\t\000ceqbi\t\000ceqb\t\000ceqhi\t\000ceq"
    "h\t\000ceqi\t\000ceq\t\000cflts\t\000cfltu\t\000cgtbi\t\000cgtb\t\000cg"
    "thi\t\000cgth\t\000cgti\t\000cgt\t\000cg\t\000chd\t\000chx\t\000clgtbi\t"
    "\000clgtb\t\000clgthi\t\000clgth\t\000clgti\t\000clgt\t\000clz\t\000cnt"
    "b\t\000csflt\t\000cuflt\t\000cwd\t\000cwx\t\000a \000addx \000ah \000ah"
    "i \000ai \000and\t \000andbi\t \000andc\t \000andhi\t \000andi\t \000bg"
    " \000bgx \000ceq\t \000ceqb\t \000ceqbi\t \000ceqh\t \000ceqhi\t \000ce"
    "qi\t \000cg \000cgt\t \000cgtb\t \000cgtbi\t \000cgth\t \000cgthi\t \000"
    "cgti\t \000cgx \000clgt\t \000clgtb\t \000clgtbi\t \000clgth\t \000clgt"
    "hi\t \000clgti\t \000dfa\t \000dfm\t \000dfma\t \000dfms\t \000dfnma\t "
    "\000dfnms\t \000dfs\t \000fa\t \000fceq\t \000fcgt\t \000fcmeq\t \000fc"
    "mgt\t \000fm\t \000fma\t \000fms\t \000fnms\t \000fs\t \000mpy \000mpya"
    " \000mpyh \000mpyhh \000mpyhha \000mpyhhau \000mpyhhu \000mpyi \000mpys"
    " \000mpyu \000mpyui \000nand\t \000nor\t \000or\t \000orbi\t \000addc\t"
    " \000orhi\t \000ori\t \000sf \000sfh \000sfhi \000sfi \000sfx \000xor\t"
    " \000xorbi\t \000xorhi\t \000xori\t \000dfnms\t\000nop\000eqv\t\000fa\t"
    "\000dfa\t\000fceq\t\000fcgt\t\000fcmeq\t\000fcmgt\t\000fesd\t\000fi\t\000"
    "fma\t\000dfma\t\000fms\t\000dfms\t\000fm\t\000dfm\t\000dfnma\t\000fnms\t"
    "\000frds\t\000frest\t\000fscrrd\t\000fscrwr\t\000fsm\t\000fsmbi\t\000fs"
    "mb\t\000fsmh\t\000fs\t\000dfs\t\000gbb\t\000gbh\t\000gb\t\000hbra\t\000"
    "heqi\t\000heq\t\000hgti\t\000hgt\t\000hlgti\t\000hlgt\t\000ila\t\000ilh"
    "u\t\000ilh\t\000il\t\000iohl\t\000lnop\000lqa\t\000lqd\t\000lqx\t\000lr"
    "\t\000mpya\t\000mpyhhau\t\000mpyhha\t\000mpyhhu\t\000mpyhh\t\000mpyh\t\000"
    "mpyi\t\000mpys\t\000mpyui\t\000mpyu\t\000mpy\t\000nand\t\000nor\t\000or"
    "bi\t\000orc\t\000orhi\t\000ori\t\000orx\t\000or\t\000bi\t$lr\000rothi\t"
    "\000rothmi\t\000rothm\t\000roth\t\000roti\t\000rotmahi\t\000rotmah\t\000"
    "rotmai\t\000rotma\t\000rotmi\t\000rotm\t\000rotqbii\t\000rotqbi\t\000ro"
    "tqbybi\t\000rotqbyi\t\000rotqby\t\000rotqmbii\t\000rotqmbi\t\000rotqmby"
    "bi\t\000rotqmbyi\t\000rotqmby\t\000rot\t\000selb\t\000sfhi\t\000sfh\t\000"
    "sfi\t\000sfx\t\000sf\t\000shlhi\t\000shlh\t\000shli\t\000shlqbii\t\000s"
    "hlqbi\t\000shlqbybi\t\000shlqbyi\t\000shlqby\t\000shl\t\000shufb\t\000s"
    "tqa\t\000stqd\t\000stqx\t\000sumb\t\000xorbi\t\000xorhi\t\000xori\t\000"
    "xor\t\000xsbh\t\000xshw\t\000xswd\t\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, ENOP, LNOP, RET
    return;
    break;
  case 1:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    PrintSpecial(MI, O, "comment"); 
    break;
  case 3:
    // BISLED_00, BISLED_0D, BISLED_E0, BISLED_ED, BRASL
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // BR, BRA, BRSL
    printPCRelativeOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FSCRWf32
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // HBRA, HBR_LABEL
    printHBROperand(MI, 0, O); 
    break;
  }


  // Fragment 1 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP"; 
    return;
    break;
  case 3:
    // BI, BISL, FSCRRf32
    return;
    break;
  case 4:
    // BRHNZr16, BRHNZv8i16, BRHZr16, BRHZv8i16, BRNZr32, BRNZv4i32, BRZr32, ...
    O << ','; 
    printPCRelativeOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // HBR_LABEL
    O << ":\t"; 
    PrintSpecial(MI, O, "comment"); 
    O << "branch hint target"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // CBD, CDD, CDDf64, CHD, CWD, CWDf32
    printShufAddr(MI, 1, O); 
    return;
    break;
  case 2:
    // CBX, CDX, CDXf64, CHX, CWX, CWXf32, LQXf32, LQXf64, LQXr128, LQXr16, L...
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi, IOHLf32, IOHLr32
    printOperand(MI, 2, O); 
    break;
  case 4:
    // FSMBIv16i8, FSMBIv2i64, FSMBIv4i32, FSMBIv8i16, ILHUf32, ILHUr32, ILHU...
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // HBRA
    printPCRelativeOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // HEQIr32, HGTIr32, HLGTIr32
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // ILAf32, ILAf64, ILAr32, ILAr64, ILAv2i64, ILAv4i32
    printU18ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // ILAhi, ILHUhi
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 9:
    // ILAlo
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 10:
    // ILAlsa
    printSymbolLSA(MI, 1, O); 
    return;
    break;
  case 11:
    // ILHr16, ILHr8, ILHv8i16, ILf32, ILf64, ILr32, ILr64, ILv2i64, ILv4i32
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // IOHLlo
    printSymbolLo(MI, 2, O); 
    return;
    break;
  case 13:
    // IOHLv2i64, IOHLv4i32
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // LQAf32, LQAf64, LQAr128, LQAr16, LQAr32, LQAr64, LQAr8, LQAv16i8, LQAv...
    printAddr256K(MI, 1, O); 
    return;
    break;
  case 15:
    // LQDf32, LQDf64, LQDr128, LQDr16, LQDr32, LQDr64, LQDr8, LQDv16i8, LQDv...
    printDFormAddr(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // CFSif32, CFSiv4f32, CFUif32, CFUiv4f32, CSiFf32, CSiFv4f32, CUiFf32, C...
    O << ", 0"; 
    return;
    break;
  case 2:
    // CLZr32, CLZv4i32, CNTBv16i8, CNTBv4i32, CNTBv8i16, FESDf32, FESDvec, F...
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // AHIr16, AHIvec, AIf32, AIr32, AIv4f32, AIv4i32, ANDHIv8i16, ANDIi16i32...
    printS10ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDBIr8, ANDBIv16i8, ANDHIi8i16, ANDHIr16, CellSDKandbi, CellSDKceqbi,...
    printU10ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // ROTHIr16, ROTHIr16_r32, ROTHIv8i16, ROTIr32, ROTIr32_i16, ROTIr32_i8, ...
    printU7ImmOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // ROTHMIr16, ROTHMIv8i16, ROTMAHIr16, ROTMAHIv8i16
    printROTHNeg7Imm(MI, 2, O); 
    return;
    break;
  case 6:
    // ROTMAIr32_i32, ROTMAIr64_i32, ROTMAIv2i64_i32, ROTMAIv4i32_i32, ROTMIr...
    printROTNeg7Imm(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // CellSDKfma, CellSDKfms, CellSDKfnms, CellSDKmpya, FMAf32, FMAv4f32, FM...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SPUAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 129 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 4, 8, 11, 14, 17, 20, 23, 26, 29, 32, 36, 40, 44,
    48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100,
    104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156,
    160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212,
    216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268,
    272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324,
    328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380,
    384, 388, 392, 397, 402, 407, 412, 417, 422, 427, 432, 437, 442, 447,
    452, 457, 462, 467, 472, 477, 482, 487, 492, 497, 502, 507, 512, 517,
    522, 527, 0
  };

  const char *AsmStrs =
    "$lr\000$sp\000$2\000$3\000$4\000$5\000$6\000$7\000$8\000$9\000$10\000$1"
    "1\000$12\000$13\000$14\000$15\000$16\000$17\000$18\000$19\000$20\000$21"
    "\000$22\000$23\000$24\000$25\000$26\000$27\000$28\000$29\000$30\000$31\000"
    "$32\000$33\000$34\000$35\000$36\000$37\000$38\000$39\000$40\000$41\000$"
    "42\000$43\000$44\000$45\000$46\000$47\000$48\000$49\000$50\000$51\000$5"
    "2\000$53\000$54\000$55\000$56\000$57\000$58\000$59\000$60\000$61\000$62"
    "\000$63\000$64\000$65\000$66\000$67\000$68\000$69\000$70\000$71\000$72\000"
    "$73\000$74\000$75\000$76\000$77\000$78\000$79\000$80\000$81\000$82\000$"
    "83\000$84\000$85\000$86\000$87\000$88\000$89\000$90\000$91\000$92\000$9"
    "3\000$94\000$95\000$96\000$97\000$98\000$99\000$100\000$101\000$102\000"
    "$103\000$104\000$105\000$106\000$107\000$108\000$109\000$110\000$111\000"
    "$112\000$113\000$114\000$115\000$116\000$117\000$118\000$119\000$120\000"
    "$121\000$122\000$123\000$124\000$125\000$126\000$127\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *SPUAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 755 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 158, 164, 172, 180, 190, 200, 217, 232, 239, 246, 252, 260, 266, 
    272, 280, 288, 296, 307, 316, 324, 332, 340, 347, 357, 372, 382, 392, 
    402, 413, 422, 433, 444, 454, 462, 472, 482, 492, 503, 513, 521, 528, 
    535, 542, 548, 557, 566, 575, 584, 589, 594, 601, 608, 615, 621, 627, 
    635, 643, 646, 651, 661, 671, 681, 691, 694, 698, 704, 713, 724, 732, 
    742, 750, 760, 765, 772, 781, 785, 789, 793, 800, 804, 811, 819, 830, 
    837, 847, 856, 867, 875, 885, 893, 903, 910, 919, 927, 937, 945, 955, 
    963, 974, 981, 991, 1000, 1011, 1019, 1029, 1037, 1045, 1055, 1065, 1072, 1081, 
    1087, 1093, 1101, 1109, 1113, 1117, 1126, 1138, 1146, 1157, 1167, 1179, 1188, 1199, 
    1208, 1219, 1227, 1237, 1244, 1253, 1263, 1273, 1283, 1291, 1301, 1309, 1319, 1323, 
    1330, 1334, 1341, 1350, 1362, 1372, 1383, 1393, 1404, 1417, 1429, 1442, 1454, 1464, 
    1475, 1486, 1498, 1511, 1523, 1536, 1548, 1558, 1569, 1581, 1594, 1606, 1619, 1631, 
    1642, 1654, 1667, 1681, 1694, 1708, 1721, 1732, 1743, 1755, 1767, 1780, 1793, 1804, 
    1814, 1826, 1838, 1851, 1864, 1874, 1885, 1896, 1908, 1918, 1929, 1941, 1953, 1966, 
    1980, 1995, 2009, 2021, 2033, 2045, 2058, 2070, 2081, 2091, 2103, 2114, 2126, 2137, 
    2147, 2158, 2170, 2181, 2192, 2203, 2216, 2229, 2241, 2250, 2261, 2266, 2274, 2284, 
    2294, 2304, 2311, 2320, 2329, 2338, 2345, 2354, 2363, 2372, 2379, 2388, 2397, 2406, 
    2412, 2420, 2428, 2436, 2445, 2456, 2467, 2478, 2487, 2498, 2509, 2520, 2529, 2540, 
    2551, 2562, 2571, 2582, 2593, 2604, 2610, 2616, 2624, 2632, 2640, 2648, 2657, 2666, 
    2674, 2682, 2688, 2696, 2703, 2710, 2719, 2728, 2735, 2742, 2751, 2760, 2766, 2772, 
    2780, 2788, 2796, 2806, 2814, 2824, 2832, 2841, 2852, 2861, 2870, 2879, 2888, 2899, 
    2910, 2921, 2932, 2942, 2956, 2966, 2980, 2987, 2994, 3003, 3009, 3015, 3023, 3031, 
    3040, 3053, 3066, 3075, 3088, 3101, 3109, 3121, 3133, 3138, 3148, 3156, 3163, 3171, 
    3178, 3187, 3195, 3202, 3209, 3215, 3221, 3228, 3235, 3242, 3251, 3260, 3268, 3275, 
    3283, 3291, 3301, 3311, 3318, 3324, 3333, 3339, 3345, 3351, 3357, 3365, 3373, 3381, 
    3388, 3396, 3406, 3416, 3421, 3428, 3435, 3443, 3450, 3457, 3464, 3470, 3479, 3488, 
    3497, 3506, 3515, 3524, 3531, 3538, 3546, 3553, 3560, 3567, 3573, 3582, 3591, 3600, 
    3609, 3618, 3627, 3634, 3641, 3649, 3656, 3663, 3670, 3676, 3685, 3694, 3703, 3712, 
    3721, 3730, 3736, 3742, 3749, 3755, 3761, 3767, 3772, 3780, 3788, 3796, 3804, 3812, 
    3820, 3828, 3841, 3859, 3869, 3880, 3891, 3901, 3911, 3921, 3933, 3942, 3953, 3961, 
    3971, 3979, 3987, 3995, 4005, 4014, 4023, 4031, 4039, 4049, 4056, 4065, 4074, 4082, 
    4090, 4098, 4105, 4115, 4125, 4135, 4145, 4153, 4160, 4167, 4174, 4180, 4189, 4198, 
    4207, 4216, 4223, 4233, 4241, 4248, 4255, 4262, 4268, 4277, 4286, 4295, 4304, 4314, 
    4322, 4332, 4342, 4351, 4358, 4367, 4376, 4382, 4388, 4395, 4401, 4407, 4413, 4418, 
    4426, 4434, 4442, 4450, 4458, 4466, 4470, 4479, 4492, 4503, 4513, 4525, 4534, 4545, 
    4553, 4565, 4575, 4583, 4595, 4606, 4616, 4630, 4643, 4654, 4667, 4677, 4689, 4703, 
    4717, 4733, 4749, 4758, 4769, 4778, 4789, 4797, 4807, 4819, 4830, 4843, 4856, 4869, 
    4882, 4893, 4903, 4915, 4927, 4939, 4951, 4969, 4987, 5005, 5023, 5035, 5048, 5061, 
    5074, 5087, 5100, 5113, 5124, 5136, 5148, 5160, 5172, 5184, 5196, 5209, 5221, 5235, 
    5249, 5263, 5277, 5289, 5300, 5313, 5326, 5339, 5352, 5366, 5381, 5396, 5411, 5426, 
    5439, 5461, 5483, 5505, 5526, 5538, 5552, 5566, 5580, 5594, 5606, 5617, 5630, 5643, 
    5656, 5669, 5676, 5694, 5711, 5720, 5733, 5746, 5755, 5763, 5776, 5784, 5797, 5805, 
    5818, 5825, 5837, 5847, 5862, 5878, 5888, 5903, 5919, 5934, 5944, 5959, 5975, 5985, 
    6000, 6016, 6024, 6032, 6039, 6046, 6053, 6060, 6067, 6074, 6083, 6092, 6098, 6104, 
    6113, 6124, 6132, 6144, 6154, 6162, 6172, 6185, 6198, 6211, 6224, 6237, 6250, 6261, 
    6273, 6285, 6297, 6309, 6321, 6333, 6346, 6360, 6374, 6388, 6402, 6416, 6430, 6442, 
    6455, 6468, 6481, 6494, 6507, 6520, 6531, 6543, 6555, 6567, 6579, 6591, 6603, 6610, 
    6619, 6629, 6640, 6655, 6666, 6681, 6692, 6707, 6718, 6733, 6744, 6759, 6770, 6785, 
    6793, 6801, 6810, 6818, 6826, 6834, 6841, 6851, 6861, 6871, 6881, 6891, 6901, 6909, 
    6917, 6926, 6934, 6942, 6950, 6957, 6967, 6977, 6987, 6997, 7007, 7017, 7025, 7033, 
    7042, 7050, 7058, 7066, 7073, 7083, 7093, 7103, 7113, 7123, 7133, 7138, 7146, 7157, 
    7166, 7177, 7185, 7195, 7205, 7215, 7226, 7234, 7241, 7248, 7255, 7261, 7270, 7279, 
    7288, 7297, 7305, 7313, 7321, 7328, 7338, 7346, 7354, 7362, 7372, 7380, 7394, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000BUNDLE\000ABSDB\000A"
    "DDXr32\000ADDXr64\000ADDXv2i64\000ADDXv4i32\000ADJCALLSTACKDOWN\000ADJC"
    "ALLSTACKUP\000AHIr16\000AHIvec\000AHr16\000AHv8i16\000AIf32\000AIr32\000"
    "AIv4f32\000AIv4i32\000ANDBIr8\000ANDBIv16i8\000ANDCr128\000ANDCr16\000A"
    "NDCr32\000ANDCr64\000ANDCr8\000ANDCv16i8\000ANDCv16i8_conv\000ANDCv2i64"
    "\000ANDCv4i32\000ANDCv8i16\000ANDHIi8i16\000ANDHIr16\000ANDHIv8i16\000A"
    "NDIi16i32\000ANDIi8i32\000ANDIr32\000ANDIv4i32\000ANDfabs32\000ANDfabs6"
    "4\000ANDfabsvec\000ANDi16i32\000ANDr128\000ANDr16\000ANDr32\000ANDr64\000"
    "ANDr8\000ANDv16i8\000ANDv2i64\000ANDv4i32\000ANDv8i16\000AVGB\000Ar32\000"
    "Av16i8\000Av4i32\000BGXvec\000BGr32\000BGr64\000BGv2i64\000BGv4i32\000B"
    "I\000BISL\000BISLED_00\000BISLED_0D\000BISLED_E0\000BISLED_ED\000BR\000"
    "BRA\000BRASL\000BRHNZr16\000BRHNZv8i16\000BRHZr16\000BRHZv8i16\000BRNZr"
    "32\000BRNZv4i32\000BRSL\000BRZr32\000BRZv4i32\000CBD\000CBX\000CDD\000C"
    "DDf64\000CDX\000CDXf64\000CEQBIr8\000CEQBIv16i8\000CEQBr8\000CEQBv16i8\000"
    "CEQHIr16\000CEQHIv8i16\000CEQHr16\000CEQHv8i16\000CEQIr32\000CEQIv4i32\000"
    "CEQr32\000CEQv4i32\000CFSif32\000CFSiv4f32\000CFUif32\000CFUiv4f32\000C"
    "GTBIr8\000CGTBIv16i8\000CGTBr8\000CGTBv16i8\000CGTHIr16\000CGTHIv8i16\000"
    "CGTHr16\000CGTHv8i16\000CGTIf32\000CGTIr32\000CGTIv4f32\000CGTIv4i32\000"
    "CGTr32\000CGTv4i32\000CGr32\000CGr64\000CGv2i64\000CGv4i32\000CHD\000CH"
    "X\000CLGTBIr8\000CLGTBIv16i8\000CLGTBr8\000CLGTBv16i8\000CLGTHIr16\000C"
    "LGTHIv8i16\000CLGTHr16\000CLGTHv8i16\000CLGTIr32\000CLGTIv4i32\000CLGTr"
    "32\000CLGTv4i32\000CLZr32\000CLZv4i32\000CNTBv16i8\000CNTBv4i32\000CNTB"
    "v8i16\000CSiFf32\000CSiFv4f32\000CUiFf32\000CUiFv4f32\000CWD\000CWDf32\000"
    "CWX\000CWXf32\000CellSDKa\000CellSDKaddx\000CellSDKah\000CellSDKahi\000"
    "CellSDKai\000CellSDKand\000CellSDKandbi\000CellSDKandc\000CellSDKandhi\000"
    "CellSDKandi\000CellSDKbg\000CellSDKbgx\000CellSDKceq\000CellSDKceqb\000"
    "CellSDKceqbi\000CellSDKceqh\000CellSDKceqhi\000CellSDKceqi\000CellSDKcg"
    "\000CellSDKcgt\000CellSDKcgtb\000CellSDKcgtbi\000CellSDKcgth\000CellSDK"
    "cgthi\000CellSDKcgti\000CellSDKcgx\000CellSDKclgt\000CellSDKclgtb\000Ce"
    "llSDKclgtbi\000CellSDKclgth\000CellSDKclgthi\000CellSDKclgti\000CellSDK"
    "dfa\000CellSDKdfm\000CellSDKdfma\000CellSDKdfms\000CellSDKdfnma\000Cell"
    "SDKdfnms\000CellSDKdfs\000CellSDKfa\000CellSDKfceq\000CellSDKfcgt\000Ce"
    "llSDKfcmeq\000CellSDKfcmgt\000CellSDKfm\000CellSDKfma\000CellSDKfms\000"
    "CellSDKfnms\000CellSDKfs\000CellSDKmpy\000CellSDKmpya\000CellSDKmpyh\000"
    "CellSDKmpyhh\000CellSDKmpyhha\000CellSDKmpyhhau\000CellSDKmpyhhu\000Cel"
    "lSDKmpyi\000CellSDKmpys\000CellSDKmpyu\000CellSDKmpyui\000CellSDKnand\000"
    "CellSDKnor\000CellSDKor\000CellSDKorbi\000CellSDKorc\000CellSDKorhi\000"
    "CellSDKori\000CellSDKsf\000CellSDKsfh\000CellSDKsfhi\000CellSDKsfi\000C"
    "ellSDKsfx\000CellSDKxor\000CellSDKxorbi\000CellSDKxorhi\000CellSDKxori\000"
    "DFNMSf64\000DFNMSv2f64\000ENOP\000EQVr128\000EQVr128_1\000EQVr128_2\000"
    "EQVr128_3\000EQVr16\000EQVr16_1\000EQVr16_2\000EQVr16_3\000EQVr32\000EQ"
    "Vr32_1\000EQVr32_2\000EQVr32_3\000EQVr64\000EQVr64_1\000EQVr64_2\000EQV"
    "r64_3\000EQVr8\000EQVr8_1\000EQVr8_2\000EQVr8_3\000EQVv16i8\000EQVv16i8"
    "_1\000EQVv16i8_2\000EQVv16i8_3\000EQVv2i64\000EQVv2i64_1\000EQVv2i64_2\000"
    "EQVv2i64_3\000EQVv4i32\000EQVv4i32_1\000EQVv4i32_2\000EQVv4i32_3\000EQV"
    "v8i16\000EQVv8i16_1\000EQVv8i16_2\000EQVv8i16_3\000FAf32\000FAf64\000FA"
    "v2f64\000FAv4f32\000FCEQf32\000FCGTf32\000FCMEQf32\000FCMGTf32\000FESDf"
    "32\000FESDvec\000FIf32\000FIv4f32\000FMAf32\000FMAf64\000FMAv2f64\000FM"
    "Av4f32\000FMSf32\000FMSf64\000FMSv2f64\000FMSv4f32\000FMf32\000FMf64\000"
    "FMv2f64\000FMv4f32\000FNMAf64\000FNMAv2f64\000FNMSf32\000FNMSv4f32\000F"
    "RDSf64\000FRESTf32\000FRESTv4f32\000FSCRRf32\000FSCRWf32\000FSM64r16\000"
    "FSM64r32\000FSMBIv16i8\000FSMBIv2i64\000FSMBIv4i32\000FSMBIv8i16\000FSM"
    "Bv16i8\000FSMBv16i8_r16\000FSMHv8i16\000FSMHv8i16_r16\000FSMr16\000FSMr"
    "32\000FSMv4i32\000FSf32\000FSf64\000FSv2f64\000FSv4f32\000GBBv16i8\000G"
    "BBv16i8_r16\000GBBv16i8_r32\000GBHv8i16\000GBHv8i16_r16\000GBHv8i16_r32"
    "\000GBv4i32\000GBv4i32_r16\000GBv4i32_r32\000HBRA\000HBR_LABEL\000HEQIr"
    "32\000HEQr32\000HGTIr32\000HGTr32\000HLGTIr32\000HLGTr32\000ILAf32\000I"
    "LAf64\000ILAhi\000ILAlo\000ILAlsa\000ILAr32\000ILAr64\000ILAv2i64\000IL"
    "Av4i32\000ILHUf32\000ILHUhi\000ILHUr32\000ILHUr64\000ILHUv2i64\000ILHUv"
    "4i32\000ILHr16\000ILHr8\000ILHv8i16\000ILf32\000ILf64\000ILr32\000ILr64"
    "\000ILv2i64\000ILv4i32\000IOHLf32\000IOHLlo\000IOHLr32\000IOHLv2i64\000"
    "IOHLv4i32\000LNOP\000LQAf32\000LQAf64\000LQAr128\000LQAr16\000LQAr32\000"
    "LQAr64\000LQAr8\000LQAv16i8\000LQAv2f64\000LQAv2i64\000LQAv4f32\000LQAv"
    "4i32\000LQAv8i16\000LQDf32\000LQDf64\000LQDr128\000LQDr16\000LQDr32\000"
    "LQDr64\000LQDr8\000LQDv16i8\000LQDv2f64\000LQDv2i64\000LQDv4f32\000LQDv"
    "4i32\000LQDv8i16\000LQXf32\000LQXf64\000LQXr128\000LQXr16\000LQXr32\000"
    "LQXr64\000LQXr8\000LQXv16i8\000LQXv2f64\000LQXv2i64\000LQXv4f32\000LQXv"
    "4i32\000LQXv8i16\000LRf32\000LRf64\000LRr128\000LRr16\000LRr32\000LRr64"
    "\000LRr8\000LRv16i8\000LRv2f64\000LRv2i64\000LRv4f32\000LRv4i32\000LRv8"
    "i16\000MPYAr32\000MPYAr32_sext\000MPYAr32_sextinreg\000MPYAv4i32\000MPY"
    "HHAUr32\000MPYHHAUvec\000MPYHHAr32\000MPYHHAvec\000MPYHHUr32\000MPYHHUv"
    "4i32\000MPYHHr32\000MPYHHv8i16\000MPYHr32\000MPYHv4i32\000MPYIr16\000MP"
    "YIvec\000MPYSr16\000MPYSv4i32\000MPYUIr16\000MPYUIvec\000MPYUr16\000MPY"
    "Ur32\000MPYUv4i32\000MPYr16\000MPYv8i16\000NANDr128\000NANDr16\000NANDr"
    "32\000NANDr64\000NANDr8\000NANDv16i8\000NANDv2i64\000NANDv4i32\000NANDv"
    "8i16\000NORr128\000NORr16\000NORr32\000NORr64\000NORr8\000NORv16i8\000N"
    "ORv2i64\000NORv4i32\000NORv8i16\000ORBIr8\000ORBIv16i8\000ORCr128\000OR"
    "Cr16\000ORCr32\000ORCr64\000ORCr8\000ORCv16i8\000ORCv2i64\000ORCv4i32\000"
    "ORCv8i16\000ORHIi8i16\000ORHIr16\000ORHIv8i16\000ORIi16i32\000ORIi8i32\000"
    "ORIr32\000ORIv4i32\000ORXv4i32\000ORf32\000ORf64\000ORr128\000ORr16\000"
    "ORr32\000ORr64\000ORr8\000ORv16i8\000ORv2f64\000ORv2i64\000ORv4f32\000O"
    "Rv4i32\000ORv8i16\000RET\000ROTHIr16\000ROTHIr16_r32\000ROTHIv8i16\000R"
    "OTHMIr16\000ROTHMIv8i16\000ROTHMr16\000ROTHMv8i16\000ROTHr16\000ROTHr16"
    "_r32\000ROTHv8i16\000ROTIr32\000ROTIr32_i16\000ROTIr32_i8\000ROTIv4i32\000"
    "ROTIv4i32_i16\000ROTIv4i32_i8\000ROTMAHIr16\000ROTMAHIv8i16\000ROTMAHr1"
    "6\000ROTMAHv8i16\000ROTMAIr32_i32\000ROTMAIr64_i32\000ROTMAIv2i64_i32\000"
    "ROTMAIv4i32_i32\000ROTMAr32\000ROTMAv4i32\000ROTMIr32\000ROTMIv4i32\000"
    "ROTMr32\000ROTMv4i32\000ROTQBIIr128\000ROTQBIIr64\000ROTQBIIv16i8\000RO"
    "TQBIIv2i64\000ROTQBIIv4i32\000ROTQBIIv8i16\000ROTQBIr128\000ROTQBIr64\000"
    "ROTQBIv16i8\000ROTQBIv2i64\000ROTQBIv4i32\000ROTQBIv8i16\000ROTQBYBIv16"
    "i8_r32\000ROTQBYBIv2i64_r32\000ROTQBYBIv4i32_r32\000ROTQBYBIv8i16_r32\000"
    "ROTQBYIi128\000ROTQBYIv16i8\000ROTQBYIv2i64\000ROTQBYIv4f32\000ROTQBYIv"
    "4i32\000ROTQBYIv8i16\000ROTQBYIvfi64\000ROTQBYi128\000ROTQBYv16i8\000RO"
    "TQBYv2f64\000ROTQBYv2i64\000ROTQBYv4f32\000ROTQBYv4i32\000ROTQBYv8i16\000"
    "ROTQMBIIr128\000ROTQMBIIr64\000ROTQMBIIv16i8\000ROTQMBIIv2i64\000ROTQMB"
    "IIv4i32\000ROTQMBIIv8i16\000ROTQMBIr128\000ROTQMBIr64\000ROTQMBIv16i8\000"
    "ROTQMBIv2i64\000ROTQMBIv4i32\000ROTQMBIv8i16\000ROTQMBYBIr128\000ROTQMB"
    "YBIv16i8\000ROTQMBYBIv2i64\000ROTQMBYBIv4i32\000ROTQMBYBIv8i16\000ROTQM"
    "BYIr128\000ROTQMBYIr128_zext_r16\000ROTQMBYIr128_zext_r32\000ROTQMBYIr1"
    "28_zext_r64\000ROTQMBYIr128_zext_r8\000ROTQMBYIr64\000ROTQMBYIv16i8\000"
    "ROTQMBYIv2i64\000ROTQMBYIv4i32\000ROTQMBYIv8i16\000ROTQMBYr128\000ROTQM"
    "BYr64\000ROTQMBYv16i8\000ROTQMBYv2i64\000ROTQMBYv4i32\000ROTQMBYv8i16\000"
    "ROTr32\000ROTr32_r16_anyext\000ROTr32_r8_anyext\000ROTv4i32\000SELBf32_"
    "cond\000SELBf64_cond\000SELBr128\000SELBr16\000SELBr16_cond\000SELBr32\000"
    "SELBr32_cond\000SELBr64\000SELBr64_cond\000SELBr8\000SELBr8_cond\000SEL"
    "Bv16i8\000SELBv16i8_cond\000SELBv16i8_vcond\000SELBv2i64\000SELBv2i64_c"
    "ond\000SELBv2i64_vcond\000SELBv4f32_cond\000SELBv4i32\000SELBv4i32_cond"
    "\000SELBv4i32_vcond\000SELBv8i16\000SELBv8i16_cond\000SELBv8i16_vcond\000"
    "SFHIr16\000SFHIvec\000SFHr16\000SFHvec\000SFIr32\000SFIvec\000SFXr32\000"
    "SFXr64\000SFXv2i64\000SFXv4i32\000SFr32\000SFvec\000SHLHIr16\000SHLHIv8"
    "i16\000SHLHr16\000SHLHr16_r32\000SHLHv8i16\000SHLIr32\000SHLIv4i32\000S"
    "HLQBIIv16i8\000SHLQBIIv2f64\000SHLQBIIv2i64\000SHLQBIIv4f32\000SHLQBIIv"
    "4i32\000SHLQBIIv8i16\000SHLQBIr128\000SHLQBIv16i8\000SHLQBIv2f64\000SHL"
    "QBIv2i64\000SHLQBIv4f32\000SHLQBIv4i32\000SHLQBIv8i16\000SHLQBYBIr128\000"
    "SHLQBYBIv16i8\000SHLQBYBIv2f64\000SHLQBYBIv2i64\000SHLQBYBIv4f32\000SHL"
    "QBYBIv4i32\000SHLQBYBIv8i16\000SHLQBYIr128\000SHLQBYIv16i8\000SHLQBYIv2"
    "f64\000SHLQBYIv2i64\000SHLQBYIv4f32\000SHLQBYIv4i32\000SHLQBYIv8i16\000"
    "SHLQBYr128\000SHLQBYv16i8\000SHLQBYv2f64\000SHLQBYv2i64\000SHLQBYv4f32\000"
    "SHLQBYv4i32\000SHLQBYv8i16\000SHLr32\000SHLv4i32\000SHUFBgprc\000SHUFBv"
    "16i8\000SHUFBv16i8_m32\000SHUFBv2f64\000SHUFBv2f64_m32\000SHUFBv2i64\000"
    "SHUFBv2i64_m32\000SHUFBv4f32\000SHUFBv4f32_m32\000SHUFBv4i32\000SHUFBv4"
    "i32_m32\000SHUFBv8i16\000SHUFBv8i16_m32\000STQAf32\000STQAf64\000STQAr1"
    "28\000STQAr16\000STQAr32\000STQAr64\000STQAr8\000STQAv16i8\000STQAv2f64"
    "\000STQAv2i64\000STQAv4f32\000STQAv4i32\000STQAv8i16\000STQDf32\000STQD"
    "f64\000STQDr128\000STQDr16\000STQDr32\000STQDr64\000STQDr8\000STQDv16i8"
    "\000STQDv2f64\000STQDv2i64\000STQDv4f32\000STQDv4i32\000STQDv8i16\000ST"
    "QXf32\000STQXf64\000STQXr128\000STQXr16\000STQXr32\000STQXr64\000STQXr8"
    "\000STQXv16i8\000STQXv2f64\000STQXv2i64\000STQXv4f32\000STQXv4i32\000ST"
    "QXv8i16\000SUMB\000XORBIr8\000XORBIv16i8\000XORHIr16\000XORHIv8i16\000X"
    "ORIr32\000XORIv4i32\000XORfneg32\000XORfneg64\000XORfnegvec\000XORr128\000"
    "XORr16\000XORr32\000XORr64\000XORr8\000XORv16i8\000XORv2i64\000XORv4i32"
    "\000XORv8i16\000XSBHr16\000XSBHr32\000XSBHr64\000XSBHr8\000XSBHv16i8\000"
    "XSHWr16\000XSHWr32\000XSHWr64\000XSHWv4i32\000XSWDr64\000XSWDr64_inreg\000"
    "XSWDv2i64\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif
