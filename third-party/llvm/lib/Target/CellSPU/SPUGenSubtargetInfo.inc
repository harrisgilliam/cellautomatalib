//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Subtarget Enumeration Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_SUBTARGETINFO_ENUM
#undef GET_SUBTARGETINFO_ENUM
namespace llvm {
namespace SPU {
enum {
  DefaultProc =  1ULL << 0,
  LargeMemFeature =  1ULL << 1
};
}
} // End llvm namespace 
#endif // GET_SUBTARGETINFO_ENUM


#ifdef GET_SUBTARGETINFO_MC_DESC
#undef GET_SUBTARGETINFO_MC_DESC
namespace llvm {
// Sorted (by key) array of values for CPU features.
extern const llvm::SubtargetFeatureKV SPUFeatureKV[] = {
  { "large_mem", "Use large (>256) LSA memory addressing [default = false]", SPU::LargeMemFeature, 0ULL }
};

// Sorted (by key) array of values for CPU subtype.
extern const llvm::SubtargetFeatureKV SPUSubTypeKV[] = {
  { "v0", "Select the v0 processor", SPU::DefaultProc, 0ULL }
};


// Functional units for itineraries "SPUItineraries"
namespace SPUItinerariesFU {
  const unsigned ODD_UNIT = 1 << 0;
  const unsigned EVEN_UNIT = 1 << 1;
}

extern const llvm::InstrStage SPUStages[] = {
  { 0, 0, 0, llvm::InstrStage::Required }, // No itinerary
  { 6, SPUItinerariesFU::ODD_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 1
  { 4, SPUItinerariesFU::ODD_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 2
  { 1, SPUItinerariesFU::ODD_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 3
  { 1, SPUItinerariesFU::EVEN_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 4
  { 6, SPUItinerariesFU::EVEN_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 5
  { 13, SPUItinerariesFU::EVEN_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 6
  { 2, SPUItinerariesFU::EVEN_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 7
  { 4, SPUItinerariesFU::EVEN_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 8
  { 7, SPUItinerariesFU::EVEN_UNIT, -1, (llvm::InstrStage::ReservationKinds)0 }, // 9
  { 0, 0, 0, llvm::InstrStage::Required } // End itinerary
};
extern const unsigned SPUOperandCycles[] = {
  0, // No itinerary
  0 // End itinerary
};
extern const unsigned SPUForwardingPathes[] = {
  0, // No itinerary
  0 // End itinerary
};

static const llvm::InstrItinerary SPUItineraries[] = {
  { 1, 1, 2, 0, 0 }, // 0 BranchHints
  { 1, 2, 3, 0, 0 }, // 1 BranchResolv
  { 1, 8, 9, 0, 0 }, // 2 ByteOp
  { 1, 1, 2, 0, 0 }, // 3 ChanOpSPR
  { 1, 6, 7, 0, 0 }, // 4 DPrecFP
  { 1, 4, 5, 0, 0 }, // 5 ExecNOP
  { 1, 7, 8, 0, 0 }, // 6 FPInt
  { 1, 2, 3, 0, 0 }, // 7 GatherOp
  { 1, 7, 8, 0, 0 }, // 8 ImmLoad
  { 1, 9, 10, 0, 0 }, // 9 IntegerMulDiv
  { 1, 7, 8, 0, 0 }, // 10 IntegerOp
  { 1, 3, 4, 0, 0 }, // 11 LoadNOP
  { 1, 1, 2, 0, 0 }, // 12 LoadStore
  { 1, 0, 0, 0, 0 }, // 13 NoItinerary
  { 1, 2, 3, 0, 0 }, // 14 RotShiftQuad
  { 1, 8, 9, 0, 0 }, // 15 RotShiftVec
  { 1, 5, 6, 0, 0 }, // 16 SPrecFP
  { 1, 2, 3, 0, 0 }, // 17 SelectOp
  { 1, 2, 3, 0, 0 }, // 18 ShuffleOp
  { 1, ~0U, ~0U, ~0U, ~0U } // end marker
};

// Sorted (by key) array of itineraries for CPU subtype.
extern const llvm::SubtargetInfoKV SPUProcItinKV[] = {
  { "v0", (void *)&SPUItineraries }
};

static inline void InitSPUMCSubtargetInfo(MCSubtargetInfo *II, StringRef TT, StringRef CPU, StringRef FS) {
  II->InitMCSubtargetInfo(TT, CPU, FS, SPUFeatureKV, SPUSubTypeKV, SPUProcItinKV, SPUStages, SPUOperandCycles, SPUForwardingPathes, 1, 1);
}

} // End llvm namespace 
#endif // GET_SUBTARGETINFO_MC_DESC


#ifdef GET_SUBTARGETINFO_TARGET_DESC
#undef GET_SUBTARGETINFO_TARGET_DESC
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"
// ParseSubtargetFeatures - Parses features string setting specified
// subtarget options.
void llvm::SPUSubtarget::ParseSubtargetFeatures(StringRef CPU, StringRef FS) {
  DEBUG(dbgs() << "\nFeatures:" << FS);
  DEBUG(dbgs() << "\nCPU:" << CPU);
  uint64_t Bits = ReInitMCSubtargetInfo(CPU, FS);
  if ((Bits & SPU::DefaultProc) != 0 && ProcDirective < SPU::DEFAULT_PROC) ProcDirective = SPU::DEFAULT_PROC;
  if ((Bits & SPU::LargeMemFeature) != 0) UseLargeMem = true;
}
#endif // GET_SUBTARGETINFO_TARGET_DESC


#ifdef GET_SUBTARGETINFO_HEADER
#undef GET_SUBTARGETINFO_HEADER
namespace llvm {
class DFAPacketizer;
struct SPUGenSubtargetInfo : public TargetSubtargetInfo {
  explicit SPUGenSubtargetInfo(StringRef TT, StringRef CPU, StringRef FS);
public:
  DFAPacketizer *createDFAPacketizer(const InstrItineraryData *IID) const;
};
} // End llvm namespace 
#endif // GET_SUBTARGETINFO_HEADER


#ifdef GET_SUBTARGETINFO_CTOR
#undef GET_SUBTARGETINFO_CTOR
namespace llvm {
extern const llvm::SubtargetFeatureKV SPUFeatureKV[];
extern const llvm::SubtargetFeatureKV SPUSubTypeKV[];
extern const llvm::SubtargetInfoKV SPUProcItinKV[];
extern const llvm::InstrStage SPUStages[];
extern const unsigned SPUOperandCycles[];
extern const unsigned SPUForwardingPathes[];
SPUGenSubtargetInfo::SPUGenSubtargetInfo(StringRef TT, StringRef CPU, StringRef FS)
  : TargetSubtargetInfo() {
  InitMCSubtargetInfo(TT, CPU, FS, SPUFeatureKV, SPUSubTypeKV, SPUProcItinKV, SPUStages, SPUOperandCycles, SPUForwardingPathes, 1, 1);
}

} // End llvm namespace 
#endif // GET_SUBTARGETINFO_CTOR

