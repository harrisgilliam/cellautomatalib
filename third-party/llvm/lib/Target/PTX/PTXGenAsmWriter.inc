//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PTXInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// BUNDLE
    1073741842U,	// ADDri16
    1073741851U,	// ADDri32
    1073741860U,	// ADDri64
    1073741842U,	// ADDrr16
    1073741851U,	// ADDrr32
    1073741860U,	// ADDrr64
    1073741869U,	// ANDri16
    1073741878U,	// ANDri32
    1073741887U,	// ANDri64
    1073741896U,	// ANDripreds
    1073741869U,	// ANDrr16
    1073741878U,	// ANDrr32
    1073741887U,	// ANDrr64
    1073741896U,	// ANDrrpreds
    1082130514U,	// BRAd
    1082130514U,	// BRAdp
    87U,	// CALL
    2164260956U,	// CVTf32f64
    2172649564U,	// CVTf32s16
    2181038172U,	// CVTf32s32
    2189426780U,	// CVTf32s64
    2197815388U,	// CVTf32u16
    2206203996U,	// CVTf32u32
    2214592604U,	// CVTf32u64
    1074004064U,	// CVTf64f32
    2222981212U,	// CVTf64s16
    2231369820U,	// CVTf64s32
    2239758428U,	// CVTf64s64
    2248147036U,	// CVTf64u16
    2256535644U,	// CVTf64u32
    2264924252U,	// CVTf64u64
    2273312860U,	// CVTs16f32
    2281701468U,	// CVTs16f64
    2290090076U,	// CVTs32f32
    2298478684U,	// CVTs32f64
    1074004077U,	// CVTs32s16
    2306867292U,	// CVTs64f32
    2315255900U,	// CVTs64f64
    1074004090U,	// CVTs64s16
    1074004103U,	// CVTs64s32
    2323644508U,	// CVTu16f32
    2332033116U,	// CVTu16f64
    1074004116U,	// CVTu16u32
    1074004129U,	// CVTu16u64
    2340421724U,	// CVTu32f32
    2348810332U,	// CVTu32f64
    1074004142U,	// CVTu32u16
    1074004155U,	// CVTu32u64
    2357198940U,	// CVTu64f32
    2365587548U,	// CVTu64f64
    1074004168U,	// CVTu64u16
    1074004181U,	// CVTu64u32
    1073742050U,	// DIVri16
    1073742059U,	// DIVri32
    1073742068U,	// DIVri64
    1073742050U,	// DIVrr16
    1073742059U,	// DIVrr32
    1073742068U,	// DIVrr64
    253U,	// EXIT
    2375287042U,	// FADDri32
    2383675650U,	// FADDri64
    2375287042U,	// FADDrr32
    2383675650U,	// FADDrr64
    2376073478U,	// FCOSri32
    2384462086U,	// FCOSri64
    2376073478U,	// FCOSrr32
    2384462086U,	// FCOSrr64
    2375287050U,	// FDIVri32
    2383675658U,	// FDIVri64
    2375287050U,	// FDIVrr32
    2383675658U,	// FDIVrr64
    2375155982U,	// FMADrii32
    2383544590U,	// FMADrii64
    2375155982U,	// FMADrri32
    2383544590U,	// FMADrri64
    2375155982U,	// FMADrrr32
    2383544590U,	// FMADrrr64
    2375287058U,	// FMULri32
    2383675666U,	// FMULri64
    2375287058U,	// FMULrr32
    2383675666U,	// FMULrr64
    2376073494U,	// FNEGri32
    2384462102U,	// FNEGri64
    2376073494U,	// FNEGrr32
    2384462102U,	// FNEGrr64
    2376073498U,	// FSINri32
    2384462106U,	// FSINri64
    2376073498U,	// FSINrr32
    2384462106U,	// FSINrr64
    2376073502U,	// FSQRTri32
    2384462110U,	// FSQRTri64
    2376073502U,	// FSQRTrr32
    2384462110U,	// FSQRTrr64
    2375287075U,	// FSUBri32
    2383675683U,	// FSUBri64
    2375287075U,	// FSUBrr32
    2383675683U,	// FSUBrr64
    1320157479U,	// LDcf32ii32
    1320157479U,	// LDcf32ii64
    1320157479U,	// LDcf32ri32
    1320157479U,	// LDcf32ri64
    1320157479U,	// LDcf32rr32
    1320157479U,	// LDcf32rr64
    1320157493U,	// LDcf64ii32
    1320157493U,	// LDcf64ii64
    1320157493U,	// LDcf64ri32
    1320157493U,	// LDcf64ri64
    1320157493U,	// LDcf64rr32
    1320157493U,	// LDcf64rr64
    1320157507U,	// LDcu16ii32
    1320157507U,	// LDcu16ii64
    1320157507U,	// LDcu16ri32
    1320157507U,	// LDcu16ri64
    1320157507U,	// LDcu16rr32
    1320157507U,	// LDcu16rr64
    1320157521U,	// LDcu32ii32
    1320157521U,	// LDcu32ii64
    1320157521U,	// LDcu32ri32
    1320157521U,	// LDcu32ri64
    1320157521U,	// LDcu32rr32
    1320157521U,	// LDcu32rr64
    1320157535U,	// LDcu64ii32
    1320157535U,	// LDcu64ii64
    1320157535U,	// LDcu64ri32
    1320157535U,	// LDcu64ri64
    1320157535U,	// LDcu64rr32
    1320157535U,	// LDcu64rr64
    1320157549U,	// LDgf32ii32
    1320157549U,	// LDgf32ii64
    1320157549U,	// LDgf32ri32
    1320157549U,	// LDgf32ri64
    1320157549U,	// LDgf32rr32
    1320157549U,	// LDgf32rr64
    1320157564U,	// LDgf64ii32
    1320157564U,	// LDgf64ii64
    1320157564U,	// LDgf64ri32
    1320157564U,	// LDgf64ri64
    1320157564U,	// LDgf64rr32
    1320157564U,	// LDgf64rr64
    1320157579U,	// LDgu16ii32
    1320157579U,	// LDgu16ii64
    1320157579U,	// LDgu16ri32
    1320157579U,	// LDgu16ri64
    1320157579U,	// LDgu16rr32
    1320157579U,	// LDgu16rr64
    1320157594U,	// LDgu32ii32
    1320157594U,	// LDgu32ii64
    1320157594U,	// LDgu32ri32
    1320157594U,	// LDgu32ri64
    1320157594U,	// LDgu32rr32
    1320157594U,	// LDgu32rr64
    1320157609U,	// LDgu64ii32
    1320157609U,	// LDgu64ii64
    1320157609U,	// LDgu64ri32
    1320157609U,	// LDgu64ri64
    1320157609U,	// LDgu64rr32
    1320157609U,	// LDgu64rr64
    1320157624U,	// LDsf32ii32
    1320157624U,	// LDsf32ii64
    1320157624U,	// LDsf32ri32
    1320157624U,	// LDsf32ri64
    1320157624U,	// LDsf32rr32
    1320157624U,	// LDsf32rr64
    1320157639U,	// LDsf64ii32
    1320157639U,	// LDsf64ii64
    1320157639U,	// LDsf64ri32
    1320157639U,	// LDsf64ri64
    1320157639U,	// LDsf64rr32
    1320157639U,	// LDsf64rr64
    1320157654U,	// LDsu16ii32
    1320157654U,	// LDsu16ii64
    1320157654U,	// LDsu16ri32
    1320157654U,	// LDsu16ri64
    1320157654U,	// LDsu16rr32
    1320157654U,	// LDsu16rr64
    1320157669U,	// LDsu32ii32
    1320157669U,	// LDsu32ii64
    1320157669U,	// LDsu32ri32
    1320157669U,	// LDsu32ri64
    1320157669U,	// LDsu32rr32
    1320157669U,	// LDsu32rr64
    1320157684U,	// LDsu64ii32
    1320157684U,	// LDsu64ii64
    1320157684U,	// LDsu64ri32
    1320157684U,	// LDsu64ri64
    1320157684U,	// LDsu64rr32
    1320157684U,	// LDsu64rr64
    1320157699U,	// LOCALF32LDri32
    1320157699U,	// LOCALF32LDri64
    3221226001U,	// LOCALF32STri32
    3221226001U,	// LOCALF32STri64
    1320157728U,	// LOCALF64LDri32
    1320157728U,	// LOCALF64LDri64
    3221226030U,	// LOCALF64STri32
    3221226030U,	// LOCALF64STri64
    1320157757U,	// LOCALPREDLDri32
    1320157757U,	// LOCALPREDLDri64
    3221226060U,	// LOCALPREDSTri32
    3221226060U,	// LOCALPREDSTri64
    1320157788U,	// LOCALU16LDri32
    1320157788U,	// LOCALU16LDri64
    3221226090U,	// LOCALU16STri32
    3221226090U,	// LOCALU16STri64
    1320157817U,	// LOCALU32LDri32
    1320157817U,	// LOCALU32LDri64
    3221226119U,	// LOCALU32STri32
    3221226119U,	// LOCALU32STri64
    1320157846U,	// LOCALU64LDri32
    1320157846U,	// LOCALU64LDri64
    3221226148U,	// LOCALU64STri32
    3221226148U,	// LOCALU64STri64
    1074004659U,	// MOVF32ri
    1074004659U,	// MOVF32rr
    1074004668U,	// MOVF64ri
    1074004668U,	// MOVF64rr
    1074004677U,	// MOVPREDri
    1074004677U,	// MOVPREDrr
    1074004687U,	// MOVU16ri
    1074004687U,	// MOVU16rr
    1074004696U,	// MOVU32ri
    1074004696U,	// MOVU32rr
    1074004705U,	// MOVU64ri
    1074004705U,	// MOVU64rr
    1074004696U,	// MOVaddr32
    1074004705U,	// MOVaddr64
    1074004714U,	// MOVf32i32
    1074004723U,	// MOVf64i64
    1074004732U,	// MOVframe32
    1074004748U,	// MOVframe64
    1074004714U,	// MOVi32f32
    1074004723U,	// MOVi64f64
    1073742620U,	// MULri16
    1073742632U,	// MULri32
    1073742644U,	// MULri64
    1073742620U,	// MULrr16
    1073742632U,	// MULrr32
    1073742644U,	// MULrr64
    1073742656U,	// ORri16
    1073742664U,	// ORri32
    1073742672U,	// ORri64
    1073742680U,	// ORripreds
    1073742656U,	// ORrr16
    1073742664U,	// ORrr32
    1073742672U,	// ORrr64
    1073742680U,	// ORrrpreds
    1317536609U,	// PARAMF32LDpi
    1325400943U,	// PARAMF32STpi
    1317536638U,	// PARAMF64LDpi
    1325400972U,	// PARAMF64STpi
    1317536667U,	// PARAMPREDLDpi
    1325401002U,	// PARAMPREDSTpi
    1317536698U,	// PARAMU16LDpi
    1325401032U,	// PARAMU16STpi
    1317536727U,	// PARAMU32LDpi
    1325401061U,	// PARAMU32STpi
    1317536756U,	// PARAMU64LDpi
    1325401090U,	// PARAMU64STpi
    1082131473U,	// PTX_BAR_SYNC
    1333789400U,	// PTX_READ_CLOCK
    1342178017U,	// PTX_READ_CLOCK64
    1350566616U,	// PTX_READ_CTAID_W
    1358955224U,	// PTX_READ_CTAID_X
    1367343832U,	// PTX_READ_CTAID_Y
    1375732440U,	// PTX_READ_CTAID_Z
    1384121048U,	// PTX_READ_GRIDID
    1392509656U,	// PTX_READ_LANEID
    1400898264U,	// PTX_READ_LANEMASK_EQ
    1409286872U,	// PTX_READ_LANEMASK_GE
    1417675480U,	// PTX_READ_LANEMASK_GT
    1426064088U,	// PTX_READ_LANEMASK_LE
    1434452696U,	// PTX_READ_LANEMASK_LT
    1442841304U,	// PTX_READ_NCTAID_W
    1451229912U,	// PTX_READ_NCTAID_X
    1459618520U,	// PTX_READ_NCTAID_Y
    1468007128U,	// PTX_READ_NCTAID_Z
    1476395736U,	// PTX_READ_NSMID
    1484784344U,	// PTX_READ_NTID_W
    1493172952U,	// PTX_READ_NTID_X
    1501561560U,	// PTX_READ_NTID_Y
    1509950168U,	// PTX_READ_NTID_Z
    1518338776U,	// PTX_READ_NWARPID
    1526727384U,	// PTX_READ_PM0
    1535115992U,	// PTX_READ_PM1
    1543504600U,	// PTX_READ_PM2
    1551893208U,	// PTX_READ_PM3
    1560281816U,	// PTX_READ_SMID
    1568670424U,	// PTX_READ_TID_W
    1577059032U,	// PTX_READ_TID_X
    1585447640U,	// PTX_READ_TID_Y
    1593836248U,	// PTX_READ_TID_Z
    1602224856U,	// PTX_READ_WARPID
    1610613427U,	// READPARAMF32
    1610613436U,	// READPARAMF64
    1610613787U,	// READPARAMI16
    1610613482U,	// READPARAMI32
    1610613491U,	// READPARAMI64
    1610613445U,	// READPARAMPRED
    1073742884U,	// REMri16
    1073742893U,	// REMri32
    1073742902U,	// REMri64
    1073742884U,	// REMrr16
    1073742893U,	// REMrr32
    1073742902U,	// REMrr64
    1087U,	// RET
    1073742915U,	// SDIVri16
    1073742924U,	// SDIVri32
    1073742933U,	// SDIVri64
    1073742915U,	// SDIVrr16
    1073742924U,	// SDIVrr32
    1073742933U,	// SDIVrr64
    1077937246U,	// SELPf32ii
    1077937246U,	// SELPf32ri
    1077937246U,	// SELPf32rr
    1077937256U,	// SELPf64ii
    1077937256U,	// SELPf64ri
    1077937256U,	// SELPf64rr
    1077937266U,	// SELPi16ii
    1077937266U,	// SELPi16ri
    1077937266U,	// SELPi16rr
    1077937276U,	// SELPi32ii
    1077937276U,	// SELPi32ri
    1077937276U,	// SELPi32rr
    1077937286U,	// SELPi64ii
    1077937286U,	// SELPi64ri
    1077937286U,	// SELPi64rr
    1073742992U,	// SETPEQf32ri_o
    1073743005U,	// SETPEQf32ri_u
    1073775787U,	// SETPEQf32rr_and_not_r_o
    1073775804U,	// SETPEQf32rr_and_not_r_u
    1073808555U,	// SETPEQf32rr_and_r_o
    1073808572U,	// SETPEQf32rr_and_r_u
    1073742992U,	// SETPEQf32rr_o
    1073775822U,	// SETPEQf32rr_or_not_r_o
    1073775838U,	// SETPEQf32rr_or_not_r_u
    1073808590U,	// SETPEQf32rr_or_r_o
    1073808606U,	// SETPEQf32rr_or_r_u
    1073743005U,	// SETPEQf32rr_u
    1073775855U,	// SETPEQf32rr_xor_not_r_o
    1073775872U,	// SETPEQf32rr_xor_not_r_u
    1073808623U,	// SETPEQf32rr_xor_r_o
    1073808640U,	// SETPEQf32rr_xor_r_u
    1073743122U,	// SETPEQf64ri_o
    1073743135U,	// SETPEQf64ri_u
    1073775917U,	// SETPEQf64rr_and_not_r_o
    1073775934U,	// SETPEQf64rr_and_not_r_u
    1073808685U,	// SETPEQf64rr_and_r_o
    1073808702U,	// SETPEQf64rr_and_r_u
    1073743122U,	// SETPEQf64rr_o
    1073775952U,	// SETPEQf64rr_or_not_r_o
    1073775968U,	// SETPEQf64rr_or_not_r_u
    1073808720U,	// SETPEQf64rr_or_r_o
    1073808736U,	// SETPEQf64rr_or_r_u
    1073743135U,	// SETPEQf64rr_u
    1073775985U,	// SETPEQf64rr_xor_not_r_o
    1073776002U,	// SETPEQf64rr_xor_not_r_u
    1073808753U,	// SETPEQf64rr_xor_r_o
    1073808770U,	// SETPEQf64rr_xor_r_u
    1073743252U,	// SETPEQu16ri
    1073776033U,	// SETPEQu16ri_and_not_r
    1073808801U,	// SETPEQu16ri_and_r
    1073776050U,	// SETPEQu16ri_or_not_r
    1073808818U,	// SETPEQu16ri_or_r
    1073776066U,	// SETPEQu16ri_xor_not_r
    1073808834U,	// SETPEQu16ri_xor_r
    1073743252U,	// SETPEQu16rr
    1073776033U,	// SETPEQu16rr_and_not_r
    1073808801U,	// SETPEQu16rr_and_r
    1073776050U,	// SETPEQu16rr_or_not_r
    1073808818U,	// SETPEQu16rr_or_r
    1073776066U,	// SETPEQu16rr_xor_not_r
    1073808834U,	// SETPEQu16rr_xor_r
    1073743315U,	// SETPEQu32ri
    1073776096U,	// SETPEQu32ri_and_not_r
    1073808864U,	// SETPEQu32ri_and_r
    1073776113U,	// SETPEQu32ri_or_not_r
    1073808881U,	// SETPEQu32ri_or_r
    1073776129U,	// SETPEQu32ri_xor_not_r
    1073808897U,	// SETPEQu32ri_xor_r
    1073743315U,	// SETPEQu32rr
    1073776096U,	// SETPEQu32rr_and_not_r
    1073808864U,	// SETPEQu32rr_and_r
    1073776113U,	// SETPEQu32rr_or_not_r
    1073808881U,	// SETPEQu32rr_or_r
    1073776129U,	// SETPEQu32rr_xor_not_r
    1073808897U,	// SETPEQu32rr_xor_r
    1073743378U,	// SETPEQu64ri
    1073776159U,	// SETPEQu64ri_and_not_r
    1073808927U,	// SETPEQu64ri_and_r
    1073776176U,	// SETPEQu64ri_or_not_r
    1073808944U,	// SETPEQu64ri_or_r
    1073776192U,	// SETPEQu64ri_xor_not_r
    1073808960U,	// SETPEQu64ri_xor_r
    1073743378U,	// SETPEQu64rr
    1073776159U,	// SETPEQu64rr_and_not_r
    1073808927U,	// SETPEQu64rr_and_r
    1073776176U,	// SETPEQu64rr_or_not_r
    1073808944U,	// SETPEQu64rr_or_r
    1073776192U,	// SETPEQu64rr_xor_not_r
    1073808960U,	// SETPEQu64rr_xor_r
    1073743441U,	// SETPGEf32ri_o
    1073743454U,	// SETPGEf32ri_u
    1073776236U,	// SETPGEf32rr_and_not_r_o
    1073776253U,	// SETPGEf32rr_and_not_r_u
    1073809004U,	// SETPGEf32rr_and_r_o
    1073809021U,	// SETPGEf32rr_and_r_u
    1073743441U,	// SETPGEf32rr_o
    1073776271U,	// SETPGEf32rr_or_not_r_o
    1073776287U,	// SETPGEf32rr_or_not_r_u
    1073809039U,	// SETPGEf32rr_or_r_o
    1073809055U,	// SETPGEf32rr_or_r_u
    1073743454U,	// SETPGEf32rr_u
    1073776304U,	// SETPGEf32rr_xor_not_r_o
    1073776321U,	// SETPGEf32rr_xor_not_r_u
    1073809072U,	// SETPGEf32rr_xor_r_o
    1073809089U,	// SETPGEf32rr_xor_r_u
    1073743571U,	// SETPGEf64ri_o
    1073743584U,	// SETPGEf64ri_u
    1073776366U,	// SETPGEf64rr_and_not_r_o
    1073776383U,	// SETPGEf64rr_and_not_r_u
    1073809134U,	// SETPGEf64rr_and_r_o
    1073809151U,	// SETPGEf64rr_and_r_u
    1073743571U,	// SETPGEf64rr_o
    1073776401U,	// SETPGEf64rr_or_not_r_o
    1073776417U,	// SETPGEf64rr_or_not_r_u
    1073809169U,	// SETPGEf64rr_or_r_o
    1073809185U,	// SETPGEf64rr_or_r_u
    1073743584U,	// SETPGEf64rr_u
    1073776434U,	// SETPGEf64rr_xor_not_r_o
    1073776451U,	// SETPGEf64rr_xor_not_r_u
    1073809202U,	// SETPGEf64rr_xor_r_o
    1073809219U,	// SETPGEf64rr_xor_r_u
    1073743701U,	// SETPGEs16ri
    1073776482U,	// SETPGEs16ri_and_not_r
    1073809250U,	// SETPGEs16ri_and_r
    1073776499U,	// SETPGEs16ri_or_not_r
    1073809267U,	// SETPGEs16ri_or_r
    1073776515U,	// SETPGEs16ri_xor_not_r
    1073809283U,	// SETPGEs16ri_xor_r
    1073743701U,	// SETPGEs16rr
    1073776482U,	// SETPGEs16rr_and_not_r
    1073809250U,	// SETPGEs16rr_and_r
    1073776499U,	// SETPGEs16rr_or_not_r
    1073809267U,	// SETPGEs16rr_or_r
    1073776515U,	// SETPGEs16rr_xor_not_r
    1073809283U,	// SETPGEs16rr_xor_r
    1073743764U,	// SETPGEs32ri
    1073776545U,	// SETPGEs32ri_and_not_r
    1073809313U,	// SETPGEs32ri_and_r
    1073776562U,	// SETPGEs32ri_or_not_r
    1073809330U,	// SETPGEs32ri_or_r
    1073776578U,	// SETPGEs32ri_xor_not_r
    1073809346U,	// SETPGEs32ri_xor_r
    1073743764U,	// SETPGEs32rr
    1073776545U,	// SETPGEs32rr_and_not_r
    1073809313U,	// SETPGEs32rr_and_r
    1073776562U,	// SETPGEs32rr_or_not_r
    1073809330U,	// SETPGEs32rr_or_r
    1073776578U,	// SETPGEs32rr_xor_not_r
    1073809346U,	// SETPGEs32rr_xor_r
    1073743827U,	// SETPGEs64ri
    1073776608U,	// SETPGEs64ri_and_not_r
    1073809376U,	// SETPGEs64ri_and_r
    1073776625U,	// SETPGEs64ri_or_not_r
    1073809393U,	// SETPGEs64ri_or_r
    1073776641U,	// SETPGEs64ri_xor_not_r
    1073809409U,	// SETPGEs64ri_xor_r
    1073743827U,	// SETPGEs64rr
    1073776608U,	// SETPGEs64rr_and_not_r
    1073809376U,	// SETPGEs64rr_and_r
    1073776625U,	// SETPGEs64rr_or_not_r
    1073809393U,	// SETPGEs64rr_or_r
    1073776641U,	// SETPGEs64rr_xor_not_r
    1073809409U,	// SETPGEs64rr_xor_r
    1073743890U,	// SETPGEu16ri
    1073776671U,	// SETPGEu16ri_and_not_r
    1073809439U,	// SETPGEu16ri_and_r
    1073776688U,	// SETPGEu16ri_or_not_r
    1073809456U,	// SETPGEu16ri_or_r
    1073776704U,	// SETPGEu16ri_xor_not_r
    1073809472U,	// SETPGEu16ri_xor_r
    1073743890U,	// SETPGEu16rr
    1073776671U,	// SETPGEu16rr_and_not_r
    1073809439U,	// SETPGEu16rr_and_r
    1073776688U,	// SETPGEu16rr_or_not_r
    1073809456U,	// SETPGEu16rr_or_r
    1073776704U,	// SETPGEu16rr_xor_not_r
    1073809472U,	// SETPGEu16rr_xor_r
    1073743953U,	// SETPGEu32ri
    1073776734U,	// SETPGEu32ri_and_not_r
    1073809502U,	// SETPGEu32ri_and_r
    1073776751U,	// SETPGEu32ri_or_not_r
    1073809519U,	// SETPGEu32ri_or_r
    1073776767U,	// SETPGEu32ri_xor_not_r
    1073809535U,	// SETPGEu32ri_xor_r
    1073743953U,	// SETPGEu32rr
    1073776734U,	// SETPGEu32rr_and_not_r
    1073809502U,	// SETPGEu32rr_and_r
    1073776751U,	// SETPGEu32rr_or_not_r
    1073809519U,	// SETPGEu32rr_or_r
    1073776767U,	// SETPGEu32rr_xor_not_r
    1073809535U,	// SETPGEu32rr_xor_r
    1073744016U,	// SETPGEu64ri
    1073776797U,	// SETPGEu64ri_and_not_r
    1073809565U,	// SETPGEu64ri_and_r
    1073776814U,	// SETPGEu64ri_or_not_r
    1073809582U,	// SETPGEu64ri_or_r
    1073776830U,	// SETPGEu64ri_xor_not_r
    1073809598U,	// SETPGEu64ri_xor_r
    1073744016U,	// SETPGEu64rr
    1073776797U,	// SETPGEu64rr_and_not_r
    1073809565U,	// SETPGEu64rr_and_r
    1073776814U,	// SETPGEu64rr_or_not_r
    1073809582U,	// SETPGEu64rr_or_r
    1073776830U,	// SETPGEu64rr_xor_not_r
    1073809598U,	// SETPGEu64rr_xor_r
    1073744079U,	// SETPGTf32ri_o
    1073744092U,	// SETPGTf32ri_u
    1073776874U,	// SETPGTf32rr_and_not_r_o
    1073776891U,	// SETPGTf32rr_and_not_r_u
    1073809642U,	// SETPGTf32rr_and_r_o
    1073809659U,	// SETPGTf32rr_and_r_u
    1073744079U,	// SETPGTf32rr_o
    1073776909U,	// SETPGTf32rr_or_not_r_o
    1073776925U,	// SETPGTf32rr_or_not_r_u
    1073809677U,	// SETPGTf32rr_or_r_o
    1073809693U,	// SETPGTf32rr_or_r_u
    1073744092U,	// SETPGTf32rr_u
    1073776942U,	// SETPGTf32rr_xor_not_r_o
    1073776959U,	// SETPGTf32rr_xor_not_r_u
    1073809710U,	// SETPGTf32rr_xor_r_o
    1073809727U,	// SETPGTf32rr_xor_r_u
    1073744209U,	// SETPGTf64ri_o
    1073744222U,	// SETPGTf64ri_u
    1073777004U,	// SETPGTf64rr_and_not_r_o
    1073777021U,	// SETPGTf64rr_and_not_r_u
    1073809772U,	// SETPGTf64rr_and_r_o
    1073809789U,	// SETPGTf64rr_and_r_u
    1073744209U,	// SETPGTf64rr_o
    1073777039U,	// SETPGTf64rr_or_not_r_o
    1073777055U,	// SETPGTf64rr_or_not_r_u
    1073809807U,	// SETPGTf64rr_or_r_o
    1073809823U,	// SETPGTf64rr_or_r_u
    1073744222U,	// SETPGTf64rr_u
    1073777072U,	// SETPGTf64rr_xor_not_r_o
    1073777089U,	// SETPGTf64rr_xor_not_r_u
    1073809840U,	// SETPGTf64rr_xor_r_o
    1073809857U,	// SETPGTf64rr_xor_r_u
    1073744339U,	// SETPGTs16ri
    1073777120U,	// SETPGTs16ri_and_not_r
    1073809888U,	// SETPGTs16ri_and_r
    1073777137U,	// SETPGTs16ri_or_not_r
    1073809905U,	// SETPGTs16ri_or_r
    1073777153U,	// SETPGTs16ri_xor_not_r
    1073809921U,	// SETPGTs16ri_xor_r
    1073744339U,	// SETPGTs16rr
    1073777120U,	// SETPGTs16rr_and_not_r
    1073809888U,	// SETPGTs16rr_and_r
    1073777137U,	// SETPGTs16rr_or_not_r
    1073809905U,	// SETPGTs16rr_or_r
    1073777153U,	// SETPGTs16rr_xor_not_r
    1073809921U,	// SETPGTs16rr_xor_r
    1073744402U,	// SETPGTs32ri
    1073777183U,	// SETPGTs32ri_and_not_r
    1073809951U,	// SETPGTs32ri_and_r
    1073777200U,	// SETPGTs32ri_or_not_r
    1073809968U,	// SETPGTs32ri_or_r
    1073777216U,	// SETPGTs32ri_xor_not_r
    1073809984U,	// SETPGTs32ri_xor_r
    1073744402U,	// SETPGTs32rr
    1073777183U,	// SETPGTs32rr_and_not_r
    1073809951U,	// SETPGTs32rr_and_r
    1073777200U,	// SETPGTs32rr_or_not_r
    1073809968U,	// SETPGTs32rr_or_r
    1073777216U,	// SETPGTs32rr_xor_not_r
    1073809984U,	// SETPGTs32rr_xor_r
    1073744465U,	// SETPGTs64ri
    1073777246U,	// SETPGTs64ri_and_not_r
    1073810014U,	// SETPGTs64ri_and_r
    1073777263U,	// SETPGTs64ri_or_not_r
    1073810031U,	// SETPGTs64ri_or_r
    1073777279U,	// SETPGTs64ri_xor_not_r
    1073810047U,	// SETPGTs64ri_xor_r
    1073744465U,	// SETPGTs64rr
    1073777246U,	// SETPGTs64rr_and_not_r
    1073810014U,	// SETPGTs64rr_and_r
    1073777263U,	// SETPGTs64rr_or_not_r
    1073810031U,	// SETPGTs64rr_or_r
    1073777279U,	// SETPGTs64rr_xor_not_r
    1073810047U,	// SETPGTs64rr_xor_r
    1073744528U,	// SETPGTu16ri
    1073777309U,	// SETPGTu16ri_and_not_r
    1073810077U,	// SETPGTu16ri_and_r
    1073777326U,	// SETPGTu16ri_or_not_r
    1073810094U,	// SETPGTu16ri_or_r
    1073777342U,	// SETPGTu16ri_xor_not_r
    1073810110U,	// SETPGTu16ri_xor_r
    1073744528U,	// SETPGTu16rr
    1073777309U,	// SETPGTu16rr_and_not_r
    1073810077U,	// SETPGTu16rr_and_r
    1073777326U,	// SETPGTu16rr_or_not_r
    1073810094U,	// SETPGTu16rr_or_r
    1073777342U,	// SETPGTu16rr_xor_not_r
    1073810110U,	// SETPGTu16rr_xor_r
    1073744591U,	// SETPGTu32ri
    1073777372U,	// SETPGTu32ri_and_not_r
    1073810140U,	// SETPGTu32ri_and_r
    1073777389U,	// SETPGTu32ri_or_not_r
    1073810157U,	// SETPGTu32ri_or_r
    1073777405U,	// SETPGTu32ri_xor_not_r
    1073810173U,	// SETPGTu32ri_xor_r
    1073744591U,	// SETPGTu32rr
    1073777372U,	// SETPGTu32rr_and_not_r
    1073810140U,	// SETPGTu32rr_and_r
    1073777389U,	// SETPGTu32rr_or_not_r
    1073810157U,	// SETPGTu32rr_or_r
    1073777405U,	// SETPGTu32rr_xor_not_r
    1073810173U,	// SETPGTu32rr_xor_r
    1073744654U,	// SETPGTu64ri
    1073777435U,	// SETPGTu64ri_and_not_r
    1073810203U,	// SETPGTu64ri_and_r
    1073777452U,	// SETPGTu64ri_or_not_r
    1073810220U,	// SETPGTu64ri_or_r
    1073777468U,	// SETPGTu64ri_xor_not_r
    1073810236U,	// SETPGTu64ri_xor_r
    1073744654U,	// SETPGTu64rr
    1073777435U,	// SETPGTu64rr_and_not_r
    1073810203U,	// SETPGTu64rr_and_r
    1073777452U,	// SETPGTu64rr_or_not_r
    1073810220U,	// SETPGTu64rr_or_r
    1073777468U,	// SETPGTu64rr_xor_not_r
    1073810236U,	// SETPGTu64rr_xor_r
    1073744717U,	// SETPLEf32ri_o
    1073744730U,	// SETPLEf32ri_u
    1073777512U,	// SETPLEf32rr_and_not_r_o
    1073777529U,	// SETPLEf32rr_and_not_r_u
    1073810280U,	// SETPLEf32rr_and_r_o
    1073810297U,	// SETPLEf32rr_and_r_u
    1073744717U,	// SETPLEf32rr_o
    1073777547U,	// SETPLEf32rr_or_not_r_o
    1073777563U,	// SETPLEf32rr_or_not_r_u
    1073810315U,	// SETPLEf32rr_or_r_o
    1073810331U,	// SETPLEf32rr_or_r_u
    1073744730U,	// SETPLEf32rr_u
    1073777580U,	// SETPLEf32rr_xor_not_r_o
    1073777597U,	// SETPLEf32rr_xor_not_r_u
    1073810348U,	// SETPLEf32rr_xor_r_o
    1073810365U,	// SETPLEf32rr_xor_r_u
    1073744847U,	// SETPLEf64ri_o
    1073744860U,	// SETPLEf64ri_u
    1073777642U,	// SETPLEf64rr_and_not_r_o
    1073777659U,	// SETPLEf64rr_and_not_r_u
    1073810410U,	// SETPLEf64rr_and_r_o
    1073810427U,	// SETPLEf64rr_and_r_u
    1073744847U,	// SETPLEf64rr_o
    1073777677U,	// SETPLEf64rr_or_not_r_o
    1073777693U,	// SETPLEf64rr_or_not_r_u
    1073810445U,	// SETPLEf64rr_or_r_o
    1073810461U,	// SETPLEf64rr_or_r_u
    1073744860U,	// SETPLEf64rr_u
    1073777710U,	// SETPLEf64rr_xor_not_r_o
    1073777727U,	// SETPLEf64rr_xor_not_r_u
    1073810478U,	// SETPLEf64rr_xor_r_o
    1073810495U,	// SETPLEf64rr_xor_r_u
    1073744977U,	// SETPLEs16ri
    1073777758U,	// SETPLEs16ri_and_not_r
    1073810526U,	// SETPLEs16ri_and_r
    1073777775U,	// SETPLEs16ri_or_not_r
    1073810543U,	// SETPLEs16ri_or_r
    1073777791U,	// SETPLEs16ri_xor_not_r
    1073810559U,	// SETPLEs16ri_xor_r
    1073744977U,	// SETPLEs16rr
    1073777758U,	// SETPLEs16rr_and_not_r
    1073810526U,	// SETPLEs16rr_and_r
    1073777775U,	// SETPLEs16rr_or_not_r
    1073810543U,	// SETPLEs16rr_or_r
    1073777791U,	// SETPLEs16rr_xor_not_r
    1073810559U,	// SETPLEs16rr_xor_r
    1073745040U,	// SETPLEs32ri
    1073777821U,	// SETPLEs32ri_and_not_r
    1073810589U,	// SETPLEs32ri_and_r
    1073777838U,	// SETPLEs32ri_or_not_r
    1073810606U,	// SETPLEs32ri_or_r
    1073777854U,	// SETPLEs32ri_xor_not_r
    1073810622U,	// SETPLEs32ri_xor_r
    1073745040U,	// SETPLEs32rr
    1073777821U,	// SETPLEs32rr_and_not_r
    1073810589U,	// SETPLEs32rr_and_r
    1073777838U,	// SETPLEs32rr_or_not_r
    1073810606U,	// SETPLEs32rr_or_r
    1073777854U,	// SETPLEs32rr_xor_not_r
    1073810622U,	// SETPLEs32rr_xor_r
    1073745103U,	// SETPLEs64ri
    1073777884U,	// SETPLEs64ri_and_not_r
    1073810652U,	// SETPLEs64ri_and_r
    1073777901U,	// SETPLEs64ri_or_not_r
    1073810669U,	// SETPLEs64ri_or_r
    1073777917U,	// SETPLEs64ri_xor_not_r
    1073810685U,	// SETPLEs64ri_xor_r
    1073745103U,	// SETPLEs64rr
    1073777884U,	// SETPLEs64rr_and_not_r
    1073810652U,	// SETPLEs64rr_and_r
    1073777901U,	// SETPLEs64rr_or_not_r
    1073810669U,	// SETPLEs64rr_or_r
    1073777917U,	// SETPLEs64rr_xor_not_r
    1073810685U,	// SETPLEs64rr_xor_r
    1073745166U,	// SETPLEu16ri
    1073777947U,	// SETPLEu16ri_and_not_r
    1073810715U,	// SETPLEu16ri_and_r
    1073777964U,	// SETPLEu16ri_or_not_r
    1073810732U,	// SETPLEu16ri_or_r
    1073777980U,	// SETPLEu16ri_xor_not_r
    1073810748U,	// SETPLEu16ri_xor_r
    1073745166U,	// SETPLEu16rr
    1073777947U,	// SETPLEu16rr_and_not_r
    1073810715U,	// SETPLEu16rr_and_r
    1073777964U,	// SETPLEu16rr_or_not_r
    1073810732U,	// SETPLEu16rr_or_r
    1073777980U,	// SETPLEu16rr_xor_not_r
    1073810748U,	// SETPLEu16rr_xor_r
    1073745229U,	// SETPLEu32ri
    1073778010U,	// SETPLEu32ri_and_not_r
    1073810778U,	// SETPLEu32ri_and_r
    1073778027U,	// SETPLEu32ri_or_not_r
    1073810795U,	// SETPLEu32ri_or_r
    1073778043U,	// SETPLEu32ri_xor_not_r
    1073810811U,	// SETPLEu32ri_xor_r
    1073745229U,	// SETPLEu32rr
    1073778010U,	// SETPLEu32rr_and_not_r
    1073810778U,	// SETPLEu32rr_and_r
    1073778027U,	// SETPLEu32rr_or_not_r
    1073810795U,	// SETPLEu32rr_or_r
    1073778043U,	// SETPLEu32rr_xor_not_r
    1073810811U,	// SETPLEu32rr_xor_r
    1073745292U,	// SETPLEu64ri
    1073778073U,	// SETPLEu64ri_and_not_r
    1073810841U,	// SETPLEu64ri_and_r
    1073778090U,	// SETPLEu64ri_or_not_r
    1073810858U,	// SETPLEu64ri_or_r
    1073778106U,	// SETPLEu64ri_xor_not_r
    1073810874U,	// SETPLEu64ri_xor_r
    1073745292U,	// SETPLEu64rr
    1073778073U,	// SETPLEu64rr_and_not_r
    1073810841U,	// SETPLEu64rr_and_r
    1073778090U,	// SETPLEu64rr_or_not_r
    1073810858U,	// SETPLEu64rr_or_r
    1073778106U,	// SETPLEu64rr_xor_not_r
    1073810874U,	// SETPLEu64rr_xor_r
    1073745355U,	// SETPLTf32ri_o
    1073745368U,	// SETPLTf32ri_u
    1073778150U,	// SETPLTf32rr_and_not_r_o
    1073778167U,	// SETPLTf32rr_and_not_r_u
    1073810918U,	// SETPLTf32rr_and_r_o
    1073810935U,	// SETPLTf32rr_and_r_u
    1073745355U,	// SETPLTf32rr_o
    1073778185U,	// SETPLTf32rr_or_not_r_o
    1073778201U,	// SETPLTf32rr_or_not_r_u
    1073810953U,	// SETPLTf32rr_or_r_o
    1073810969U,	// SETPLTf32rr_or_r_u
    1073745368U,	// SETPLTf32rr_u
    1073778218U,	// SETPLTf32rr_xor_not_r_o
    1073778235U,	// SETPLTf32rr_xor_not_r_u
    1073810986U,	// SETPLTf32rr_xor_r_o
    1073811003U,	// SETPLTf32rr_xor_r_u
    1073745485U,	// SETPLTf64ri_o
    1073745498U,	// SETPLTf64ri_u
    1073778280U,	// SETPLTf64rr_and_not_r_o
    1073778297U,	// SETPLTf64rr_and_not_r_u
    1073811048U,	// SETPLTf64rr_and_r_o
    1073811065U,	// SETPLTf64rr_and_r_u
    1073745485U,	// SETPLTf64rr_o
    1073778315U,	// SETPLTf64rr_or_not_r_o
    1073778331U,	// SETPLTf64rr_or_not_r_u
    1073811083U,	// SETPLTf64rr_or_r_o
    1073811099U,	// SETPLTf64rr_or_r_u
    1073745498U,	// SETPLTf64rr_u
    1073778348U,	// SETPLTf64rr_xor_not_r_o
    1073778365U,	// SETPLTf64rr_xor_not_r_u
    1073811116U,	// SETPLTf64rr_xor_r_o
    1073811133U,	// SETPLTf64rr_xor_r_u
    1073745615U,	// SETPLTs16ri
    1073778396U,	// SETPLTs16ri_and_not_r
    1073811164U,	// SETPLTs16ri_and_r
    1073778413U,	// SETPLTs16ri_or_not_r
    1073811181U,	// SETPLTs16ri_or_r
    1073778429U,	// SETPLTs16ri_xor_not_r
    1073811197U,	// SETPLTs16ri_xor_r
    1073745615U,	// SETPLTs16rr
    1073778396U,	// SETPLTs16rr_and_not_r
    1073811164U,	// SETPLTs16rr_and_r
    1073778413U,	// SETPLTs16rr_or_not_r
    1073811181U,	// SETPLTs16rr_or_r
    1073778429U,	// SETPLTs16rr_xor_not_r
    1073811197U,	// SETPLTs16rr_xor_r
    1073745678U,	// SETPLTs32ri
    1073778459U,	// SETPLTs32ri_and_not_r
    1073811227U,	// SETPLTs32ri_and_r
    1073778476U,	// SETPLTs32ri_or_not_r
    1073811244U,	// SETPLTs32ri_or_r
    1073778492U,	// SETPLTs32ri_xor_not_r
    1073811260U,	// SETPLTs32ri_xor_r
    1073745678U,	// SETPLTs32rr
    1073778459U,	// SETPLTs32rr_and_not_r
    1073811227U,	// SETPLTs32rr_and_r
    1073778476U,	// SETPLTs32rr_or_not_r
    1073811244U,	// SETPLTs32rr_or_r
    1073778492U,	// SETPLTs32rr_xor_not_r
    1073811260U,	// SETPLTs32rr_xor_r
    1073745741U,	// SETPLTs64ri
    1073778522U,	// SETPLTs64ri_and_not_r
    1073811290U,	// SETPLTs64ri_and_r
    1073778539U,	// SETPLTs64ri_or_not_r
    1073811307U,	// SETPLTs64ri_or_r
    1073778555U,	// SETPLTs64ri_xor_not_r
    1073811323U,	// SETPLTs64ri_xor_r
    1073745741U,	// SETPLTs64rr
    1073778522U,	// SETPLTs64rr_and_not_r
    1073811290U,	// SETPLTs64rr_and_r
    1073778539U,	// SETPLTs64rr_or_not_r
    1073811307U,	// SETPLTs64rr_or_r
    1073778555U,	// SETPLTs64rr_xor_not_r
    1073811323U,	// SETPLTs64rr_xor_r
    1073745804U,	// SETPLTu16ri
    1073778585U,	// SETPLTu16ri_and_not_r
    1073811353U,	// SETPLTu16ri_and_r
    1073778602U,	// SETPLTu16ri_or_not_r
    1073811370U,	// SETPLTu16ri_or_r
    1073778618U,	// SETPLTu16ri_xor_not_r
    1073811386U,	// SETPLTu16ri_xor_r
    1073745804U,	// SETPLTu16rr
    1073778585U,	// SETPLTu16rr_and_not_r
    1073811353U,	// SETPLTu16rr_and_r
    1073778602U,	// SETPLTu16rr_or_not_r
    1073811370U,	// SETPLTu16rr_or_r
    1073778618U,	// SETPLTu16rr_xor_not_r
    1073811386U,	// SETPLTu16rr_xor_r
    1073745867U,	// SETPLTu32ri
    1073778648U,	// SETPLTu32ri_and_not_r
    1073811416U,	// SETPLTu32ri_and_r
    1073778665U,	// SETPLTu32ri_or_not_r
    1073811433U,	// SETPLTu32ri_or_r
    1073778681U,	// SETPLTu32ri_xor_not_r
    1073811449U,	// SETPLTu32ri_xor_r
    1073745867U,	// SETPLTu32rr
    1073778648U,	// SETPLTu32rr_and_not_r
    1073811416U,	// SETPLTu32rr_and_r
    1073778665U,	// SETPLTu32rr_or_not_r
    1073811433U,	// SETPLTu32rr_or_r
    1073778681U,	// SETPLTu32rr_xor_not_r
    1073811449U,	// SETPLTu32rr_xor_r
    1073745930U,	// SETPLTu64ri
    1073778711U,	// SETPLTu64ri_and_not_r
    1073811479U,	// SETPLTu64ri_and_r
    1073778728U,	// SETPLTu64ri_or_not_r
    1073811496U,	// SETPLTu64ri_or_r
    1073778744U,	// SETPLTu64ri_xor_not_r
    1073811512U,	// SETPLTu64ri_xor_r
    1073745930U,	// SETPLTu64rr
    1073778711U,	// SETPLTu64rr_and_not_r
    1073811479U,	// SETPLTu64rr_and_r
    1073778728U,	// SETPLTu64rr_or_not_r
    1073811496U,	// SETPLTu64rr_or_r
    1073778744U,	// SETPLTu64rr_xor_not_r
    1073811512U,	// SETPLTu64rr_xor_r
    1073745993U,	// SETPNEf32ri_o
    1073746006U,	// SETPNEf32ri_u
    1073778788U,	// SETPNEf32rr_and_not_r_o
    1073778805U,	// SETPNEf32rr_and_not_r_u
    1073811556U,	// SETPNEf32rr_and_r_o
    1073811573U,	// SETPNEf32rr_and_r_u
    1073745993U,	// SETPNEf32rr_o
    1073778823U,	// SETPNEf32rr_or_not_r_o
    1073778839U,	// SETPNEf32rr_or_not_r_u
    1073811591U,	// SETPNEf32rr_or_r_o
    1073811607U,	// SETPNEf32rr_or_r_u
    1073746006U,	// SETPNEf32rr_u
    1073778856U,	// SETPNEf32rr_xor_not_r_o
    1073778873U,	// SETPNEf32rr_xor_not_r_u
    1073811624U,	// SETPNEf32rr_xor_r_o
    1073811641U,	// SETPNEf32rr_xor_r_u
    1073746123U,	// SETPNEf64ri_o
    1073746136U,	// SETPNEf64ri_u
    1073778918U,	// SETPNEf64rr_and_not_r_o
    1073778935U,	// SETPNEf64rr_and_not_r_u
    1073811686U,	// SETPNEf64rr_and_r_o
    1073811703U,	// SETPNEf64rr_and_r_u
    1073746123U,	// SETPNEf64rr_o
    1073778953U,	// SETPNEf64rr_or_not_r_o
    1073778969U,	// SETPNEf64rr_or_not_r_u
    1073811721U,	// SETPNEf64rr_or_r_o
    1073811737U,	// SETPNEf64rr_or_r_u
    1073746136U,	// SETPNEf64rr_u
    1073778986U,	// SETPNEf64rr_xor_not_r_o
    1073779003U,	// SETPNEf64rr_xor_not_r_u
    1073811754U,	// SETPNEf64rr_xor_r_o
    1073811771U,	// SETPNEf64rr_xor_r_u
    1073746253U,	// SETPNEu16ri
    1073779034U,	// SETPNEu16ri_and_not_r
    1073811802U,	// SETPNEu16ri_and_r
    1073779051U,	// SETPNEu16ri_or_not_r
    1073811819U,	// SETPNEu16ri_or_r
    1073779067U,	// SETPNEu16ri_xor_not_r
    1073811835U,	// SETPNEu16ri_xor_r
    1073746253U,	// SETPNEu16rr
    1073779034U,	// SETPNEu16rr_and_not_r
    1073811802U,	// SETPNEu16rr_and_r
    1073779051U,	// SETPNEu16rr_or_not_r
    1073811819U,	// SETPNEu16rr_or_r
    1073779067U,	// SETPNEu16rr_xor_not_r
    1073811835U,	// SETPNEu16rr_xor_r
    1073746316U,	// SETPNEu32ri
    1073779097U,	// SETPNEu32ri_and_not_r
    1073811865U,	// SETPNEu32ri_and_r
    1073779114U,	// SETPNEu32ri_or_not_r
    1073811882U,	// SETPNEu32ri_or_r
    1073779130U,	// SETPNEu32ri_xor_not_r
    1073811898U,	// SETPNEu32ri_xor_r
    1073746316U,	// SETPNEu32rr
    1073779097U,	// SETPNEu32rr_and_not_r
    1073811865U,	// SETPNEu32rr_and_r
    1073779114U,	// SETPNEu32rr_or_not_r
    1073811882U,	// SETPNEu32rr_or_r
    1073779130U,	// SETPNEu32rr_xor_not_r
    1073811898U,	// SETPNEu32rr_xor_r
    1073746379U,	// SETPNEu64ri
    1073779160U,	// SETPNEu64ri_and_not_r
    1073811928U,	// SETPNEu64ri_and_r
    1073779177U,	// SETPNEu64ri_or_not_r
    1073811945U,	// SETPNEu64ri_or_r
    1073779193U,	// SETPNEu64ri_xor_not_r
    1073811961U,	// SETPNEu64ri_xor_r
    1073746379U,	// SETPNEu64rr
    1073779160U,	// SETPNEu64rr_and_not_r
    1073811928U,	// SETPNEu64rr_and_r
    1073779177U,	// SETPNEu64rr_or_not_r
    1073811945U,	// SETPNEu64rr_or_r
    1073779193U,	// SETPNEu64rr_xor_not_r
    1073811961U,	// SETPNEu64rr_xor_r
    1073746442U,	// SHLir16
    1073746451U,	// SHLir32
    1073746460U,	// SHLir64
    1073746442U,	// SHLri16
    1073746451U,	// SHLri32
    1073746460U,	// SHLri64
    1073746442U,	// SHLrr16
    1073746451U,	// SHLrr32
    1073746460U,	// SHLrr64
    1073746469U,	// SRAir16
    1073746478U,	// SRAir32
    1073746487U,	// SRAir64
    1073746469U,	// SRAri16
    1073746478U,	// SRAri32
    1073746487U,	// SRAri64
    1073746469U,	// SRArr16
    1073746478U,	// SRArr32
    1073746487U,	// SRArr64
    1073746496U,	// SRLir16
    1073746505U,	// SRLir32
    1073746514U,	// SRLir64
    1073746496U,	// SRLri16
    1073746505U,	// SRLri32
    1073746514U,	// SRLri64
    1073746496U,	// SRLrr16
    1073746505U,	// SRLrr32
    1073746514U,	// SRLrr64
    3221230171U,	// STgf32ii32
    3221230171U,	// STgf32ii64
    3221230171U,	// STgf32ri32
    3221230171U,	// STgf32ri64
    3221230171U,	// STgf32rr32
    3221230171U,	// STgf32rr64
    3221230187U,	// STgf64ii32
    3221230187U,	// STgf64ii64
    3221230187U,	// STgf64ri32
    3221230187U,	// STgf64ri64
    3221230187U,	// STgf64rr32
    3221230187U,	// STgf64rr64
    3221230203U,	// STgu16ii32
    3221230203U,	// STgu16ii64
    3221230203U,	// STgu16ri32
    3221230203U,	// STgu16ri64
    3221230203U,	// STgu16rr32
    3221230203U,	// STgu16rr64
    3221230219U,	// STgu32ii32
    3221230219U,	// STgu32ii64
    3221230219U,	// STgu32ri32
    3221230219U,	// STgu32ri64
    3221230219U,	// STgu32rr32
    3221230219U,	// STgu32rr64
    3221230235U,	// STgu64ii32
    3221230235U,	// STgu64ii64
    3221230235U,	// STgu64ri32
    3221230235U,	// STgu64ri64
    3221230235U,	// STgu64rr32
    3221230235U,	// STgu64rr64
    3221230251U,	// STsf32ii32
    3221230251U,	// STsf32ii64
    3221230251U,	// STsf32ri32
    3221230251U,	// STsf32ri64
    3221230251U,	// STsf32rr32
    3221230251U,	// STsf32rr64
    3221230267U,	// STsf64ii32
    3221230267U,	// STsf64ii64
    3221230267U,	// STsf64ri32
    3221230267U,	// STsf64ri64
    3221230267U,	// STsf64rr32
    3221230267U,	// STsf64rr64
    3221230283U,	// STsu16ii32
    3221230283U,	// STsu16ii64
    3221230283U,	// STsu16ri32
    3221230283U,	// STsu16ri64
    3221230283U,	// STsu16rr32
    3221230283U,	// STsu16rr64
    3221230299U,	// STsu32ii32
    3221230299U,	// STsu32ii64
    3221230299U,	// STsu32ri32
    3221230299U,	// STsu32ri64
    3221230299U,	// STsu32rr32
    3221230299U,	// STsu32rr64
    3221230315U,	// STsu64ii32
    3221230315U,	// STsu64ii64
    3221230315U,	// STsu64ri32
    3221230315U,	// STsu64ri64
    3221230315U,	// STsu64rr32
    3221230315U,	// STsu64rr64
    1073746683U,	// SUBri16
    1073746692U,	// SUBri32
    1073746701U,	// SUBri64
    1073746683U,	// SUBrr16
    1073746692U,	// SUBrr32
    1073746701U,	// SUBrr64
    4886U,	// WRITEPARAMF32
    4886U,	// WRITEPARAMF64
    4886U,	// WRITEPARAMI16
    4886U,	// WRITEPARAMI32
    4886U,	// WRITEPARAMI64
    4886U,	// WRITEPARAMPRED
    1073746714U,	// XORri16
    1073746723U,	// XORri32
    1073746732U,	// XORri64
    1073746741U,	// XORripreds
    1073746714U,	// XORrr16
    1073746723U,	// XORrr32
    1073746732U,	// XORrr64
    1073746741U,	// XORrrpreds
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000BUNDLE\000add.u16\t\000add.u32\t\000add.u64\t\000and.b16\t"
    "\000and.b32\t\000and.b64\t\000and.pred\t\000bra\t\000call\000cvt\000cvt"
    ".f64.f32\t\000cvt.s32.s16\t\000cvt.s64.s16\t\000cvt.s64.s32\t\000cvt.u1"
    "6.u32\t\000cvt.u16.u64\t\000cvt.u32.u16\t\000cvt.u32.u64\t\000cvt.u64.u"
    "16\t\000cvt.u64.u32\t\000div.u16\t\000div.u32\t\000div.u64\t\000exit\000"
    "add\000cos\000div\000mad\000mul\000neg\000sin\000sqrt\000sub\000ld.cons"
    "t.f32\t\000ld.const.f64\t\000ld.const.u16\t\000ld.const.u32\t\000ld.con"
    "st.u64\t\000ld.global.f32\t\000ld.global.f64\t\000ld.global.u16\t\000ld"
    ".global.u32\t\000ld.global.u64\t\000ld.shared.f32\t\000ld.shared.f64\t\000"
    "ld.shared.u16\t\000ld.shared.u32\t\000ld.shared.u64\t\000ld.local.f32\t"
    "\000st.local.f32\t[\000ld.local.f64\t\000st.local.f64\t[\000ld.local.pr"
    "ed\t\000st.local.pred\t[\000ld.local.u16\t\000st.local.u16\t[\000ld.loc"
    "al.u32\t\000st.local.u32\t[\000ld.local.u64\t\000st.local.u64\t[\000mov"
    ".f32\t\000mov.f64\t\000mov.pred\t\000mov.u16\t\000mov.u32\t\000mov.u64\t"
    "\000mov.b32\t\000mov.b64\t\000cvta.local.u32\t\000cvta.local.u64\t\000m"
    "ul.lo.u16\t\000mul.lo.u32\t\000mul.lo.u64\t\000or.b16\t\000or.b32\t\000"
    "or.b64\t\000or.pred\t\000ld.param.f32\t\000st.param.f32\t[\000ld.param."
    "f64\t\000st.param.f64\t[\000ld.param.pred\t\000st.param.pred\t[\000ld.p"
    "aram.u16\t\000st.param.u16\t[\000ld.param.u32\t\000st.param.u32\t[\000l"
    "d.param.u64\t\000st.param.u64\t[\000bar.sync\t\000mov.b16\t\000rem.u16\t"
    "\000rem.u32\t\000rem.u64\t\000ret\000div.s16\t\000div.s32\t\000div.s64\t"
    "\000selp.f32\t\000selp.f64\t\000selp.u16\t\000selp.u32\t\000selp.u64\t\000"
    "setp.eq.f32\t\000setp.equ.f32\t\000setp.eq.and.f32\t\000setp.equ.and.f3"
    "2\t\000setp.eq.or.f32\t\000setp.equ.or.f32\t\000setp.eq.xor.f32\t\000se"
    "tp.equ.xor.f32\t\000setp.eq.f64\t\000setp.equ.f64\t\000setp.eq.and.f64\t"
    "\000setp.equ.and.f64\t\000setp.eq.or.f64\t\000setp.equ.or.f64\t\000setp"
    ".eq.xor.f64\t\000setp.equ.xor.f64\t\000setp.eq.u16\t\000setp.eq.and.u16"
    "\t\000setp.eq.or.u16\t\000setp.eq.xor.u16\t\000setp.eq.u32\t\000setp.eq"
    ".and.u32\t\000setp.eq.or.u32\t\000setp.eq.xor.u32\t\000setp.eq.u64\t\000"
    "setp.eq.and.u64\t\000setp.eq.or.u64\t\000setp.eq.xor.u64\t\000setp.ge.f"
    "32\t\000setp.geu.f32\t\000setp.ge.and.f32\t\000setp.geu.and.f32\t\000se"
    "tp.ge.or.f32\t\000setp.geu.or.f32\t\000setp.ge.xor.f32\t\000setp.geu.xo"
    "r.f32\t\000setp.ge.f64\t\000setp.geu.f64\t\000setp.ge.and.f64\t\000setp"
    ".geu.and.f64\t\000setp.ge.or.f64\t\000setp.geu.or.f64\t\000setp.ge.xor."
    "f64\t\000setp.geu.xor.f64\t\000setp.ge.s16\t\000setp.ge.and.s16\t\000se"
    "tp.ge.or.s16\t\000setp.ge.xor.s16\t\000setp.ge.s32\t\000setp.ge.and.s32"
    "\t\000setp.ge.or.s32\t\000setp.ge.xor.s32\t\000setp.ge.s64\t\000setp.ge"
    ".and.s64\t\000setp.ge.or.s64\t\000setp.ge.xor.s64\t\000setp.ge.u16\t\000"
    "setp.ge.and.u16\t\000setp.ge.or.u16\t\000setp.ge.xor.u16\t\000setp.ge.u"
    "32\t\000setp.ge.and.u32\t\000setp.ge.or.u32\t\000setp.ge.xor.u32\t\000s"
    "etp.ge.u64\t\000setp.ge.and.u64\t\000setp.ge.or.u64\t\000setp.ge.xor.u6"
    "4\t\000setp.gt.f32\t\000setp.gtu.f32\t\000setp.gt.and.f32\t\000setp.gtu"
    ".and.f32\t\000setp.gt.or.f32\t\000setp.gtu.or.f32\t\000setp.gt.xor.f32\t"
    "\000setp.gtu.xor.f32\t\000setp.gt.f64\t\000setp.gtu.f64\t\000setp.gt.an"
    "d.f64\t\000setp.gtu.and.f64\t\000setp.gt.or.f64\t\000setp.gtu.or.f64\t\000"
    "setp.gt.xor.f64\t\000setp.gtu.xor.f64\t\000setp.gt.s16\t\000setp.gt.and"
    ".s16\t\000setp.gt.or.s16\t\000setp.gt.xor.s16\t\000setp.gt.s32\t\000set"
    "p.gt.and.s32\t\000setp.gt.or.s32\t\000setp.gt.xor.s32\t\000setp.gt.s64\t"
    "\000setp.gt.and.s64\t\000setp.gt.or.s64\t\000setp.gt.xor.s64\t\000setp."
    "gt.u16\t\000setp.gt.and.u16\t\000setp.gt.or.u16\t\000setp.gt.xor.u16\t\000"
    "setp.gt.u32\t\000setp.gt.and.u32\t\000setp.gt.or.u32\t\000setp.gt.xor.u"
    "32\t\000setp.gt.u64\t\000setp.gt.and.u64\t\000setp.gt.or.u64\t\000setp."
    "gt.xor.u64\t\000setp.le.f32\t\000setp.leu.f32\t\000setp.le.and.f32\t\000"
    "setp.leu.and.f32\t\000setp.le.or.f32\t\000setp.leu.or.f32\t\000setp.le."
    "xor.f32\t\000setp.leu.xor.f32\t\000setp.le.f64\t\000setp.leu.f64\t\000s"
    "etp.le.and.f64\t\000setp.leu.and.f64\t\000setp.le.or.f64\t\000setp.leu."
    "or.f64\t\000setp.le.xor.f64\t\000setp.leu.xor.f64\t\000setp.le.s16\t\000"
    "setp.le.and.s16\t\000setp.le.or.s16\t\000setp.le.xor.s16\t\000setp.le.s"
    "32\t\000setp.le.and.s32\t\000setp.le.or.s32\t\000setp.le.xor.s32\t\000s"
    "etp.le.s64\t\000setp.le.and.s64\t\000setp.le.or.s64\t\000setp.le.xor.s6"
    "4\t\000setp.le.u16\t\000setp.le.and.u16\t\000setp.le.or.u16\t\000setp.l"
    "e.xor.u16\t\000setp.le.u32\t\000setp.le.and.u32\t\000setp.le.or.u32\t\000"
    "setp.le.xor.u32\t\000setp.le.u64\t\000setp.le.and.u64\t\000setp.le.or.u"
    "64\t\000setp.le.xor.u64\t\000setp.lt.f32\t\000setp.ltu.f32\t\000setp.lt"
    ".and.f32\t\000setp.ltu.and.f32\t\000setp.lt.or.f32\t\000setp.ltu.or.f32"
    "\t\000setp.lt.xor.f32\t\000setp.ltu.xor.f32\t\000setp.lt.f64\t\000setp."
    "ltu.f64\t\000setp.lt.and.f64\t\000setp.ltu.and.f64\t\000setp.lt.or.f64\t"
    "\000setp.ltu.or.f64\t\000setp.lt.xor.f64\t\000setp.ltu.xor.f64\t\000set"
    "p.lt.s16\t\000setp.lt.and.s16\t\000setp.lt.or.s16\t\000setp.lt.xor.s16\t"
    "\000setp.lt.s32\t\000setp.lt.and.s32\t\000setp.lt.or.s32\t\000setp.lt.x"
    "or.s32\t\000setp.lt.s64\t\000setp.lt.and.s64\t\000setp.lt.or.s64\t\000s"
    "etp.lt.xor.s64\t\000setp.lt.u16\t\000setp.lt.and.u16\t\000setp.lt.or.u1"
    "6\t\000setp.lt.xor.u16\t\000setp.lt.u32\t\000setp.lt.and.u32\t\000setp."
    "lt.or.u32\t\000setp.lt.xor.u32\t\000setp.lt.u64\t\000setp.lt.and.u64\t\000"
    "setp.lt.or.u64\t\000setp.lt.xor.u64\t\000setp.ne.f32\t\000setp.neu.f32\t"
    "\000setp.ne.and.f32\t\000setp.neu.and.f32\t\000setp.ne.or.f32\t\000setp"
    ".neu.or.f32\t\000setp.ne.xor.f32\t\000setp.neu.xor.f32\t\000setp.ne.f64"
    "\t\000setp.neu.f64\t\000setp.ne.and.f64\t\000setp.neu.and.f64\t\000setp"
    ".ne.or.f64\t\000setp.neu.or.f64\t\000setp.ne.xor.f64\t\000setp.neu.xor."
    "f64\t\000setp.ne.u16\t\000setp.ne.and.u16\t\000setp.ne.or.u16\t\000setp"
    ".ne.xor.u16\t\000setp.ne.u32\t\000setp.ne.and.u32\t\000setp.ne.or.u32\t"
    "\000setp.ne.xor.u32\t\000setp.ne.u64\t\000setp.ne.and.u64\t\000setp.ne."
    "or.u64\t\000setp.ne.xor.u64\t\000shl.b16\t\000shl.b32\t\000shl.b64\t\000"
    "shr.s16\t\000shr.s32\t\000shr.s64\t\000shr.u16\t\000shr.u32\t\000shr.u6"
    "4\t\000st.global.f32\t[\000st.global.f64\t[\000st.global.u16\t[\000st.g"
    "lobal.u32\t[\000st.global.u64\t[\000st.shared.f32\t[\000st.shared.f64\t"
    "[\000st.shared.u16\t[\000st.shared.u32\t[\000st.shared.u64\t[\000sub.u1"
    "6\t\000sub.u32\t\000sub.u64\t\000//w\000xor.b16\t\000xor.b32\t\000xor.b"
    "64\t\000xor.pred\t\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 30) & 3) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, CALL, EXIT, RET, WRITEPARAMF32, WRITEPARAMF64, WRIT...
    return;
    break;
  case 1:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, ANDri16, ANDri32...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // CVTf32f64, CVTf32s16, CVTf32s32, CVTf32s64, CVTf32u16, CVTf32u32, CVTf...
    printRoundingMode(MI, 1, O); 
    break;
  case 3:
    // LOCALF32STri32, LOCALF32STri64, LOCALF64STri32, LOCALF64STri64, LOCALP...
    printMemOperand(MI, 1, O); 
    O << "], "; 
    printOperand(MI, 0, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 7 bits for 65 unique commands.
  switch ((Bits >> 23) & 127) {
  default:   // unreachable.
  case 0:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, ANDri16, ANDri32...
    O << ", "; 
    break;
  case 1:
    // BRAd, BRAdp, PTX_BAR_SYNC
    return;
    break;
  case 2:
    // CVTf32f64
    O << ".f32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CVTf32s16
    O << ".f32.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // CVTf32s32
    O << ".f32.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // CVTf32s64
    O << ".f32.s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // CVTf32u16
    O << ".f32.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // CVTf32u32
    O << ".f32.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // CVTf32u64
    O << ".f32.u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // CVTf64s16
    O << ".f64.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 10:
    // CVTf64s32
    O << ".f64.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 11:
    // CVTf64s64
    O << ".f64.s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 12:
    // CVTf64u16
    O << ".f64.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 13:
    // CVTf64u32
    O << ".f64.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // CVTf64u64
    O << ".f64.u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 15:
    // CVTs16f32
    O << ".s16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // CVTs16f64
    O << ".s16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 17:
    // CVTs32f32
    O << ".s32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 18:
    // CVTs32f64
    O << ".s32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 19:
    // CVTs64f32
    O << ".s64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 20:
    // CVTs64f64
    O << ".s64.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 21:
    // CVTu16f32
    O << ".u16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 22:
    // CVTu16f64
    O << ".u16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 23:
    // CVTu32f32
    O << ".u32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 24:
    // CVTu32f64
    O << ".u32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 25:
    // CVTu64f32
    O << ".u64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 26:
    // CVTu64f64
    O << ".u64.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 27:
    // FADDri32, FADDrr32, FCOSri32, FCOSrr32, FDIVri32, FDIVrr32, FMADrii32,...
    O << ".f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 28:
    // FADDri64, FADDrr64, FCOSri64, FCOSrr64, FDIVri64, FDIVrr64, FMADrii64,...
    O << ".f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 29:
    // LDcf32ii32, LDcf32ii64, LDcf32ri32, LDcf32ri64, LDcf32rr32, LDcf32rr64...
    O << ", ["; 
    break;
  case 30:
    // PARAMF32STpi, PARAMF64STpi, PARAMPREDSTpi, PARAMU16STpi, PARAMU32STpi,...
    O << "], "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 31:
    // PTX_READ_CLOCK
    O << ", %clock"; 
    return;
    break;
  case 32:
    // PTX_READ_CLOCK64
    O << ", %clock64"; 
    return;
    break;
  case 33:
    // PTX_READ_CTAID_W
    O << ", %ctaid.w"; 
    return;
    break;
  case 34:
    // PTX_READ_CTAID_X
    O << ", %ctaid.x"; 
    return;
    break;
  case 35:
    // PTX_READ_CTAID_Y
    O << ", %ctaid.y"; 
    return;
    break;
  case 36:
    // PTX_READ_CTAID_Z
    O << ", %ctaid.z"; 
    return;
    break;
  case 37:
    // PTX_READ_GRIDID
    O << ", %gridid"; 
    return;
    break;
  case 38:
    // PTX_READ_LANEID
    O << ", %laneid"; 
    return;
    break;
  case 39:
    // PTX_READ_LANEMASK_EQ
    O << ", %lanemask_eq"; 
    return;
    break;
  case 40:
    // PTX_READ_LANEMASK_GE
    O << ", %lanemask_ge"; 
    return;
    break;
  case 41:
    // PTX_READ_LANEMASK_GT
    O << ", %lanemask_gt"; 
    return;
    break;
  case 42:
    // PTX_READ_LANEMASK_LE
    O << ", %lanemask_le"; 
    return;
    break;
  case 43:
    // PTX_READ_LANEMASK_LT
    O << ", %lanemask_lt"; 
    return;
    break;
  case 44:
    // PTX_READ_NCTAID_W
    O << ", %nctaid.w"; 
    return;
    break;
  case 45:
    // PTX_READ_NCTAID_X
    O << ", %nctaid.x"; 
    return;
    break;
  case 46:
    // PTX_READ_NCTAID_Y
    O << ", %nctaid.y"; 
    return;
    break;
  case 47:
    // PTX_READ_NCTAID_Z
    O << ", %nctaid.z"; 
    return;
    break;
  case 48:
    // PTX_READ_NSMID
    O << ", %nsmid"; 
    return;
    break;
  case 49:
    // PTX_READ_NTID_W
    O << ", %ntid.w"; 
    return;
    break;
  case 50:
    // PTX_READ_NTID_X
    O << ", %ntid.x"; 
    return;
    break;
  case 51:
    // PTX_READ_NTID_Y
    O << ", %ntid.y"; 
    return;
    break;
  case 52:
    // PTX_READ_NTID_Z
    O << ", %ntid.z"; 
    return;
    break;
  case 53:
    // PTX_READ_NWARPID
    O << ", %nwarpid"; 
    return;
    break;
  case 54:
    // PTX_READ_PM0
    O << ", %pm0"; 
    return;
    break;
  case 55:
    // PTX_READ_PM1
    O << ", %pm1"; 
    return;
    break;
  case 56:
    // PTX_READ_PM2
    O << ", %pm2"; 
    return;
    break;
  case 57:
    // PTX_READ_PM3
    O << ", %pm3"; 
    return;
    break;
  case 58:
    // PTX_READ_SMID
    O << ", %smid"; 
    return;
    break;
  case 59:
    // PTX_READ_TID_W
    O << ", %tid.w"; 
    return;
    break;
  case 60:
    // PTX_READ_TID_X
    O << ", %tid.x"; 
    return;
    break;
  case 61:
    // PTX_READ_TID_Y
    O << ", %tid.y"; 
    return;
    break;
  case 62:
    // PTX_READ_TID_Z
    O << ", %tid.z"; 
    return;
    break;
  case 63:
    // PTX_READ_WARPID
    O << ", %warpid"; 
    return;
    break;
  case 64:
    // READPARAMF32, READPARAMF64, READPARAMI16, READPARAMI32, READPARAMI64, ...
    O << ", %arg"; 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 20) & 7) {
  default:   // unreachable.
  case 0:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, ANDri16, ANDri32...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // FADDri32, FADDri64, FADDrr32, FADDrr64, FDIVri32, FDIVri64, FDIVrr32, ...
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 2:
    // FCOSri32, FCOSri64, FCOSrr32, FCOSrr64, FNEGri32, FNEGri64, FNEGrr32, ...
    return;
    break;
  case 3:
    // LDcf32ii32, LDcf32ii64, LDcf32ri32, LDcf32ri64, LDcf32rr32, LDcf32rr64...
    printMemOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 4:
    // SELPf32ii, SELPf32ri, SELPf32rr, SELPf64ii, SELPf64ri, SELPf64rr, SELP...
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 18) & 3) {
  default:   // unreachable.
  case 0:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, ANDri16, ANDri32...
    O << ", "; 
    break;
  case 1:
    // CVTf64f32, CVTs32s16, CVTs64s16, CVTs64s32, CVTu16u32, CVTu16u64, CVTu...
    return;
    break;
  case 2:
    // PARAMF32LDpi, PARAMF64LDpi, PARAMPREDLDpi, PARAMU16LDpi, PARAMU32LDpi,...
    O << ']'; 
    return;
    break;
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 17) & 1) {
    // FMADrii32, FMADrii64, FMADrri32, FMADrri64, FMADrrr32, FMADrrr64
    printOperand(MI, 4, O); 
    return;
  } else {
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, ANDri16, ANDri32...
    printOperand(MI, 2, O); 
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 15) & 3) {
  default:   // unreachable.
  case 0:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, ANDri16, ANDri32...
    return;
    break;
  case 1:
    // SETPEQf32rr_and_not_r_o, SETPEQf32rr_and_not_r_u, SETPEQf32rr_or_not_r...
    O << ", !"; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 2:
    // SETPEQf32rr_and_r_o, SETPEQf32rr_and_r_u, SETPEQf32rr_or_r_o, SETPEQf3...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PTXInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 2 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 0
  };

  const char *AsmStrs =
    "R0\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *PTXInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 1059 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 158, 166, 174, 182, 190, 198, 206, 214, 222, 230, 241, 249, 257, 
    265, 276, 281, 287, 292, 302, 312, 322, 332, 342, 352, 362, 372, 382, 
    392, 402, 412, 422, 432, 442, 452, 462, 472, 482, 492, 502, 512, 522, 
    532, 542, 552, 562, 572, 582, 592, 602, 612, 622, 632, 642, 650, 658, 
    666, 674, 682, 690, 695, 704, 713, 722, 731, 740, 749, 758, 767, 776, 
    785, 794, 803, 813, 823, 833, 843, 853, 863, 872, 881, 890, 899, 908, 
    917, 926, 935, 944, 953, 962, 971, 981, 991, 1001, 1011, 1020, 1029, 1038, 
    1047, 1058, 1069, 1080, 1091, 1102, 1113, 1124, 1135, 1146, 1157, 1168, 1179, 1190, 
    1201, 1212, 1223, 1234, 1245, 1256, 1267, 1278, 1289, 1300, 1311, 1322, 1333, 1344, 
    1355, 1366, 1377, 1388, 1399, 1410, 1421, 1432, 1443, 1454, 1465, 1476, 1487, 1498, 
    1509, 1520, 1531, 1542, 1553, 1564, 1575, 1586, 1597, 1608, 1619, 1630, 1641, 1652, 
    1663, 1674, 1685, 1696, 1707, 1718, 1729, 1740, 1751, 1762, 1773, 1784, 1795, 1806, 
    1817, 1828, 1839, 1850, 1861, 1872, 1883, 1894, 1905, 1916, 1927, 1938, 1949, 1960, 
    1971, 1982, 1993, 2004, 2015, 2026, 2037, 2052, 2067, 2082, 2097, 2112, 2127, 2142, 
    2157, 2173, 2189, 2205, 2221, 2236, 2251, 2266, 2281, 2296, 2311, 2326, 2341, 2356, 
    2371, 2386, 2401, 2410, 2419, 2428, 2437, 2447, 2457, 2466, 2475, 2484, 2493, 2502, 
    2511, 2521, 2531, 2541, 2551, 2562, 2573, 2583, 2593, 2601, 2609, 2617, 2625, 2633, 
    2641, 2648, 2655, 2662, 2672, 2679, 2686, 2693, 2703, 2716, 2729, 2742, 2755, 2769, 
    2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2889, 2906, 2923, 2940, 2957, 2974, 
    2990, 3006, 3027, 3048, 3069, 3090, 3111, 3129, 3147, 3165, 3183, 3198, 3214, 3230, 
    3246, 3262, 3279, 3292, 3305, 3318, 3331, 3345, 3360, 3375, 3390, 3405, 3421, 3434, 
    3447, 3460, 3473, 3486, 3500, 3508, 3516, 3524, 3532, 3540, 3548, 3552, 3561, 3570, 
    3579, 3588, 3597, 3606, 3616, 3626, 3636, 3646, 3656, 3666, 3676, 3686, 3696, 3706, 
    3716, 3726, 3736, 3746, 3756, 3770, 3784, 3808, 3832, 3852, 3872, 3886, 3909, 3932, 
    3951, 3970, 3984, 4008, 4032, 4052, 4072, 4086, 4100, 4124, 4148, 4168, 4188, 4202, 
    4225, 4248, 4267, 4286, 4300, 4324, 4348, 4368, 4388, 4400, 4422, 4440, 4461, 4478, 
    4500, 4518, 4530, 4552, 4570, 4591, 4608, 4630, 4648, 4660, 4682, 4700, 4721, 4738, 
    4760, 4778, 4790, 4812, 4830, 4851, 4868, 4890, 4908, 4920, 4942, 4960, 4981, 4998, 
    5020, 5038, 5050, 5072, 5090, 5111, 5128, 5150, 5168, 5182, 5196, 5220, 5244, 5264, 
    5284, 5298, 5321, 5344, 5363, 5382, 5396, 5420, 5444, 5464, 5484, 5498, 5512, 5536, 
    5560, 5580, 5600, 5614, 5637, 5660, 5679, 5698, 5712, 5736, 5760, 5780, 5800, 5812, 
    5834, 5852, 5873, 5890, 5912, 5930, 5942, 5964, 5982, 6003, 6020, 6042, 6060, 6072, 
    6094, 6112, 6133, 6150, 6172, 6190, 6202, 6224, 6242, 6263, 6280, 6302, 6320, 6332, 
    6354, 6372, 6393, 6410, 6432, 6450, 6462, 6484, 6502, 6523, 6540, 6562, 6580, 6592, 
    6614, 6632, 6653, 6670, 6692, 6710, 6722, 6744, 6762, 6783, 6800, 6822, 6840, 6852, 
    6874, 6892, 6913, 6930, 6952, 6970, 6982, 7004, 7022, 7043, 7060, 7082, 7100, 7112, 
    7134, 7152, 7173, 7190, 7212, 7230, 7242, 7264, 7282, 7303, 7320, 7342, 7360, 7374, 
    7388, 7412, 7436, 7456, 7476, 7490, 7513, 7536, 7555, 7574, 7588, 7612, 7636, 7656, 
    7676, 7690, 7704, 7728, 7752, 7772, 7792, 7806, 7829, 7852, 7871, 7890, 7904, 7928, 
    7952, 7972, 7992, 8004, 8026, 8044, 8065, 8082, 8104, 8122, 8134, 8156, 8174, 8195, 
    8212, 8234, 8252, 8264, 8286, 8304, 8325, 8342, 8364, 8382, 8394, 8416, 8434, 8455, 
    8472, 8494, 8512, 8524, 8546, 8564, 8585, 8602, 8624, 8642, 8654, 8676, 8694, 8715, 
    8732, 8754, 8772, 8784, 8806, 8824, 8845, 8862, 8884, 8902, 8914, 8936, 8954, 8975, 
    8992, 9014, 9032, 9044, 9066, 9084, 9105, 9122, 9144, 9162, 9174, 9196, 9214, 9235, 
    9252, 9274, 9292, 9304, 9326, 9344, 9365, 9382, 9404, 9422, 9434, 9456, 9474, 9495, 
    9512, 9534, 9552, 9566, 9580, 9604, 9628, 9648, 9668, 9682, 9705, 9728, 9747, 9766, 
    9780, 9804, 9828, 9848, 9868, 9882, 9896, 9920, 9944, 9964, 9984, 9998, 10021, 10044, 
    10063, 10082, 10096, 10120, 10144, 10164, 10184, 10196, 10218, 10236, 10257, 10274, 10296, 10314, 
    10326, 10348, 10366, 10387, 10404, 10426, 10444, 10456, 10478, 10496, 10517, 10534, 10556, 10574, 
    10586, 10608, 10626, 10647, 10664, 10686, 10704, 10716, 10738, 10756, 10777, 10794, 10816, 10834, 
    10846, 10868, 10886, 10907, 10924, 10946, 10964, 10976, 10998, 11016, 11037, 11054, 11076, 11094, 
    11106, 11128, 11146, 11167, 11184, 11206, 11224, 11236, 11258, 11276, 11297, 11314, 11336, 11354, 
    11366, 11388, 11406, 11427, 11444, 11466, 11484, 11496, 11518, 11536, 11557, 11574, 11596, 11614, 
    11626, 11648, 11666, 11687, 11704, 11726, 11744, 11758, 11772, 11796, 11820, 11840, 11860, 11874, 
    11897, 11920, 11939, 11958, 11972, 11996, 12020, 12040, 12060, 12074, 12088, 12112, 12136, 12156, 
    12176, 12190, 12213, 12236, 12255, 12274, 12288, 12312, 12336, 12356, 12376, 12388, 12410, 12428, 
    12449, 12466, 12488, 12506, 12518, 12540, 12558, 12579, 12596, 12618, 12636, 12648, 12670, 12688, 
    12709, 12726, 12748, 12766, 12778, 12800, 12818, 12839, 12856, 12878, 12896, 12908, 12930, 12948, 
    12969, 12986, 13008, 13026, 13038, 13060, 13078, 13099, 13116, 13138, 13156, 13168, 13190, 13208, 
    13229, 13246, 13268, 13286, 13298, 13320, 13338, 13359, 13376, 13398, 13416, 13428, 13450, 13468, 
    13489, 13506, 13528, 13546, 13558, 13580, 13598, 13619, 13636, 13658, 13676, 13688, 13710, 13728, 
    13749, 13766, 13788, 13806, 13818, 13840, 13858, 13879, 13896, 13918, 13936, 13950, 13964, 13988, 
    14012, 14032, 14052, 14066, 14089, 14112, 14131, 14150, 14164, 14188, 14212, 14232, 14252, 14266, 
    14280, 14304, 14328, 14348, 14368, 14382, 14405, 14428, 14447, 14466, 14480, 14504, 14528, 14548, 
    14568, 14580, 14602, 14620, 14641, 14658, 14680, 14698, 14710, 14732, 14750, 14771, 14788, 14810, 
    14828, 14840, 14862, 14880, 14901, 14918, 14940, 14958, 14970, 14992, 15010, 15031, 15048, 15070, 
    15088, 15100, 15122, 15140, 15161, 15178, 15200, 15218, 15230, 15252, 15270, 15291, 15308, 15330, 
    15348, 15356, 15364, 15372, 15380, 15388, 15396, 15404, 15412, 15420, 15428, 15436, 15444, 15452, 
    15460, 15468, 15476, 15484, 15492, 15500, 15508, 15516, 15524, 15532, 15540, 15548, 15556, 15564, 
    15575, 15586, 15597, 15608, 15619, 15630, 15641, 15652, 15663, 15674, 15685, 15696, 15707, 15718, 
    15729, 15740, 15751, 15762, 15773, 15784, 15795, 15806, 15817, 15828, 15839, 15850, 15861, 15872, 
    15883, 15894, 15905, 15916, 15927, 15938, 15949, 15960, 15971, 15982, 15993, 16004, 16015, 16026, 
    16037, 16048, 16059, 16070, 16081, 16092, 16103, 16114, 16125, 16136, 16147, 16158, 16169, 16180, 
    16191, 16202, 16213, 16224, 16232, 16240, 16248, 16256, 16264, 16272, 16286, 16300, 16314, 16328, 
    16342, 16357, 16365, 16373, 16381, 16392, 16400, 16408, 16416, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000BUNDLE\000ADDri16\000"
    "ADDri32\000ADDri64\000ADDrr16\000ADDrr32\000ADDrr64\000ANDri16\000ANDri"
    "32\000ANDri64\000ANDripreds\000ANDrr16\000ANDrr32\000ANDrr64\000ANDrrpr"
    "eds\000BRAd\000BRAdp\000CALL\000CVTf32f64\000CVTf32s16\000CVTf32s32\000"
    "CVTf32s64\000CVTf32u16\000CVTf32u32\000CVTf32u64\000CVTf64f32\000CVTf64"
    "s16\000CVTf64s32\000CVTf64s64\000CVTf64u16\000CVTf64u32\000CVTf64u64\000"
    "CVTs16f32\000CVTs16f64\000CVTs32f32\000CVTs32f64\000CVTs32s16\000CVTs64"
    "f32\000CVTs64f64\000CVTs64s16\000CVTs64s32\000CVTu16f32\000CVTu16f64\000"
    "CVTu16u32\000CVTu16u64\000CVTu32f32\000CVTu32f64\000CVTu32u16\000CVTu32"
    "u64\000CVTu64f32\000CVTu64f64\000CVTu64u16\000CVTu64u32\000DIVri16\000D"
    "IVri32\000DIVri64\000DIVrr16\000DIVrr32\000DIVrr64\000EXIT\000FADDri32\000"
    "FADDri64\000FADDrr32\000FADDrr64\000FCOSri32\000FCOSri64\000FCOSrr32\000"
    "FCOSrr64\000FDIVri32\000FDIVri64\000FDIVrr32\000FDIVrr64\000FMADrii32\000"
    "FMADrii64\000FMADrri32\000FMADrri64\000FMADrrr32\000FMADrrr64\000FMULri"
    "32\000FMULri64\000FMULrr32\000FMULrr64\000FNEGri32\000FNEGri64\000FNEGr"
    "r32\000FNEGrr64\000FSINri32\000FSINri64\000FSINrr32\000FSINrr64\000FSQR"
    "Tri32\000FSQRTri64\000FSQRTrr32\000FSQRTrr64\000FSUBri32\000FSUBri64\000"
    "FSUBrr32\000FSUBrr64\000LDcf32ii32\000LDcf32ii64\000LDcf32ri32\000LDcf3"
    "2ri64\000LDcf32rr32\000LDcf32rr64\000LDcf64ii32\000LDcf64ii64\000LDcf64"
    "ri32\000LDcf64ri64\000LDcf64rr32\000LDcf64rr64\000LDcu16ii32\000LDcu16i"
    "i64\000LDcu16ri32\000LDcu16ri64\000LDcu16rr32\000LDcu16rr64\000LDcu32ii"
    "32\000LDcu32ii64\000LDcu32ri32\000LDcu32ri64\000LDcu32rr32\000LDcu32rr6"
    "4\000LDcu64ii32\000LDcu64ii64\000LDcu64ri32\000LDcu64ri64\000LDcu64rr32"
    "\000LDcu64rr64\000LDgf32ii32\000LDgf32ii64\000LDgf32ri32\000LDgf32ri64\000"
    "LDgf32rr32\000LDgf32rr64\000LDgf64ii32\000LDgf64ii64\000LDgf64ri32\000L"
    "Dgf64ri64\000LDgf64rr32\000LDgf64rr64\000LDgu16ii32\000LDgu16ii64\000LD"
    "gu16ri32\000LDgu16ri64\000LDgu16rr32\000LDgu16rr64\000LDgu32ii32\000LDg"
    "u32ii64\000LDgu32ri32\000LDgu32ri64\000LDgu32rr32\000LDgu32rr64\000LDgu"
    "64ii32\000LDgu64ii64\000LDgu64ri32\000LDgu64ri64\000LDgu64rr32\000LDgu6"
    "4rr64\000LDsf32ii32\000LDsf32ii64\000LDsf32ri32\000LDsf32ri64\000LDsf32"
    "rr32\000LDsf32rr64\000LDsf64ii32\000LDsf64ii64\000LDsf64ri32\000LDsf64r"
    "i64\000LDsf64rr32\000LDsf64rr64\000LDsu16ii32\000LDsu16ii64\000LDsu16ri"
    "32\000LDsu16ri64\000LDsu16rr32\000LDsu16rr64\000LDsu32ii32\000LDsu32ii6"
    "4\000LDsu32ri32\000LDsu32ri64\000LDsu32rr32\000LDsu32rr64\000LDsu64ii32"
    "\000LDsu64ii64\000LDsu64ri32\000LDsu64ri64\000LDsu64rr32\000LDsu64rr64\000"
    "LOCALF32LDri32\000LOCALF32LDri64\000LOCALF32STri32\000LOCALF32STri64\000"
    "LOCALF64LDri32\000LOCALF64LDri64\000LOCALF64STri32\000LOCALF64STri64\000"
    "LOCALPREDLDri32\000LOCALPREDLDri64\000LOCALPREDSTri32\000LOCALPREDSTri6"
    "4\000LOCALU16LDri32\000LOCALU16LDri64\000LOCALU16STri32\000LOCALU16STri"
    "64\000LOCALU32LDri32\000LOCALU32LDri64\000LOCALU32STri32\000LOCALU32STr"
    "i64\000LOCALU64LDri32\000LOCALU64LDri64\000LOCALU64STri32\000LOCALU64ST"
    "ri64\000MOVF32ri\000MOVF32rr\000MOVF64ri\000MOVF64rr\000MOVPREDri\000MO"
    "VPREDrr\000MOVU16ri\000MOVU16rr\000MOVU32ri\000MOVU32rr\000MOVU64ri\000"
    "MOVU64rr\000MOVaddr32\000MOVaddr64\000MOVf32i32\000MOVf64i64\000MOVfram"
    "e32\000MOVframe64\000MOVi32f32\000MOVi64f64\000MULri16\000MULri32\000MU"
    "Lri64\000MULrr16\000MULrr32\000MULrr64\000ORri16\000ORri32\000ORri64\000"
    "ORripreds\000ORrr16\000ORrr32\000ORrr64\000ORrrpreds\000PARAMF32LDpi\000"
    "PARAMF32STpi\000PARAMF64LDpi\000PARAMF64STpi\000PARAMPREDLDpi\000PARAMP"
    "REDSTpi\000PARAMU16LDpi\000PARAMU16STpi\000PARAMU32LDpi\000PARAMU32STpi"
    "\000PARAMU64LDpi\000PARAMU64STpi\000PTX_BAR_SYNC\000PTX_READ_CLOCK\000P"
    "TX_READ_CLOCK64\000PTX_READ_CTAID_W\000PTX_READ_CTAID_X\000PTX_READ_CTA"
    "ID_Y\000PTX_READ_CTAID_Z\000PTX_READ_GRIDID\000PTX_READ_LANEID\000PTX_R"
    "EAD_LANEMASK_EQ\000PTX_READ_LANEMASK_GE\000PTX_READ_LANEMASK_GT\000PTX_"
    "READ_LANEMASK_LE\000PTX_READ_LANEMASK_LT\000PTX_READ_NCTAID_W\000PTX_RE"
    "AD_NCTAID_X\000PTX_READ_NCTAID_Y\000PTX_READ_NCTAID_Z\000PTX_READ_NSMID"
    "\000PTX_READ_NTID_W\000PTX_READ_NTID_X\000PTX_READ_NTID_Y\000PTX_READ_N"
    "TID_Z\000PTX_READ_NWARPID\000PTX_READ_PM0\000PTX_READ_PM1\000PTX_READ_P"
    "M2\000PTX_READ_PM3\000PTX_READ_SMID\000PTX_READ_TID_W\000PTX_READ_TID_X"
    "\000PTX_READ_TID_Y\000PTX_READ_TID_Z\000PTX_READ_WARPID\000READPARAMF32"
    "\000READPARAMF64\000READPARAMI16\000READPARAMI32\000READPARAMI64\000REA"
    "DPARAMPRED\000REMri16\000REMri32\000REMri64\000REMrr16\000REMrr32\000RE"
    "Mrr64\000RET\000SDIVri16\000SDIVri32\000SDIVri64\000SDIVrr16\000SDIVrr3"
    "2\000SDIVrr64\000SELPf32ii\000SELPf32ri\000SELPf32rr\000SELPf64ii\000SE"
    "LPf64ri\000SELPf64rr\000SELPi16ii\000SELPi16ri\000SELPi16rr\000SELPi32i"
    "i\000SELPi32ri\000SELPi32rr\000SELPi64ii\000SELPi64ri\000SELPi64rr\000S"
    "ETPEQf32ri_o\000SETPEQf32ri_u\000SETPEQf32rr_and_not_r_o\000SETPEQf32rr"
    "_and_not_r_u\000SETPEQf32rr_and_r_o\000SETPEQf32rr_and_r_u\000SETPEQf32"
    "rr_o\000SETPEQf32rr_or_not_r_o\000SETPEQf32rr_or_not_r_u\000SETPEQf32rr"
    "_or_r_o\000SETPEQf32rr_or_r_u\000SETPEQf32rr_u\000SETPEQf32rr_xor_not_r"
    "_o\000SETPEQf32rr_xor_not_r_u\000SETPEQf32rr_xor_r_o\000SETPEQf32rr_xor"
    "_r_u\000SETPEQf64ri_o\000SETPEQf64ri_u\000SETPEQf64rr_and_not_r_o\000SE"
    "TPEQf64rr_and_not_r_u\000SETPEQf64rr_and_r_o\000SETPEQf64rr_and_r_u\000"
    "SETPEQf64rr_o\000SETPEQf64rr_or_not_r_o\000SETPEQf64rr_or_not_r_u\000SE"
    "TPEQf64rr_or_r_o\000SETPEQf64rr_or_r_u\000SETPEQf64rr_u\000SETPEQf64rr_"
    "xor_not_r_o\000SETPEQf64rr_xor_not_r_u\000SETPEQf64rr_xor_r_o\000SETPEQ"
    "f64rr_xor_r_u\000SETPEQu16ri\000SETPEQu16ri_and_not_r\000SETPEQu16ri_an"
    "d_r\000SETPEQu16ri_or_not_r\000SETPEQu16ri_or_r\000SETPEQu16ri_xor_not_"
    "r\000SETPEQu16ri_xor_r\000SETPEQu16rr\000SETPEQu16rr_and_not_r\000SETPE"
    "Qu16rr_and_r\000SETPEQu16rr_or_not_r\000SETPEQu16rr_or_r\000SETPEQu16rr"
    "_xor_not_r\000SETPEQu16rr_xor_r\000SETPEQu32ri\000SETPEQu32ri_and_not_r"
    "\000SETPEQu32ri_and_r\000SETPEQu32ri_or_not_r\000SETPEQu32ri_or_r\000SE"
    "TPEQu32ri_xor_not_r\000SETPEQu32ri_xor_r\000SETPEQu32rr\000SETPEQu32rr_"
    "and_not_r\000SETPEQu32rr_and_r\000SETPEQu32rr_or_not_r\000SETPEQu32rr_o"
    "r_r\000SETPEQu32rr_xor_not_r\000SETPEQu32rr_xor_r\000SETPEQu64ri\000SET"
    "PEQu64ri_and_not_r\000SETPEQu64ri_and_r\000SETPEQu64ri_or_not_r\000SETP"
    "EQu64ri_or_r\000SETPEQu64ri_xor_not_r\000SETPEQu64ri_xor_r\000SETPEQu64"
    "rr\000SETPEQu64rr_and_not_r\000SETPEQu64rr_and_r\000SETPEQu64rr_or_not_"
    "r\000SETPEQu64rr_or_r\000SETPEQu64rr_xor_not_r\000SETPEQu64rr_xor_r\000"
    "SETPGEf32ri_o\000SETPGEf32ri_u\000SETPGEf32rr_and_not_r_o\000SETPGEf32r"
    "r_and_not_r_u\000SETPGEf32rr_and_r_o\000SETPGEf32rr_and_r_u\000SETPGEf3"
    "2rr_o\000SETPGEf32rr_or_not_r_o\000SETPGEf32rr_or_not_r_u\000SETPGEf32r"
    "r_or_r_o\000SETPGEf32rr_or_r_u\000SETPGEf32rr_u\000SETPGEf32rr_xor_not_"
    "r_o\000SETPGEf32rr_xor_not_r_u\000SETPGEf32rr_xor_r_o\000SETPGEf32rr_xo"
    "r_r_u\000SETPGEf64ri_o\000SETPGEf64ri_u\000SETPGEf64rr_and_not_r_o\000S"
    "ETPGEf64rr_and_not_r_u\000SETPGEf64rr_and_r_o\000SETPGEf64rr_and_r_u\000"
    "SETPGEf64rr_o\000SETPGEf64rr_or_not_r_o\000SETPGEf64rr_or_not_r_u\000SE"
    "TPGEf64rr_or_r_o\000SETPGEf64rr_or_r_u\000SETPGEf64rr_u\000SETPGEf64rr_"
    "xor_not_r_o\000SETPGEf64rr_xor_not_r_u\000SETPGEf64rr_xor_r_o\000SETPGE"
    "f64rr_xor_r_u\000SETPGEs16ri\000SETPGEs16ri_and_not_r\000SETPGEs16ri_an"
    "d_r\000SETPGEs16ri_or_not_r\000SETPGEs16ri_or_r\000SETPGEs16ri_xor_not_"
    "r\000SETPGEs16ri_xor_r\000SETPGEs16rr\000SETPGEs16rr_and_not_r\000SETPG"
    "Es16rr_and_r\000SETPGEs16rr_or_not_r\000SETPGEs16rr_or_r\000SETPGEs16rr"
    "_xor_not_r\000SETPGEs16rr_xor_r\000SETPGEs32ri\000SETPGEs32ri_and_not_r"
    "\000SETPGEs32ri_and_r\000SETPGEs32ri_or_not_r\000SETPGEs32ri_or_r\000SE"
    "TPGEs32ri_xor_not_r\000SETPGEs32ri_xor_r\000SETPGEs32rr\000SETPGEs32rr_"
    "and_not_r\000SETPGEs32rr_and_r\000SETPGEs32rr_or_not_r\000SETPGEs32rr_o"
    "r_r\000SETPGEs32rr_xor_not_r\000SETPGEs32rr_xor_r\000SETPGEs64ri\000SET"
    "PGEs64ri_and_not_r\000SETPGEs64ri_and_r\000SETPGEs64ri_or_not_r\000SETP"
    "GEs64ri_or_r\000SETPGEs64ri_xor_not_r\000SETPGEs64ri_xor_r\000SETPGEs64"
    "rr\000SETPGEs64rr_and_not_r\000SETPGEs64rr_and_r\000SETPGEs64rr_or_not_"
    "r\000SETPGEs64rr_or_r\000SETPGEs64rr_xor_not_r\000SETPGEs64rr_xor_r\000"
    "SETPGEu16ri\000SETPGEu16ri_and_not_r\000SETPGEu16ri_and_r\000SETPGEu16r"
    "i_or_not_r\000SETPGEu16ri_or_r\000SETPGEu16ri_xor_not_r\000SETPGEu16ri_"
    "xor_r\000SETPGEu16rr\000SETPGEu16rr_and_not_r\000SETPGEu16rr_and_r\000S"
    "ETPGEu16rr_or_not_r\000SETPGEu16rr_or_r\000SETPGEu16rr_xor_not_r\000SET"
    "PGEu16rr_xor_r\000SETPGEu32ri\000SETPGEu32ri_and_not_r\000SETPGEu32ri_a"
    "nd_r\000SETPGEu32ri_or_not_r\000SETPGEu32ri_or_r\000SETPGEu32ri_xor_not"
    "_r\000SETPGEu32ri_xor_r\000SETPGEu32rr\000SETPGEu32rr_and_not_r\000SETP"
    "GEu32rr_and_r\000SETPGEu32rr_or_not_r\000SETPGEu32rr_or_r\000SETPGEu32r"
    "r_xor_not_r\000SETPGEu32rr_xor_r\000SETPGEu64ri\000SETPGEu64ri_and_not_"
    "r\000SETPGEu64ri_and_r\000SETPGEu64ri_or_not_r\000SETPGEu64ri_or_r\000S"
    "ETPGEu64ri_xor_not_r\000SETPGEu64ri_xor_r\000SETPGEu64rr\000SETPGEu64rr"
    "_and_not_r\000SETPGEu64rr_and_r\000SETPGEu64rr_or_not_r\000SETPGEu64rr_"
    "or_r\000SETPGEu64rr_xor_not_r\000SETPGEu64rr_xor_r\000SETPGTf32ri_o\000"
    "SETPGTf32ri_u\000SETPGTf32rr_and_not_r_o\000SETPGTf32rr_and_not_r_u\000"
    "SETPGTf32rr_and_r_o\000SETPGTf32rr_and_r_u\000SETPGTf32rr_o\000SETPGTf3"
    "2rr_or_not_r_o\000SETPGTf32rr_or_not_r_u\000SETPGTf32rr_or_r_o\000SETPG"
    "Tf32rr_or_r_u\000SETPGTf32rr_u\000SETPGTf32rr_xor_not_r_o\000SETPGTf32r"
    "r_xor_not_r_u\000SETPGTf32rr_xor_r_o\000SETPGTf32rr_xor_r_u\000SETPGTf6"
    "4ri_o\000SETPGTf64ri_u\000SETPGTf64rr_and_not_r_o\000SETPGTf64rr_and_no"
    "t_r_u\000SETPGTf64rr_and_r_o\000SETPGTf64rr_and_r_u\000SETPGTf64rr_o\000"
    "SETPGTf64rr_or_not_r_o\000SETPGTf64rr_or_not_r_u\000SETPGTf64rr_or_r_o\000"
    "SETPGTf64rr_or_r_u\000SETPGTf64rr_u\000SETPGTf64rr_xor_not_r_o\000SETPG"
    "Tf64rr_xor_not_r_u\000SETPGTf64rr_xor_r_o\000SETPGTf64rr_xor_r_u\000SET"
    "PGTs16ri\000SETPGTs16ri_and_not_r\000SETPGTs16ri_and_r\000SETPGTs16ri_o"
    "r_not_r\000SETPGTs16ri_or_r\000SETPGTs16ri_xor_not_r\000SETPGTs16ri_xor"
    "_r\000SETPGTs16rr\000SETPGTs16rr_and_not_r\000SETPGTs16rr_and_r\000SETP"
    "GTs16rr_or_not_r\000SETPGTs16rr_or_r\000SETPGTs16rr_xor_not_r\000SETPGT"
    "s16rr_xor_r\000SETPGTs32ri\000SETPGTs32ri_and_not_r\000SETPGTs32ri_and_"
    "r\000SETPGTs32ri_or_not_r\000SETPGTs32ri_or_r\000SETPGTs32ri_xor_not_r\000"
    "SETPGTs32ri_xor_r\000SETPGTs32rr\000SETPGTs32rr_and_not_r\000SETPGTs32r"
    "r_and_r\000SETPGTs32rr_or_not_r\000SETPGTs32rr_or_r\000SETPGTs32rr_xor_"
    "not_r\000SETPGTs32rr_xor_r\000SETPGTs64ri\000SETPGTs64ri_and_not_r\000S"
    "ETPGTs64ri_and_r\000SETPGTs64ri_or_not_r\000SETPGTs64ri_or_r\000SETPGTs"
    "64ri_xor_not_r\000SETPGTs64ri_xor_r\000SETPGTs64rr\000SETPGTs64rr_and_n"
    "ot_r\000SETPGTs64rr_and_r\000SETPGTs64rr_or_not_r\000SETPGTs64rr_or_r\000"
    "SETPGTs64rr_xor_not_r\000SETPGTs64rr_xor_r\000SETPGTu16ri\000SETPGTu16r"
    "i_and_not_r\000SETPGTu16ri_and_r\000SETPGTu16ri_or_not_r\000SETPGTu16ri"
    "_or_r\000SETPGTu16ri_xor_not_r\000SETPGTu16ri_xor_r\000SETPGTu16rr\000S"
    "ETPGTu16rr_and_not_r\000SETPGTu16rr_and_r\000SETPGTu16rr_or_not_r\000SE"
    "TPGTu16rr_or_r\000SETPGTu16rr_xor_not_r\000SETPGTu16rr_xor_r\000SETPGTu"
    "32ri\000SETPGTu32ri_and_not_r\000SETPGTu32ri_and_r\000SETPGTu32ri_or_no"
    "t_r\000SETPGTu32ri_or_r\000SETPGTu32ri_xor_not_r\000SETPGTu32ri_xor_r\000"
    "SETPGTu32rr\000SETPGTu32rr_and_not_r\000SETPGTu32rr_and_r\000SETPGTu32r"
    "r_or_not_r\000SETPGTu32rr_or_r\000SETPGTu32rr_xor_not_r\000SETPGTu32rr_"
    "xor_r\000SETPGTu64ri\000SETPGTu64ri_and_not_r\000SETPGTu64ri_and_r\000S"
    "ETPGTu64ri_or_not_r\000SETPGTu64ri_or_r\000SETPGTu64ri_xor_not_r\000SET"
    "PGTu64ri_xor_r\000SETPGTu64rr\000SETPGTu64rr_and_not_r\000SETPGTu64rr_a"
    "nd_r\000SETPGTu64rr_or_not_r\000SETPGTu64rr_or_r\000SETPGTu64rr_xor_not"
    "_r\000SETPGTu64rr_xor_r\000SETPLEf32ri_o\000SETPLEf32ri_u\000SETPLEf32r"
    "r_and_not_r_o\000SETPLEf32rr_and_not_r_u\000SETPLEf32rr_and_r_o\000SETP"
    "LEf32rr_and_r_u\000SETPLEf32rr_o\000SETPLEf32rr_or_not_r_o\000SETPLEf32"
    "rr_or_not_r_u\000SETPLEf32rr_or_r_o\000SETPLEf32rr_or_r_u\000SETPLEf32r"
    "r_u\000SETPLEf32rr_xor_not_r_o\000SETPLEf32rr_xor_not_r_u\000SETPLEf32r"
    "r_xor_r_o\000SETPLEf32rr_xor_r_u\000SETPLEf64ri_o\000SETPLEf64ri_u\000S"
    "ETPLEf64rr_and_not_r_o\000SETPLEf64rr_and_not_r_u\000SETPLEf64rr_and_r_"
    "o\000SETPLEf64rr_and_r_u\000SETPLEf64rr_o\000SETPLEf64rr_or_not_r_o\000"
    "SETPLEf64rr_or_not_r_u\000SETPLEf64rr_or_r_o\000SETPLEf64rr_or_r_u\000S"
    "ETPLEf64rr_u\000SETPLEf64rr_xor_not_r_o\000SETPLEf64rr_xor_not_r_u\000S"
    "ETPLEf64rr_xor_r_o\000SETPLEf64rr_xor_r_u\000SETPLEs16ri\000SETPLEs16ri"
    "_and_not_r\000SETPLEs16ri_and_r\000SETPLEs16ri_or_not_r\000SETPLEs16ri_"
    "or_r\000SETPLEs16ri_xor_not_r\000SETPLEs16ri_xor_r\000SETPLEs16rr\000SE"
    "TPLEs16rr_and_not_r\000SETPLEs16rr_and_r\000SETPLEs16rr_or_not_r\000SET"
    "PLEs16rr_or_r\000SETPLEs16rr_xor_not_r\000SETPLEs16rr_xor_r\000SETPLEs3"
    "2ri\000SETPLEs32ri_and_not_r\000SETPLEs32ri_and_r\000SETPLEs32ri_or_not"
    "_r\000SETPLEs32ri_or_r\000SETPLEs32ri_xor_not_r\000SETPLEs32ri_xor_r\000"
    "SETPLEs32rr\000SETPLEs32rr_and_not_r\000SETPLEs32rr_and_r\000SETPLEs32r"
    "r_or_not_r\000SETPLEs32rr_or_r\000SETPLEs32rr_xor_not_r\000SETPLEs32rr_"
    "xor_r\000SETPLEs64ri\000SETPLEs64ri_and_not_r\000SETPLEs64ri_and_r\000S"
    "ETPLEs64ri_or_not_r\000SETPLEs64ri_or_r\000SETPLEs64ri_xor_not_r\000SET"
    "PLEs64ri_xor_r\000SETPLEs64rr\000SETPLEs64rr_and_not_r\000SETPLEs64rr_a"
    "nd_r\000SETPLEs64rr_or_not_r\000SETPLEs64rr_or_r\000SETPLEs64rr_xor_not"
    "_r\000SETPLEs64rr_xor_r\000SETPLEu16ri\000SETPLEu16ri_and_not_r\000SETP"
    "LEu16ri_and_r\000SETPLEu16ri_or_not_r\000SETPLEu16ri_or_r\000SETPLEu16r"
    "i_xor_not_r\000SETPLEu16ri_xor_r\000SETPLEu16rr\000SETPLEu16rr_and_not_"
    "r\000SETPLEu16rr_and_r\000SETPLEu16rr_or_not_r\000SETPLEu16rr_or_r\000S"
    "ETPLEu16rr_xor_not_r\000SETPLEu16rr_xor_r\000SETPLEu32ri\000SETPLEu32ri"
    "_and_not_r\000SETPLEu32ri_and_r\000SETPLEu32ri_or_not_r\000SETPLEu32ri_"
    "or_r\000SETPLEu32ri_xor_not_r\000SETPLEu32ri_xor_r\000SETPLEu32rr\000SE"
    "TPLEu32rr_and_not_r\000SETPLEu32rr_and_r\000SETPLEu32rr_or_not_r\000SET"
    "PLEu32rr_or_r\000SETPLEu32rr_xor_not_r\000SETPLEu32rr_xor_r\000SETPLEu6"
    "4ri\000SETPLEu64ri_and_not_r\000SETPLEu64ri_and_r\000SETPLEu64ri_or_not"
    "_r\000SETPLEu64ri_or_r\000SETPLEu64ri_xor_not_r\000SETPLEu64ri_xor_r\000"
    "SETPLEu64rr\000SETPLEu64rr_and_not_r\000SETPLEu64rr_and_r\000SETPLEu64r"
    "r_or_not_r\000SETPLEu64rr_or_r\000SETPLEu64rr_xor_not_r\000SETPLEu64rr_"
    "xor_r\000SETPLTf32ri_o\000SETPLTf32ri_u\000SETPLTf32rr_and_not_r_o\000S"
    "ETPLTf32rr_and_not_r_u\000SETPLTf32rr_and_r_o\000SETPLTf32rr_and_r_u\000"
    "SETPLTf32rr_o\000SETPLTf32rr_or_not_r_o\000SETPLTf32rr_or_not_r_u\000SE"
    "TPLTf32rr_or_r_o\000SETPLTf32rr_or_r_u\000SETPLTf32rr_u\000SETPLTf32rr_"
    "xor_not_r_o\000SETPLTf32rr_xor_not_r_u\000SETPLTf32rr_xor_r_o\000SETPLT"
    "f32rr_xor_r_u\000SETPLTf64ri_o\000SETPLTf64ri_u\000SETPLTf64rr_and_not_"
    "r_o\000SETPLTf64rr_and_not_r_u\000SETPLTf64rr_and_r_o\000SETPLTf64rr_an"
    "d_r_u\000SETPLTf64rr_o\000SETPLTf64rr_or_not_r_o\000SETPLTf64rr_or_not_"
    "r_u\000SETPLTf64rr_or_r_o\000SETPLTf64rr_or_r_u\000SETPLTf64rr_u\000SET"
    "PLTf64rr_xor_not_r_o\000SETPLTf64rr_xor_not_r_u\000SETPLTf64rr_xor_r_o\000"
    "SETPLTf64rr_xor_r_u\000SETPLTs16ri\000SETPLTs16ri_and_not_r\000SETPLTs1"
    "6ri_and_r\000SETPLTs16ri_or_not_r\000SETPLTs16ri_or_r\000SETPLTs16ri_xo"
    "r_not_r\000SETPLTs16ri_xor_r\000SETPLTs16rr\000SETPLTs16rr_and_not_r\000"
    "SETPLTs16rr_and_r\000SETPLTs16rr_or_not_r\000SETPLTs16rr_or_r\000SETPLT"
    "s16rr_xor_not_r\000SETPLTs16rr_xor_r\000SETPLTs32ri\000SETPLTs32ri_and_"
    "not_r\000SETPLTs32ri_and_r\000SETPLTs32ri_or_not_r\000SETPLTs32ri_or_r\000"
    "SETPLTs32ri_xor_not_r\000SETPLTs32ri_xor_r\000SETPLTs32rr\000SETPLTs32r"
    "r_and_not_r\000SETPLTs32rr_and_r\000SETPLTs32rr_or_not_r\000SETPLTs32rr"
    "_or_r\000SETPLTs32rr_xor_not_r\000SETPLTs32rr_xor_r\000SETPLTs64ri\000S"
    "ETPLTs64ri_and_not_r\000SETPLTs64ri_and_r\000SETPLTs64ri_or_not_r\000SE"
    "TPLTs64ri_or_r\000SETPLTs64ri_xor_not_r\000SETPLTs64ri_xor_r\000SETPLTs"
    "64rr\000SETPLTs64rr_and_not_r\000SETPLTs64rr_and_r\000SETPLTs64rr_or_no"
    "t_r\000SETPLTs64rr_or_r\000SETPLTs64rr_xor_not_r\000SETPLTs64rr_xor_r\000"
    "SETPLTu16ri\000SETPLTu16ri_and_not_r\000SETPLTu16ri_and_r\000SETPLTu16r"
    "i_or_not_r\000SETPLTu16ri_or_r\000SETPLTu16ri_xor_not_r\000SETPLTu16ri_"
    "xor_r\000SETPLTu16rr\000SETPLTu16rr_and_not_r\000SETPLTu16rr_and_r\000S"
    "ETPLTu16rr_or_not_r\000SETPLTu16rr_or_r\000SETPLTu16rr_xor_not_r\000SET"
    "PLTu16rr_xor_r\000SETPLTu32ri\000SETPLTu32ri_and_not_r\000SETPLTu32ri_a"
    "nd_r\000SETPLTu32ri_or_not_r\000SETPLTu32ri_or_r\000SETPLTu32ri_xor_not"
    "_r\000SETPLTu32ri_xor_r\000SETPLTu32rr\000SETPLTu32rr_and_not_r\000SETP"
    "LTu32rr_and_r\000SETPLTu32rr_or_not_r\000SETPLTu32rr_or_r\000SETPLTu32r"
    "r_xor_not_r\000SETPLTu32rr_xor_r\000SETPLTu64ri\000SETPLTu64ri_and_not_"
    "r\000SETPLTu64ri_and_r\000SETPLTu64ri_or_not_r\000SETPLTu64ri_or_r\000S"
    "ETPLTu64ri_xor_not_r\000SETPLTu64ri_xor_r\000SETPLTu64rr\000SETPLTu64rr"
    "_and_not_r\000SETPLTu64rr_and_r\000SETPLTu64rr_or_not_r\000SETPLTu64rr_"
    "or_r\000SETPLTu64rr_xor_not_r\000SETPLTu64rr_xor_r\000SETPNEf32ri_o\000"
    "SETPNEf32ri_u\000SETPNEf32rr_and_not_r_o\000SETPNEf32rr_and_not_r_u\000"
    "SETPNEf32rr_and_r_o\000SETPNEf32rr_and_r_u\000SETPNEf32rr_o\000SETPNEf3"
    "2rr_or_not_r_o\000SETPNEf32rr_or_not_r_u\000SETPNEf32rr_or_r_o\000SETPN"
    "Ef32rr_or_r_u\000SETPNEf32rr_u\000SETPNEf32rr_xor_not_r_o\000SETPNEf32r"
    "r_xor_not_r_u\000SETPNEf32rr_xor_r_o\000SETPNEf32rr_xor_r_u\000SETPNEf6"
    "4ri_o\000SETPNEf64ri_u\000SETPNEf64rr_and_not_r_o\000SETPNEf64rr_and_no"
    "t_r_u\000SETPNEf64rr_and_r_o\000SETPNEf64rr_and_r_u\000SETPNEf64rr_o\000"
    "SETPNEf64rr_or_not_r_o\000SETPNEf64rr_or_not_r_u\000SETPNEf64rr_or_r_o\000"
    "SETPNEf64rr_or_r_u\000SETPNEf64rr_u\000SETPNEf64rr_xor_not_r_o\000SETPN"
    "Ef64rr_xor_not_r_u\000SETPNEf64rr_xor_r_o\000SETPNEf64rr_xor_r_u\000SET"
    "PNEu16ri\000SETPNEu16ri_and_not_r\000SETPNEu16ri_and_r\000SETPNEu16ri_o"
    "r_not_r\000SETPNEu16ri_or_r\000SETPNEu16ri_xor_not_r\000SETPNEu16ri_xor"
    "_r\000SETPNEu16rr\000SETPNEu16rr_and_not_r\000SETPNEu16rr_and_r\000SETP"
    "NEu16rr_or_not_r\000SETPNEu16rr_or_r\000SETPNEu16rr_xor_not_r\000SETPNE"
    "u16rr_xor_r\000SETPNEu32ri\000SETPNEu32ri_and_not_r\000SETPNEu32ri_and_"
    "r\000SETPNEu32ri_or_not_r\000SETPNEu32ri_or_r\000SETPNEu32ri_xor_not_r\000"
    "SETPNEu32ri_xor_r\000SETPNEu32rr\000SETPNEu32rr_and_not_r\000SETPNEu32r"
    "r_and_r\000SETPNEu32rr_or_not_r\000SETPNEu32rr_or_r\000SETPNEu32rr_xor_"
    "not_r\000SETPNEu32rr_xor_r\000SETPNEu64ri\000SETPNEu64ri_and_not_r\000S"
    "ETPNEu64ri_and_r\000SETPNEu64ri_or_not_r\000SETPNEu64ri_or_r\000SETPNEu"
    "64ri_xor_not_r\000SETPNEu64ri_xor_r\000SETPNEu64rr\000SETPNEu64rr_and_n"
    "ot_r\000SETPNEu64rr_and_r\000SETPNEu64rr_or_not_r\000SETPNEu64rr_or_r\000"
    "SETPNEu64rr_xor_not_r\000SETPNEu64rr_xor_r\000SHLir16\000SHLir32\000SHL"
    "ir64\000SHLri16\000SHLri32\000SHLri64\000SHLrr16\000SHLrr32\000SHLrr64\000"
    "SRAir16\000SRAir32\000SRAir64\000SRAri16\000SRAri32\000SRAri64\000SRArr"
    "16\000SRArr32\000SRArr64\000SRLir16\000SRLir32\000SRLir64\000SRLri16\000"
    "SRLri32\000SRLri64\000SRLrr16\000SRLrr32\000SRLrr64\000STgf32ii32\000ST"
    "gf32ii64\000STgf32ri32\000STgf32ri64\000STgf32rr32\000STgf32rr64\000STg"
    "f64ii32\000STgf64ii64\000STgf64ri32\000STgf64ri64\000STgf64rr32\000STgf"
    "64rr64\000STgu16ii32\000STgu16ii64\000STgu16ri32\000STgu16ri64\000STgu1"
    "6rr32\000STgu16rr64\000STgu32ii32\000STgu32ii64\000STgu32ri32\000STgu32"
    "ri64\000STgu32rr32\000STgu32rr64\000STgu64ii32\000STgu64ii64\000STgu64r"
    "i32\000STgu64ri64\000STgu64rr32\000STgu64rr64\000STsf32ii32\000STsf32ii"
    "64\000STsf32ri32\000STsf32ri64\000STsf32rr32\000STsf32rr64\000STsf64ii3"
    "2\000STsf64ii64\000STsf64ri32\000STsf64ri64\000STsf64rr32\000STsf64rr64"
    "\000STsu16ii32\000STsu16ii64\000STsu16ri32\000STsu16ri64\000STsu16rr32\000"
    "STsu16rr64\000STsu32ii32\000STsu32ii64\000STsu32ri32\000STsu32ri64\000S"
    "Tsu32rr32\000STsu32rr64\000STsu64ii32\000STsu64ii64\000STsu64ri32\000ST"
    "su64ri64\000STsu64rr32\000STsu64rr64\000SUBri16\000SUBri32\000SUBri64\000"
    "SUBrr16\000SUBrr32\000SUBrr64\000WRITEPARAMF32\000WRITEPARAMF64\000WRIT"
    "EPARAMI16\000WRITEPARAMI32\000WRITEPARAMI64\000WRITEPARAMPRED\000XORri1"
    "6\000XORri32\000XORri64\000XORripreds\000XORrr16\000XORrr32\000XORrr64\000"
    "XORrrpreds\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_RegPred,
    RC_RegI16,
    RC_RegI32,
    RC_RegF32,
    RC_RegI64,
    RC_RegF64
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_RegPred:
    if (Reg == PTX::DUMMY_REG)
      return true;
    break;
  case RC_RegI16:
    if (Reg == PTX::DUMMY_REG)
      return true;
    break;
  case RC_RegI32:
    if (Reg == PTX::DUMMY_REG)
      return true;
    break;
  case RC_RegF32:
    if (Reg == PTX::DUMMY_REG)
      return true;
    break;
  case RC_RegI64:
    if (Reg == PTX::DUMMY_REG)
      return true;
    break;
  case RC_RegF64:
    if (Reg == PTX::DUMMY_REG)
      return true;
    break;
  }

  return false;
}

bool PTXInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
