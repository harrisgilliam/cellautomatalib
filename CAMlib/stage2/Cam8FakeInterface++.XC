#include <CaLib++.H>
#include <CaLibStream++.H>
#include <CaLibError++.H>
#include <CaLibTrace++.H>

#include <Cam8FakeInterface++.H>



Cam8FakeInterface::Cam8FakeInterface(void)
{
}

Cam8FakeInterface::~Cam8FakeInterface(void)
{
}

// STD_BZERO(Cam8FakeInterface)



void Cam8FakeInterface::ResetInterface(void)
{
	TENTER("void Cam8FakeInterface::ResetInterface(void)");
	TLEAVE();
}


void Cam8FakeInterface::InitInterface(void)
{
	TENTER("void Cam8FakeInterface::InitInterface(void)");
	TLEAVE();
}


void Cam8FakeInterface::HaltInterface(void)
{
	TENTER("void Cam8FakeInterface::HaltInterface(void)");
	TLEAVE();
}


void Cam8FakeInterface::ClearException(void)
{
	TENTER("void Cam8FakeInterface::ClearException(void)");
	TLEAVE();
}


void Cam8FakeInterface::ClearFault(void)
{
	TENTER("void Cam8FakeInterface::ClearFault(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableInterfaceExceptions(void)
{
	TENTER("void Cam8FakeInterface::EnableInterfaceExceptions(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableTimeoutException(void)
{
	TENTER("void Cam8FakeInterface::EnableTimeoutException(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableCamException(void)
{
	TENTER("void Cam8FakeInterface::EnableCamException(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableInterfaceExceptions(void)
{
	TENTER("void Cam8FakeInterface::DisableInterfaceExceptions(void");
	TLEAVE();
}


void Cam8FakeInterface::DisableTimeoutException(void)
{
	TENTER("void Cam8FakeInterface::DisableTimeoutException(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableCamException(void)
{
	TENTER("void Cam8FakeInterface::DisableCamException(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableInterfaceInterrupts(void)
{
	TENTER("void Cam8FakeInterface::EnableInterfaceInterrupts(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableNewlistInterrupt(void)
{
	TENTER("void Cam8FakeInterface::EnableNewlistInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableTimeoutInterrupt(void)
{
	TENTER("void Cam8FakeInterface::EnableTimeoutInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableSBusInterrupt(void)
{
	TENTER("void Cam8FakeInterface::EnableSBusInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableCamInterrupt(void)
{
	TENTER("void Cam8FakeInterface::EnableCamInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::EnableSoftInterrupt(void)
{
	TENTER("void Cam8FakeInterface::EnableSoftInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableInterfaceInterrupts(void)
{
	TENTER("void Cam8FakeInterface::DisableInterfaceInterrupts(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableNewlistInterrupt(void)
{
	TENTER("void Cam8FakeInterface::DisableNewlistInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableTimeoutInterrupt(void)
{
	TENTER("void Cam8FakeInterface::DisableTimeoutInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableSBusInterrupt(void)
{
	TENTER("void Cam8FakeInterface::DisableSBusInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableCamInterrupt(void)
{
	TENTER("void Cam8FakeInterface::DisableCamInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::DisableSoftInterrupt(void)
{
	TENTER("void Cam8FakeInterface::DisableSoftInterrupt(void)");
	TLEAVE();
}


void Cam8FakeInterface::ClearInterfaceInterrupts(void)
{
	TENTER("void Cam8FakeInterface::ClearInterfaceInterrupts(void)e");
	TLEAVE();
}


void Cam8FakeInterface::SetScanLength(u_int32_t h, u_int32_t n)
{
	TENTER("void Cam8FakeInterface::SetScanLength(u_int32_t h, u_int32_t n)");
	TLEAVE();
}


void Cam8FakeInterface::SetBlankLength(u_int32_t h, u_int32_t n)
{
	TENTER("void Cam8FakeInterface::SetBlankLength(u_int32_t h, u_int32_t n)");
	TLEAVE();
}


void Cam8FakeInterface::ExecuteSteplist(Cam8Steplist & sl)
{
	TENTER("void Cam8FakeInterface::ExecuteSteplist(Cam8Steplist & sl)");
	TLEAVE();
}

bool Cam8FakeInterface::Read_NLP(u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Read_NLP(u_int32_t *v)");
	TLEAVE();

	return true;
}

bool Cam8FakeInterface::Read_ISR(u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Read_ISR(u_int32_t *v)");
	TLEAVE();

	return true;
}

bool Cam8FakeInterface::Read_CIP(u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Read_CIP(u_int32_t *v)");
	TLEAVE();

	return true;
}

bool Cam8FakeInterface::Read_PIP(u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Read_PIP(u_int32_t *v)");
	TLEAVE();

	return true;
}

bool Cam8FakeInterface::Write_NLP(const u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Write_NLP(const u_int32_t *v)");
	TLEAVE();

	return true;
}

bool Cam8FakeInterface::Write_RER(const u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Write_RER(const u_int32_t *v)");
	TLEAVE();

	return true;
}

bool Cam8FakeInterface::Write_DSL(const u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Write_DSL(const u_int32_t *v)");
	TLEAVE();

	return true;
}

bool Cam8FakeInterface::Write_DBL(const u_int32_t *v)
{
	TENTER("bool Cam8FakeInterface::Write_DBL(const u_int32_t *v)");
	TLEAVE();

	return true;
}

caddr_t Cam8FakeInterface::Alloc_Instr(u_int32_t len)
{
	TENTER("caddr_t Cam8FakeInterface::Alloc_Instr(u_int32_t len)");

	return (caddr_t) new u_int8_t[len];

	TLEAVE();
}

void Cam8FakeInterface::Free_Instr(caddr_t ptr)
{
	TENTER("void Cam8FakeInterface::Free_Instr(caddr_t ptr)");

	delete[] ptr;

	TLEAVE();
}



