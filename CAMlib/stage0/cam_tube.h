#ifndef _cam_tube_h_
#define _cam_tube_h_


/*****************************************************************************/
/****************************** DEFINES **************************************/
/*****************************************************************************/
#define NEW_SOCKET(s)		((s)->sd == -1)
#define S_USED_TUBE(t)		(t)->type |= 0x1
#define S_UNUSED_TUBE(t)	(t)->type &= ~0x1
#define Q_USED_TUBE(t)		(((t)->type & 0x1) == 0x1)
#define S_BOUND_TUBE(t)		(t)->type |= 0x2
#define S_UNBOUND_TUBE(t)	(t)->type &= ~0x2
#define Q_BOUND_TUBE(t)		(((t)->type & 0x2) == 0x2)
#define S_CONNECTED_TUBE(t)	(t)->type |= 0x8
#define S_UNCONNECTED_TUBE(t)	(t)->type &= ~0x8
#define Q_CONNECTED_TUBE(t)	(((t)->type & 0x8) == 0x8)
#define Q_REUSABLE_TUBE(t)	(((t)->type & 0x4) == 0x4)
#define Q_TCP_TUBE(t)		(((t)->type & 0x10) == 0x10)


/*****************************************************************************/
/***************************** TYPEDEFS **************************************/
/*****************************************************************************/



/*****************************************************************************/
/**************************** PROTOTYPES *************************************/
/*****************************************************************************/
void bind_tube(TUBE t);
int select_test(int, struct timeval *);
int sure_recvfrom(TUBE, char *, int, struct sockaddr *, int *);
int cond_recvfrom(TUBE, char *, int, struct sockaddr *, int *);


/*****************************************************************************/
/***************************** GLOBALS ***************************************/
/*****************************************************************************/


#endif
