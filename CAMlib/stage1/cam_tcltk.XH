/* 
 * Implements a XCAM widget.  Used to display images generated by CAM8.
 * Has commands for dumping the contents to a file in xwd format.
 *
 * Copyright Harris L. Gilliam, Information Mechanics, MIT LCS 1994
 * 
 * This software may be copied and distributed freely for non-commercial use
 * providing it is distributed in its entirety, including this copyright
 * notice and all documentation.  Any improvements upon this code are welcome
 * and should be emailed to myself (gilliam@im.lcs.mit.edu) or Norman Margolus
 * (nhm@im.lcs.mit.edu).
 */

extern "C" {
#include <tcl.h>
#include <tk.h>
}

typedef struct {
  unsigned short p;
  unsigned short r, g, b;
} CamCm, *CAMCM;


/* Descriptor types */
#define IMAG         'i'
#define SHMIMAG      'I'
#define XSHMIMAG     'X'
#define CMAP         'c'
#define SHMCMAP      'C'

/* Capture flags */
#define FALSE		0
#define TO_FILES	-1
#define START_STREAM	-100
#define CONTINUE_STREAM	-200
#define FINISH_STREAM	-300
#define UNLIMITED	-1


/* Default descriptor table and command table sizes */
#define DESCTBLSZ 32


typedef struct shm_info {
  int id;
  int cnt;
#ifdef XSHM
  XShmSegmentInfo info;
#endif
} Shm_Info, *SHM_INFO;


typedef int (*DESC_APPLY_FUNC)(void *, struct XCAM_desc *);

typedef struct XCAM_desc {
  char type;
  union {
    XImage *i;
    CAMCM c;
  } obj;
  Shm_Info shm;
  DESC_APPLY_FUNC Apply;
} XCam_Desc, *XCAM_DESC;


/*
 * A data structure of the following type is kept for each XCAM
 * widget managed by this file:
 */

typedef struct {
  Tk_Window tkwin;		/* 
				 * Window that embodies the XCAM.  NULL
				 * means window has been deleted but
				 * widget record hasn't been cleaned up yet.
				 */

  Tcl_Interp *ti;		/* Interpreter associated with widget. */
  
  Display *dpy;		        /* X's token for the window's display. */

  int s;                        /* X's token for the screen number */

  Window w;                     /* X's token for the window id */

  Visual *v;                    /* This pane's visual */

  Colormap cmap;                /* This pane's colormap */

  Colormap pcmap;               /* This pane's previous colormap */

  Cursor cur;                   /* Current cursor for window, or None. */

  GC gc;                        /* GC */

#ifdef XSHM
  Status xshmok;                /* okay to use XSHM extension ? */
#endif

  int width, height;            /* Dimensions to request for XCAM */

  int black;                    /* Which pixel is closest to black */

  int CompType;                 /* Type of XShm Completion Event */

  XCam_Desc dtbl[DESCTBLSZ];    /* Descriptpor table */

  int glbx, glby;               /* Global X and Y buffer sizes */

  int locx, locy;               /* Local X and Y buffer sizes */

  int lid;                      /* Descriptor of last image displayed */

  int lcu;                      /* Descriptor of last colormap used */

  int pmode;                    /* Processing mode: none, all, or pause */

  int capture;                  /* Type of frame capture being done */

  unsigned int ftot;            /* Number of frames to capture */

  unsigned int fcnt;            /* Number of frames that have been captured */

  char *fcmd;                   /* Base name of files frames are captured in */

  FILE *forth_fifo;		/* FIFO for passing keys to the Forth interp */

  int retv[2];                  /* Current return value code */

} XCam, *XCAM;



#define FindNxt(xc, n) \
{ register int _i; (n) = -1; \
  for(_i = 0; _i < DESCTBLSZ; _i++) \
     if ((xc)->dtbl[_i].type == 0) { (n) = _i; break; } }



#define SETRETV(p, e, c) (p)->retv[0] = (e); (p)->retv[1] = (c)

#define PIPERET(p) return((unsigned char *) (p)->retv)

#define XCAMRET(p) return((p)->retv[1])

#define RETCODE(p) SendMesg(fileno(stdout), (char *) (p)->retv)

#define FATALERROR(p) (p)->retv[0] = (p)->retv[1] = -1

#define lowbit(x) ((x) & (~(x) + 1))





static unsigned char * SetupSHMI(void *, unsigned char *, unsigned char *);
static unsigned char * SetupSHMC(void *, unsigned char *, unsigned char *);
static unsigned char * SetupKERI(void *, unsigned char *, unsigned char *);
static unsigned char * SetupKERC(void *, unsigned char *, unsigned char *);
static unsigned char * SetGLBX(void *, unsigned char *, unsigned char *);
static unsigned char * SetGLBY(void *, unsigned char *, unsigned char *);
static unsigned char * XCAMApply(void *, unsigned char *, unsigned char *);
static unsigned char * XCAMFree(void *, unsigned char *, unsigned char *);
static unsigned char * FreeAndExit(void *, unsigned char *, unsigned char *);

static int SetLOCX(XCAM, unsigned char *);
static int SetLOCY(XCAM, unsigned char *);

static int ConfigureXCAM(Tcl_Interp *, XCAM, int, char **, int);
static int PipeImag(Tcl_Interp *, XCAM, int, char **);
static int WriteImag(Tcl_Interp *, XCAM, int, char **);
static int WriteCmap(Tcl_Interp *, XCAM, int, char **);
static int ResizeWindow(Tcl_Interp *, XCAM, int, char **);
static int ToggleCaptureFrames(Tcl_Interp *, XCAM, int, char **);
static int XCAMWidgetCmd(ClientData, Tcl_Interp *, int, char **);
static void DestroyXCAM(ClientData);
static void XCAMEventProc(ClientData, XEvent *);
static void XCAMKeyProc(ClientData, XEvent *);
static void InputFDProc(ClientData, int);
static void RedrawProc(ClientData, XEvent *);

static int AllocCmap(XCAM, XCAM_DESC);
static int DispXSHMImage(XCAM, XCAM_DESC);
static int DispXImage(XCAM, XCAM_DESC);

static void CopyColormap(XCAM, Colormap, Colormap);
